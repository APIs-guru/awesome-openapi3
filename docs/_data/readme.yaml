luckymarmot/API-Flow: >
  [![Build
  Status](https://travis-ci.org/luckymarmot/API-Flow.svg?branch=master)](https://travis-ci.org/luckymarmot/API-Flow)


  # API-Flow


  A flow written in ES6 using Immutable to convert between API description
  formats (Swagger, etc.) and other programs such as cURL command lines.


  ## What formats are supported and what will be in the future

  We currently support:

  - `Swagger v2.0 (in/out)`

  - `RAML v1.0 (in/out)`

  - `Postman Collection v2.0 (in/out)`

  - `Paw v3.1 (in/out)`


  We intend to support:

  - `Swagger v3.0`

  - `RAML v0.8`

  - `Postman Collection v1.0`

  - `Postman Dump v1.0`

  - `Insomnia v3.0`

  - `Api-Blueprint`

  - and many more.


  ## Installation

  ### from a cloned repository


  just run


  ```sh

  git clone https://github.com/luckymarmot/API-Flow.git

  cd API-Flow

  make install

  ```


  This will install the node module dependencies


  ## Building the different libraries

  ### node, web, and webworker


  run the following command to build API-Flow for the different environments
  that you need


  ```sh

  # use TARGET="node" if you only want the node library

  make runners TARGET="node web webworker"

  ```


  ### Paw


  You can use the following command to add the different extensions to Paw


  ```sh

  # use TARGET="swagger" if you only want the swagger bindings

  make transfer TARGET="swagger raml1 postman2"

  ```


  ## Using the npm module

  ### as a standard library


  ```js

  const ApiFlow = require('api-flow'); // if from npm

  const ApiFlow = require('./dist/node/api-flow.js'); // if from `make runners
  TARGET="node"`


  const options = {
      source: {
          format: 'swagger',
          version: 'v2.0'
      },
      target: {
          format: 'raml',
          version: 'v1.0'
      }
  }


  const promise = ApiFlow.transform({
    options,
    uri: path.resolve(__dirname, './my_super_swagger.yml')
  })


  promise.then((data) => {
    // do some cool stuff with the data
  })

  ```


  ### Using as a CLI (coming soon)

  ```sh

  node ./bin/api-flow.js some_swagger.json -f swagger -t raml > converted.yml

  ```


  ### User Interface


  API-Flow is one of the main components of
  [Console.REST](https://github.com/luckymarmot/console-rest). If you're an API
  user, you can easily use [https://console.rest/](https://console.rest/) to
  convert API description files. If you're an API provider, you can add a button
  to your API docs to let your users open and play with your API in client apps
  including Paw or Postman.


  ## Contributing


  PRs are welcomed!

  Our sole requirement is that organizations that want to extend API-Flow to
  support their format write both a parser and a serializer, and not simply a
  serializer.


  ## Documentation

  You can find more information about the internal structure of API-Flow in
  [src](https://github.com/luckymarmot/API-Flow/tree/develop/src). We've also
  created a set of templates to help speed up the extension process:
  [loader](https://github.com/luckymarmot/API-Flow/tree/develop/src/loaders/template/v1.0),
  [parser](https://github.com/luckymarmot/API-Flow/tree/develop/src/parsers/template/v1.0/),
  and
  [environment](https://github.com/luckymarmot/API-Flow/tree/develop/src/environments/template)


  ## License


  This repository is released under the [MIT License](LICENSE). Feel free to
  fork, and modify!

  Copyright © 2016 Paw Inc.


  ## Contributors


  See
  [Contributors](https://github.com/luckymarmot/API-Flow/graphs/contributors).
googleapis/gnostic: >
  [![Build
  Status](https://travis-ci.org/googleapis/gnostic.svg?branch=master)](https://travis-ci.org/googleapis/gnostic)


  # ⨁ gnostic


  This repository contains a Go command line tool which converts

  JSON and YAML [OpenAPI](https://github.com/OAI/OpenAPI-Specification)

  descriptions to and from equivalent Protocol Buffer representations.


  [Protocol Buffers](https://developers.google.com/protocol-buffers/)

  provide a language-neutral, platform-neutral, extensible mechanism

  for serializing structured data.

  **gnostic**'s Protocol Buffer models for the OpenAPI Specification

  can be used to generate code that includes data structures with 

  explicit fields for the elements of an OpenAPI description.

  This makes it possible for developers to work with OpenAPI

  descriptions in type-safe ways, which is particularly useful

  in strongly-typed languages like Go and Swift.


  **gnostic** reads OpenAPI descriptions into

  these generated data structures, reports errors,

  resolves internal dependencies, and writes the results

  in a binary form that can be used in any language that is

  supported by the Protocol Buffer tools.

  A plugin interface simplifies integration with API

  tools written in a variety of different languages,

  and when necessary, Protocol Buffer OpenAPI descriptions

  can be reexported as JSON or YAML.


  **gnostic** compilation code and OpenAPI Protocol Buffer

  models are automatically generated from an

  [OpenAPI JSON
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json).

  Source code for the generator is in the [generate-gnostic](generate-gnostic)
  directory.


  ## Disclaimer


  This is prerelease software and work in progress. Feedback and

  contributions are welcome, but we currently make no guarantees of

  function or stability.


  ## Requirements


  **gnostic** can be run in any environment that supports
  [Go](http://golang.org)

  and the [Google Protocol Buffer Compiler](https://github.com/google/protobuf).


  ## Installation


  1. Get this package by downloading it with `go get`.

          go get github.com/googleapis/gnostic
    
  2. [Optional] Build and run the compiler generator. 

  This uses the OpenAPI JSON schema to generate a Protocol Buffer language file 

  that describes the OpenAPI specification and a Go-language file of code that 

  will read a JSON or YAML OpenAPI representation into the generated protocol 

  buffers. Pre-generated versions of these files are in the OpenAPIv2 directory.

          cd $GOPATH/src/github.com/googleapis/gnostic/generate-gnostic
          go install
          cd ..
          generate-gnostic --v2

  3. [Optional] Generate Protocol Buffer support code. 

  A pre-generated version of this file is checked into the OpenAPIv2 directory.

  This step requires a local installation of protoc, the Protocol Buffer
  Compiler,

  and the Go protoc plugin.

  You can get protoc [here](https://github.com/google/protobuf).

  You can install the plugin with this command:

          go get -u github.com/golang/protobuf/protoc-gen-go

  Then use the following to recompile the Gnostic Protocol Buffer models:

          ./COMPILE-PROTOS.sh

  4. [Optional] Rebuild **gnostic**. This is only necessary if you've performed
  steps

  2 or 3 above.

          go install github.com/googleapis/gnostic

  5. Run **gnostic**. This will create a file in the current directory named
  "petstore.pb" that contains a binary

  Protocol Buffer description of a sample API.

          gnostic --pb-out=. examples/v2.0/json/petstore.json

  6. You can also compile files that you specify with a URL. Here's another way
  to compile the previous 

  example. This time we're creating "petstore.text", which contains a textual
  representation of the

  Protocol Buffer description. This is mainly for use in testing and debugging.

          gnostic --text-out=petstore.text https://raw.githubusercontent.com/googleapis/gnostic/master/examples/petstore.json

  7. For a sample application, see apps/report.

          go install github.com/googleapis/gnostic/apps/report
          report petstore.pb

  8. **gnostic** supports plugins. This builds and runs a sample plugin

  that reports some basic information about an API. The "-" causes the plugin
  to 

  write its output to stdout.

          go install github.com/googleapis/gnostic/plugins/gnostic-go-generator
          gnostic examples/v2.0/json/petstore.json --go-generator-out=-

  ## Copyright


  Copyright 2017, Google Inc.


  ## License


  Released under the Apache 2.0 license.
Mermade/swagger2openapi: >
  # OAS-Kit


  This is the mono-repo for the following related projects


  * [swagger2openapi](packages/swagger2openapi/README.md)

  * [oas-validator](packages/oas-validator/README.md)

  * [oas-linter](packages/oas-linter/README.md)

  * [oas-resolver](packages/oas-resolver/README.md)

  * [oas-schema-walker](packages/oas-schema-walker/README.md)

  * [oas-kit-common](packages/oas-kit-common/README.md)

  * [reftools](packages/reftools/README.md)


  ## Documentation


  * [Main site](https://mermade.github.io/oas-kit)


  ## Online converter/validator


  * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


  ## Supported Node.js versions


  Any LTS version from 8 onwards.


  ## Development


  * clone the repository

  * `npm i` in the top level directory

  * `lerna bootstrap` or `npx lerna bootstrap`


  Please try and keep commits related to a single package or piece of
  functionality. PR in the usual way.


  ## Supporting development


  * [APIs.guru open-collective](https://opencollective.com/openapi-directory)

  * [Linode VPS referral
  link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
oasis-tcs/odata-openapi: >
  <div>

  <h2>README</h2>


  <p>Members of the <a href="https://www.oasis-open.org/committees/odata/">OASIS
  Open Data Protocol (OData) Technical Committee</a> create and manage technical
  content in this TC GitHub repository ( <a
  href="https://github.com/oasis-tcs/odata-openapi">https://github.com/oasis-tcs/odata-openapi</a>
  ) as part of the TC's chartered work (<i>i.e.</i>, the program of work and
  deliverables described in its <a
  href="https://www.oasis-open.org/committees/odata/charter.php">charter</a>).</p>


  <p>OASIS TC GitHub repositories, as described in <a
  href="https://www.oasis-open.org/resources/tcadmin/github-repositories-for-oasis-tc-members-chartered-work">GitHub
  Repositories for OASIS TC Members' Chartered Work</a>, are governed by the
  OASIS <a href="https://www.oasis-open.org/policies-guidelines/tc-process">TC
  Process</a>, <a href="https://www.oasis-open.org/policies-guidelines/ipr">IPR
  Policy</a>, and other policies, similar to TC Wikis, TC JIRA issues tracking
  instances, TC SVN/Subversion repositories, etc.  While they make use of public
  GitHub repositories, these TC GitHub repositories are distinct from <a
  href="https://www.oasis-open.org/resources/open-repositories">OASIS Open
  Repositories</a>, which are used for development of open source <a
  href="https://www.oasis-open.org/resources/open-repositories/licenses">licensed</a>
  content.</p>

  </div>


  <div>

  <h3>Description</h3>


  <p>The purpose of this repository is to support development of tools for
  producing <a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a>
  descriptions for OData services.</p>

  <p>Planned work items include:

  <ul>

  <li>XSLT transformation from OData CSDL XML to OpenAPI JSON</li>

  <li>example XML files</li>

  <li>example openapi.json files</li>

  <li>example files for the live odata.org services</li>

  </ul></p>


  </div>


  <div>

  <h3>Contributions</h3>

  <p>As stated in this repository's <a
  href="https://github.com/oasis-tcs/odata-openapi/blob/master/CONTRIBUTING.md">CONTRIBUTING
  file</a>, contributors to this repository are expected to be Members of the
  OASIS OData TC, for any substantive change requests.  Anyone wishing to
  contribute to this GitHub project and <a
  href="https://www.oasis-open.org/join/participation-instructions">participate</a>
  in the TC's technical activity is invited to join as an OASIS TC Member. 
  Public feedback is also accepted, subject to the terms of the <a
  href="https://www.oasis-open.org/policies-guidelines/ipr#appendixa">OASIS
  Feedback License</a>.</p>

  </div>


  <div>

  <h3>Licensing</h3>

  <p>Please see the <a
  href="https://github.com/oasis-tcs/odata-openapi/blob/master/LICENSE.md">LICENSE</a>
  file for description of the license terms and OASIS policies applicable to the
  TC's work in this GitHub project. Content in this repository is intended to be
  part of the OData TC's permanent record of activity, visible and freely
  available for all to use, subject to applicable OASIS policies, as presented
  in the repository <a
  href="https://github.com/oasis-tcs/odata-openapi/blob/master/LICENSE.md">LICENSE</a>
  file.</p>

  </div>



  <h3>Further Description of this Repository</h3>


  The OData TC has published the [OData to OpenAPI Mapping Version
  1.0](http://docs.oasis-open.org/odata/odata-openapi/v1.0/odata-openapi-v1.0.html),
  a recommendation on how to create OpenAPI descriptions for OData services.
  This project is a proof-of-concept implementation of that mapping using XSLT.


  The [`examples` folder](examples) contains OpenAPI/Swagger 2.0 and [OpenAPI
  3.0.0](https://github.com/OAI/OpenAPI-Specification) descriptions that have
  been created from the XML `$metadata` documents of live and example OData
  services with the [V4-CSDL-to-OpenAPI.xsl](tools/V4-CSDL-to-OpenAPI.xsl)
  transformation in the [`tools` folder](tools). 


  The entity-relationship diagrams visualizing the resource models of each
  service are generated on-the-fly with [yUML](http://yuml.me/).


  OpenAPI descriptions for live example OData services at
  [www.odata.org](http://www.odata.org/)
   - [TripPin (read/write)](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/TripPin.openapi3.json)
   - [Simple read/write service](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/example.openapi3.json)
   - [Northwind (read)](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/Northwind.openapi3.json)

  OpenAPI descriptions for OData services that reference each other
  (cross-service references)
   - [People](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/People.openapi3.json)
   - [Products](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/oasis-tcs/odata-openapi/master/examples/Products.openapi3.json)

  <div>

  <h3>Contact</h3>

  <p>Please send questions or comments about <a
  href="https://www.oasis-open.org/resources/tcadmin/github-repositories-for-oasis-tc-members-chartered-work">OASIS
  TC GitHub repositories</a> to <a href="mailto:robin@oasis-open.org">Robin
  Cover</a> and <a href="mailto:chet.ensign@oasis-open.org">Chet Ensign</a>. 
  For questions about content in this repository, please contact the TC Chair or
  Co-Chairs as listed on the the OData TC's <a
  href="https://www.oasis-open.org/committees/odata/">home page</a>.</p>

  </div>
xuzhg/OData.OpenAPI: >
  # OData.OpenAPI


  A project to convert an Edm (Entity Data Model) to [OpenApi
  3.0](https://swagger.io/specification/).


  Now, the Whole project is moving to: https://github.com/microsoft/openapi.net
  for basic Open API DOM and


  https://github.com/microsoft/openapi.net.odata for basic CSDL to Open API DOM.
mission-liao/pyswagger: >+
  pyswagger

  =========


  [![Build
  Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage
  Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger)
  enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui).
  However, when it's time to **unittest**

  your API, the first option you find would be
  [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better
  option is us.


  This project is developed after
  [swagger-py](https://github.com/digium/swagger-py), which is a nicely
  implemented one, and inspired many aspects of this project. Another project is
  [flex](https://github.com/pipermerriam/flex), which focuses on parameter
  validation, try it if you can handle other parts by yourselves. For other
  projects related to Swagger tools in python, check
  [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't
  need to prepare a scala environment) and tries hard to **fully supports**
  [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from
  1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**,
  **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be
  organized into a group of App. And external document with self-describing
  resource is also supported (refer to
  [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data
  Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types)
  described in Swagger. You don't need to touch any json schema when using
  pyswagger. Limitations like **minimum/maximum** or **enum** are also checked.
  **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API
  definition according to spec.

  - builtin client implementation based on various http clients in python. For
  usage of these clients, please refer to `pyswagger.tests.contrib.client` for
  details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined
  primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted
  Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure
  [requests](https://github.com/kennethreitz/requests) is installed on your
  environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}',
  base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are
  going to access a remote/local web server, you must install
  [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready
  on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also
  required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about
  relations between
  components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported
  [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -
  %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc
  pyswagger/tests

  ```

koumoul-dev/openapi-viewer: >
  # OpenAPI 3 viewer

  This service is designed to easily browse and test a REST API described with
  the [OpenAPI 3.0 Specification](https://github.com/OAI/OpenAPI-Specification)
  (fka Swagger Specification). This service mainly uses
  [vue-openapi](https://github.com/koumoul-dev/vue-openapi) component. It also
  provides a simple nodeJS backend for proxy purpose.


  See it in action :
   * https://koumoul.com/openapi-viewer/

  ## Install


  Clone this project and install dependencies with `npm install` or `yarn` then
  :

  ```

  npm run dev

  ```


  ## Launch the service with Docker

  A Docker image is publicly available on
  [dockerhub](https://hub.docker.com/r/koumoul/openapi-viewer/).


  Run the following command :

  ```

  docker run -p 8080:8080 koumoul/openapi-viewer

  ```

  and go to this [page](http://localhost:8080/)


  ## Query parameters

  You can use the followings query parameters to prefill viewer

   * **url** : The location of the API documentation file to load, in OpenAPI v3 JSON format.
   * **proxy** : true or false if you want to fetch API documentation file using this service backend as a proxy. Defaults to false.
  Can be usefull if the API description can't be reached with CORS headers. Do
  not use the proxy if you want to access an API description located on
  *localhost*.
   * **headers** : URI encoded JSON dictionnary of headers that will be used to prefill parameters if they match. Can be usefull to prefill *x-api-key* or *authorization* headers.
   * **query-params** : URI encoded JSON dictionnary of query parameters that will be used to prefill parameters if they match. Can be usefull to prefill an *organizationId* parameter in a multi-tenant application.
   * **hide-toolbar** : true or false of you want to hide toolbar. This can be usefull for iframe integration. Defaults to false.
contentjet/openapi-ui: >
  # OpenAPI UI


  This is a React based single page app which renders documentation from a valid
  OpenAPI 3.0.0-RC0 document.


  # NOTE


  This project is work-in-progress/experimental at this stage. Contributions and
  feedback welcome.


  ## Getting started


  #### Project setup


  Install project dependencies:


  ```

  npm install

  ```


  #### Run development server


  ```

  npm start

  ```


  #### Run linter


  ```

  npm run lint

  ```


  #### Create production build


  ```

  npm run build

  ```
sourcey/spectacle: >
  # Spectacle


  > The gentleman at REST


  [![CircleCI](https://circleci.com/gh/sourcey/spectacle.svg?style=svg)](https://circleci.com/gh/sourcey/spectacle)


  Spectacle generates beautiful static HTML5 documentation from
  [OpenAPI](https://openapis.org)/[Swagger](http://swagger.io) 2.0 API
  specifications.


  The goal of Spectacle is help you "save time and look good" by providing an
  extensible platform for auto generating your REST API docs. The default layout
  is a three column single page, similar to those

  employed by [Stripe](https://stripe.com/docs/api) and
  [Intercom](https://developers.intercom.com/reference).


  See a demo of Spectacle in action here:
  [http://cheesestore.github.io](http://cheesestore.github.io)


  ---


  ![Demo Screenshot](screenshot.jpg)


  ---


  ## Features


  * **OpenAPI/Swagger 2.0 support**: Support for the latest OpenAPI/Swagger
  specification.

  * **Highly configurable**: Easily configurable Handlebars templates and SCSS
  styles so you can add your own design and flavour without going bald. See
  [Custom Builds](#custom-builds)

  * **Markdown support**: Render markdown written in any of your API
  descriptions.

  * **Remote file references**: Support for swagger specs split across multiple
  files.

  * **Clean responsive design**: Responsive HTML5 and CSS3 layout built with
  [Foundation 6](http://foundation.zurb.com/sites.html) that looks great on all
  devices and screen sizes.

  * **Embed into your existing website**: An embedded option so that generate
  partial docs without a HTML `<body>` for convenient integration into your
  existing website.

  * **Live preview developer mode**: Development mode that starts a local HTTP
  server with a file watcher and live reload so you can preview live changes in
  your browser as you update your spec.


  ## Usage


  Simply install Spectacle from `npm` like so:


  ```bash

  npm install -g spectacle-docs

  ```


  Next pass your `swagger.json` document use the CLI to generate your
  documentation.


  ```bash

  spectacle -d your_swagger_api.json


  # Or use the cheese.json example to test it out

  # spectacle -d -l test/fixtures/cheese.png test/fixtures/cheese.yml

  ```


  Your generated documentation will be located in the `public` directory by
  default. You can either copy the generated HTML to your web server, or view
  your docs by pointing your browser to
  [http://localhost:4400/](http://localhost:4400/).


  ### Docker


  [Docker](https://hub.docker.com/r/sourcey/spectacle/) images are included that
  allow Spectacle to be run from the inside. It's useful, for instance, in a
  Gitlab CI pipeline. Thanks @alexeiaguiar.


  How to use it: `docker run -it sourcey/spectacle /bin/sh`


  ## Configuration Options


  The basic CLI options are detailed below:


  ```bash

  $ spectacle -h

    Usage: spectacle [options] <specfile>

    Options:

      -h, --help                   output usage information
      -V, --version                output the version number
      -C, --disable-css            omit CSS generation (default: false)
      -J, --disable-js             omit JavaScript generation (default: false)
      -e, --embeddable             omit the HTML <body/> and generate the documentation content only (default: false)
      -d, --development-mode       start HTTP server with the file watcher (default: false)
      -D, --development-mode-live  start HTTP server with the file watcher and live reload (default: false)
      -s, --start-server           start the HTTP server without any development features
      -p, --port <port>            the port number for the HTTP server to listen on (default: 4400)
      -P, --port-live <port>       the port number for the live reload to listen on (default: 4401)
      -t, --target-dir <dir>       the target build directory (default: public)
      -f, --target-file <file>     the target build HTML file (default: index.html)
      -a, --app-dir <dir>          the application source directory (default: app)
      -l, --logo-file <file>       specify a custom logo file (default: null)
      -c, --config-file <file>     specify a custom configuration file (default: app/lib/config.js)
  ```


  Most options are self explanatory, but the following options warrant some
  further explanation:


  * **--development-mode** `-d`: This option starts a development server with a
  file watcher, and will automatically regenerate your docs when any of your
  spec or app files change.


  * **--development-mode-live** `-D`: This option starts a development server
  with a file watcher and live reload, and will automatically regenerate your
  docs when any of your spec or app files change.


  * **--start-server** `-s`: This option starts a production server without any
  development options enabled that serves the contents of your `--target-dir`.


  * **--embeddable** `-e`: This option lets you build a minimal version of the
  documentation without the HTML `<body>` tags, so you can embed Spectacle into
  your own website template. More info on [custom builds](#custom-builds) here.


  * **--app-dir** `-a`: This option overrides the default directory which
  contains all the Handlebars templates, SCSS, and JavaScript source files. This
  option is useful for development because you can copy the contents of `app` to
  a remote location or a separate repo for custom builds.


  * **--target-dir** `-t`: This option specifies where the generated
  documentation HTML files will be output.


  ## Custom Builds


  The best option for building your own custom functionality into Spectacle is
  to [fork Spectacle on GitHub](https://help.github.com/articles/fork-a-repo/),
  and make your own modifications in source. This way you can keep up to date by
  merging changes from the `master` branch, and your can also contribute your
  updates back to `master` by creating a [Pull
  Request](https://help.github.com/articles/creating-a-pull-request/) if you
  think they improve Spectacle somehow.


  To fork Spectacle go to `https://github.com/sourcey/spectacle`, and press the
  'Fork' button. Now you can `git clone git@github.com:<yourname>/spectacle.git`
  to make your own changes.


  Alternatively, you can just copy the contents of `app` from the main repo
  which contains all the source files such as templates, stylesheets and
  JavaScripts. Now just pass the path to your custom `app` path to the CLI like
  so: `spectacle -a /path/to/your/app your_swagger_api.json`


  ## Optimizing Your Workflow


  Using an API spec to generate your docs has a number of great advantages, such
  as:


  * **Maintain a single source**: Save time by removing the need to maintain a
  separate API spec and API documentation.

  * **No more out-of-date documentation**: Your documentation will always be
  up-to-date with your API spec.

  * **Be a better developer**: Your entire API system will be more stable and
  robust when built around your spec as a single source of truth.


  As developer we're always looking for ways to improve and optimize our
  workflow, and documentation is just the beginning. With a well written Swagger
  you can automate and generate many parts of your API system, such as:


  * **Inline Code Generators**: Generate your Swagger JSON or YAML from your
  source code comments.

  * **Automate Testing**: Automate testing for all your API endpoints.

  * **Code Generation**: Automatically generate client and server code from your
  spec.

  * **Generate Documentation**: Really?


  For a list of open source Swagger based libraries in many languages check
  here: http://swagger.io/open-source-integrations/


  ## Development


  ### Testing


  Testing is powered by
  [Mocha](https://mochajs.org/)/[Chai](http://chaijs.com/), and automated
  testing is run via [CircleCI](https://circleci.com/).


  At this stage, unit tests have not been written for all parts of the
  codebase.  However, new code should be tested, and unit tests for the existing
  code will be added in the future.


  Run `npm test` on the repository to start the automated tests.

  Some parts of testing can be configured using environment variables.


  - `OFFLINE=true`
    Some tests use HTTP connections to test giving Spectacle remote API specifications.
    Use `OFFLINE=true` to skip tests that require an internet connection.

  Include environment variables before calling `npm test`.  For example,
  `OFFLINE` mode can be enabled via `OFFLINE=true npm test`.



  <!-- ## Contributors


  Thanks to all the great developers who make Spectacle great!


  TODO

  -->



  ## More Information


  More info is available on the [Spectacle
  homepage](http://sourcey.com/spectacle).


  Please use the [GitHub issue
  tracker](https://github.com/sourcey/spectacle/issues) if you have any ideas or
  bugs to report.


  All contributions are welcome.


  Good luck and enjoy Spectacle!
Rebilly/ReDoc: >
  <div align="center">
    <img alt="ReDoc logo" src="https://raw.githubusercontent.com/Rebilly/ReDoc/master/docs/images/redoc-logo.png" width="400px" />

    **OpenAPI/Swagger-generated API Reference Documentation**

    [![Build Status](https://travis-ci.org/Rebilly/ReDoc.svg?branch=master)](https://travis-ci.org/Rebilly/ReDoc) [![Coverage Status](https://coveralls.io/repos/Rebilly/ReDoc/badge.svg?branch=master&service=github)](https://coveralls.io/github/Rebilly/ReDoc?branch=master) [![dependencies Status](https://david-dm.org/Rebilly/ReDoc/status.svg)](https://david-dm.org/Rebilly/ReDoc) [![devDependencies Status](https://david-dm.org/Rebilly/ReDoc/dev-status.svg)](https://david-dm.org/Rebilly/ReDoc#info=devDependencies) [![npm](http://img.shields.io/npm/v/redoc.svg)](https://www.npmjs.com/package/redoc) [![License](https://img.shields.io/npm/l/redoc.svg)](https://github.com/Rebilly/ReDoc/blob/master/LICENSE)

    [![bundle size](http://img.badgesize.io/https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js?compression=gzip&max=300000)](https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js) [![npm](https://img.shields.io/npm/dm/redoc.svg)](https://www.npmjs.com/package/redoc) [![](https://data.jsdelivr.com/v1/package/npm/redoc/badge)](https://www.jsdelivr.com/package/npm/redoc) [![Docker Build Status](https://img.shields.io/docker/build/redocly/redoc.svg)](https://hub.docker.com/r/redocly/redoc/)


  </div>


  **This is README for `2.0` version of ReDoc (React based). README for `1.x`
  version is on the branch [v1.x](https://github.com/Rebilly/ReDoc/tree/v1.x)**



  ![ReDoc
  demo](https://raw.githubusercontent.com/Rebilly/ReDoc/master/demo/redoc-demo.png)


  ## [Live demo](http://rebilly.github.io/ReDoc/)


  [<img alt="Deploy to Github" src="http://i.imgur.com/YZmaqk3.png"
  height="60px">](https://github.com/Rebilly/generator-openapi-repo#generator-openapi-repo--)
  [<img alt="ReDoc as a service" src="http://i.imgur.com/edqdCv6.png"
  height="60px">](https://redoc.ly) [<img alt="Customization services"
  src="http://i.imgur.com/c4sUF7M.png"
  height="60px">](https://redoc.ly/#services)


  ## Features

  - Extremely easy deployment

  - [redoc-cli](https://github.com/Rebilly/ReDoc/blob/master/cli/README.md) with
  ability to bundle your docs into **zero-dependency** HTML file

  - Server Side Rendering ready

  - The widest OpenAPI v2.0 features support (yes, it supports even
  `discriminator`) <br>

  ![](docs/images/discriminator-demo.gif)

  - OpenAPI 3.0 support

  - Neat **interactive** documentation for nested objects <br>

  ![](docs/images/nested-demo.gif)

  - Code samples support (via vendor extension) <br>

  ![](docs/images/code-samples-demo.gif)

  - Responsive three-panel design with menu/scrolling synchronization

  - Integrate API Introduction into side menu - ReDoc takes advantage of
  markdown headings from OpenAPI description field. It pulls them into side menu
  and also supports deep linking.

  - High-level grouping in side-menu via
  [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) vendor extension

  - Simple integration with `create-react-app`
  ([sample](https://github.com/APIs-guru/create-react-app-redoc))

  - Branding/customizations via [`theme` option](#redoc-options-object)


  ## Roadmap
    - [x] ~~[OpenAPI v3.0 support](https://github.com/Rebilly/ReDoc/issues/312)~~
    - [x] ~~performance optimizations~~
    - [x] ~~better navigation (menu improvements + search)~~
    - [x] ~~React rewrite~~
    - [x] ~~docs pre-rendering (performance and SEO)~~
    - [ ] ability to simple branding/styling
    - [ ] built-in API Console

  ## Releases

  **Important:** all the 2.x releases are deployed to npm and can be used via
  jsdeliver:

  - particular release, e.g. `v2.0.0-alpha.15`:
  https://cdn.jsdelivr.net/npm/redoc@2.0.0-alpha.17/bundles/redoc.standalone.js

  - `next` release:
  https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js


  Additionally, all the 1.x releases are hosted on our GitHub Pages-based
  **CDN**:

  - particular release, e.g. `v1.2.0`:
  https://rebilly.github.io/ReDoc/releases/v1.2.0/redoc.min.js

  - `v1.x.x` release:
  https://rebilly.github.io/ReDoc/releases/v1.x.x/redoc.min.js

  - `latest` release:
  https://rebilly.github.io/ReDoc/releases/latest/redoc.min.js - it will point
  to latest 1.x.x release since 2.x releases are not hosted on this CDN but on
  unpkg.


  ## Version Guidance

  | ReDoc Release | OpenAPI Specification |

  |:--------------|:----------------------|

  | 2.0.0-alpha.x | 3.0, 2.0              |

  | 1.19.x        | 2.0                   |

  | 1.18.x        | 2.0                   |

  | 1.17.x        | 2.0                   |


  ## Some Real-life usages

  - [Rebilly](https://rebilly.github.io/RebillyAPI)

  - [Docker Engine](https://docs.docker.com/engine/api/v1.25/)

  - [Zuora](https://www.zuora.com/developer/api-reference/)

  - [Shopify Draft Orders](https://help.shopify.com/api/draft-orders)

  - [Discourse](http://docs.discourse.org)

  - [APIs.guru](https://apis.guru/api-doc/)

  - [FastAPI](https://github.com/tiangolo/fastapi)


  ## Deployment


  ### TL;DR


  ```html

  <!DOCTYPE html>

  <html>
    <head>
      <title>ReDoc</title>
      <!-- needed for adaptive design -->
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">

      <!--
      ReDoc doesn't change outer page styles
      -->
      <style>
        body {
          margin: 0;
          padding: 0;
        }
      </style>
    </head>
    <body>
      <redoc spec-url='http://petstore.swagger.io/v2/swagger.json'></redoc>
      <script src="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js"> </script>
    </body>
  </html>

  ```

  That's all folks!


  **IMPORTANT NOTE:** if you work with untrusted user spec, use `untrusted-spec`
  [option](#redoc-options-object) to prevent XSS security risks.


  ### 1. Install ReDoc (skip this step for CDN)

  Install using [yarn](https://yarnpkg.com):

      yarn add redoc

  or using [npm](https://docs.npmjs.com/getting-started/what-is-npm):

      npm install redoc --save

  ### 2. Reference redoc script in HTML

  For **CDN**:

  ```html

  <script src="https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js">
  </script>

  ```


  For npm:

  ```html

  <script src="node_modules/redoc/bundles/redoc.standalone.js"> </script>

  ```


  ### 3. Add `<redoc>` element to your page

  ```html

  <redoc spec-url="url/to/your/spec"></redoc>

  ```


  ### 4. Enjoy :smile:



  ## Usage as a React component


  Install peer dependencies required by ReDoc if you don't have them installed
  already:

      npm i react react-dom mobx@^4.2.0 styled-components

  Import `RedocStandalone` component from 'redoc' module:


  ```js

  import { RedocStandalone } from 'redoc';

  ```


  and use it somewhere in your component:


  ```js

  <RedocStandalone specUrl="url/to/your/spec"/>

  ```


  or


  ```js

  <RedocStandalone spec={/* spec as an object */}/>

  ```


  Also you can pass options:


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    options={{
      nativeScrollbars: true,
      theme: { colors: { primary { main: '#dd5522' } } },
    }}
  />

  ```


  Here are detailed [options docs](#redoc-options-object).


  You can also specify `onLoaded` callback which will be called each time Redoc
  has been fully rendered or when error occurs (with an error as the first
  argument). *NOTE*: It may be called multiply times if you change component
  properties


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    onLoaded={error => {
      if (!error) {
        console.log('Yay!');
      }
    }}
  />

  ```


  ## The Docker way


  ReDoc is available as pre-built Docker image in official [Docker Hub
  repository](https://hub.docker.com/r/redocly/redoc/). You may simply pull &
  run it:

      docker pull redocly/redoc
      docker run -p 8080:80 redocly/redoc

  Also you may rewrite some predefined environment variables defined in
  [Dockerfile](./config/docker/Dockerfile). By default ReDoc starts with demo
  Petstore spec located at `http://petstore.swagger.io/v2/swagger.json`, but you
  may change this URL using environment variable `SPEC_URL`:

      docker run -p 8080:80 -e SPEC_URL=https://api.example.com/openapi.json redocly/redoc

  ## ReDoc CLI


  [See here](https://github.com/Rebilly/ReDoc/blob/master/cli/README.md)


  ## Configuration


  ### Security Definition location

  You can inject Security Definitions widget into any place of your
  specification `description`. Check out details
  [here](docs/security-definitions-injection.md).


  ### Swagger vendor extensions

  ReDoc makes use of the following [vendor
  extensions](https://swagger.io/specification/#specificationExtensions):

  * [`x-logo`](docs/redoc-vendor-extensions.md#x-logo) - is used to specify API
  logo

  * [`x-traitTag`](docs/redoc-vendor-extensions.md#x-traitTag) - useful for
  handling out common things like Pagination, Rate-Limits, etc

  * [`x-code-samples`](docs/redoc-vendor-extensions.md#x-code-samples) - specify
  operation code samples

  * [`x-examples`](docs/redoc-vendor-extensions.md#x-examples) - specify JSON
  example for requests

  * [`x-nullable`](docs/redoc-vendor-extensions.md#nullable) - mark schema param
  as a nullable

  * [`x-displayName`](docs/redoc-vendor-extensions.md#x-displayname) - specify
  human-friendly names for the menu categories

  * [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) - group tags by
  categories in the side menu

  * [`x-servers`](docs/redoc-vendor-extensions.md#x-servers) - ability to
  specify different servers for API (backported from OpenAPI 3.0)

  *
  [`x-ignoredHeaderParameters`](docs/redoc-vendor-extensions.md#x-ignoredHeaderParameters)
  - ability to specify header parameter names to ignore


  ### `<redoc>` options object

  You can use all of the following options with standalone version on <redoc>
  tag by kebab-casing them, e.g. `scrollYOffset` becomes `scroll-y-offset` and
  `expandResponses` becomes `expand-responses`.


  * `untrustedSpec` - if set, the spec is considered untrusted and all
  HTML/markdown is sanitized to prevent XSS. **Disabled by default** for
  performance reasons. **Enable this option if you work with untrusted user
  data!**

  * `scrollYOffset` - If set, specifies a vertical scroll-offset. This is often
  useful when there are fixed positioned elements at the top of the page, such
  as navbars, headers etc;

  `scrollYOffset` can be specified in various ways:
    * **number**: A fixed number of pixels to be used as offset;
    * **selector**: selector of the element to be used for specifying the offset. The distance from the top of the page to the element's bottom will be used as offset;
    * **function**: A getter function. Must return a number representing the offset (in pixels);
  * `suppressWarnings` - if set, warnings are not rendered at the top of
  documentation (they still are logged to the console).

  * `lazyRendering` - _Not implemented yet_ ~~if set, enables lazy rendering
  mode in ReDoc. This mode is useful for APIs with big number of operations
  (e.g. > 50). In this mode ReDoc shows initial screen ASAP and then renders the
  rest operations asynchronously while showing progress bar on the top. Check
  out the [demo](\\rebilly.github.io/ReDoc) for the example.~~

  * `hideHostname` - if set, the protocol and hostname is not shown in the
  operation definition.

  * `expandResponses` - specify which responses to expand by default by response
  codes. Values should be passed as comma-separated list without spaces e.g.
  `expandResponses="200,201"`. Special value `"all"` expands all responses by
  default. Be careful: this option can slow-down documentation rendering time.

  * `requiredPropsFirst` - show required properties first ordered in the same
  order as in `required` array.

  * `sortPropsAlphabetically` - sort properties alphabetically

  * `showExtensions` - show vendor extensions ("x-" fields). Extensions used by
  ReDoc are ignored. Can be boolean or an array of `string` with names of
  extensions to display

  * `noAutoAuth` - do not inject Authentication section automatically

  * `pathInMiddlePanel` - show path link and HTTP verb in the middle panel
  instead of the right one

  * `hideLoading` - do not show loading animation. Useful for small docs

  * `nativeScrollbars` - use native scrollbar for sidemenu instead of
  perfect-scroll (scrolling performance optimization for big specs)

  * `hideDownloadButton` - do not show "Download" spec button. **THIS DOESN'T
  MAKE YOUR SPEC PRIVATE**, it just hides the button.

  * `disableSearch` - disable search indexing and search box

  * `onlyRequiredInSamples` - shows only required fields in request samples.

  * `theme` - ReDoc theme. Not documented yet. For details check source code:
  [theme.ts](https://github.com/Rebilly/ReDoc/blob/master/src/theme.ts)


  ## Advanced usage of standalone version

  Instead of adding `spec-url` attribute to the `<redoc>` element you can
  initialize ReDoc via globally exposed `Redoc` object:

  ```js

  Redoc.init(specOrSpecUrl, options, element, callback?)

  ```


  - `specOrSpecUrl` is either JSON object with specification or an URL to the
  spec in `JSON` or `YAML` format

  - `options` [options object](#redoc-options-object)

  - `element` DOM element to put ReDoc into

  - `callback` (optional) - callback to be called after Redoc has been fully
  rendered. It is also called also on errors with error as the first argument


  ```js

  Redoc.init('http://petstore.swagger.io/v2/swagger.json', {
    scrollYOffset: 50
  }, document.getElementById('redoc-container'))

  ```


  -----------

  ## Development

  see [CONTRIBUTING.md](.github/CONTRIBUTING.md)
mermade/widdershins: >
  # widdershins

  OpenAPI / Swagger / AsyncAPI / Semoasa definition to
  [Slate](https://github.com/lord/slate) /

  [Shins](https://github.com/mermade/shins) compatible markdown


  ![Build](https://img.shields.io/travis/Mermade/widdershins/master.svg)
  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru)
  [![Tested on Mermade
  OpenAPIs](https://img.shields.io/badge/Additional%20Specs-419-brightgreen.svg)](https://github.com/mermade/OpenAPI_specifications)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/widdershins/badge.svg)](https://snyk.io/test/npm/widdershins)


  <img src="http://mermade.github.io/widdershins/logo.png" width="247px"
  height="250px" />


  ### Widdershins *adverb*:

  * In a direction contrary to the sun's course;

  * anticlockwise;

  * helping you produce static documentation from your OpenAPI 3.0 / Swagger 2.0
  / AsyncAPI 1.x / Semoasa 0.1.0 definition


  ![Widdershins
  screenshot](https://mermade.github.io/widdershins/screenshot.png)


  ### News


  * As of v3.0.0 Widdershins no longer expands the definition of OpenAPI body
  parameters / requestBodies by default, unless they have an inline schema. You
  can restore the old behaviour by using the `--expandBody` option.

  * You may limit the depth of schema examples using the `--maxDepth` option.
  The default is 10.

  * To omit schemas entirely, please copy and customise the `main.dot` template.

  * As of v3.1.0 Widdershins includes a generated `Authorization` header in
  OpenAPI code samples. If you wish to omit this, see
  [here](/templates/openapi3/README.md).

  * If you are using Node.js 6 or lower, please specify the `--harmony` flag.


  ### To install


  * Clone the git repository, or

  * `npm install [-g] widdershins`


  ### Examples


  ```

  node widdershins --search false --language_tabs 'ruby:Ruby' 'python:Python'
  --summary defs/petstore3.json -o petstore3.md

  ```


  ### Options


  | CLI parameter name | JavaScript parameter name | Type | Default value |
  Description |

  | --- | --- | --- | --- | --- |

  | --customApiKeyValue | options.customApiKeyValue | `string` | ApiKey | Set a
  custom API key value |

  | --expandBody | options.expandBody | `boolean` | `false` | Expand the
  requestBody parameter to show all properties in the request body |

  | --headings | options.headings | `integer` | 2 | The number of headings to
  show in the table of contents. Currently supported only by Shins, not by
  Slate, which lacks this feature |

  | --omitBody | options.omitBody | `boolean` | `false` | Omit the top-level
  fake body parameter object |

  | --omitHeader | options.omitHeader | `boolean` | `false` | Omit the header /
  YAML front-matter |

  | --resolve | options.resolve | `boolean` | `false` | Resolve external $refs,
  using the `source` parameter or the input file as the base location |

  | --shallowSchemas | options.shallowSchemas | `boolean` | `false` | Don't
  expand schemas past $refs |

  | N/A | options.source | `string` | | The absolute location or URL of the
  source file to use as the base to resolve relative references ($refs) from;
  required if options.resolve is set to true. For CLI commands, Widdershins uses
  the input file as the base for the $refs |

  | --summary | options.tocSummary | `boolean` | `false` | Use the operation
  summary as the TOC entry instead of the ID |

  | --verbose | options.verbose | `boolean` | `false` | Increase verbosity |

  | -h, --help | options.help | `boolean` | `false` | Show help |

  | --version | options.version | `boolean` | `false` | Show version number |

  | -c, --code | options.codeSamples | `boolean` | `false` | Turn generic code
  samples off |

  | --httpsnippet | options.httpsnippet | `boolean` | `false` | Use httpsnippet
  to generate code samples |

  | -d, --discovery | options.discovery | `boolean` | `false` | Include
  schema.org WebAPI discovery data |

  | -e, --environment | options.environment | `string` | None | Load
  config/override options from file |

  | -i, --includes | options.includes | `string` | None | List of files to
  include, comma separated |

  | -l, --lang | options.lang | `boolean` | `false` | Automatically generate
  list of languages for code samples |

  | --language_tabs | options.language_tabs | `string` | (Differs for each input
  type) | List of language tabs for code samples using language[:label[:client]]
  format |

  | -m, --maxDepth | options.maxDepth | `integer` | 10 | Maximum depth for
  schema examples |

  | -o, --outfile | options.outfile | `string` | (If left blank, output to
  stdout) | File to write output markdown to |

  | -r, --raw | options.raw | `boolean` | `false` | Output raw schemas not
  example values |

  | -s, --search | options.search | `boolean` | `true` | Whether to enable
  search or not |

  | -t, --theme | options.theme | `string` | darkula | Syntax-highlighter theme
  to use |

  | -u, --user_templates | options.user_templates | `string` | None | Directory
  to load override templates from |

  | -x, --experimental | options.experimental | `boolean` |  | For backwards
  compatibility only, ignored |

  | -y, --yaml | options.yaml | `boolean` | `false` | Display JSON schemas in
  YAML format |

  |  | options.templateCallback | `function` | None | A `function` that is
  called before and after each template (JavaScript code only) |


  In Node.JS code, create an options object and pass it to the Widdershins
  `convert` function, as in this example:


  ```javascript

  const converter = require('widdershins');

  let options = {}; // defaults shown

  options.codeSamples = true;

  options.httpsnippet = false;

  //options.language_tabs = [];

  //options.language_clients = [];

  //options.loadedFrom = sourceUrl; // only needed if input document is relative

  //options.user_templates = './user_templates';

  options.templateCallback = function(templateName,stage,data) { return data };

  options.theme = 'darkula';

  options.search = true;

  options.sample = true; // set false by --raw

  options.discovery = false;

  options.includes = [];

  options.shallowSchemas = false;

  options.tocSummary = false;

  options.headings = 2;

  options.yaml = false;

  //options.resolve = false;

  //options.source = sourceUrl; // if resolve is true, must be set to full path
  or URL of the input document

  converter.convert(apiObj,options,function(err,str){
    // str contains the converted markdown
  });

  ```


  To only include a subset of the pre-defined language-tabs, or to rename their
  display-names, you can override the `options.language_tabs`:


  ```javascript

  options.language_tabs = [{ 'go': 'Go' }, { 'http': 'HTTP' }, { 'javascript':
  'JavaScript' }, { 'javascript--nodejs': 'Node.JS' }, { 'python': 'Python' }, {
  'ruby': 'Ruby' }];

  ```


  The `--environment` option specifies a JSON or YAML-formatted `options`
  object, for example:


  ```json

  {
    "language_tabs": [{ "go": "Go" }, { "http": "HTTP" }, { "javascript": "JavaScript" }, { "javascript--nodejs": "Node.JS" }, { "python": "Python" }, { "ruby": "Ruby" }],
    "verbose": true,
    "tagGroups": [
      {
        "title": "Companies",
        "tags": ["companies"]
      },
      {
        "title": "Billing",
        "tags": ["invoice-create", "invoice-close", "invoice-delete"]
      }
    ]
  }

  ```


  You can also use the environment file to group OAS/Swagger tagged paths
  together to create a more elegant table of contents, and overall page
  structure.


  If you need to support a version of Slate \<v1.5.0 (or a renderer which also
  doesn't support display-names for language-tabs, such as `node-slate`,
  `slate-node` or `whiteboard`), you can use the `--environment` option with the
  included `whiteboard_env.json` file to simply achieve this.


  If you are using the `httpsnippet` option to generate code samples, you can
  specify the client library used to perform the requests for each language by
  overriding the `options.language_clients`:


  ```javascript

  options.language_clients = [{ 'shell': 'curl' }, { 'node': 'request' }, {
  'java': 'unirest' }];

  ```


  To see the list of languages and clients supported by httpsnippet, [click
  here](https://github.com/Kong/httpsnippet/tree/master/src/targets).


  The `loadedFrom` option is only needed where the OpenAPI / Swagger definition
  does not specify a host, and (as per the OpenAPI
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields))
  the API endpoint is deemed to be based on the source URL

  the definition was loaded from.


  Note that the list of included files is simply passed into the header of the
  markdown file, they are actually included by Slate or the alternative you use.


  To see the list of highlight-js syntax highlighting themes, [click
  here](https://highlightjs.org/static/demo/).


  Schema.org WebAPI discovery data is included if the `discovery` option above
  is set `true`. See the W3C [WebAPI Discovery Community
  Group](https://www.w3.org/community/web-api-discovery/) for more information.


  ## Language tabs


  Widdershins supports the `x-code-samples`
  [vendor-extension](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#operation-object-vendor-extensions)
  to completely customise your documentation. Alternatively, you can edit the
  default code-samples in the `templates` sub-directory, or override them using
  the `user_templates` option to specify a directory containing your templates.


  Widdershins supports the use of multiple language tabs with the same language
  (i.e. plain Javascript and Node.Js). To use this support you must be using
  Slate (or one of its ports compatible with) version 1.5.0 or higher.
  [Shins](https://github.com/mermade/shins) versions track Slate version
  numbers.


  ## Template parameters


  Templates are compiled with [doT.js](https://github.com/olado/doT#readme).


  Templates have access to a `data` object with a range of properties based on
  the document context.


  If you specify an `options.templateCallback` function, it will be called
  before and after each template, with three parameters, the template name, the
  stage, (`'pre'` or `'post'`) and the current `data` object. You can mutate the
  `data` object in any way you see fit, as long as you `return` it. Content in
  the `data.append` property will be appended to the current output stream.


  * [Swagger 2.0 / OpenAPI 3.0.x template
  parameters](/templates/openapi3/README.md)

  * [AsyncAPI 1.x template parameters](/templates/asyncapi1/README.md)

  * [Semoasa 0.1.0 template parameters](/templates/semoasa/README.md)


  ## User templates


  To override a `.dot` template, you need to copy over the child `.def` partials
  as well.


  To override a `.def` partial, you need to copy over the parent `.dot` template
  as well. For OpenAPI 3 this will be `main.dot`

  except for `parameters`, `responses` and `callbacks`, which are children of
  the `operation.dot` template.


  This means it is usually easiest to copy all `.dot` and `.def` files to your
  user templates directory. A visual `diff` tool

  which can run across two directories (such as [Meld](http://meldmerge.org/) or
  [WinMerge](http://winmerge.org)) may be useful

  in bringing in changes from Widdershins updates.


  ## Tests


  To run a test-suite:


  ```

  node testRunner {path-to-APIs}

  ```


  The test harness currently expects `.yaml` or `.json` files and has been
  tested against


  * [APIs.guru](https://github.com/APIs-guru/OpenAPI-directory)

  * [Mermade OpenAPI definitions
  collection](https://github.com/mermade/OpenAPI-definitions)


  ### Comparison between this and other OpenAPI / Swagger to Slate tools


  [Blog
  posting](https://dev.to/mikeralphson/comparison-of-various-openapiswagger-to-slate-conversion-tools)
  by the author of Widdershins.


  ### Acknowledgements


  * [@latgeek](https://github.com/LatGeek) for the logo.

  * [@vfernandestoptal](https://github.com/vfernandestoptal) for the httpsnippet
  support.


  ### Widdershins in the wild


  Please feel free to add a link to your API documentation here.


  * [GOV.UK Content API
  v1.0.0](https://content-api.publishing.service.gov.uk/reference.html)

  * [GOV UK Digital Marketplace API
  v1.0.0](https://alphagov.github.io/digitalmarketplace-api-docs/#digital-marketplace-api-v1-0-0)

  * [Capital One API](https://www.capitalone.co.uk/developer/api/)

  * [Cognite Data API](http://doc.cognitedata.com/)

  * [SpeckleWorks API](https://speckleworks.github.io/SpeckleSpecs)

  * [Bank by API](https://tbicr.github.io/bank-api/bank-api.html)

  * [Open EO
  API](https://open-eo.github.io/openeo-api-poc/apireference/index.html)

  * [Split Payments API](http://docs.split.cash/)

  * [LeApp daemon API](https://leapp-to.github.io/shins/index.html)

  * [Shutterstock API](https://api-reference.shutterstock.com/)


  ### Widdershins and Shins


  * `Widdershins` works well with Slate, but for a solely Node.js-based
  experience, why not try the [Shins](https://github.com/mermade/shins) port?
Rebilly/generator-openapi-repo: >
  # create-openapi-repo


  [![NPM version][npm-image]][npm-url] [![Dependency
  Status][daviddm-image]][daviddm-url]


  > Generator for OpenAPI repository


  <center>


  <img src="./logo.png" widht="500px"/>


  </center>


  ## Why?

  There are a few advantages in hosting your API specification + docs on GitHub:
   - Community engagement (PR's and issues)
   - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)
   - Advertisment in the GitHub community
   - Revision history, branching, CI
   - Fast on-boarding time (everyone knows how to use GitHub :smile:)

  ## Features

  This generator helps to create a GitHub repo with the following features:
   - Possibility to split a big OpenAPI spec into smaller files and bundle it for deployment
   - Continuous integration/deployment on Travis
   - Code samples as separate files
   - OpenAPI spec is validated after each commit
   - OpenAPI spec + ReDoc deployed to Github Pages (you can use a custom domain)
   - Live editing in your editor or `swagger-editor` :heart_eyes:
   ![live editing](./live-edit.gif)

  ## Examples of generated repositories

  - https://github.com/Rebilly/RebillyAPI

  - https://github.com/thingful/openapi-spec

  - https://github.com/TwineHealth/TwineDeveloperDocs


  ## How to generate your repository


  We assume you already have [node.js](https://nodejs.org/) installed.


  - Install `create-openapi-repo` globally:

  ```bash

  npm install -g create-openapi-repo

  ```

  or use
  [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):


  ```bash

  npx create-openapi-repo <spec-root>

  ```

  - [Create GitHub
  repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github)
  where your OpenAPI spec will live.

  - [Clone your repo](https://help.github.com/articles/cloning-a-repository/)
  and execute the following command inside it:

  ```bash

  create-openapi-repo .

  ```

  -  Commit and push your changes to the GitHub and follow instruction from
  `README.md` of your newly created repo.


  [npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg

  [npm-url]: https://npmjs.org/package/generator-openapi-repo

  [daviddm-image]:
  https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io

  [daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo
temando/open-api-renderer: >
  # Lincoln


  <img src='assets/lincoln-logo-white.png' alt='Lincoln' height="96" width="96"
  />


  [![NPM](https://img.shields.io/npm/v/react-lincoln.svg)](https://npmjs.org/packages/react-lincoln/)

  [![Travis
  CI](https://img.shields.io/travis/temando/open-api-renderer.svg)](https://travis-ci.org/temando/open-api-renderer)

  [![MIT
  License](https://img.shields.io/github/license/temando/open-api-renderer.svg)](https://en.wikipedia.org/wiki/MIT_License)

  [![JavaScript Style
  Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)


  Meet Lincoln, a [React](https://facebook.github.io/react/) component for
  rendering [OpenAPI](https://www.openapis.org) documents. The project is
  tracking against [v3.0.0](docs/open-api-v3-support.md) of the OpenAPI
  specification.


  Lincoln aims to support evergreen browsers, such as Chrome, Firefox, Safari
  and IE11+. It is responsive and should be usable on most modern devices.


  [Demo](https://temando.github.io/open-api-renderer/demo/?url=https://temando.github.io/open-api-renderer/petstore-open-api-v3.0.0-RC2.json)


  ## Installation


  ```sh

  npm install --save react react-dom react-lincoln

  ```


  ## Usage


  To use Lincoln in your React project:


  ```js

  import React from 'react'

  import ReactDOM from 'react-dom'

  import Lincoln from 'react-lincoln'


  ReactDOM.render(
    <Lincoln definitionUrl='https://temando.github.io/open-api-renderer/petstore-open-api-v3.0.0-RC2.json' />,
    document.body
  )

  ```


  Alternatively, you can pass the contents of the definition directly to
  Lincoln:


  ```js

  import React from 'react'

  import ReactDOM from 'react-dom'

  import Lincoln from 'react-lincoln'

  import definition from './myApi.yml'


  ReactDOM.render(<Lincoln definition={definition} />, document.body)

  ```


  ## Configuration


  The following configuration options are available:


  | property                        | required | type    |
  description                                                                                                                                                                                                                        
  |

  | ------------------------------- | -------- | ------- |
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  |

  | `definitionUrl` or `definition` | ✔        | string  | CORS-enabled URL to,
  or contents of, OpenAPI v3 document to render. Supports JSON or
  YAML.                                                                                                                                         
  |

  | `navSort`                       |          | enum    | This property applies
  when your definition uses `tags`. Valid values are `alpha` which sorts by HTTP
  method, then path or `false`, which will display paths as defined. Defaults to
  `false`.                                        |

  | `validate`                      |          | boolean | If `true`, uses
  [Mermade](https://openapi-converter.herokuapp.com/) to validate definition.
  Defaults to
  `false`.                                                                                                                   
  |

  | `initialSchemaTreeDepth`        |          | number  | The initial opened
  tree depth for schema visualiser when first rendered. This is useful when the
  schema's actual contents is a couple of levels deep, and you want to expand
  the tree to the contents automatically. Defaults to 0. |

  | `navigationMethodDisplayType`   |          | string  | Regulates how the
  navigation items are rendered - path only, summary only, or both. The possible
  values are `summary` (default), `path`, or `all`. In case of any other value
  only the summary is rendered.                         |


  ## Philosophy


  While this project is currently focused on visualising OpenAPI V3
  specifications, it is architected in such a way that the React components deal
  with a `UIReadySchema`, which is a generic specification (admittedly heavily
  based on OpenAPI V3).


  The dream is that this renderer could visualise other formats by introducing
  new parsers which transform documents into the common `UIReadySchema` format.
  This approach allows us to build something sustainable and scalable, where the
  community can help contribute new parsers (among other things!) as required.


  The project is definitely in its infancy and we are not ready for that yet,
  but we hope by sharing this vision early, others can help make it a reality.
  For contributing information, see [CONTRIBUTING.md](CONTRIBUTING.md).


  ## Credit


  - The [ReDoc](https://github.com/Rebilly/ReDoc) project inspired Lincoln. If
  you're looking for an alternative renderer, give ReDoc a try!

  - [swagger2openapi](https://github.com/mermade/swagger2openapi) which Lincoln
  uses to validate definitions.


  ## Maintainers


  Lincoln is an open source project from [Temando](http://temando.com/)'s
  Developer Experience team. Temando connects carriers with retailers and
  retailers to people. The Temando Platform combines shipping experiences,
  multi-carrier connectivity and lightning fast fulfillment in one solution. If
  this sounds like fun, [work with us](http://temando.com/en/about/careers)!
RepreZen/KaiZen-OpenAPI-Editor: >+
  <img src="https://cdn2.hubspot.net/hubfs/597611/Assets_Swagger/KZOE.png"
  alt="KaiZen OpenAPI Editor Logo" height="50%" width="50%"/>


  # KaiZen OpenAPI Editor for Eclipse


  _KaiZen OpenAPI Editor_ is an Eclipse editor for the [industry standard API
  description language](http://openapis.org), formerly known as
  [Swagger](http://swagger.io). It now supports both [Swagger-OpenAPI version
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  and [OpenAPI version
  3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md).  


  KaiZen Editor is a core component of [RepreZen API
  Studio](http://reprezen.com/swagger-tools), a comprehensive solution for API
  modeling, documentation, visualization, testing and code generation, built on
  Eclipse.


  We welcome your suggestions and contributions!


  ## Eclipse Installer


  KaiZen OpenAPI Editor is available on [Eclipse
  Marketplace](https://marketplace.eclipse.org/content/kaizen-openapi-editor).
  Drag-and-drop this button into Eclipse Oxygen or later to install, or [see
  below](#installing-kaizen-openapi-editor) for other options:


  [![Drag to your running Eclipse
  workspace.](./etc/img/btn-install.png)](http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3429028
  "Drag to your running Eclipse workspace.")


  ## NEW! OpenAPI 3.0 Editing


  KaiZen OpenAPI Editor now features full support for the [OpenAPI version
  3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  specification. [See here for further
  details.](https://github.com/RepreZen/KaiZen-OpenAPI-Editor/blob/master/OPEN_API_V3_SUPPORT.md)
   
  ## Feature Highlights


  <img src="/etc/img/ContentAssistQuickOutline.png" alt="Drawing" width="400" />


  ### Validation

  <img src="http://i.imgur.com/GrFw9EM.png" alt="Validation_screenshot"
  width="400">


  ### Code Assist

  Code templates:  

  <img src="http://i.imgur.com/ZtHJX6A.gif" alt="Code_template" width="400">


  Keywords and values:  

  <img src="http://i.imgur.com/3uZ5bQa.gif" alt="CodeAssist_keys_and_values"
  width="400">


  ### Code Assist for References

  Code assist for references has several scopes which can be viewed in sequence
  by pressing `Ctrl`+`Space` repeatedly:


  * The first scope shows only elements from the current document.

  * The second expands it to elements from the containing project.

  * The third shows elements from the entire workspace.


  <img src="http://i.imgur.com/P0IWIEt.gif" alt="CodeAssist_for_references"
  width="400">


  Pressing the hotkey a fourth time starts the cycle over again, with document
  scope.


  ### Navigation to a Reference

  You can navigate to a reference using `Ctrl`+`Click`:  

  <img src="http://i.imgur.com/7WpuV3K.gif" alt="Navigation_to_references"
  width="400">


  ### Quick Outline

  Quick Outline can be invoked with `Ctrl`+`o`. Similar to code assist for
  references, it has three scopes: model, project, and workspace. It also allows
  filtering:    

  <img src="http://i.imgur.com/jvcoooa.gif" alt="Navigation_to_references"
  width="400">


  ### Outline

  Outline View shows the contents of the active OpenAPI spec:  

  <img src="http://i.imgur.com/iv49CLn.png" alt="Navigation_to_references"
  width="400">


  ## Installing KaiZen OpenAPI Editor

  KaiZen OpenAPI Editor requires Java 8 (64-bit) and Eclipse Oxygen or later.


  ### Installing from Eclipse Marketplace

  The [Eclipse Marketplace
  solution](https://marketplace.eclipse.org/content/kaizen-openapi-editor) is
  the easiest way to install KaiZen Editor into an Eclipse IDE. You can
  drag-and-drop the Install button from the browser into your Eclipse IDE, or
  use the built-in Eclipse Marketplace Client.


  [![Drag to your running Eclipse
  workspace.](./etc/img/btn-install.png)](http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3429028
  "Drag to your running Eclipse workspace.")


  ### Installing from the Update Site 

  You can install KaiZen OpenAPI Editor into your Eclipse IDE by clicking on
  `Help > Install New Software... > Add...`

  This will show a dialog box where you can select the location of the update
  site.

  Use the update site http://products.reprezen.com/swagedit/latest/ as the URL.


  ### Installing RepreZen API Studio

  KaiZen Editor is included as a core component of RepreZen API Studio, which
  adds live documentation and diagram views, sandbox testing with the built-in
  mock service and Swagger-UI, powerful code generation, and other features.


  RepreZen API Studio is available through two different installation options:  

  * [API Studio Desktop](http://www.reprezen.com/OpenAPI) installs as a
  standalone desktop application on Windows, MacOS or Linux.

  * [API Studio for
  Eclipse](https://marketplace.eclipse.org/content/reprezen-api-studio) installs
  into an Eclipse IDE distribution, allowing you to use RepreZen's API design,
  documentation and development features in your primary Eclipse development
  environment.<br/>

  [![Drag to your running Eclipse
  workspace.](./etc/img/btn-install.png)](http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3138718
  "Drag to your running Eclipse workspace.")


  ## Troubleshooting

  See the [Troubleshooting
  Guide](https://github.com/RepreZen/SwagEdit/blob/master/TROUBLESHOOTING.md)
  for solutions to common problems.


  ## Contributing to KaiZen OpenAPI Editor

  We welcome contributions - documentation, bug reports or bug fixes.

  If you are interested in contributing to KaiZen Editor, please see the
  [Developer's
  Guide](https://github.com/RepreZen/SwagEdit/blob/master/DEVELOPERS_GUIDE.md). 


  We also created a list of [good first
  bugs](https://github.com/RepreZen/SwagEdit/labels/Good%20First%20Bug)

  that are relatively easy to fix.


  ## License

  KaiZen OpenAPI Editor is provided under the [Eclipse Public License
  v1.0](https://www.eclipse.org/legal/epl-v10.html)


  ## Video: KaiZen Editor in RepreZen API Studio


  [![Editing Swagger-OpenAPI in RepreZen API
  Studio](http://img.youtube.com/vi/KX_tHp_KQkE/0.jpg)](https://www.youtube.com/watch?v=KX_tHp_KQkE)


  _**Note:** KaiZen Editor includes code assist, real-time validation, syntax
  highlighting, and outline view.<br/>

  [Eclipse Color
  Theme](https://marketplace.eclipse.org/content/eclipse-color-theme) and
  [EditBox](http://marketplace.eclipse.org/content/nodeclipse-editbox-background-colors-themes-highlight-code-blocks-c-java-javascript-python)
  are available as separate plugins.<br/>

  [RepreZen API Studio](http://reprezen.com/swagger-tools) includes the mock
  service, live Swagger-UI, code generation, and other features that are not
  part of KaiZen Editor._

swagger-api/swagger-editor: "# <img src=\"https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWE-logo-clr.png\" height=\"80\">\n[![NPM version](https://badge.fury.io/js/swagger-ui.svg)](http://badge.fury.io/js/swagger-editor)\n[![Build Status](https://travis-ci.org/swagger-api/swagger-editor.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-editor)\n[![Code Climate](https://codeclimate.com/github/swagger-api/swagger-editor/badges/gpa.svg)](https://codeclimate.com/github/swagger-api/swagger-editor)\n[![Dependency Status](https://david-dm.org/swagger-api/swagger-editor/status.svg)](https://david-dm.org/swagger-api/swagger-editor)\n[![devDependency Status](https://david-dm.org/swagger-api/swagger-editor/dev-status.svg)](https://david-dm.org/swagger-api/swagger-editor-#info=devDependencies)\n\n**\U0001F570️ Looking for the older version of Swagger Editor?** Refer to the [*2.x* branch](https://github.com/swagger-api/swagger-editor/tree/2.x).\n\nSwagger Editor lets you edit [Swagger API specifications](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md) in YAML inside your browser and to preview documentations in real time.\nValid Swagger JSON descriptions can then be generated and used with the full Swagger tooling (code generation, documentation, etc).\n\nAs a brand new version, written from the ground up, there are some known issues and unimplemented features. Check out the [Known Issues](#known-issues) section for more details.\n\nThis repository publishes to two different NPM modules:\n\n* [swagger-editor](https://www.npmjs.com/package/swagger-editor) is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc).\n* [swagger-editor-dist](https://www.npmjs.com/package/swagger-editor-dist) is a dependency-free module that includes everything you need to serve Swagger Editor in a server-side project, or a web project that can't resolve npm module dependencies.\n\nIf you're building a single-page application, using `swagger-editor` is strongly recommended, since `swagger-editor-dist` is significantly larger.\n\nFor the older version of swagger-editor, refer to the [*2.x branch*](https://github.com/swagger-api/swagger-editor/tree/2.x).\n\n## Running locally\n\n##### Prerequisites\n- Node 6.x\n- NPM 3.x\n\nIf you have Node.js and npm installed, you can run `npm start` to spin up a static server.\n\nOtherwise, you can open `index.html` directly from your filesystem in your browser.\n\nIf you'd like to make code changes to Swagger Editor, you can start up a Webpack hot-reloading dev server via `npm run dev`. \n\n##### Browser support\n\nSwagger Editor works in the latest versions of Chrome, Safari, Firefox, Edge and IE11.\n\n### Known Issues\n\nTo help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.\n\n- Everything listed in [Swagger UI's Known Issues](https://github.com/swagger-api/swagger-ui/blob/master/README.md#known-issues).\n- The integration with the codegen is still missing.\n- Importing specs from a URL is not implemented.\n\n## Docker\n\n### Running the image from DockerHub\nThere is a docker image published in [DockerHub](https://hub.docker.com/r/swaggerapi/swagger-editor/).\n\nTo use this, run the following:\n\n```\ndocker pull swaggerapi/swagger-editor\ndocker run -d -p 80:8080 swaggerapi/swagger-editor\n```\n\nThis will run Swagger Editor (in detached mode) on port 80 on your machine, so you can open it by navigating to `http://localhost` in your browser.\n\n### Building and running an image locally\n\nTo build and run a docker image with the code checked out on your machine, run the following from the root directory of the project:\n\n```\n# Install npm packages (if needed)\nnpm install\n\n# Build the app\nnpm run build\n\n# Build an image\ndocker build -t swagger-editor .\n\n# Run the container\ndocker run -d -p 80:8080 swagger-editor\n\n```\n\nYou can then view the app by navigating to `http://localhost` in your browser.\n\n## Documentation\n\n* [Importing your OpenAPI document](docs/import.md)\n\n## Security contact\n\nPlease disclose any security-related issues or vulnerabilities by emailing [security@swagger.io](mailto:security@swagger.io), instead of using the public issue tracker.\n\n## License\n\nCopyright 2018 SmartBear Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
apicurio/apicurio-studio: >
  [![CircleCI](https://circleci.com/gh/Apicurio/apicurio-studio.svg?style=svg)](https://circleci.com/gh/Apicurio/apicurio-studio)


  # The apicurio-studio project (Open Source API Design Studio)


  ## Summary


  This is the official Git repository for the apicurio studio project: 
  http://www.apicur.io/


  The apicurio studio project is a standalone API design studio that can be used
  to create

  new or edit existing API designs (using the OpenAPI specification).


  ## Get the code


  The easiest way to get started with the code is to [create your own
  fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:

  ```bash
    $ git clone git@github.com:<you>/apicurio-studio.git
    $ cd apicurio-studio
    $ git remote add upstream git://github.com/apicurio/apicurio-studio.git
  ```

  At any time, you can pull changes from the upstream and merge them onto your
  master:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git push origin                   # pushes all the updates to your fork, which should be in-sync with 'upstream'
  ```

  The general idea is to keep your 'master' branch in-sync with the
  'upstream/master'.


  ## Building apicurio-studio


  ### Requirements

  - Maven 3.x

  - Java 8+


  The following command compiles all the code, installs the JARs into your local
  Maven repository, and runs all of the unit tests:

  ```bash
    $ mvn clean install
  ```

  ## Quickstart (i.e. How To Run It)


  The fastest way to get started using Apicurio Studio is to use the
  quickstart.  The Apicurio quickstart is produced as part 

  of the full maven build - you can find it in `distro/quickstart/target` as a
  ZIP file.  To start up the quickstart, use the 

  following commands from the top-level of the repository:


  ```bash
    $ rm -rf ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT
    $ unzip distro/quickstart/target/apicurio-studio-*-quickstart.zip -d distro/quickstart/target
    $ ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT/bin/standalone.sh -c standalone-apicurio.xml
  ```


  This will start Wildfly on your local machine and you can access the UI at
  [http://localhost:8080](http://localhost:8080).


  ## Contribute fixes and features


  Apicurio Studio is open source, and we welcome anybody who wants to
  participate and contribute!


  If you want to fix a bug or make any changes, please [log an issue in
  GitHub](https://github.com/apicurio/apicurio-studio/issues) describing the bug

  or new feature. Then we highly recommend making the changes on a topic branch
  named with the JIRA issue number. For example, this command creates

  a branch for the APISTUDIO-1234 issue:

  ```bash
    $ git checkout -b apicurio-studio-1234
  ```

  After you're happy with your changes and a full build (with unit tests) runs
  successfully, commit your

  changes on your topic branch. Then it's time to check for and pull any recent
  changes that were made in

  the official repository:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git checkout apicurio-studio-1234   # switches to your topic branch
    $ git rebase master                 # reapplies your changes on top of the latest in master
                                        # (i.e., the latest from master will be the new base for your changes)
  ```

  If the pull grabbed a lot of changes, you should rerun your build to make sure
  your changes are still good.

  You can then either [create patches](http://progit.org/book/ch5-2.html) (one
  file per commit, saved in `~/apicurio-studio-1234`) with

  ```bash
    $ git format-patch -M -o ~/apicurio-studio-1234 orgin/master
  ```

  and upload them to the JIRA issue, or you can push your topic branch and its
  changes into your public fork repository

  ```bash
    $ git push origin apicurio-studio-1234         # pushes your topic branch into your public fork of apicurio-studio
  ```

  and [generate a pull-request](http://help.github.com/pull-requests/) for your
  changes.


  We prefer pull-requests, because we can review the proposed changes, comment
  on them,

  discuss them with you, and likely merge the changes right into the official
  repository.


  Please try to create one commit per feature or fix, generally the easiest way
  to do this is via [git
  squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the
  repository history with checkpoint commits.


  ## Code Formatting


  When you are hacking on some apicurio-studio code, we'd really appreciate it
  if you followed the

  apicurio-studio coding standards.  If you're using Eclipse, you can find a
  code formatter config

  file here:

  ```

  tools/src/eclipse/apicurio-eclipse-formatter.xml

  ```

  You should be able to import that guy straight into Eclipse by going to

  *Window->Preferences :: Java/Code Style/Formatter*
apiacademy/rapido-web: "# rápido-web\r\n\r\nRapido is an API design tool that facilitates the _sketching_ phase of design.  At a minimum, a sketch should be:\r\n\r\n* easy to create\r\n* easy to dispose\r\n* easy to translate into a prototype\r\n\r\nSketching allows a designer to perform many iterations of an early design if the cost of creation is very low.  This promotes experimentation and ideation.  Early iterations are important for API design as it is difficult to change an API once it is released and being used.\r\n\r\n## Rapido Design Principles\r\n\r\n1.  Rapid design - a user should be able to create a complete API sketch within five minutes\r\n2.  Safe Disposability - users should feel safe when starting a design over (through archiving and peristence of previous designs )\r\n3.  Unidirectional - Rapido sketches can be exported to later lifecycle stages, but designs cannot be imported.  \r\n\r\n## Development Setup\r\n\r\nRapido requires NodeJS and npm and a [backend Rapido](http://github.com/apiacademy/rapido-backend) implementation.\r\n\r\nTo install:\r\n`npm install`\r\n\r\nTo start:\r\n`npm start`\r\n\r\nTo test with Chrome:\r\n'npm test'\r\n"
mermade/openapi-gui: >+
  OpenAPI-GUI

  ===========


  OpenAPI-GUI is a GUI for creating and editing OpenAPI version 3.0.x JSON/YAML
  definitions. In its current form it is most useful as a tool for starting off
  and editing simple OpenAPI definitions. Imported OpenAPI 2.0 definitions are
  automatically converted to v3.0.


  ![Screenshot](https://github.com/Mermade/openapi-gui/blob/master/img/screenshot.png?raw=true)


  For the previous Swagger / OpenAPI 2.0-only version see
  [here](https://mikeralphson.github.io/openapi-gui). This version is currently
  **unmaintained** apart from security fixes.


  This project was initially a fork of [Daryl Kuhn's
  IODoctor](https://github.com/darrylkuhn/iodoctor/tree/angular-port), which in
  turn was inspired by [IODoctor by Brandon
  West](https://github.com/brandonmwest/iodoctor) which was written in Ruby. The
  complete history of the project is maintained on GitHub.


  Description

  -----------

  ### How It Works


  Select an existing OpenAPI 2.0 or 3.0.x definition to upload, or create a new
  definition and start adding Paths, Operations, and Parameters. When an
  existing definition is used, it is parsed and forms for editing each Path,
  Operation and Parameter will be created.


  You can load an existing definition by appending a `?url=` query parameter to
  the initial start page.


  Click an item from the menu on the left to begin editing. View the JSON/YAML
  output at any time by selecting one of the "Export" tabs. When finished,
  download the output to save it locally or copy it your clipboard. OpenAPI-GUI
  only stores one definition at a time, and this is in your browser's
  local-storage. Make sure you save your JSON/YAML output locally.


  Before performing a destructive action, OpenAPI-GUI saves the current state of
  the definition. At all other times you must remember to select Save manually.


  ### Technology


  OpenAPI-GUI runs entirely client-side using a number of Javascript frameworks
  including [Vue.JS](https://vuejs.org/), [jQuery](https://jquery.com/) and
  [Bulma](http://bulma.io/) for CSS.


  To get the app up and running just browse to [the live version on GitHub
  pages](https://mermade.github.io/openapi-gui), deploy a clone to GitHub pages,
  deploy to Heroku using the button below, or clone the repo and point a browser
  at `index.html` or host it yourself - couldn't be simpler. More [technical
  information here](docs/technical.md).


  You only need to `npm install` the Node.js modules if you wish to use the
  `openapi-gui` embedded web server (i.e. not if you are running your own
  web-server), otherwise they are only there for PaaS deployments.


  [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)


  #### CLI options


  ```

  -d, --definition    serve the given OAS definition

  -l, --launch        start a web-browser pointing to the GUI

  -p, --port          specify the port to run on, defaults to $PORT or 3000

  -w, --write         enable writing back to the source definition

  ```


  #### Running with Docker


  If you don't have a local Node development environment, or if you would prefer
  to run OpenAPI-GUI in a Docker container, you can do in with a few simple
  steps:


  1. Clone the repository.

  2. Run `docker build -t mermade/openapi-gui .` to build the Docker image
  (`mermade/openapi-gui`)

  3. Run `docker run --name openapi-gui -p 8080:3000 -d mermade/openapi-gui` to
  run the server on port 8080.

  4. Navigate to `http://localhost:8080` in your favorite browser.

  5. When you're done, shut down the server by running `docker stop openapi-gui
  && docker rm openapi-gui`


  Or you can pull the pre-built Docker image:


  * `docker pull mermade/openapi-gui`


  ### Limitations


  * OpenAPI-GUI will de-reference shared parameters.

  * The definition must be self-contained with no external `$ref`s. **This is
  likely to be resolved (ho-ho) soon**.

  * Editing a response / example / body schema will dereference it.

  * OpenAPI-GUI will not always preserve vendor-extensions, e.g. if a parameter
  is deleted and recreated.

  * OpenAPI-GUI will not preserve comments from definitions imported in YAML
  format.


  TODO

  ----


  * See the [TODO list](/docs/TODO.md) and the current status of [OpenAPI 3.0
  specification support](docs/openapi3-support.md).

stoplightio/prism: >
  # Prism API Server by
  [Stoplight](http://stoplight.io/?utm_source=github&utm_medium=prism)


  [![Maintainability](https://api.codeclimate.com/v1/badges/64eb87e8bb92267e322e/maintainability)](https://codeclimate.com/github/stoplightio/prism/maintainability)
  [![Test
  Coverage](https://api.codeclimate.com/v1/badges/64eb87e8bb92267e322e/test_coverage)](https://codeclimate.com/github/stoplightio/prism/test_coverage)


  ### Current Prism Version: 2.0.20


  The perfect OpenAPI Specification (formerly known as Swagger) companion. Turn
  any OpenAPI Specification document into an API server with dynamic mocking,
  transformations, validations, and more.


  ```shell

  Usage:
    prism [command]

  Available Commands:
    conduct     Run scenarios to orchestrate and test web APIs
    help        Help about any command
    login       Login to Stoplight
    logout      Logout of Stoplight
    mock        Create a mock server given an OASv2 specification
    serve       Start a prism server instance
    update      Update prism to latest or specific version
    validate    Run a contract server, validating upstream responses match a OASv2 specification
    version     Print prism version

  Flags:
    -h, --help           help for prism
    -t, --token string   Stoplight token for user account

  Use "prism [command] --help" for more information about a command.

  ```


  Supports OpenAPI Specification 2. OpenAPI Specification 3 coming soon.


  [More
  documentation](https://docs.stoplight.io/mocking/introduction?utm_source=github&utm_medium=prism)


  ## Installation


  On OS X or Linux:


  ```

  curl https://raw.githubusercontent.com/stoplightio/prism/2.x/install.sh | sh

  ```


  With Docker


  ```

  docker pull stoplight/prism

  ```


  On Windows download [binary](https://github.com/stoplightio/prism/releases).


  ## Update


  ```

  prism update

  ```
Szasza/express-gateway-plugin-openapi3-mock-server: >
  # Express Gateway OpenAPI 3 Mock Server Plugin


  [![npm
  version](https://badge.fury.io/js/express-gateway-plugin-openapi3-mock-server.svg)](https://badge.fury.io/js/express-gateway-plugin-openapi3-mock-server)


  **_This plugin is under active development. Would you meet any problems,
  please open a new issue

  after verifying that there isn't one already._**


  ## Prerequisites


  Please follow the instructions on Express Gateway's [Getting
  started](http://www.express-gateway.io/getting-started/) page.


  Also please take a look at how plugins are [installed and
  enabled](http://www.express-gateway.io/docs/plugins/).


  ## Installation


  `eg plugin install express-gateway-plugin-openapi3-mock-server`


  ## Configuration


  You can use `samples/base-paths.yml` for testing purposes. If so, please
  create a `definitions` folder

  in the project root and copy the sample YAML there.


  _system.config.yml_


  ```yaml

  # some config in front of the plugins section


  plugins:
    express-gateway-plugin-openapi3-mock-server:
      definitionFile: 'definitions/yourdefinition.yml' # The file containing your API's specification

  # some config after the plugins section

  ```


  _gateway.config.yml_ (A barebone example, if nothing else is used.)


  ```yaml

  http:
    port: 80
  apiEndpoints:
    api:
      host: '*'
  policies:
    - mock
  pipelines:
    api:
      apiEndpoints:
          - api
      policies:
          - mock:
            - action
  ```

  The above configuration disables the Admin CLI and will do nothing but provide
  a dummy responder based on your 

  OpenAPI specification.


  ## Features


  * Endpoints with appropriate request types are parsed and the first response
  example is used as a response body.

  * HTTP and apiKey auth header check support


  ### To do


  * Accept header checks to return appropriate response example

  * X-* headers for testing error responses

  * X-* headers for response example selection

  * Input parameter validation

  * Generators for random response data based on provided schema
swagger-api/swagger-node: >
  [![Build
  Status](https://travis-ci.org/swagger-api/swagger-node.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-node) 

  [![NPM
  version](https://badge.fury.io/js/swagger.png)](http://badge.fury.io/js/swagger)

  [![Dependency
  Status](https://david-dm.org/swagger-api/swagger-node/status.svg)](https://david-dm.org/swagger-api/swagger-node)

  [![devDependency
  Status](https://david-dm.org/swagger-api/swagger-node/dev-status.svg)](https://david-dm.org/swagger-api/swagger-node#info=devDependencies)



  The `swagger` module provides tools for designing and building
  Swagger-compliant APIs entirely in Node.js. It integrates with popular Node.js
  servers, including Express, Hapi, Restify, and Sails, as well as any
  Connect-based middleware. With `swagger`, you can specify, build, and test
  your API from the very beginning, on your laptop. It allows you to change and
  iterate your design without rewriting the logic of your implementation.


  ![alt text](./docs/images/overview2.png)



  Remember, one great thing about this approach is that all of the Swagger
  validation logic is handled for you, and all of the routing logic is managed
  through the Swagger configuration. You don't have to code (or recode!) any of
  that stuff yourself.


  # Your swagger API in five steps


  ## 1. Install the swagger module


  Install using npm. For complete instructions, see the
  [install](./docs/install.md) page.


  ```bash

  $ npm install -g swagger

  ```


  ## 2. Create a new swagger project


  Use the [CLI](./docs/cli.md) to create and manage projects. Learn more on the
  [quick start](./docs/quick-start.md) page.


  ```bash

  $ swagger project create hello-world

  ```


  ## 3. Design your API in the Swagger Editor


  The interactive, browser-based [Swagger Editor](http://editor.swagger.io/) is
  built in. It provides Swagger 2.0 validation and endpoint routing, generates
  docs on the fly, and consumes easy-to-read YAML.


  ```bash

  $ swagger project edit

  ```


  ![screenshot of project editor](./docs/images/project-editor.png)


  ## 4. Write controller code in Node.js


  Code your API's business logic in Node.js.


  ```js

  function hello(req, res) {
      var name = req.swagger.params.name.value || 'stranger';
      var hello = util.format('Hello, %s!', name);
      res.json({ "message": hello });
  }

  ```


  If you look at the Swagger file in the editor (shown in step 3 above), the
  `x-swagger-router-controller` element (line 17 in the editor screenshot)
  specifies the name of the controller file associated with the `/hello` path.
  For example:


  ```yaml
      paths:
          /hello:
              x-swagger-router-controller: hello_world
  ```


  Controller source code is always placed in `./api/controllers`. So, the
  controller source file for this project is `./api/controllers/hello_world.js`.


  The `operationId` element specifies which controller function to call. In this
  case (line 19), it is a function called `hello`. Learn
  [more](./docs/controllers.md).


  ## 5. Run the server


  Run the project server.


  ```bash

  $ swagger project start

  ```


  ## Now, call the API!


  It just works!


  ```bash

  $ curl http://127.0.0.1:10010/hello?name=Scott

  { "message": "Hello, Scott!" }

  ```


  # <a name="installation"></a>Installing the swagger module


  See the [Installing swagger](./docs/install.md) for details.


  # <a name="using"></a>Using the swagger module


  Go to the [swagger module doc page](./docs/README.md). It includes all the
  information you need to get started.


  # <a name="about"></a>About this project


  This initiative grew out of Apigee-127, an API design-first development
  framework using Swagger.

  Apigee donated the code to create the swagger-node project in 2015.

   >Copyright 2016 Apigee Corporation

   >Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   >http://www.apache.org/licenses/LICENSE-2.0

   >Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

  ---

  <img src="http://swagger.io/wp-content/uploads/2016/02/logo.jpg"/>
modern-project/modern-ruby: >-
  # Modern #


  ## Using Modern ##

  A detailed description is on the way. For now, please feel free to peruse our

  [test cases] and the beginnings of our [manual] to get an idea of Modern and
  how

  it works.


  ## Versioning ##

  This project follows the [Semantic Versioning], version 2.0.0, with one

  addendum: until the project reaches the 1.0.0 mark, the minor version number

  (i.e., 0.y.*) denotes an API-breaking change.


  ## Contributing ##

  Bug reports and pull requests are welcome [on GitHub]. This project is
  intended

  to be a safe, welcoming space for collaboration, and contributors are expected

  to adhere to the [Contributor Covenant] code of conduct.


  The best way to start contributing is to look for `TODO` comments in the code;

  they're sprinkled liberally wherever it didn't quite make sense to do
  something

  yet but some ideas might be lurking that describe how it could be handled. If

  not? File an issue and let's chat about it!


  ## License ##

  The gem is available as open source under the terms of the [MIT License].


  ## Code of Conduct ##

  Everyone interacting in the Modern project’s codebases, issue trackers, chat

  rooms and mailing lists is expected to follow the [code of conduct].


  [test cases]: https://github.com/eropple/modern/tree/master/spec/modern

  [manual]: https://github.com/eropple/modern/tree/master/manual

  [Semantic Versioning]: https://semver.org/

  [on GitHub]: https://github.com/eropple/modern

  [Contributor Covenant]: http://contributor-covenant.org

  [MIT License]: https://opensource.org/licenses/MIT

  [code of conduct]:
  https://github.com/eropple/modern/blob/master/CODE_OF_CONDUCT.md
go-swagger/go-swagger: >
  # Swagger 2.0 [![Build
  Status](https://circleci.com/gh/go-swagger/go-swagger.svg?style=shield)](https://circleci.com/gh/go-swagger/go-swagger)
  [![Build
  status](https://ci.appveyor.com/api/projects/status/x377t5o9ennm847o/branch/master?svg=true)](https://ci.appveyor.com/project/casualjim/go-swagger/branch/master)
  [![codecov](https://codecov.io/gh/go-swagger/go-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/go-swagger/go-swagger)
  [![GitHub
  version](https://badge.fury.io/gh/go-swagger%2Fgo-swagger.svg)](https://badge.fury.io/gh/go-swagger%2Fgo-swagger)

  [![Slack
  Status](https://slackin.goswagger.io/badge.svg)](https://slackin.goswagger.io)

  [![license](http://img.shields.io/badge/license-Apache%20v2-orange.svg)](https://raw.githubusercontent.com/swagger-api/swagger-spec/master/LICENSE)

  [![GoDoc](https://godoc.org/github.com/go-swagger/go-swagger?status.svg)](http://godoc.org/github.com/go-swagger/go-swagger)

  [![Docker Repository on
  Quay](https://quay.io/repository/goswagger/swagger/status "Docker Repository
  on Quay")](https://quay.io/repository/goswagger/swagger)

  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_shield)

  [![GolangCI](https://golangci.com/badges/github.com/go-swagger/go-swagger.svg)](https://golangci.com)

  [![Go Report
  Card](https://goreportcard.com/badge/github.com/go-swagger/go-swagger)](https://goreportcard.com/report/github.com/go-swagger/go-swagger)


  This package contains a golang implementation of Swagger 2.0 (aka [OpenAPI
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)):

  it knows how to serialize and deserialize swagger specifications.


  [Swagger](https://swagger.io/) is a simple yet powerful representation of your
  RESTful API.<br>


  >
  ![swagger](https://raw.githubusercontent.com/go-swagger/go-swagger/master/docs/favicon-16x16.png)
  **Swagger in a nutshell**

  >

  > With the largest ecosystem of API tooling on the planet, thousands of
  developers are supporting Swagger in almost every modern programming language
  and deployment environment.

  >

  > With a Swagger-enabled API, you get interactive documentation, client SDK
  generation and discoverability. We created Swagger to help fulfill the promise
  of APIs.

  >

  > Swagger helps companies like Apigee, Getty Images, Intuit, LivingSocial,
  McKesson, Microsoft, Morningstar, and PayPal build the best possible services
  with RESTful APIs. Now in version 2.0, Swagger is more enabling than ever. And
  it's 100% open source software.


  ##  Features

  `go-swagger` brings to the go community a complete suite of fully-featured,
  high-performance, API components to  work with a Swagger API: server, client
  and data model.


  * Generates a server from a swagger specification

  * Generates a client from a swagger specification

  * Supports most features offered by jsonschema and swagger, including
  polymorphism

  * Generates a swagger specification from annotated go code

  * Additional tools to work with a swagger spec

  * Great customization features, with vendor extensions and customizable
  templates


  Our focus with code generation is to produce idiomatic, fast go code, which
  plays nice with golint, go vet etc.


  ##  Project status

  `go-swagger` is now feature complete and has stabilized its API.


  Most features and building blocks are now in a stable state, with a rich set
  of CI tests.


  The go-openapi community actively continues bringing fixes and enhancements to
  this code base.


  There is still much room for improvement: contributors and PR's are welcome.
  You may also get in touch with maintainers on [our slack
  channel](https://slackin.goswagger.io).


  ## Documentation

  <https://goswagger.io>


  ## FAQ

  Q&A contributed by the community:


  <https://goswagger.io/faq/>


  ## How is this different from go generator in swagger-codegen?

  **tl;dr** The main difference at this moment is that this one actually
  works...


  The swagger-codegen project only generates a _workable_ go client and even
  there it will only support flat models.

  Further, the go server generated by swagger-codegen is mostly a stub.


  > **Motivation**

  > Why is this not done as a part of the swagger-codegen project? Because:

  >

  > * I don't really know java very well and so I'd be learning both java and
  the object model of the codegen which was in heavy flux as opposed to doing go
  and I really wanted to go experience of designing a large codebase with it.

  > * Go's super limited type system makes it so that it doesn't fit well in the
  model of swagger-codegen

  > * Go's idea of polymorphism doesn't reconcile very well with a solution
  designed for languages that actually have inheritance and so forth.

  > * For supporting types like `[][][]map[string][][]int64` I don't think it's
  possible with mustache

  >

  > I gravely underestimated the amount of work that would be involved in making
  something useful out of it.

  > My personal mission: I want the jvm to go away, it was great way back when
  now it's just silly (vm in container on vm in vm in container)


  ## What's inside?


  Here is an outline of available features (see the full list
  [here](https://goswagger.io/features.html)):


  - An object model that serializes swagger-compliant yaml or json

  - A tool to work with swagger
    - Serve swagger UI for any swagger spec file
    - Flexible code generation, with customizable templates
      - Generate go API server based on swagger spec
      - Generate go API client from a swagger spec
    -  Validate a swagger spec document, with extra rules outlined [here](https://github.com/apigee-127/sway/blob/master/docs/README.md#semantic-validation)
    -  Generate a spec document based on annotated code
  - A runtime to work with Rest API and middlewares
    - Serve spec
    - Routing
    - Validation
    - Authorization
    - Swagger docs UI

  There is more to that...


  - A [typed JSON Schema implementation](https://goswagger.io/use/model.html),
  supporting most Draft 4 features

  - Extended string and numeric formats:
  [strfmt](https://github.com/go-openapi/strfmt)

  - Utilities to work with JSON, convert data types and pointers:
  [swag](https://github.com/go-openapi/swag)

  - A jsonschema (Draft 4) validator, with full $ref support:
  [validate](https://github.com/go-openapi/validate)

  - Custom validation interface


  ## Installing

  `go-swagger` is available as binary or docker releases as well as from source:
  [more details](https://goswagger.io/install.html).


  ## Use-cases

  The main package of the toolkit, go-swagger/go-swagger, provides command line
  tools to help working with swagger.


  The toolkit is highly customizable and allows endless possibilities to work
  with OpenAPI2.0 specifications.


  Beside the go-swagger CLI tool and generator, the [go-openapi
  packages](https://github.com/go-openapi) provide modular functionality to
  build custom solutions on top of OpenAPI.


  The CLI supports shell autocompletion utilities: see
  [here](https://goswagger.io/cli_helpers.html).


  ### Serve specification UI

  Most basic use-case: serve a UI for your spec:


  ```

  swagger serve
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Validate a specification

  To [validate](https://goswagger.io/usage/validate.html) a Swagger
  specification:


  ```

  swagger validate
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Generate an API server

  To generate a [server for a swagger
  spec](https://goswagger.io/generate/server.html) document:


  ```

  swagger generate server [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate an API client

  To generate a [client for a swagger
  spec](https://goswagger.io/generate/client.html) document:


  ```

  swagger generate client [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate a spec from source

  To generate a [swagger spec document for a go
  application](https://goswagger.io/generate/spec.html):


  ```

  swagger generate spec -o ./swagger.json

  ```


  ### Generate a data model

  To generate model structures and validators exposed by the API:


  ```

  swagger generate model --spec={spec}

  ```


  ### Transform specs


  There are [several commands](https://goswagger.io/use/transform.html) allowing
  you to transform your spec.


  Resolve and expand $ref's in your spec as inline definitions:

  ```

  swagger expand {spec}

  ```


  Flatten your spec: all external $ref's are imported into the main document and
  inline schemas reorganized as definitions.

  ```

  swagger flatten {spec}

  ```


  Merge specifications (composition):

  ```

  swagger mixin {spec1} {spec2}

  ```


  ## Try it


  Try `go-swagger` in a free online workspace using Gitpod:


  [![Open in
  Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/go-swagger/go-swagger)


  ## Licensing


  The toolkit itself is licensed as Apache Software License 2.0. Just like
  swagger, this does not cover code generated by the toolkit. That code is
  entirely yours to license however you see fit.



  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_large)


  ## Who is using this project?


  To name but a few... (feel free to sign in there if you are using this
  project):


  > In the list below, we tried to figure out the public repos where you'll find
  examples on how to use `go-swagger` and `go-openapi`:


  [3DSIM](https://github.com/3DSIM)  

  [Alibaba PouchAPI](https://github.com/alibaba/pouch)  

  [CheckR](https://github.com/checkr/flagr)  

  [Cilium](https://github.com/cilium/cilium)  

  [CoreOS](https://github.com/coreos/go-quay)  

  [DigitalOcean](https://github.com/digitalocean/go-netbox)  

  [EVE Central](https://github.com/evecentral)  

  Iron.io

  [JaegerTracing](https://github.com/jaegertracing/jaeger)  

  [Kubernetes-Helm](https://github.com/kubernetes-helm/monocular)  

  [Kubernetes](https://godoc.org/k8s.io/apiextensions-apiserver/pkg/apiserver)  

  [ManifoldCo](https://github.com/manifoldco)  

  [Metaparticle.io](https://github.com/metaparticle-io/metaparticle-ast)  

  [Netlify](https://github.com/netlify/open-api)  

  [Nutanix](https://github.com/nutanix)  

  [OAS2](https://github.com/hypnoglow/oas2)  

  [OVH API](https://github.com/appscode/go-ovh)  

  [RackHD](https://github.com/RackHD/RackHD)  

  [ScaleFT](https://github.com/authclub/billforward)  

  [StratoScale](https://github.com/Stratoscale/swagger)  

  [VMWare](https://github.com/vmware/dispatch)  

  ...


  ## Note to users migrating from older releases


  ### Using 0.5.0


  Because 0.5.0 and master have diverged significantly, you should checkout the
  tag 0.5.0 for go-swagger when you use the currently released version.


  ### Migrating from 0.5.0 to 0.6.0


  You will have to rename some imports:


  ```

  github.com/go-swagger/go-swagger/httpkit/validate to
  github.com/go-openapi/validate

  github.com/go-swagger/go-swagger/httpkit to github.com/go-openapi/runtime

  github.com/naoina/denco to github.com/go-openapi/runtime/middleware/denco

  github.com/go-swagger/go-swagger to github.com/go-openapi

  ```


  ### Migrating from 0.12 to 0.13


  Spec flattening and $ref resolution brought breaking changes in model
  generation, since all complex things generate their own definitions.


  ### Migrating from 0.14 to 0.15


  Generated servers no more import the following package (replaced by go1.8
  native functionality):

  ```

  github.com/tylerb/graceful

  ```


  Spec flattening now defaults to minimal changes to models and should be
  workable for 0.12 users.


  Users who prefer to stick to 0.13 and 0.14 default flattening mode may now use
  the `--with-flatten=full` option.


  Note that the `--skip-flatten` option has been phased out and replaced by the
  more explicit `--with-expand` option.
swagger-api/swagger-inflector: >
  # Swagger Inflector <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  [![Build
  Status](https://img.shields.io/jenkins/s/https/jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-inflector-master.svg)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-inflector-master)


  [![Maven
  Central](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-inflector/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-inflector)



  This project uses the OpenAPI Specification to drive an API implementation. 
  Rather than a typical top-down or bottom-up integration, the Inflector uses
  the OpenAPI Specification as a DSL for the REST API.  The spec drives the
  creation of routes and controllers automatically, matching methods and method
  signatures from the implementation.  This brings a similar integration
  approach to the JVM as
  [swagger-node](https://github.com/swagger-api/swagger-node) brings to the
  javascript world.


  To allow for an iterative development, the framework will mock responses for
  any unimplemented methods, based on the specification.  That means you can
  ship your API to your consumers for review immediately as you build it out.


  You have full control over the mapping of controllers to classes and methods
  as well as models.


  ## Quick start!


  Run this command to start in a hurry.  It will create a project named
  `my-project`

  ```

  curl -L
  https://raw.githubusercontent.com/swagger-api/swagger-inflector/master/setup.sh
  | project=my-project bash

  ```


  This will download everything you need to start editing and running a Swagger
  Inflector based project.  See the output of the command for instructions.


  ### Components


  Inflector uses the following libraries:

   - Swagger models for the swagger definition
   - Jackson for JSON processing
   - Jersey 2.6 for REST
   - Minimum Java 7 

  ### Integration


  Inflector will create routes and add them to Jersey.  You simply need to
  register the Inflector application in your webapp and it should be compatible
  with your existing deployment, whether with web.xml, spring, dropwizard, etc.


  To add inflector via `web.xml`:


  ```xml

  <servlet>
    <servlet-name>swagger-inflector</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>io.swagger.inflector.SwaggerInflector</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>swagger-inflector</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>

  ```


  This simply adds the `SwaggerInflector` application to Jersey.


  ### Configuration


  Inflector uses a single yaml file for configuration.  The default file is
  `inflector.yaml` but it can be overridden by setting a system property when
  starting the JVM:


  ```

  -Dconfig=/path/to/config

  ```


  The configuration supports the following:


  ```yaml

  # mode (development | staging | production).  Default is development, and this
  value will be overridden by a system property

  # -Denvironment=production for example

  environment: development


  # configure your default controller package for method discovery

  controllerPackage: io.swagger.sample.controllers


  # configure the default model package for model discovery

  modelPackage: io.swagger.sample.models


  # the path to the swagger definition (Note! this can be overridden with
  -DswaggerUrl as a system property

  swaggerUrl: swagger.yaml


  # specific mappings for models, used to locate models in the
  `#/definitions/${model}`

  modelMappings:
    User: io.swagger.sample.models.User

  # HTTP response code when required parameters are missing

  invalidRequestCode: 400

  ```


  ### Locating the controller class


  The actual controller class for each method is located via the first of the
  following mechanisms:

  - a x-swagger-router-controller extension at the method level can specify the
  specific controller class

  - each tag associated with the method is assembled into the classnames
  "&lt;controllerPackage&gt;.&lt;Tag&gt;" or 

  "&lt;controllerPackage&gt;.&lt;Tag&gt;Controller", the first of these classes
  that is found by Class.forName(...) will be used

  - an optional &lt;controllerClass&gt; configuration parameter is appended to
  &lt;controllerPackage&gt; 

  - as a last resort a class named &lt;controllerPackage&gt;.Default is used


  By default the class is loaded directly with Class.forName(...).newInstance()
  - but you can override class creation

  by providing a custom ControllerFactory to the inflector configuration (for
  example if you want your controllers to be 

  loaded by a DI framework).


  ### Locating the target method


  When locating methods, the `operationId` is used as the method name for lookup
  via reflection.  If not specified, there is logic for generation of a method
  name.


  Once a method is matched via name, the parameter types will be compared to
  ensure we have the right model.  In all methods, only java objects are
  supported--primitives currently will not match (this allows for proper nulls).


  You can override a model mapping by setting a vendor extension in the swagger
  yaml:


  ```yaml

  # uses method name, look for controllerPackage in the configuration

  paths:
    /test1:
      get:
        x-swagger-router-controller: SampleController
        operationId: getTest1
        parameters:
          - name: id
            in: formData
            type: integer
            format: int64
          - name: name
            in: formData
            type: string
        responses:
          200:
            description: Success!
  ```


  From the configuration example above, this will look for the following class:


  ```

  class: io.swagger.sample.controllers.SampleController

  ```


  with the following method:


  ```

  method: public Object getTest1(
      io.swagger.inflector.models.RequestContext,
      java.lang.Integer id,
      java.lang.String name)
  ```


  #### Complex inputs


  When there are complex inputs, such as the example below:


  ```yaml

  paths:
    /test2:
      post:
        x-swagger-router-controller: SampleController
        operationId: addUser
        parameters:
          - name: user
            in: body
            schema:
              $ref: '#/definitions/User'
          - name: name
            in: query
            type: string
        responses:
          200:
            description: Success!
  ```


  the Inflector will do the following:

   - Look in vendor extensions for the models to see if a mapping exists.  If so, it will attempt to load it via the classloader

   ```yaml
     Address:
      x-swagger-router-model: io.swagger.test.models.Address
      properties:
        street:
          type: string
          example: 12345 El Monte Road
        city:
          type: string
          example: Los Altos Hills
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94022'
   ```

   - Look in the configuration for a mapping between `User` and a concrete class definition.  If the definition exists AND the class can be loaded, the method will look like such:

   ```
   public ResponseContext addUser (
      RequestContext context,             // request context
      io.swagger.sample.models.User user, // user being added
      java.lang.String name)              // the `name` query param
   ```

   - If the definition does not exist, the `modelPackage` from the configuration will be used to attempt to load the class:

   ```
   // ref.getSimpleRef() returns only the `User` from `#/definitions/User`

   Class<?> cls = Class.forName(config.getModelPackage() + "." + ref.getSimpleRef())
   ```

   If the definition can be loaded it will be used as the method signature

   - If no model can be loaded, it is the developer's job to unwrap the input and parse it on their own.  This requires `Content-Type`-specific processing.  Inflector will then look for the following method:

   ```
   public ResponseContext addUser (
      RequestContext context,             // request context
      JsonNode user,                      // a Json tree representing the user
      java.lang.String name)              // the `name` query param
   ```

   - If no method can be found, a mock response will be returned based on the swagger definition.  For complex objects, if an `example` exists, we will use that.  Otherwise, it will be constructed.


  The RequestWrapper and ResponseContext contain information about headers (in
  and outbound), content-type and acceptable response types.


  #### Outputs


  Your controllers can return null (void response), an object (entity), or a
  `io.swagger.inflector.models.ResponseContext`, which allows you to send
  specific error codes, headers, and an optional entity.


  For example, if you want to return a `Pet` from a controller:


  ```java
      public ResponseContext getPet(RequestContext request, java.lang.Integer petId) {
          // do your magic to fetch a pet...
          Pet pet = complexBusinessLogic.getPetById(petId);

          return new ResponseContext()
                  .status(Status.OK)
                  .entity(pet);
      }
  ```


  and the Inflector will return a `200` response code, marshalling the `Pet`
  object into the appropriate content type.


  If you do not implement your controller, the Inflector will generate sample
  data based on your model definitions.  It will honor any examples that you
  have in the definitions, assuming they are compatible with the schema you
  declared.  For example, this definition:


  ```yaml

  properties:
    street:
      type: "string"
      example: "12345 El Monte Blvd"
    city:
      type: "string"
      example: "Los Altos Hills"
    state:
      type: "string"
      example: "CA"
      minLength: 2
      maxLength: 2
    zip:
      type: "string"
      example: "94022"
  xml:
    name: "address"
  ```


  Will produce this example for a `Accept:application/json`:


  ```json

  {
    "street" : "12345 El Monte Blvd",
    "city" : "Los Altos Hills",
    "state" : "CA",
    "zip" : "94022"
  }

  ```


  and `application/yaml`:


  ```yaml

  street: "12345 El Monte Blvd"

  city: "Los Altos Hills"

  state: "CA"

  zip: "94022"

  ```


  and `application/xml`:


  ```xml

  <address>
    <street>12345 El Monte Blvd</street>
    <city>Los Altos Hills</city>
    <state>CA</state>
    <zip>94022</zip>
  </address>

  ```


  #### Payload validation


  Since your inbound and outbound payloads are defined with the Swagger schema,
  Inflector 

  can validate them at runtime.  Just enable payload validations in your
  inflector config:


  ```yaml

  validatePayloads: true

  ```


  And at start-up, Inflector will read the schema and attach the relevant
  section of it 

  to the operation.  For example, a post operation that has this as the schema
  definition:


  ```json

  {
    "Category": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    }
  }

  ```


  Will fail if the incoming body looks like this:


  ```json

  {
    "name": "Tony"
  }

  ```

  becase the required field `id` is missing.


  The same goes for responses generated by the server.  Any response code that
  you send will 

  be validated against it's corresponding schema.


  You can choose to enable this in development,

  staging, or production.


  #### Content type negotiation


  There is a pluggable framework for handling different content types.  You can
  register any processor by the following:


  ```java

  EntityProcessor myProcessor = new MyEntityProcessor();  // implements
  EntityProcessor

  EntityProcessorFactory.addProcessor(myProcessor);

  ```


  #### Development Lifecycle


  There are three modes that the Inflector supports, as configured by the
  `environment` attribute in the inflector config:

   - **development**.  In this mode, mock responses will be sent for controllers which are not implemented.  The intention
     is to allow you to quickly iterate on the implementation of the design.  In addition, missing model implementations
     are tolerated and supported.

   - **staging**.  Warning messages will be logged when starting the service for any missing controller, method, or model.

   - **production**.  The expectation is all methods and declared (manually mapped) models exist.  If they don't, it'll throw
     nasty errors and the server will not start.

  In development mode, there is a `/debug.json` page which shows implementation
  details of the inflector service.


  If your Swagger Description is unparsable, the server will throw ugly errors
  on startup and the `debug.json` page will
     give indications as to why.

  #### Samples


  You can find samples for the inflector project in the
  [Swagger-Samples](https://github.com/swagger-api/swagger-samples) repository. 
  The inflector projects start with `inflector-`
networknt/light-rest-4j: >
  A RESTful API or service framework built on top of light-4j


  [Stack Overflow](https://stackoverflow.com/questions/tagged/light-4j) |

  [Google Group](https://groups.google.com/forum/#!forum/light-4j) |

  [Gitter Chat](https://gitter.im/networknt/light-rest-4j) |

  [Subreddit](https://www.reddit.com/r/lightapi/) |

  [Youtube Channel](https://www.youtube.com/channel/UCHCRMWJVXw8iB7zKxF55Byw) |

  [Documentation](https://doc.networknt.com/style/light-rest-4j/) |

  [Contribution Guide](https://doc.networknt.com/contribute/) |


  [![Build
  Status](https://travis-ci.org/networknt/light-rest-4j.svg?branch=master)](https://travis-ci.org/networknt/light-rest-4j)
  [![codecov.io](https://codecov.io/github/networknt/light-rest-4j/coverage.svg?branch=master)](https://codecov.io/github/networknt/light-rest-4j?branch=master)


  This repository contains middleware handlers that work with either Swagger 2.0
  or OpenAPI 3.0 specification. If you are starting a brand new project, it is
  highly recommended using the OpenAPI 3.0 specification for your design. 


  To get started your first project, please visit the [getting
  started](https://doc.networknt.com/getting-started/light-rest-4j/) to walk
  through the process.


  For documentation on the handlers, please visit the [reference
  document](https://doc.networknt.com/style/light-rest-4j/).


  There are also numeric [tutorials](https://doc.networknt.com/tutorial/rest/)
  to show users how to build Restful services. 
apioo/fusio: >

  <p align="center">
      <a href="https://www.fusio-project.org/" target="_blank"><img src="https://www.fusio-project.org/img/fusio_64px.png"></a>
  </p>


  # About


  Fusio is an open source API management platform which helps to build and
  manage 

  RESTful APIs. We think that there is a huge potential in the API economy. 

  Whether you need an API to expose your business functionality, build micro 

  services, develop SPAs or Mobile-Apps. Because of this we think that Fusio is
  a 

  great tool to simplify building such APIs. More information on 

  https://www.fusio-project.org/


  # Why


  The originally idea of Fusio was to provide a tool which lets you easily build
  a

  great API beside an existing application. I.e. in case you have already a web

  application on a domain `acme.com` Fusio helps you to build the fitting API

  at `api.acme.com`. Beside this use case you can also use Fusio to build a new 

  API from scratch or use it internally i.e. for micro services.


  To build the API Fusio can connect to many different databases, message queue

  systems or internal web services. There are also many ways to integrate your

  [business
  logic](http://fusio.readthedocs.io/en/latest/development/business_logic.html)

  into the API of Fusio.


  # Features


  Fusio covers all important aspects of the API lifecycle so you can concentrate

  on building the actual business logic of your API.


  * __Versioning__  
    It is possible to define different versions of your endpoint. A concrete 
    version can be requested through the `Accept` header i.e. `application/vnd.acme.v1+json`
  * __Documentation__  
    Fusio generates automatically a documentation of the API endpoints based on 
    the provided schema definitions.
  * __Validation__  
    Fusio uses the standard JSONSchema to validate incoming request data
  * __Authorization__  
    Fusio uses OAuth2 for API authorization. Each app can be limited to scopes to 
    request only specific endpoints of the API.
  * __Analytics__  
    Fusio monitors all API activities and shows them on a dashboard so you always 
    know what is happening with your API.
  * __Monetization__  
    Fusio provides a simple payment system to charge for specific routes.
  * __Rate limiting__  
    It is possible to limit requests to a specific threshold.
  * __Specification__  
    Fusio generates different specification formats for the defined API endpoints
    i.e. OpenAPI, Swagger, RAML.
  * __Subscription__  
    Fusio contains a subscription layer which helps to build pub/sub for your API.
  * __User management__  
    Fusio provides an API where new users can login or register a new account 
    through GitHub, Google, Facebook or through normal email registration.
  * __Logging__  
    All errors which occur in your endpoint are logged and are visible at the 
    backend including all information from the request.
  * __Connection__  
    Fusio provides an [adapter](https://www.fusio-project.org/adapter) system to
    connect to external services. By default we provide the HTTP and SQL 
    connection type but there are many other types available i.e. MongoDB, Amqp, 
    Cassandra.
  * __Migration__  
    Fusio has a migration system which allows you to change the database schema
    on deployment.
  * __Testing__  
    Fusio provides an api test case wherewith you can test every endpoint 
    response without setting up a local web server.

  Basically with Fusio you only have to define the schema (request/response) of 

  your API endpoints and implement the business logic. All other aspects are 

  covered by Fusio.


  # Architecture


  The basic building block of Fusio is the concept of an action. An action is

  simply a PHP class which receives a request and returns a response. Around
  this

  action Fusio handles all common logic like Authentication, Rate-Limiting,
  Schema

  validation, Logging etc. The class has to implement the following signature:


  ```php

  <?php


  namespace App;


  use Fusio\Engine\ActionAbstract;

  use Fusio\Engine\ContextInterface;

  use Fusio\Engine\ParametersInterface;

  use Fusio\Engine\RequestInterface;


  class HelloWorld extends ActionAbstract

  {
      public function handle(RequestInterface $request, ParametersInterface $configuration, ContextInterface $context)
      {
          return $this->response->build(200, [], [
              'hello' => 'world',
          ]);
      }
  }

  ```


  To give you a first overview, every request which arrives at such an action
  goes

  through the following lifecycle:


  ![Request_Flow](https://github.com/apioo/fusio/blob/master/doc/_static/request_flow.png)


  Fusio tries to assign the incoming request to a fitting route. The route 

  contains all schema information about the incoming request and outgoing 

  responses. Those schemas are also used at the documentation which is 

  automatically available. If a request schema was provided the incoming
  request 

  body gets validated after this schema. In case everything is ok the action 

  which is assigned to the route gets executed.


  An action represents the code which handles an incoming request and produces
  a 

  response. Each action can use connections to accomplish this task. A
  connection 

  uses a library which helps to work with a remote service. I.e. the SQL 

  connection uses the Doctrine DBAL library to work with a database (it returns

  a `Doctrine\DBAL\Connection` instance). A connection always returns a fully 

  configured object so you never have to deal with any credentials in an
  action. 

  There are already many different actions available which you can use i.e. to

  create an API based on a database table.


  With Fusio we want to remove as many layers as possible so that you can work

  in your action directly with a specific library. Because of this Fusio has no 

  model or entity system like many other frameworks, instead we recommend to
  write

  plain SQL in case you work with a relational database. We think that building
  API 

  endpoints based on models/entities limits the way how you would design a 

  response. You only need to describe the request and response in the JSON
  schema 

  format. This schema is then the contract of your API endpoint, how you
  produce 

  this response technically is secondary. Fusio provides the mentioned 

  connections, which help you to create complete customized responses based on 

  complicated SQL queries, message queue inserts or multiple remote HTTP calls.


  # Development


  Fusio provides two ways to develop an API. The first way is to build API 

  endpoints only through the backend interface by using all available actions.

  Through this you can solve already many tasks especially through the usage of

  the [PHP-Sandbox](https://www.fusio-project.org/documentation/php) or

  [V8-Processor](https://www.fusio-project.org/documentation/v8) action.


  The other way is to use the deploy mechanism. Through this you can use normal

  PHP files to implement your business logic and thus you can use the complete
  PHP 

  ecosystem. Therefor you need to define a `.fusio.yml` 

  [deploy file](https://fusio.readthedocs.io/en/latest/development/deploy.html)

  which specifies the available routes and actions of the system. This file can
  be

  deployed with the following command:


  ```

  php bin/fusio deploy

  ```


  The action of each route contains the source which handles the business
  logic. 

  This can be i.e. a php class, a simple php file or a url. More information in

  the [development doc](DEVELOPMENT.md). In the following an example action to

  build an API response from a database:


  ```php

  <?php


  namespace App\Todo;


  use Fusio\Engine\ActionAbstract;

  use Fusio\Engine\ContextInterface;

  use Fusio\Engine\ParametersInterface;

  use Fusio\Engine\RequestInterface;


  class Collection extends ActionAbstract

  {
      public function handle(RequestInterface $request, ParametersInterface $configuration, ContextInterface $context)
      {
          /** @var \Doctrine\DBAL\Connection $connection */
          $connection = $this->connector->getConnection('System');

          $count   = $connection->fetchColumn('SELECT COUNT(*) FROM app_todo');
          $entries = $connection->fetchAll('SELECT * FROM app_todo WHERE status = 1 ORDER BY insertDate DESC LIMIT 16');

          return $this->response->build(200, [], [
              'totalResults' => $count,
              'entry' => $entries,
          ]);
      }
  }


  ```


  In the code we get the `System` connection which returns a

  `\Doctrine\DBAL\Connection` instance but we have already 

  [many adapters](https://www.fusio-project.org/adapter) to connect to
  different 

  services. Then we simply fire some queries and return the response.


  ## Code-Generation


  Fusio can be used in a lot of use cases. If you build an API based on entities

  which should be stored in a relational database you can use our code generator

  to simply build all routes, schemas and actions based on a simple YAML

  definition. The code can be used as great starting point to rapidly build your

  API. The tool is available at: https://generate.apioo.de/


  # Backend


  Fusio provides several apps which work with the internal backend API. These
  apps

  can be used to manage and work with the API. This section gives a high level 

  overview what the Fusio system provides and how the application is
  structured. 

  Lets take a look at the components which are provided by Fusio:


  ![Overview](https://github.com/apioo/fusio/blob/master/doc/_static/overview.png)


  ## API


  If you install a Fusio system it setups the default API. Through the API it
  is 

  possible to manage the complete system. Because of that Fusio has some
  reserved 

  paths which are needed by the system.


  * `/backend`  
    Endpoints for the system configuration
  * `/consumer`  
    Endpoints for the consumer i.e. register new accounts or create new apps 
  * `/doc`  
    Endpoints for the documentation
  * `/authorization`  
    Endpoints for the consumer to get i.e. information about the user itself and 
    to revoke an obtained access token
  * `/export`  
    Endpoints to export the documentation into other formats i.e. swagger

  There is also a complete
  [documentation](http://demo.fusio-project.org/internal/#!/page/about)

  about all internal API endpoints.


  # Apps


  The following apps are working with the Fusio API. Beside the standard apps

  which are shipped with Fusio we have also a [dedicated
  page](https://www.fusio-project.org/apps)

  on our website which lists available apps for Fusio.


  ## Backend


  ![Backend](https://github.com/apioo/fusio/blob/master/doc/_static/backend.png)


  The backend app is the app where the administrator can configure the system.
  The

  app is located at `/fusio/`.


  ## Developer


  ![Developer](https://github.com/apioo/fusio/blob/master/doc/_static/developer.png)


  The developer app is designed to quickly setup an API program where new 

  developers can register and create/manage their apps. The app is located at 

  `/developer/`.


  ## Documentation


  ![Documentation](https://github.com/apioo/fusio/blob/master/doc/_static/documentation.png)


  The documentation app simply provides an overview of all available endpoints. 

  It is possible to export the API definition into other schema formats like
  i.e. 

  Swagger. The app is located at `/documentation/`.


  ## Swagger-UI


  ![Swagger-UI](https://github.com/apioo/fusio/blob/master/doc/_static/swagger-ui.png)


  The [swagger-ui](https://github.com/swagger-api/swagger-ui) app renders a 

  documentation based on the OpenAPI specification. The app is located at 

  `/swagger-ui/`.


  # Installation


  It is possible to install Fusio either through composer or manually file 

  download. Place the project into the www directory of the web server.


  ## Composer


  ```

  composer create-project fusio/fusio

  ```


  ## Download


  https://github.com/apioo/fusio/releases


  ## Configuration


  You can either manually install Fusio with the steps below or you can also use

  the browser based installer at `public/install.php`. Note because of security

  reasons it is highly recommended to remove the installer script after the

  installation.


  * __Adjust the configuration file__  
    Open the file `.env` in the Fusio directory and change the key 
    `FUSIO_URL` to the domain pointing to the public folder. Also insert the 
    database credentials to the `FUSIO_DB_*` keys.
  * __Execute the installation command__  
    The installation script inserts the Fusio database schema into the provided 
    database. It can be executed with the following command 
    `php bin/fusio install`.
  * __Create administrator user__  
    After the installation is complete you have to create a new administrator 
    account. Therefor you can use the following command `php bin/fusio adduser`. 
    Choose as account type "Administrator".

  You can verify the installation by visiting the `FUSIO_URL` with a browser.
  You

  should see a API response that the installation was successful. The backend is

  available at `/fusio/`.


  In case you want to install Fusio on a specific database you need to adjust
  the

  `driver` parameter at the `configuration.php` file:


  * `pdo_mysql`: MySQL

  * `pdo_sqlite`: SQLite

  * `pdo_pgsql`: PostgreSQL

  * `sqlsrv`: Microsoft SQL Server

  * `oci8`: Oracle

  * `sqlanywhere`: SAP Sybase SQL Anywhere


  ## Docker


  Alternatively it is also possible to setup a Fusio system through docker. This

  has the advantage that you automatically get a complete running Fusio system

  without configuration. This is especially great for testing and evaluation.
  To 

  setup the container you have to checkout the
  [repository](https://github.com/apioo/fusio-docker) 

  and run the following command:


  ```

  docker-compose up -d

  ```


  This builds the Fusio system with a predefined backend account. The
  credentials 

  are taken from the env variables `FUSIO_BACKEND_USER`, `FUSIO_BACKEND_EMAIL` 

  and `FUSIO_BACKEND_PW` in the `docker-compose.yml`. If you are planing to run 

  the container on the internet you must change these credentials.


  # Documentation


  Here we list all available documentation resources. If these resources dont

  answer your questions or you want to provide feedback feel free to create an

  issue on GitHub.


  * [Getting started](https://www.fusio-project.org/bootstrap)  

  * [Manual](https://fusio.readthedocs.io/en/latest/) 

  * [Recipes](https://www.fusio-project.org/documentation/recipes) 

  * [Videos](https://www.fusio-project.org/documentation/videos)

  * [Backend API](http://demo.fusio-project.org/internal/#!/page/about)

  * [PHP API](https://www.fusio-project.org/documentation/php)


  # Use cases


  Today there are many use cases where you need a great documented REST API. In 

  the following we list the most popular choices where Fusio comes in to play.


  ## Business functionality


  Exposing an API of your business functionality is a great way to extend your 

  product. You enable customers to integrate it into other applications which

  gives the possibility to open up for new markets. With Fusio you can build
  such 

  APIs and integrate them seamlessly into your product. We also see many
  companies

  which use the API itself as the core product.


  ## Micro services


  With Fusio you can simply build small micro services which solve a specific
  task

  in a complex system.


  ## Javascript applications


  Javascript frameworks like i.e. AngularJS or EmberJS becoming the standard.
  With

  Fusio you can easily build a backend for such applications. So you dont have
  to

  build the backend part by yourself.


  ## Mobile apps


  Almost all mobile apps need some form to interact with a remote service. This
  is

  mostly done through REST APIs. With Fusio you can easily build such APIs
  which 

  then can also be used by other applications.


  # Contribution


  Contributions to the project are always appreciated. There are many options

  available to improve the project (which is not limited to coding). The
  following

  list shows some ways how you can participate:


  ## Developing


  If you are a PHP or Javascript developer you can help to improve the system. 

  If you want to create a new feature it is in general recommended to create a
  new

  issue where we can talk about the feature before you start to hack on it. So

  there are three main components of Fusio:


  **[Backend-API](https://github.com/apioo/fusio-impl)**


  The backend API is the core of the system developed in PHP, which provides the

  basic functionality of Fusio. This is the place to develop new core features
  and 

  improvements.


  **[Adapter](https://www.fusio-project.org/adapter)**


  An adapter is a plugin to the Fusio system which can be used to connect to
  other

  remote services. I.e. you could create a new adapter which speaks to a
  specific

  API or other remote service. This is easy to develop since you can build it in

  a separate repository. Please use the keyword `fusio-adapter` in your

  `composer.json` file so that adapter gets listed automatically on our website.


  **[Backend-App](https://github.com/apioo/fusio-backend)**


  This is the AngularJS app which is used as GUI to control the backend. It is

  the main app to improve the Fusio backend. But you are also free to develop
  new

  apps for special use cases which talk to the internal API of Fusio.


  ## Testing


  In general we have a high PHPUnit test case coverage and also automatic 

  end-to-end AngularJS tests using protractor and selenium. Beside this it is

  always great if users checkout the current master version of the project and
  try

  to test every aspect of the system. In case you have found an issue please

  report it through the issue tracker.


  ## Documentation


  We want to create a sytem which is easy to use also by novice users. To enable

  everybody to start using Fusio we need a simple to understand documentation.

  Since we have not always the view of a novice developer please let us know
  about

  chapters which are difficult to understand or topics which are missing. You
  can

  also send us directly a pull request with an improved version. The main

  documentation of Fusio is available at
  [readthedocs](http://fusio.readthedocs.io/en/latest/).

  The documentation source is available in the `docs/` folder.


  # Support


  ## Promotion


  If you are a blogger or magazine we would be happy if you like to cover Fusio.

  Please take a look at the Media section of our [About
  Page](https://www.fusio-project.org/about)

  to download the official icon set. In case you have any questions please write

  us a message directly so we can help you to create great content.


  ## Consulting


  If you are a company or freelancer and want to get detailed information how
  you

  can use Fusio you can contact us for consulting. In the workshop we try to
  find

  the best way how you can use/integrate Fusio also we try to explain the

  functionality and answer your questions.


  ## Donations


  If this project helps you to generate revenue or in general if you like to

  support the project you can donate any amount through paypal. We like to thank

  every user who has donated to the project.


  [![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.me/fusioapi)
smartrecruiters/openapi-first: >
  # @smartrecruiters/openapi-first


  [![NPM Version][npm-image]][npm-url]

  [![NPM Downloads][downloads-image]][downloads-url]

  [![Node.js Version][node-version-image]][node-version-url]

  [![Licence][license-image]][license-url]

  [![Build][travis-image]][travis-url]


  Start your node REST app with designing API first!


  ## Is it for you?


  If you:

  - use OpenAPI Specification 3.0 to document your REST APIs written in node.js,

  - like design first approach regardign REST APIs

  - want your specification to be single source of truth of your API,

  - want to handle validation and parsing of requests query, body, content-type
  in a unified manner for all API endpoints,


  then `@smartrecruiters/openapi-first` is what you are looking for!


  This module initializes your API connect-style application with specification
  in

  [OpenAPI Specification 3.0](https://openapis.org/specification) format.


  ## How to start


  Let's say you have specification in OpenAPI Specification 3.0 in `spec.json`:


  ```javascript

  {
      "openapi": "3.0.0",
      "info": {
          "version": "1.0.0",
          "title": "Hello World API"
      },
      "paths": {
          "/hello": {
              "get": {
                  "responses": {
                      "200": {
                          "description": "Success",
                          "content": {
                              "application/json": {
                                  "schema": {
                                      "$ref": "#/components/schemas/Greeting"
                                  }
                              }
                          }
                      }
                  },
                  "x-swagger-router-controller": "greeting/hello",
                  "parameters": [
                      {
                          "in": "query",
                          "name": "name",
                          "schema": {
                              "type": "string",
                              "default": "world"
                          }
                      }
                  ]
              }
          }
      },
      "components": {
          "schemas": {
              "Greeting": {
                  "type": "object",
                  "properties": {
                      "greeting": {
                          "type": "string"
                      }
                  }
              }
          }
      }
  }

  ```


  Now you can implement connect-style middleware with "business logic" in
  `greeting/hello.js`:


  ```javascript

  module.exports = function(req, res) {
      res.status(200).json({greeting: `Hello, ${req.query.name}!`})
  }

  ```


  Now, let's make an `app.js` file:

  ```javascript

  const openApiFirst = require('@smartrecruiters/openapi-first')

  const express = require('express')


  // create express app

  const app = express()


  const spec = require('./spec.json')


  // create open api specification initializer

  const api = openApiFirst(app, spec)


  // to enable setting default values on empty query params

  api.use(require('@smartrecruiters/openapi-first/middlewares/query/defaults')())


  // to link the specification with code in 'api' directory

  api.use(require('@smartrecruiters/openapi-first/middlewares/controllers/by-property')({dir:
  __dirname}))


  app.listen(8080)


  ```


  We can now run the application:

  ```bash

  node app

  ```

  To verify it's working, let's hit the endpoint:

  ```bash

  curl localhost:8080/hello?who=world

  ```

  The response should be 200 with body:

  ```json

  {"greeting":"Hello, world!"}

  ```


  ## openapi middlewares


  You can use one of the middlewares under `@smartrecruiters/middlewares/*` or
  create your own. Such middlewares will be 

  applied to connect-style app for each operation as they are specification and
  operation aware. For instace, 

  `@smartrecruiters/middlewares/query/validate` middleware will be applied to
  any and only operation which has query 

  parameters defined, passing an Error to `next` callback when `req.query` is
  invalid. 


  Currently following middlewares are available:

  - request body validation,

  - request body parsing (e.g. form string parameters to types specified in API
  documentation)

  - setting default values on request body,

  - query parameters validation,

  - setting default query parameters values

  - removing unspecified query parameters,

  - content type validation,

  - routing to appropriate controller,

  - oauth scopes authorization,

  - error handlers (`MissingRequiredScopes`).


  ### Validation middlewares


  Middlewares for request body and query validation expects schema validators in
  order to be created.

  The recommended schema validator is
  [`@smartrecruiters/openapi-schema-validator`](https://www.npmjs.com/package/@smartrecruiters/openapi-schemas-validator)


  ### Create your own openapi middleware


  Adding your own openapi is very simple. Let's say your operation has extension

  [OpenAPI Specification 3.0 Specification
  Extension](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#specificationExtensions)
  'x-only-admin'. 

  If it is set on, this will mean that only users with admin can use this
  method.

  Assuming some preceding middleware is setting `req.user.role`, you can write a
  simple openapi middleware

  that will gather information from operation object and act accordingly:

  ```javascript

  const onlyAdminMiddleware = operation =>
      (req, res, next) => {
          if(operation['x-only-admin'] && req.user.role !== "admin") {
              res.status(403).json("Access forbidden. For this operation, you need to have admin role")
          }
          return next()
      }
  ```


  ## Contributing


  Please see our [Code of conduct](docs/CODE_OF_CONDUCT.md) and [Contributing
  guidelines](docs/CONTRIBUTING.md)


  ## License


  [MIT](LICENSE)


  [npm-image]: https://img.shields.io/npm/v/@smartrecruiters/openapi-first.svg

  [npm-url]: https://www.npmjs.com/package/@smartrecruiters/openapi-first

  [downloads-image]:
  https://img.shields.io/npm/dm/@smartrecruiters/openapi-first.svg

  [downloads-url]: https://www.npmjs.com/package/@smartrecruiters/openapi-first

  [node-version-image]:
  https://img.shields.io/node/v/@smartrecruiters/openapi-first.svg

  [node-version-url]: https://nodejs.org/en/download/

  [license-url]:
  https://github.com/smartrecruiters/openapi-first/blob/master/LICENSE

  [license-image]:
  https://img.shields.io/npm/l/@smartrecruiters/openapi-first.svg

  [travis-url]: https://travis-ci.org/smartrecruiters/openapi-first

  [travis-image]:
  https://api.travis-ci.org/smartrecruiters/openapi-first.svg?branch=master
swagger-api/swagger-core: >
  # Swagger Core <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  **NOTE:** If you're looking for Swagger Core 1.5.X and OpenAPI 2.0, please
  refer to [1.5 branch](https://github.com/swagger-api/swagger-core/tree/1.5).


  [![Build
  Status](https://img.shields.io/jenkins/s/https/jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-core-master-java-8.svg)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-core-master-java-8)


  Swagger Core is a Java implementation of the OpenAPI Specification. Current
  version supports *JAX-RS2*.


  ## Get started with Swagger Core!

  See the guide on [getting started with Swagger
  Core](https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Getting-started)
  to get started with adding Swagger to your API.


  ## See the Wiki!

  The [github wiki](https://github.com/swagger-api/swagger-core/wiki) contains
  documentation, samples, contributions, etc. Start there.


  ## Compatibility

  The OpenAPI Specification has undergone several revisions since initial
  creation in 2010.  The Swagger Core project has the following compatibilities
  with the OpenAPI Specification:


  Swagger core Version      | Release Date | OpenAPI Spec compatibility | Notes
  | Status

  ------------------------- | ------------ | -------------------------- | -----
  | ----

  2.0.8 (**current stable**)| 2019-04-24   | 3.0           | [tag
  v2.0.8](https://github.com/swagger-api/swagger-core/tree/v2.0.8) | Supported

  2.0.7                     | 2019-02-18   | 3.0           | [tag
  v2.0.7](https://github.com/swagger-api/swagger-core/tree/v2.0.7) | Supported

  2.0.6                     | 2018-11-27   | 3.0           | [tag
  v2.0.6](https://github.com/swagger-api/swagger-core/tree/v2.0.6) | Supported

  2.0.5                     | 2018-09-19   | 3.0           | [tag
  v2.0.5](https://github.com/swagger-api/swagger-core/tree/v2.0.5) | Supported

  2.0.4                     | 2018-09-05   | 3.0           | [tag
  v2.0.4](https://github.com/swagger-api/swagger-core/tree/v2.0.4) | Supported

  2.0.3                     | 2018-08-09   | 3.0           | [tag
  v2.0.3](https://github.com/swagger-api/swagger-core/tree/v2.0.3) | Supported

  1.5.22 (**current stable**)| 2019-02-18  | 2.0           | [tag
  v1.5.22](https://github.com/swagger-api/swagger-core/tree/v1.5.22) | Supported

  1.5.21                    | 2018-08-09  | 2.0           | [tag
  v1.5.21](https://github.com/swagger-api/swagger-core/tree/v1.5.21) | Supported

  1.5.20                    | 2018-05-23  | 2.0           | [tag
  v1.5.20](https://github.com/swagger-api/swagger-core/tree/v1.5.20) | Supported

  2.0.2                     | 2018-05-23   | 3.0           | [tag
  v2.0.2](https://github.com/swagger-api/swagger-core/tree/v2.0.2) | Supported

  2.0.1                     | 2018-04-16   | 3.0           | [tag
  v2.0.1](https://github.com/swagger-api/swagger-core/tree/v2.0.1) | Supported

  1.5.19                    | 2018-04-16  | 2.0           | [tag
  v1.5.19](https://github.com/swagger-api/swagger-core/tree/v1.5.19) | Supported

  2.0.0                     | 2018-03-20   | 3.0           | [tag
  v2.0.0](https://github.com/swagger-api/swagger-core/tree/v2.0.0) | Supported

  2.0.0-rc4                 | 2018-01-22   | 3.0           | [tag
  v2.0.0-rc4](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc4) |
  Supported

  2.0.0-rc3                 | 2017-11-21   | 3.0           | [tag
  v2.0.0-rc3](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc3) |
  Supported

  2.0.0-rc2                 | 2017-09-29   | 3.0           | [tag
  v2.0.0-rc2](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc2) |
  Supported

  2.0.0-rc1                 | 2017-08-17   | 3.0           | [tag
  v2.0.0-rc1](https://github.com/swagger-api/swagger-core/tree/v2.0.0-rc1) |
  Supported

  1.5.18                    | 2018-01-22  | 2.0           | [tag
  v1.5.18](https://github.com/swagger-api/swagger-core/tree/v1.5.18) | Supported

  1.5.17                    | 2017-11-21  | 2.0           | [tag
  v1.5.17](https://github.com/swagger-api/swagger-core/tree/v1.5.17) | Supported

  1.5.16                    | 2017-07-15   | 2.0           | [tag
  v1.5.16](https://github.com/swagger-api/swagger-core/tree/v1.5.16) | Supported

  1.3.12                    | 2014-12-23   | 1.2           | [tag
  v1.3.12](https://github.com/swagger-api/swagger-core/tree/v1.3.12) | Supported

  1.2.4                     | 2013-06-19   | 1.1           | [tag
  swagger-project_2.10.0-1.2.4](https://github.com/swagger-api/swagger-core/tree/swagger-project_2.10.0-1.2.4)
  | Deprecated

  1.0.0                     | 2011-10-16   | 1.0           | [tag
  v1.0](https://github.com/swagger-api/swagger-core/tree/v1.0) | Deprecated



  ### Change History

  If you're interested in the change history of swagger and the Swagger Core
  framework, see [here](https://github.com/swagger-api/swagger-core/releases).


  ### Prerequisites

  You need the following installed and available in your $PATH:


  * Java 8

  * Apache maven 3.0.4 or greater

  * Jackson 2.4.5 or greater



  ### To build from source (currently 2.0.9-SNAPSHOT)

  ```

  # first time building locally

  mvn -N

  ```


  Subsequent builds:

  ```

  mvn install

  ```


  This will build the modules.


  Of course if you don't want to build locally you can grab artifacts from maven
  central:


  `http://repo1.maven.org/maven2/io/swagger/`


  ## Sample Apps

  The samples have moved to [a new
  repository](https://github.com/swagger-api/swagger-samples/tree/2.0) and
  contain various integrations and configurations.



  ## License


  ```

  Copyright 2018 SmartBear Software


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at
  [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.

  ```
swagger-api/swagger-parser: >
  # Swagger Parser <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  **NOTE:** If you're looking for `swagger-parser` 1.X and OpenAPI 2.0, please
  refer to [v1 branch](https://github.com/swagger-api/swagger-parser/tree/v1)


  [![Build
  Status](https://img.shields.io/jenkins/s/https/jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-parser-v2.svg)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-parser-v2)


  ## Overview 

  This is the Swagger Parser project, which reads OpenAPI definitions into
  current Java POJOs.  It also provides a simple framework to add additional
  converters from different formats into the Swagger objects, making the entire
  toolchain available.



  ### Usage

  Using the Swagger Parser is simple.  Once included in your project, you can
  read a OpenAPI Specification from any location:


  ```java

  import io.swagger.v3.parser.OpenAPIV3Parser;

  import io.swagger.v3.oas.models.OpenAPI;


  // ... your code

    // read a swagger description from the petstore
    
    
    OpenAPI openAPI = new OpenAPIV3Parser().read("http://petstore.swagger.io/v3/openapi.json");

  ```


  You can read from a file location as well:

  ```java
    OpenAPI openAPI = new OpenAPIV3Parser().read("./path/to/openapi.yaml");

  ```



  If your OpenAPI definition is protected, you can pass headers in the request:

  ```java

  import io.swagger.v3.parser.core.models.AuthorizationValue;


  // ... your code

    // build a authorization value
    AuthorizationValue mySpecialHeader = new AuthorizationValue()
      .keyName("x-special-access")  //  the name of the authorization to pass
      .value("i-am-special")        //  the value of the authorization
      .type("header");              //  the location, as either `header` or `query`

    // or in a single constructor
    AuthorizationValue apiKey = new AuthorizationValue("api_key", "special-key", "header");
    OpenAPI openAPI = new OpenAPIV3Parser().readWithInfo(
      "http://petstore.swagger.io/v2/swagger.json",
      Arrays.asList(mySpecialHeader, apiKey)
    );
  ```


  ### Dealing with self-signed SSL certificates

  If you're dealing with self-signed SSL certificates, or those signed by
  GoDaddy, you'll need to disable SSL Trust 

  Manager.  That's done by setting a system environment variable as such:


  ```

  export TRUST_ALL=true

  ```


  And then the Swagger Parser will _ignore_ invalid certificates.  Of course
  this is generally a bad idea, but if you're 

  working inside a firewall or really know what you're doing, well, there's your
  rope.


  ### Dealing with Let's Encrypt

  Depending on the version of Java that you use, certificates signed by the
  [Let's Encrypt](https://letsencrypt.org) certificate authority _may not work_
  by default.  If you are using any version of Java prior to 1.8u101, you most
  likely _must_ install an additional CA in your

  JVM.  Also note that 1.8u101 may _not_ be sufficient on it's own.  Some users
  have reported that certain operating systems are 

  not accepting Let's Encrypt signed certificates.


  Your options include:


  * Accepting all certificates per above

  * Installing the certificate manually in your JVM using the keystore using the
  `keytool` command

  * Configuring the JVM on startup to load your certificate


  But... this is all standard SSL configuration stuff and is well documented
  across the web.


  ### Prerequisites

  You need the following installed and available in your $PATH:


  * [Java 1.8](http://java.oracle.com)

  * [Apache maven 3.x](http://maven.apache.org/)


  After cloning the project, you can build it from source with this command:


  ```

  mvn package

  ```


  ### Extensions

  This project has a core artifact--`swagger-parser`, which uses Java Service
  Provider Inteface (SPI) so additional extensions can be added. 


  To build your own extension, you simply need to create a
  `src/main/resources/META-INF/services/io.swagger.parser.SwaggerParserExtension`
  file with the full classname of your implementation.  Your class must also
  implement the `io.swagger.parser.SwaggerParserExtension` interface.  Then,
  including your library with the `swagger-parser` module will cause it to be
  triggered automatically.


  ### Adding to your project

  You can include this library from Sonatype OSS for SNAPSHOTS, or Maven central
  for releases.  In your dependencies:


  ```xml

  <dependency>
    <groupId>io.swagger.parser.v3</groupId>
    <artifactId>swagger-parser</artifactId>
    <version>2.0.12</version>
  </dependency>

  ```



  License

  -------


  Copyright 2018 SmartBear Software


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at
  [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.


  ---
BigstickCarpet/swagger-cli: >
  Swagger/OpenAPI CLI

  ============================


  [![Cross-Platform
  Compatibility](https://apidevtools.org/img/os-badges.svg)](https://travis-ci.com/APIDevTools/swagger-cli)

  [![Build
  Status](https://api.travis-ci.com/APIDevTools/swagger-cli.svg?branch=master)](https://travis-ci.com/APIDevTools/swagger-cli)

  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-cli/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-cli?branch=master)



  [![npm](https://img.shields.io/npm/v/swagger-cli.svg)](https://www.npmjs.com/package/swagger-cli)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-cli.svg)](https://david-dm.org/APIDevTools/swagger-cli)

  [![License](https://img.shields.io/npm/l/swagger-cli.svg)](LICENSE)



  Features

  --------------------------

  - Validate Swagger/OpenAPI files in **JSON or YAML** format

  - Supports multi-file API definitions via `$ref` pointers

  - Bundle multiple Swagger/OpenAPI files into one combined file



  Related Projects

  --------------------------

  - [Swagger Parser](https://github.com/APIDevTools/swagger-parser)

  - [Swagger Express
  Middleware](https://github.com/APIDevTools/swagger-express-middleware)



  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/getting-started/what-is-npm):


  ```bash

  npm install -g swagger-cli

  ```



  Usage

  --------------------------


  ```

  swagger-cli <command> [options] <file>


  Commands:
      validate                Validates an API definition in Swagger 2.0 or OpenAPI 3.0 format

      bundle                  Bundles a multi-file API definition into a single file

  Options:
      -h, --help              Show help for any command
      -v, --version           Output the CLI version number
      -d, --debug [filter]    Show debug output, optionally filtered (e.g. "*", "swagger:*", etc.)
  ```



  ### Validate an API


  The `swagger-cli validate` command will validate your Swagger/OpenAPI
  definition against the [Swagger 2.0
  schema](https://github.com/reverb/swagger-spec/blob/master/schemas/v2.0/schema.json)
  or [OpenAPI 3.0
  Schema](https://github.com/kogosoftwarellc/open-api/blob/master/packages/openapi-schema-validation/schema/openapi-3.0.json). 
  It also performs additional validations against the
  [specification](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md),
  which will catch some things that aren't covered by the schema, such as
  duplicate parameters, invalid MIME types, etc.


  The command will exit with a non-zero code if the API is invalid.


  ```

  swagger-cli validate [options] <file>


  Options:
      --no-schema             Do NOT validate against the Swagger/OpenAPI JSON schema

      --no-spec               Do NOT validate against the Swagger/OpenAPI specification
  ```


  #### Git pre-commit hook


  There is a useful Python tool called [pre-commit](https://pre-commit.com/)
  that can be used to execute a wide suite of pre-commit checks. The
  `swagger-cli validate` command can be integrated as part of a git pre-commit
  hook by adding the following configuration to the `repos` entry of an existing
  `.pre-commit-config.yaml` file.


  ```

  -   repo: https://github.com/APIDevTools/swagger-cli
      rev: v2.2.1
      hooks:
      - id: swagger-validation
        args: ["validate", "<path to root swagger>"]
  ```


  The intention is to point to single root swagger that references multiple
  swagger definitions. The above hook will execute the `swagger-cli validation`
  against the root swagger anytime that a file matching the pattern
  `.*swagger.*\.(json|yaml|yml)` is modified. Any failures in this validation
  will prevent the git commit from being processed. 


  ### Combine Multiple Files


  The Swagger and OpenAPI specs allows you to split your API definition across
  multiple files using [`$ref`
  pointers](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#reference-object)
  to reference each file. You can use the `swagger-cli bundle` command to
  combine all of those referenced files into a single file, which is useful for
  distribution or interoperation with other tools.


  By default, the `swagger-cli bundle` command tries to keep the output file
  size as small as possible, by only embedding each referenced file _once_.  If
  the same file is referenced multiple times, then any subsequent references are
  simply modified to point to the _single_ inlined copy of the file.  If you
  want to produce a bundled file without _any_ `$ref` pointers, then add the
  `--dereference` option.  This will result in a larger file size, since
  multiple references to the same file will result in that file being embedded
  multiple times.


  If you don't specify the `--output-file` option, then the bundled API will be
  written to stdout, which means you can pipe it to other commands.


  The result of this method by default is written as JSON. It can be changed to
  YAML with the `--type` option, by passing the `yaml` value.


  ```

  swagger-cli bundle [options] <file>


  Options:
      -o, --outfile <file>        The output file

      -r, --dereference           Fully dereference all $ref pointers

      -f, --format <spaces>       Formats the output using the given number of spaces
                                  (the default is 2 spaces)

      -t, --type <filetype>       Defines the output file type. The valid values are: json, yaml
                                  (the default is JSON)

      -w, --wrap <column>         Set the line length for YAML strings
                                  (the default is no wrapping)
  ```



  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an
  issue](https://github.com/APIDevTools/swagger-cli/issues) on GitHub and
  [submit a pull request](https://github.com/APIDevTools/swagger-cli/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-cli.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`



  License

  --------------------------

  Swagger CLI is 100% free and open-source, under the [MIT license](LICENSE).
  Use it however you want.


  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jsdevtools.org/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jsdevtools.org/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jsdevtools.org/img/badges/coveralls.svg)](https://coveralls.io)
RepreZen/KaiZen-OpenApi-Parser: >
  <img
  src="https://cdn2.hubspot.net/hubfs/597611/Assets_Swagger/KaiZen%20OpenAPI%20Parser%20Logo%20(medium).png"
  height="50%" width="50%" alt="KaiZen OpenAPI Parser Logo" />


  # KaiZen OpenAPI Parser


  ## Overview ##


  The KaiZen OpenApi Parser from RepreZen is a Java-based validating

  parser for OpenAPI 3.0 offering full compliance with the

  [OpenAPI 3.0
  Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md),

  and a highly uniform read/write programming API.

  [OpenAPI](http://openapis.org), formerly known as the Swagger

  specification, is the industry-standard format for machine-readable

  REST API descriptions.


  Feature highlights of KaiZen OpenAPI Parser include:

  * **High Performance** - Informal testing shows a 3x-4x performance
    improvement over the current Java Swagger 2.0 parser. This is
    largely attributable to a design based on adapting Jackson
    `JsonNode` objects, rather than deserializing to internal POJOs.
    
  * **Read/Write API** - All aspects of a model may be interrogated and
    modified. We also plan to provide fluent builders for all
    model object types. We provide bidirectional navigation throughout the
    model, and every object that is a property value of its containing
    object (whether as a named field or a map entry) knows its own name.
    
  * **Tolerant Reader** - The parser yields a fully accessible result
    from any valid JSON or YAML input - whether or not the input is a
    valid OpenAPI specification.
    
  * **Separate validation** - All validation beyond basic
    JSON/YAML parsing is performed after the initial parse, and it can
    be disabled for speed. Validation goes beyond checking what can be
    expressed in JSON Schema, to include all requirements described in
    the OpenAPI specification.

  * **Serialization** - Serialization to JSON or YAML is supported, and
    by default, round-tripping will not cause any reordering of model
    content.
    
  * **Easy Evolution** - A YAML-based DSL is used to capture most of the
    details of the OpenAPI Specification. We use code generation to
    create interfaces and implementation classes. Member-level
    `@Generated` annotations make it possible to augment the generated
    sources with manual code that is preserved during re-generation.
    
  * **Flexible Reference Handling** - All references are detected and
    during parsing, including references not technically permitted by
    the OpenAPI specification. References are normally traversed 
    automatically by the API, but full details of references and 
    their resolution status are also available.
    
  * **Unpolluted API** - Many features of the parser API are not directly
    accessible from modeled objects, but are accessed via adapter objects.
    This ensures that these features will not collide with generated
    methods of the model API, even as new features are added to the
    OpenAPI specification in the future.
      
  ## Documentation


  The [Getting Started Guide](GettingStarted.md) shows how to build the 

  software locally, and contains a simple sample program that shows how 

  to use the parser.


  The [API Overview](API-Overview.md) describes the APIs presented in

  the project, including the parser, the serializer, the read/write

  model, and the treatment of references.


  ## Who's using KaiZen Parser?


  Here's a starting list of projects that are currently using KaiZen OpenAPI
  Parser. If you don't see your project here, please open an issue or pull
  request to add it:


  | Project Link | Description |

  | --- | --- | 

  | [Eclipse Vert.x](http://vertx.io/) | Eclipse Vert.x is a tool-kit for
  building reactive applications on the JVM. | 

  | [Light-rest-4j](https://github.com/networknt/light-rest-4j) | Light-4j
  RESTful framework for building fast, lightweight microservices on the JVM. | 

  | [RepreZen API Studio](http://reprezen.com/OpenAPI) | RepreZen API Studio is
  an integrated workbench for API design, documentation and development, built
  on the Eclipse platform. | 



  ## Current State


  * The parser is currently based on the pre-release [revision
  3.0.0-rc0](https://github.com/OAI/OpenAPI-Specification/blob/d232e6d3e1ea4038a533329a82876ae868e9cf13/versions/3.0.md).
  We are nearly ready with an upgrade to the [3.0.2 draft
  revision](https://github.com/OAI/OpenAPI-Specification/blob/v3.0.2-dev/versions/3.0.2.md).


  * The [JsonOverlay Project](https://github.com/RepreZen/JsonOverlay) is a
  framework for creating parsers and APIs for YAML/JSON based DSLs. It is the
  backbone of the KaiZen OpenApi Parser. Features that that it provides include:
   
    * Read-Write API for all model objects, based on a YAML document that describes the OpenAPI model structure
    * Factories for model objects (used internally, but not currently well exposed to user code; that will change shortly)
    * Full handling of all references.
    * Serialization, reference inspection, navigation, and numerous other features via its `Overlay` adapter classes.
    * Position-aware parser providing URL, line and file number for all parsed objects, available through `Overlay` adapters and used by the KaiZen parser in its validation messages.

  * Validations are currently all contained within this project, however many
  routine validations (e.g. validating proper JSON types throughout a model
  document, checking that required properties are present, etc.) will at some
  point be moved into the JsonOverlay project.


  * Most validations are present, but there are a number that are currently
  missing, and some existing validations still reflect the OpenAPI specification
  in its pre-release revision 3.0.0-rc0. Work is underway on Issue
  #26](https://github.com/RepreZen/KaiZen-OpenApi-Parser/issues/26), which
  should result in a complete and robust implementation of all model
  validations, updated to the 3.0.2 revision (currently in draft status).


  * Serialization is available via the `Overlay` adapter's `toJson` method. By
  default references appear in the serialized output, but an option causes
  references to be followed and inlined in the output. Recursive references
  cause serialization to blow up if this option is used.
    - A separate component, called "OpenAPI Normalizer," will soon be made available that will provide much greater control over the treatment of references. This is currently a private feature embedded in [RepreZen API Studio](https://www.reprezen.com/). Its primary function is to turn an OpenAPI model spread across multiple files into an equivalent single-file model. Options control which references are inlined, and which are _localized_ as named component objects in the constructed single-file model.
    
  * A handful of high-level tests have been implemented:
    - *BigParseTest* parses a large model without validation and checks
      that every value node in the input is accessible in the expected
      fashion in the resulting model object.
    - *ExamplesTest* - Parses and validates all example models currently
      in the the `OAI/OpenAPI-Specification` GitHub repo.

      Many more tests are required!

  * Few JavaDocs exist at present, unfortunately. There's an open issue
    to correct that.

  ### Packages


  _Some of these packages are likely to be refactored out into separate

  component Maven projects._


  All packages are prefixed by `com.reprezen.kaizen`


  * `oasparser`: Top-level package, directly includes
    `OpenApiParser` class and some things related to code generation.
    
  * `oasparser.model3`: Generated model interfaces (generated by JsonOverlay)


  * `oasparser.ovl3`: Generated model implementation classes (generated by
  JsonOverlay)


  * `oasparser.val`: Base classes for validators


  * `oasparser.val3`: Validators for all OpenAPI objects.


  * `oasparser.test`: The handful of tests that have been
    implemented so far. More needed


  ## License

  KaiZen OpenAPI Parser is provided under the Eclipse Public License
  (https://www.eclipse.org/legal/epl-v10.html)


  ## Contributing


  We welcome serious contributors. However, we are at an early and

  fast-changing phase in this project, so we recommend coordinating

  with us before diving into a juicy bit of coding. This might spare 

  you the frustration of finding that some sweeping low-level change

  has rendered your efforts unusable.


  If you would like to work with us, please drop us a line at

  API.Community@RepreZen.com, or open a new issue if you have

  a suggestion or want to report a bug or omission.


  ## Resources

  * Blog Post: [Introducing KaiZen OpenAPI 3.0 Parser: fast, flexible Java
  parsing &
  validation](http://www.reprezen.com/blog/kaizen-openapi-3_0-parser-swagger-java-open-source)

  * [Getting Started Guide](GettingStarted.md)

  * [API Overview](API-Overview.md)
networknt/openapi-parser: >-
  # openapi-parser


  A light-weight, fast OpenAPI 3.0 parser and validator with minimum third party
  dependencies. 


  [Stack Overflow](https://stackoverflow.com/questions/tagged/light-4j) |

  [Google Group](https://groups.google.com/forum/#!forum/light-4j) |

  [Gitter Chat](https://gitter.im/networknt/light-rest-4j) |

  [Subreddit](https://www.reddit.com/r/lightapi/) |

  [Youtube Channel](https://www.youtube.com/channel/UCHCRMWJVXw8iB7zKxF55Byw) |

  [Documentation](https://doc.networknt.com/library/openapi-parser/) |

  [Contribution Guide](https://doc.networknt.com/contribute/) |


  It is based on the generated code from [KaiZen OpenAPI
  Parser](https://github.com/RepreZen/KaiZen-OpenApi-Parser) without

  dependency on javaparser-core, guava, commons-cli, commons-io, javax.mail and
  guice. 


  ### License


  The OpenAPI Parser is provided under the Eclipse Public License 1.0 following
  the parent [KaiZen OpenAPI
  Parser](https://github.com/RepreZen/KaiZen-OpenApi-Parser)
metadevpro/openapi3-ts: >
  # OpenApi3-TS


  TypeScript library to help building OpenAPI 3.0.x compliant API contracts.


  [![Build
  Status](https://travis-ci.org/metadevpro/openapi3-ts.svg?branch=master)](https://travis-ci.org/metadevpro/openapi3-ts)

  [![Coverage
  Status](https://coveralls.io/repos/github/metadevpro/openapi3-ts/badge.svg?branch=master)](https://coveralls.io/github/metadevpro/openapi3-ts?branch=master)

  [![Dependency
  Status](https://david-dm.org/metadevpro/openapi3-ts.svg)](https://david-dm.org/metadevpro/openapi3-ts)

  [![Known
  Vulnerabilities](https://snyk.io/test/github/metadevpro/openapi3-ts/badge.svg)](https://snyk.io/test/github/metadevpro/openapi3-ts)

  [![npm
  version](https://badge.fury.io/js/openapi3-ts.svg)](http://badge.fury.io/js/openapi3-ts)

  [![Greenkeeper
  badge](https://badges.greenkeeper.io/metadevpro/openapi3-ts.svg)](https://greenkeeper.io/)


  [![NPM](https://nodei.co/npm/openapi3-ts.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/openapi3-ts/)



  ## Includes


  * `/src/model` TS typed interfaces for helping building a contract.

  * `/src/dsl` Fluent DSL for building a contract.


  ## Install

  Install package via **npm**:


  ```

  npm i --save openapi3-ts

  ```


  ## References


  * OpenAPI spec 3.0.1.
  [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md)


  ## License

  Licensed under the MIT License.


  ## Credits

  **Contact:** Pedro J. Molina | github: [pjmolina](https://github.com/pjmolina)
  | twitter: [pmolinam](https://twitter.com/pmolinam)


  (c) 2017-2019. [Pedro J. Molina](http://pjmolina.com) at Metadev S.L.
  [https://metadev.pro](https://metadev.pro) & contributors.
Apicurio/oai-ts-core: >
  [![CircleCI](https://circleci.com/gh/Apicurio/oai-ts-core.svg?style=svg)](https://circleci.com/gh/Apicurio/oai-ts-core)


  # OpenAPI Core Library (Typescript)


  ## What is it?

  This project is a library, written in Typescript, to read and manipulate
  [OpenAPI](https://www.openapis.org/) 

  specification documents.


  You can use this library to read an OpenAPI document, resulting in an instance
  of a data 

  model. The data model can then be read or manipulated. It can also be
  validated.


  The data model can be accessed directly, but there is also a robust visitor
  pattern 

  available for more advanced analysis or transformation of the model.


  This project is licensed under the [Apache License 2.0](LICENSE).


  ## Usage

  For details on how to use the library, see the documentation included with the
  library on

  npmjs.com:

    [https://www.npmjs.com/package/oai-ts-core](https://www.npmjs.com/package/oai-ts-core)

  This documentation can also be found in this repository here:

    [./module/README.md](https://github.com/Apicurio/oai-ts-core/blob/master/module/README.md)

  ## Project Goals


  ### Purpose

  The primary goal of this project is to be the official library to perform
  client operations on

  OpenAPI documents.  Both for the purpose of analyzing/processing (including
  validation) a document 

  as well as making changes to it.


  The library should be usable as broadly as possible, both as a dependency of
  other Typescript or

  Javascript projects, as well as usable directly within a browser (via a simple
  import).


  ### Usage Scenarios

  Some example usage scenarios for this library include:
   
  * An editor which can be used to create new OpenAPI documents (or modify
  existing ones).

  * Auto-generate documentation from an OpenAPI document.

  * Transform OpenAPI documents into other versions/formats.

  * Auto-generate API clients based on OpenAPI documents.


  ### Dependencies

  An important design decision is that this project does not have any runtime
  dependencies.  This

  means that you can use the library directly in the browser without including
  any other libraries.

  It also means you can use the project as a dependency in your projects without
  worrying about 

  conflicts or dependency bloat.


  ## Project Status

  Currently, the data model fully supports versions 2.0 and 3.0.x of the OpenAPI
  spec.  Barring oversights

  or bugs, the full OpenAPI document can be read and written successfully.  In
  addition, the visitor

  pattern has been fully implemented (along with both up and down traversing).


  Validation of the OpenAPI specification exists, with almost all of the rules
  outlined in the

  spec having been implemented.


  Please refer to the github repository's Issues and other resources for more
  information on the

  current status of the project.


  ## OpenAPI Versions

  One of the design goals of this library is to simultaneously support multiple
  versions of the OpenAPI

  specification.  At the time of this writing, there are two versions of the
  OpenAPI specification:


  * [OpenAPI Version
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)

  * [OpenAPI Version
  3.0.1](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md)


  Both of these versions are supported by the library.  As new versions of the
  specification are 

  released, the library will be updated to include support for them.


  ## Building the Library

  This section explains how to build, package, test, and publish the library. 
  If you are a developer

  looking to make changes, this is a great place to start.


  ### Pre-Requisites

  In order to do any work with the library you will need to install node.js.  As
  of the time of this

  writing, the versions of node, npm. and yarn used were:


  ```

  $ node -v

  v8.11.4

  $ npm -v

  5.6.0

  $ yarn --version

  1.13.0

  ```


  Make sure you download and install node/npm/yarn of at least the above
  versions.


  ### Clone and Configure

  The first thing to do (obviously) is clone the repository.  Once you've cloned
  the git repository,

  you must use yarn (or npm) to install all of the library's dependencies.  It
  is worth noting that the library

  does not have any runtime dependencies, but it has several *build*
  dependencies (including typescript,

  karma, jasmine, etc).  The following commands should help clone and configure:


  ```

  git clone https://github.com/Apicurio/oai-ts-core.git

  cd oai-ts-core

  yarn install

  ```


  The result of this should be a number of dependencies downloaded and stored in
  a new `node_modules`

  directory.



  ### Test the Library

  This library uses jasmine+karma for unit testing.  Give it a try by doing
  this:


  ```

  yarn test

  ```


  You should see a number of unit tests get executed (you may need Google Chrome
  installed for

  this to work).  They should all succeed and you should see a report at the end
  which looks 

  something like this (trimmed for brevity):


  ```

  SUMMARY
   0: Chrome 58.0.3029 (Windows 10 0.0.0): Executed 136 of 136 (1 FAILED) (1.207 secs / 0.7 secs)
                                                     all   0
    Empty Document Test (2.0)
      Document not null                               ✓    ✓
      Document with core meta-data                    ✓    ✓
      Document with external docs                     ✓    ✓
      Document with simple info                       ✓    ✓
      Document with full info                         ✓    ✓
  ...SNIP....
      Mutually Exclusive (All)                        ✓    ✓ 
      Invalid Reference (All)                         ✓    ✓ 

  =============================== Coverage summary
  ===============================

  Statements   : 85.4% ( 5195/6083 )

  Branches     : 72.27% ( 928/1284 )

  Functions    : 73.21% ( 1093/1493 )

  Lines        : 86.09% ( 4691/5449 )

  ================================================================================

  ```


  ### Releasing a New Version

  Once changes have been made and finalized, you're probably going to release a
  new version

  of the library.  This is done by packaging the library into an npm compatible
  package and

  releasing it (into npmjs.com).


  #### Modify the Version

  The first step is to increase the project's version number.  This can be done
  by modifing

  the `package.json` file:


  ```json

  {
    "name": "oai-ts-core",
    "version": "0.2.4",
    "description": "A library to read and write OpenAPI documents.",
    "license": "Apache-2.0"
  }

  ```


  Simply edit the `version` property, giving it the next logical value.  If the
  change is minor,

  then modify the patch version.  If it's a more significant release, then
  modifying the major

  or minor number may be appropriate.


  #### Create the Package

  Next, create the package (intended for release) by using yarn.  The command to
  create the 

  package is below:


  ```

  yarn run package

  ```


  This command will result in a new `dist` directory being created.  Within this
  directory

  you will find a number of files, all of which must be uploaded to npmjs.com as
  the new 

  release of the library.


  #### Publish to npmjs.com

  Once everything has been packaged, you can simply use yarn/npm to publish the
  result into

  npmjs.com:


  ```

  yarn publish ./dist

  ```


  #### Tag the Release in Git

  If everything went well, you have now built, tested, packaged, and released a
  new version of

  the library into npmjs.com for other projects to use.  The final step is to
  tag the source

  code with the version that was just released.  For example, if you have just
  published version

  0.2.4 of the library, you would tag it in the repository with these commands:


  ```

  git tag -a -m 'Release 0.2.4' 0.2.4

  git push origin 0.2.4

  ```


  ## Contribute Fixes and Features

  This project is open source, and we welcome anybody who wants to participate
  and contribute!


  ### Get the code

  The easiest way to get started with the code is to [create your own
  fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:


  ```bash

  $ git clone git@github.com:<you>/oai-ts-core.git

  $ cd oai-ts-core

  $ git remote add upstream git://github.com/Apicurio/oai-ts-core.git

  ```


  At any time, you can pull changes from the upstream and merge them onto your
  master:


  ```bash

  $ git checkout master       # switches to the 'master' branch

  $ git pull upstream master  # fetches all 'upstream' changes and merges
  'upstream/master' onto your 'master' branch

  $ git push origin           # pushes all the updates to your fork, which
  should be in-sync with 'upstream'

  ```


  The general idea is to keep your 'master' branch in-sync with the
  'upstream/master'.


  ### Track Your Change

  If you want to fix a bug or make any changes, please log an issue in the
  github 

  [Issue Tracker](https://github.com/Apicurio/oai-ts-core/issues) describing the
  bug or new 

  feature. Then we highly recommend making the changes on a topic branch named
  with the issue 

  number. For example, this command creates a branch for issue #7:


  ```bash

  $ git checkout -b oai-ts-core-7

  ```


  After you're happy with your changes and all unit tests run successfully,
  commit your changes 

  on your topic branch. Then it's time to check for and pull any recent changes
  that were made in

  the official repository since you created your branch:


  ```bash

  $ git checkout master         # switches to the 'master' branch

  $ git pull upstream master    # fetches all 'upstream' changes and merges
  'upstream/master' onto your 'master' branch

  $ git checkout oai-ts-core-7  # switches to your topic branch

  $ git rebase master           # reapplies your changes on top of the latest in
  master
                                # (i.e., the latest from master will be the new base for your changes)
  ```


  If the pull grabbed a lot of changes, you should rerun the tests to make sure
  your changes are 

  still good.  You can then either [create
  patches](http://progit.org/book/ch5-2.html) (one file 

  per commit, saved in `~/oai-ts-core-7`) with:


  ```bash

  $ git format-patch -M -o ~/oai-ts-core-7 orgin/master

  ```


  and upload them to the issue, or you can push your topic branch and its
  changes into your public 

  fork repository with:


  ```bash

  $ git push origin oai-ts-core-7         # pushes your topic branch into your
  public fork

  ```


  and [generate a pull-request](http://help.github.com/pull-requests/) for your
  changes.  The latter

  is definitely the preferred mechanism for submitting changes.


  The reason we prefer pull-requests is that we can review the proposed changes,
  comment on them,

  discuss them with you, and likely merge the changes right into the official
  repository.  No muss,

  no fuss!


  Please try to create one commit per feature or fix, generally the easiest way
  to do this is 

  via [git
  squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the
  repository history with 

  checkpoint commits.
kevindew/openapi3_parser: >
  # OpenAPI 3 Parser


  [![Build
  Status](https://travis-ci.org/kevindew/openapi3_parser.svg?branch=master)](https://travis-ci.org/kevindew/openapi3_parser)



  This is a parser/validator for [Open API 3][openapi-3] built in Ruby.


  Example usage:


  ```

  require "openapi3_parser"


  document = Openapi3Parser.load_file("path/to/example.yaml")


  # check whether document is valid

  document.valid?


  # traverse document

  document.paths["/"]

  ```


  Documentation for the API to navigate the OpenAPI nodes is available on

  [rubydoc.info][docs].


  [openapi-3]: https://github.com/OAI/OpenAPI-Specification

  [docs]:
  http://www.rubydoc.info/github/kevindew/openapi3_parser/Openapi3Parser/Node/Openapi


  ## Installation


  You can install this gem into your bundler application by adding this line to

  your Gemfile:


  ```

  gem "openapi3_parser", "~> 0.5.0"

  ```


  and then running `$ bundle install`


  Or install the gem onto your machine via ` $ gem install openapi3_parser`


  ## Status


  This is currently a work in progress and will remain so until it reaches 1.0.


  See [TODO](TODO.md) for details of the roadmap there.


  ## Licence


  [MIT License](LICENCE)
getkin/kin-openapi: "[![Build Status](https://travis-ci.com/getkin/kin-openapi.svg?branch=master)](https://travis-ci.com/getkin/kin-openapi)\n[![Go Report Card](https://goreportcard.com/badge/github.com/getkin/kin-openapi)](https://goreportcard.com/report/github.com/getkin/kin-openapi)\n[![GoDoc](https://godoc.org/github.com/getkin/kin-openapi?status.svg)](https://godoc.org/github.com/getkin/kin-openapi)\n[![Join Gitter Chat Channel -](https://badges.gitter.im/getkin/kin.svg)](https://gitter.im/getkin/kin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# Introduction\nA [Go](https://golang.org) project for handling [OpenAPI](https://www.openapis.org/) files. We target the latest OpenAPI version (currently 3), but the project contains support for older OpenAPI versions too.\n\nLicensed under the [MIT License](LICENSE).\n\n## Contributors and users\nThe project has received pull requests from many people. Thanks to everyone!\n\nHere's some projects that depend on _kin-openapi_:\n  * [github.com/getkin/kin](https://github.com/getkin/kin) - \"A configurable backend\"\n  * [github.com/danielgtaylor/apisprout](https://github.com/danielgtaylor/apisprout) - \"Lightweight, blazing fast, cross-platform OpenAPI 3 mock server with validation\"\n  * [github.com/deepmap/oapi-codegen](https://github.com/deepmap/oapi-codegen) - Generate Go server boilerplate from an OpenAPI 3 spec\n  * (Feel free to add your project by [creating an issue](https://github.com/getkin/kin-openapi/issues/new) or a pull request)\n\n## Alternative projects\n  * [go-openapi](https://github.com/go-openapi)\n    * Supports OpenAPI version 2.\n  * See [this list](https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/IMPLEMENTATIONS.md).\n\n# Structure\n  * _openapi2_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi2))\n    * Support for OpenAPI 2 files, including serialization, deserialization, and validation.\n  * _openapi2conv_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi2conv))\n    * Converts OpenAPI 2 files into OpenAPI 3 files.\n  * _openapi3_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi3))\n    * Support for OpenAPI 3 files, including serialization, deserialization, and validation.\n  * _openapi3filter_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi3filter))\n    * Validates HTTP requests and responses\n  * _openapi3gen_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/openapi3gen))\n    * Generates `*openapi3.Schema` values for Go types.\n  * _pathpattern_ ([godoc](https://godoc.org/github.com/getkin/kin-openapi/pathpattern))\n    * Matches strings with OpenAPI path patterns (\"/path/{parameter}\")\n\n# Some recipes\n## Loading OpenAPI document\nUse `SwaggerLoader`, which resolves all JSON references:\n```go\nswagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromFile(\"swagger.json\")\n```\n\n## Getting OpenAPI operation that matches request\n```go\nfunc GetOperation(httpRequest *http.Request) (*openapi3.Operation, error) {\n  // Load Swagger file\n  router := openapi3filter.NewRouter().WithSwaggerFromFile(\"swagger.json\")\n\n  // Find route\n  route, _, err := router.FindRoute(\"GET\", req.URL.String())\n  if err!=nil {\n    return nil, err\n  }\n\n  // Get OpenAPI 3 operation\n  return route.Operation\n}\n```\n\n## Validating HTTP requests/responses\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/getkin/kin-openapi/openapi3filter\"\n)\n\nfunc main() {\n\trouter := openapi3filter.NewRouter().WithSwaggerFromFile(\"swagger.json\")\n\tctx := context.TODO()\n\thttpReq, _ := http.NewRequest(http.MethodGet, \"/items\", nil)\n\n\t// Find route\n\troute, pathParams, _ := router.FindRoute(httpReq.Method, httpReq.URL)\n\n\t// Validate request\n\trequestValidationInput := &openapi3filter.RequestValidationInput{\n\t\tRequest:    httpReq,\n\t\tPathParams: pathParams,\n\t\tRoute:      route,\n\t}\n\tif err := openapi3filter.ValidateRequest(ctx, requestValidationInput); err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\trespStatus      = 200\n\t\trespContentType = \"application/json\"\n\t\trespBody        = bytes.NewBufferString(`{}`)\n\t)\n\n\tlog.Println(\"Response:\", respStatus)\n\tresponseValidationInput := &openapi3filter.ResponseValidationInput{\n\t\tRequestValidationInput: requestValidationInput,\n\t\tStatus:                 respStatus,\n\t\tHeader: http.Header{\n\t\t\t\"Content-Type\": []string{\n\t\t\t\trespContentType,\n\t\t\t},\n\t\t},\n\t}\n\tif respBody != nil {\n\t\tdata, _ := json.Marshal(respBody)\n\t\tresponseValidationInput.SetBodyBytes(data)\n\t}\n\n\t// Validate response.\n\tif err := openapi3filter.ValidateResponse(ctx, responseValidationInput); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n## Custom content type for body of HTTP request/response\n\nBy default, the library parses a body of HTTP request and response\nif it has one of the next content types: `\"text/plain\"` or `\"application/json\"`.\nTo support other content types you must register decoders for them:\n\n```go\nfunc main() {\n\t// ...\n\n\t// Register a body's decoder for content type \"application/xml\".\n\topenapi3filter.RegisterBodyDecoder(\"application/xml\", xmlBodyDecoder)\n\n\t// Now you can validate HTTP request that contains a body with content type \"application/xml\".\n\trequestValidationInput := &openapi3filter.RequestValidationInput{\n\t\tRequest:    httpReq,\n\t\tPathParams: pathParams,\n\t\tRoute:      route,\n\t}\n\tif err := openapi3filter.ValidateRequest(ctx, requestValidationInput); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// ...\n\n\t// And you can validate HTTP response that contains a body with content type \"application/xml\".\n\tif err := openapi3filter.ValidateResponse(ctx, responseValidationInput); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc xmlBodyDecoder(body []byte) (interface{}, error) {\n\t// Decode body to a primitive, []inteface{}, or map[string]interface{}.\n}\n```\n"
adwhit/openapi3-rust: >
  # OpenAPIv3


  Spec:
  https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md
wework/speccy: >
  # speccy


  [![CircleCI](https://circleci.com/gh/wework/speccy.svg?style=svg)](https://circleci.com/gh/wework/speccy)

  [![Coverage
  Status](https://coveralls.io/repos/github/wework/speccy/badge.svg)](https://coveralls.io/github/wework/speccy)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/speccy/badge.svg)](https://snyk.io/test/npm/speccy)


  Make sure your OpenAPI 3.0 specifications are more than just valid, make sure
  they're useful!


  Taking off from where [Mike Ralphson] started with linting in
  [swagger2openapi], Speccy aims to become the [rubocop] or [eslint] of OpenAPI.


  ## Requirements


  - **NodeJS:** v8 - v10


  ## OpenAPI Specification


  Currently tracking
  [v3.0.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)


  If you want to run speccy on OpenAPI (f.k.a Swagger) v2.0 specs, run it
  through [swagger2openapi] first and speccy can give advice on the output.


  ## Setup


  You can install this node module via NPM or Yarn.


  ```sh

  $ npm install speccy -g

  # or

  $ yarn global add speccy

  ```


  Alternatively, you can use it with Docker (see "Using Docker" below.)


  ## Usage


  ```

  Usage: speccy <command>



  Options:


  -V, --version              output the version number

  -c, --config [configFile]  config file (containing JSON/YAML). See README for
  potential values.

  -h, --help                 output usage information



  Commands:


  lint [options] <file-or-url>     ensure specs are not just valid OpenAPI, but
  lint against specified rules

  resolve [options] <file-or-url>  pull in external $ref files to create one
  mega-file

  serve [options] <file-or-url>    view specifications in beautiful human
  readable documentation

  ```


  ### Lint Command


  The goal here is to sniff your files for potentially bad things. "Bad" is
  subjective, but you'll see validation errors, along with special rules for
  making your APIs better..


  ```

  Usage: lint [options] <file-or-url>


  ensure specs are not just valid OpenAPI, but lint against specified rules


  Options:

    -q, --quiet             reduce verbosity
    -r, --rules [ruleFile]  provide multiple rules files
    -s, --skip [ruleName]   provide multiple rules to skip
    -j, --json-schema       treat $ref like JSON Schema and convert to OpenAPI Schema Objects
    -v, --verbose           increase verbosity
    -h, --help              output usage information
  ```


  You'll see output such as:


  ```

  #/info  R: info-contact  D: info object should contain contact object


  expected Object {
    version: '5.0',
    title: 'Foo API'
  } to have property contact

  ```


  There are going to be different things people are interested in, so the
  [default rules][rules-default] suggest things we think everyone should do;
  adding descriptions to parameters and operations, and having some sort of
  contact info.


  There are [strict rules][rules-strict] which demand more contact details,
  "real" domains, a license, and requires tags have a description!


  ### Resolve Command


  Resolving `$ref` is the art of taking multiple files and squashing them all
  down into one big OpenAPI file. By default it will output to stdout, but you
  can pass `-o` with a file name to write the file locally.


  ```

  Usage: resolve [options] <file-or-url>


  pull in external $ref files to create one mega-file


  Options:

    -o, --output <file>  file to output to
    -q, --quiet          reduce verbosity
    -j, --json-schema    treat $ref like JSON Schema and convert to OpenAPI Schema Objects
    -v, --verbose        increase verbosity
    -h, --help           output usage information
  ```


  Starting with the fantastic resolver logic form swagger2openapi, speccy has
  one of the most robust

  resolvers out there. It avoid cyclical dependencies (when A has a property
  that `$ref`s A, which in turn destroys your CPU), and all sorts of other
  things.


  Thanks to the `--json-schema` switch, you can have an OpenAPI file which
  `$ref`s JSON Schema files (not just OpenAPI-flavoured JSON Schema), then
  resolve them all into one real OpenAPI file, thanks to
  [wework/json-schema-to-openapi-schema].


  ### Serve Command


  Using [ReDoc], speccy can offer a preview of your specifications, in
  human-readable format.

  In the future we'll have speccy outlining improvements right in here, but one
  thing at a time.


  ```

  Usage: serve [options] <file-or-url>


  view specifications in beautiful human readable documentation


  Options:

    -p, --port [value]  port on which the server will listen (default: 5000)
    -q, --quiet         reduce verbosity
    -j, --json-schema   treat $ref like JSON Schema and convert to OpenAPI Schema Objects
    -v, --verbose       increase verbosity
    -h, --help          output usage information
  ```


  ### Config File


  To avoid needing to send command line options and switches every time, a
  config file can be used. Create

  a `speccy.yaml` in the root of your project.


  Example:

  ```yaml

  # Convert JSON Schema-proper to OpenAPI-flavoured Schema Objects

  jsonSchema: true

  # Keep the noise down

  quiet: true

  # Output a lot of information about what is happening (wont work if you have
  quiet on)

  verbose: true

  # Rules specific to the lint command

  lint:
    # rules files to load
    rules:
    - strict
    - ./some/local/rules.yaml
    - https://example.org/my-rules.yaml
    # rules to skip
    skip:
    - info-contact
  # Rules specific to the resolve command

  resolve:
    output: foo.yaml
  # Rules specific to the serve command

  serve:
    port: 8001
  ```


  ### Calling Speccy from Code


  Not just a command line tool, speccy can be used to normalize machine-readable
  specifications.


  The loader object will return a promise that resolves to an object containing

  the specification.  For example:


  ``` javascript

  const loader = require('speccy/lib/loader');


  const options = {
    resolve: true,   // Resolve external references
    jsonSchema: true // Treat $ref like JSON Schema and convert to OpenAPI Schema Objects
  };


  loader
    .loadSpec('path/to/my/spec', options)            // Load the spec...
    .then(spec => console.log(JSON.stringify(spec))); // ...and print it out.
  ```


  If `options.resolve` is truthy, speccy will resolve _external_ references.


  ### Using Docker


  To use Speccy without installing any node/npm specific dependencies, you can
  run it via docker:


  ``` shell

  docker run wework/speccy lint
  https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml

  ```


  You can work with local files by mounting your spec and any config files to
  the `/project` directory when you run the container:


  ```

  docker run \
    -v openapi.yaml:/project/openapi.yaml \
    wework/speccy lint openapi.yaml
  ```


  Also, if you want to use a specific version, you can reference tags, so
  `docker run wework/speccy` could be `docker run wework/speccy:0`, 

  `docker run wework/speccy:0.8` or `docker run wework/speccy:0.8.7`. These
  versions follow semantic versioning.


  ### Using with lint-staged


  To lint your specifications before committing them you can use
  [lint-staged](https://github.com/okonet/lint-staged) to run speccy before each
  commit. Just install lint-staged and husky as `devDependencies` and add the
  following to your `package.json`:


  ```

  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },

  "lint-staged": {
    "*.{yml, yaml}": ["speccy lint openapi.yml", "git add"]
  }

  ```

  You can of course adjust the file filter and the speccy command to fit your
  setup.


  ## Tests


  To run the test-suite:


  ```shell

  npm test

  ```


  ## Contributing


  Contributions are always welcome, no matter how large or small. Before
  contributing, please read the [code of conduct](CODE_OF_CONDUCT.md).


  ## Credits


  - [Mike Ralphson] for providing the initial linter/validator from
  [swagger2openapi]

  - [Roman Gotsiy] for the excellent [ReDoc]

  - [Kenta Mori] for providing the serve logic from [redocup]

  - [All Contributors][link-contributors]


  ## License


  [MIT](LICENSE) except the `openapi-3.0.json` schema, which is taken from the
  [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/49e784d7b7800da8732103aa3ac56bc7ccde5cfb/schemas/v3.0/schema.yaml)
  and the alternative `gnostic-3.0.json` schema, which is originally from
  [Google
  Gnostic](https://github.com/googleapis/gnostic/blob/master/OpenAPIv3/openapi-3.0.json).
  Both of these are licensed under the
  [Apache-2](http://www.apache.org/licenses/LICENSE-2.0) license.


  [Kenta Mori]: https://github.com/zoncoen/

  [Mike Ralphson]: https://twitter.com/PermittedSoc/

  [ReDoc]: https://github.com/Rebilly/ReDoc

  [Roman Gotsiy]: https://github.com/RomanGotsiy

  [eslint]: https://eslint.org/

  [link-contributors]: https://github.com/wework/speccy/graphs/contributors

  [redocup]: https://github.com/zoncoen/redocup/

  [rubocop]: https://github.com/bbatsov/rubocop

  [rules-default]: http://speccy.io/rules/1-rulesets#set-default

  [rules-strict]: http://speccy.io/rules/1-rulesets#set-strict

  [swagger2openapi]: https://github.com/Mermade/swagger2openapi/

  [wework/json-schema-to-openapi-schema]:
  https://github.com/wework/json-schema-to-openapi-schema
apioo/psx-api: >
  PSX Api

  ===


  ## About


  Currently there are several API specification formats (OpenAPI, RAML,
  Swagger, 

  etc.) which describe the functionality of an API endpoint. This project
  provides 

  a data model which contains the common information of an API endpoint. There
  are

  parser classes which create such models based on a specification and it is
  also

  possible to generate a specification from a model object. We have also
  created 

  an [online tool](http://phpsx.org/tools/openapi) to test those conversions.


  ### Parser


  - Annotation (Parses a class which contains annotations)

  - OpenAPI ([OpenAPI 3.0](https://www.openapis.org/) specification)

  - RAML ([RAML 0.8/1.0](http://raml.org/) specification)

  - Swagger ([Swagger
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  specification)


  ### Generator


  - HTML (Generates a HTML representation of the resource)

  - JsonSchema (Generates a [JsonSchema](http://json-schema.org/) which contains
  all schemas of the specification)

  - Markdown (Generates a Markdown representation of the resource)

  - OpenAPI (Generates a [OpenAPI
  3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  specification)

  - PHP (Generates PHP source code which represents a controller consuming the
  API resource)

  - RAML (Generates a [RAML 1.0](http://raml.org/) specification)

  - Swagger (Generates a [Swagger
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  specification)

  - Typescript (Generates a Typescript based client stub)

  - Template (Generates a representation based on a
  [Twig](https://twig.symfony.com/) template)


  ## Usage


  The root model object is called `resource` which represents a specific API

  endpoint. The following is a simple showcase of the resource API so you get a

  basic understanding how it is designed.


  ```php

  <?php


  // reads the OpenAPI specification and generates a resource object which was

  // defined under the path /foo

  $resource = \PSX\Api\Parser\OpenAPI::fromFile('openapi.json', '/foo');


  // returns the title

  $resource->getTitle();


  // returns available path parameters as PSX\Schema\PropertyInterface

  $resource->getPathParameters();


  // checks whether a specific request method is supported

  $resource->hasMethod('POST');


  // returns all allowed methods

  $resource->getAllowedMethods();


  // returns the available query parameters per method as
  PSX\Schema\PropertyInterface

  $resource->getMethod('POST')->getQueryParameters();


  // checks whether the method has a request specification

  $resource->getMethod('POST')->hasRequest();


  // returns the request body specification as PSX\Schema\SchemaInterface

  $resource->getMethod('POST')->getRequest();


  // checks whether the method has a response with the status code 201

  $resource->getMethod('POST')->hasResponse(201);


  // returns the response body specification as PSX\Schema\SchemaInterface

  $resource->getMethod('POST')->getResponse(201);


  // creates a PHP controller which consumes the defined /foo resource

  $generator = new \PSX\Api\Generator\Php();


  $source = $generator->generate($resource);


  ```
p1c2u/openapi-spec-validator: >
  # OpenAPI Spec validator


  [![Package
  Version](https://img.shields.io/pypi/v/openapi-spec-validator.svg)](https://pypi.python.org/pypi/openapi-spec-validator)

  [![Build
  Status](https://travis-ci.org/p1c2u/openapi-spec-validator.svg?branch=master)](https://travis-ci.org/p1c2u/openapi-spec-validator)

  [![Code
  Coverage](https://img.shields.io/codecov/c/github/p1c2u/openapi-spec-validator/master.svg?style=flat)](https://codecov.io/github/p1c2u/openapi-spec-validator?branch=master)

  [![PyPI
  Version](https://img.shields.io/pypi/pyversions/openapi-spec-validator.svg)](https://pypi.python.org/pypi/openapi-spec-validator)

  [![PyPI
  Format](https://img.shields.io/pypi/format/openapi-spec-validator.svg)](https://pypi.python.org/pypi/openapi-spec-validator)

  [![PyPI
  Status](https://img.shields.io/pypi/status/openapi-spec-validator.svg)](https://pypi.python.org/pypi/openapi-spec-validator)


  ## About


  OpenAPI Spec Validator is a Python library that validates OpenAPI Specs
  against the [OpenAPI 2.0 (aka
  Swagger)](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  and [OpenAPI
  3.0.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  specification. The validator aims to check for full compliance with the
  Specification.


  ## Installation

      $ pip install openapi-spec-validator

  ## Usage


  ### Command Line Interface


  Straight forward way:


  ```bash

  $ openapi-spec-validator some.yaml

  ```


  or more pythonic way:


  ```bash

  $ python -m openapi_spec_validator some.yaml

  ```


  ### Examples


  Validate spec:


  ```python


  from openapi_spec_validator import validate_spec


  validate_spec(spec_dict)

  ```


  Add `spec_url` to validate spec with relative files:


  ```python


  from openapi_spec_validator import validate_spec


  validate_spec(spec_dict, spec_url='file:///path/to/spec/openapi.yaml')

  ```


  You can also validate spec from url:


  ```python


  from openapi_spec_validator import validate_spec_url


  validate_spec_url('http://example.com/openapi.json')

  ```


  If you want to iterate through validation errors:


  ```python


  from openapi_spec_validator import openapi_v3_spec_validator


  errors_iterator = openapi_v3_spec_validator.iter_errors(spec)

  ```


  ## Related projects


  * [openapi-core](https://github.com/p1c2u/openapi-core) is a Python library
  that adds client-side and server-side support for the OpenAPI.


  ## License


  Copyright (c) 2017, Artur Maciag, All rights reserved.

  Apache v2
Microsoft/OpenAPI.NET: "![Category overview screenshot](docs/images/oainet.png \"Microsoft + OpenAPI = Love\")\r\n\r\n# OpenAPI.NET [![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.svg)](https://www.nuget.org/packages/Microsoft.OpenApi/)\r\n\r\nThe **OpenAPI.NET** SDK contains a useful object model for OpenAPI documents in .NET along with common serializers to extract raw OpenAPI JSON and YAML documents from the model.\r\n\r\n**See more information on the OpenAPI specification and its history here: <a href=\"https://www.openapis.org\">Open API Initiative</a>**\r\n\r\nProject Objectives \r\n\r\n- Provide a single shared object model in .NET for OpenAPI descriptions.\r\n- Include the most primitive Reader for ingesting OpenAPI JSON and YAML documents in both V2 and V3 formats.\r\n- Provide OpenAPI description writers for both V2 and V3 specification formats.\r\n- Enable developers to create Readers that translate different data formats into OpenAPI descriptions. \r\n\r\n# Processors\r\nThe OpenAPI.NET project holds the base object model for representing OpenAPI documents as .NET objects. Some developers have found the need to write processors that convert other data formats into this OpenAPI.NET object model. We'd like to curate that list of processors in this section of the readme. \r\n\r\nThe base JSON and YAML processors are built into this project. Below is the list of the other supported processor projects.\r\n\r\n- [**C# Comment / Annotation Processor**](https://github.com/Microsoft/OpenAPI.NET.CSharpAnnotations) : Converts standard .NET annotations ( /// comments ) emitted from your build (MSBuild.exe) into OpenAPI.NET document object. \r\n\r\n- [**OData CSDL Processor**](https://github.com/Microsoft/OpenAPI.NET.OData) : Converts the XML representation of the Entity Data Model (EDM) describing an OData Service into OpenAPI.NET document object. \r\n\r\n# Example Usage\r\n\r\nCreating an OpenAPI Document\r\n\r\n```C#\r\nvar document = new OpenApiDocument\r\n{\r\n    Info = new OpenApiInfo\r\n    {\r\n        Version = \"1.0.0\",\r\n        Title = \"Swagger Petstore (Simple)\",\r\n    },\r\n    Servers = new List<OpenApiServer>\r\n    {\r\n        new OpenApiServer { Url = \"http://petstore.swagger.io/api\" }\r\n    },\r\n    Paths = new OpenApiPaths\r\n    {\r\n        [\"/pets\"] = new OpenApiPathItem\r\n        {\r\n            Operations = new Dictionary<OperationType, OpenApiOperation>\r\n            {\r\n                [OperationType.Get] = new OpenApiOperation\r\n                {\r\n                    Description = \"Returns all pets from the system that the user has access to\",\r\n                    Responses = new OpenApiResponses\r\n                    {\r\n                        [\"200\"] = new OpenApiResponse\r\n                        {\r\n                            Description = \"OK\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nReading and writing a OpenAPI description\r\n\r\n```C#\r\nvar httpClient = new HttpClient\r\n{\r\n    BaseAddress = new Uri(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/\")\r\n};\r\n\r\nvar stream = await httpClient.GetStreamAsync(\"master/examples/v3.0/petstore.yaml\");\r\n\r\n// Read V3 as YAML\r\nvar openApiDocument = new OpenApiStreamReader().Read(stream, out var diagnostic);\r\n\r\n// Write V2 as JSON\r\nvar outputString = openApiDocument.Serialize(OpenApiSpecVersion.OpenApi2_0, OpenApiFormat.Json);\r\n\r\n```\r\n\r\n# Build Status\r\n\r\n|**master**|\r\n|--|\r\n|[![Build status](https://ci.appveyor.com/api/projects/status/9l6hly3vjeu0tmtx/branch/master?svg=true)](https://ci.appveyor.com/project/MicrosoftOpenAPINETAdmin/openapi-net-54e7i/branch/master)|\r\n\r\n# Contributing\r\n\r\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\r\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\r\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\r\n\r\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\r\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\r\nprovided by the bot. You will only need to do this once across all repos using our CLA.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\nTo provide feedback and ask questions you can use Stack Overflow with the [OpenAPI.NET](https://stackoverflow.com/questions/tagged/openapi.net) tag or use the OpenAPI.NET Slack channel which you can join by registering for the HTTP APIs team at http://slack.httpapis.com.\r\n"
swagger-api/swagger-codegen: "# <img src=\"https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWC-logo-clr.png\" height=\"80\">\n\n[![Build Status](https://img.shields.io/jenkins/s/https/jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-core-master-java-8.svg)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-core-master-java-8)\n\n- Master (2.4.5): [![Build Status](https://img.shields.io/travis/swagger-api/swagger-codegen/master.svg?label=Petstore%20Integration%20Test)](https://travis-ci.org/swagger-api/swagger-codegen)\n[![Java Test](https://img.shields.io/jenkins/s/https/jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-master.svg)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-master)\n[![Windows Test](https://ci.appveyor.com/api/projects/status/github/swagger-api/swagger-codegen?branch=master&svg=true&passingText=Windows%20Test%20-%20OK&failingText=Windows%20Test%20-%20Fails)](https://ci.appveyor.com/project/swaggerhub-bot/swagger-codegen)\n- 3.0.0:  [![Build Status](https://img.shields.io/travis/swagger-api/swagger-codegen/3.0.0.svg?label=Petstore%20Integration%20Test)](https://travis-ci.org/swagger-api/swagger-codegen)\n[![Java Test](https://img.shields.io/jenkins/s/https/jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-3.svg)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-codegen-3)\n[![Windows Test](https://ci.appveyor.com/api/projects/status/github/swagger-api/swagger-codegen?branch=3.0.0&svg=true&passingText=Windows%20Test%20-%20OK&failingText=Windows%20Test%20-%20Fails)](https://ci.appveyor.com/project/swaggerhub-bot/swagger-codegen)\n\n\n[Maven Central](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-codegen-project)\n\n:star::star::star: If you would like to contribute, please refer to [guidelines](https://github.com/swagger-api/swagger-codegen/blob/master/CONTRIBUTING.md) and a list of [open tasks](https://github.com/swagger-api/swagger-codegen/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).:star::star::star:\n\n:notebook_with_decorative_cover: For more information, please refer to the [Wiki page](https://github.com/swagger-api/swagger-codegen/wiki) and [FAQ](https://github.com/swagger-api/swagger-codegen/wiki/FAQ) :notebook_with_decorative_cover:\n\n:warning: If the OpenAPI/Swagger spec is obtained from an untrusted source, please make sure you've reviewed the spec before using Swagger Codegen to generate the API client, server stub or documentation as [code injection](https://en.wikipedia.org/wiki/Code_injection) may occur :warning:\n\n:rocket: ProductHunt: https://producthunt.com/posts/swagger-codegen :rocket:\n\n:notebook_with_decorative_cover: The eBook [A Beginner's Guide to Code Generation for REST APIs](https://gumroad.com/l/swagger_codegen_beginner) is a good starting point for beginners.\n\n## Versioning\n\n**NOTE:** version 2.X (`io.swagger`) and 3.X (`io.swagger.codegen.v3`) have **different** group ids.\n\n2.X and 3.X version lines of Swagger Codegen are available; 2.X (`master` branch) supports Swagger/OpenAPI version 2,\nwhile 3.X ([`3.0.0` branch](https://github.com/swagger-api/swagger-codegen/tree/3.0.0)) supports OpenAPI version 3 (and version 2 via spec conversion to version 3).\n[Online generator of version 3.X](https://github.com/swagger-api/swagger-codegen/tree/3.0.0#online-generators) supports both generation from Swagger/OpenAPI version 2 (by using engine + generators of 2.X) and version 3 specifications.\n\n\n**NOTE:** this document refers to version 2.X, check [here](https://github.com/swagger-api/swagger-codegen/tree/3.0.0) for 3.X.\n\n\n### Swagger Codegen 2.X ([`master` branch](https://github.com/swagger-api/swagger-codegen/tree/master))\n\nSwagger Codegen 2.X supports Swagger/OpenAPI version 2.\n\ngroup id: `io.swagger`\nmaven central (maven plugin): https://mvnrepository.com/artifact/io.swagger/swagger-codegen-maven-plugin\n\ndependency example:\n\n```\n<dependency>\n    <groupId>io.swagger</groupId>\n    <artifactId>swagger-codegen-maven-plugin</artifactId>\n    <version>2.4.5</version>\n</dependency>\n```\n\n### Swagger Codegen 3.X ([`3.0.0` branch](https://github.com/swagger-api/swagger-codegen/tree/3.0.0))\n\nSwagger Codegen 2.X supports OpenAPI version 3 (and version 2 via spec conversion to version 3)\n[Online generator of version 3.X](https://github.com/swagger-api/swagger-codegen/tree/3.0.0#online-generators) supports both generation from Swagger/OpenAPI version 2 (by using engine + generators of 2.X) and version 3 specifications.\n\ngroup id: `io.swagger.codegen.v3`\nmaven central: https://mvnrepository.com/artifact/io.swagger.codegen.v3\n\ndependency example:\n\n```\n<dependency>\n    <groupId>io.swagger.codegen.v3</groupId>\n    <artifactId>swagger-codegen-maven-plugin</artifactId>\n    <version>3.0.8</version>\n</dependency>\n```\n\n\n\n## Overview\nThis is the Swagger Codegen project, which allows generation of API client libraries (SDK generation), server stubs and documentation automatically given an [OpenAPI Spec](https://github.com/OAI/OpenAPI-Specification). Currently, the following languages/frameworks are supported:\n\n- **API clients**: **ActionScript**, **Ada**, **Apex**, **Bash**, **C#** (.net 2.0, 3.5 or later), **C++** (cpprest, Qt5, Tizen), **Clojure**, **Dart**, **Elixir**, **Elm**, **Eiffel**, **Erlang**, **Go**, **Groovy**, **Haskell** (http-client, Servant), **Java** (Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign, RestTemplate, RESTEasy, Vertx, Google API Client Library for Java, Rest-assured), **Kotlin**, **Lua**, **Node.js** (ES5, ES6, AngularJS with Google Closure Compiler annotations) **Objective-C**, **Perl**, **PHP**, **PowerShell**, **Python**, **R**, **Ruby**, **Rust** (rust, rust-server), **Scala** (akka, http4s, swagger-async-httpclient), **Swift** (2.x, 3.x, 4.x), **Typescript** (Angular1.x, Angular2.x, Fetch, jQuery, Node)\n- **Server stubs**: **Ada**, **C#** (ASP.NET Core, NancyFx), **C++** (Pistache, Restbed), **Erlang**, **Go**, **Haskell** (Servant), **Java** (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, RestEasy, Play Framework, [PKMST](https://github.com/ProKarma-Inc/pkmst-getting-started-examples)), **Kotlin**, **PHP** (Lumen, Slim, Silex, [Symfony](https://symfony.com/), [Zend Expressive](https://github.com/zendframework/zend-expressive)), **Python** (Flask), **NodeJS**, **Ruby** (Sinatra, Rails5), **Rust** (rust-server), **Scala** ([Finch](https://github.com/finagle/finch), [Lagom](https://github.com/lagom/lagom), Scalatra)\n- **API documentation generators**: **HTML**, **Confluence Wiki**\n- **Configuration files**: [**Apache2**](https://httpd.apache.org/)\n- **Others**: **JMeter**\n\nCheck out [OpenAPI-Spec](https://github.com/OAI/OpenAPI-Specification) for additional information about the OpenAPI project.\n\n# Table of contents\n\n  - [Swagger Code Generator](#swagger-code-generator)\n  - [Overview](#overview)\n  - [Table of Contents](#table-of-contents)\n  - Installation\n    - [Compatibility](#compatibility)\n    - [Prerequisites](#prerequisites)\n      - [OS X Users](#os-x-users)\n    - [Building](#building)\n    - [Docker](#docker)\n      - [Development in Docker](#development-in-docker)\n      - [Run docker in Vagrant](#run-docker-in-vagrant)\n      - [Public Docker image](#public-docker-image)\n    - [Homebrew](#homebrew)\n  - [Getting Started](#getting-started)\n  - Generators\n    - [To generate a sample client library](#to-generate-a-sample-client-library)\n    - [Generating libraries from your server](#generating-libraries-from-your-server)\n    - [Modifying the client library format](#modifying-the-client-library-format)\n    - [Making your own codegen modules](#making-your-own-codegen-modules)\n    - [Where is Javascript???](#where-is-javascript)\n    - [Generating a client from local files](#generating-a-client-from-local-files)\n    - [Customizing the generator](#customizing-the-generator)\n    - [Validating your OpenAPI Spec](#validating-your-openapi-spec)\n    - [Generating dynamic html api documentation](#generating-dynamic-html-api-documentation)\n    - [Generating static html api documentation](#generating-static-html-api-documentation)\n    - [To build a server stub](#to-build-a-server-stub)\n    - [To build the codegen library](#to-build-the-codegen-library)\n  - [Workflow Integration](#workflow-integration)\n    - [Maven Integration](#maven-integration)\n    - [Gradle Integration](#gradle-integration)\n  - [Github Integration](#github-integration)\n  - [Online Generators](#online-generators)\n  - [Guidelines for Contribution](https://github.com/swagger-api/swagger-codegen/blob/master/CONTRIBUTING.md#guidelines-for-contributing)\n  - [Companies/Projects using Swagger Codegen](#companiesprojects-using-swagger-codegen)\n  - [Presentations/Videos/Tutorials/Books](#presentationsvideostutorialsbooks)\n  - [Swagger Codegen Core Team](#swagger-codegen-core-team)\n  - [Swagger Codegen Technical Committee](#swagger-codegen-technical-committee)\n  - [License](#license)\n\n\n## Compatibility\nThe OpenAPI Specification has undergone 3 revisions since initial creation in 2010.  The Swagger Codegen project has the following compatibilities with the OpenAPI Specification:\n\nSwagger Codegen Version    | Release Date | OpenAPI Spec compatibility | Notes\n-------------------------- | ------------ | -------------------------- | -----\n3.0.9-SNAPSHOT (current 3.0.0, upcoming minor release) [SNAPSHOT](https://oss.sonatype.org/content/repositories/snapshots/io/swagger/codegen/v3/swagger-codegen-cli/3.0.9-SNAPSHOT/)| TBD | 1.0, 1.1, 1.2, 2.0, 3.0 | Minor release\n[3.0.8](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.8) (**current stable**) | 2019-04-25   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.8](https://github.com/swagger-api/swagger-codegen/tree/v3.0.8)\n[3.0.7](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.7) | 2019-03-26   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.7](https://github.com/swagger-api/swagger-codegen/tree/v3.0.7)\n[3.0.5](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.5) | 2019-02-18   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.5](https://github.com/swagger-api/swagger-codegen/tree/v3.0.5)\n[3.0.4](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.4) | 2019-01-16   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.4](https://github.com/swagger-api/swagger-codegen/tree/v3.0.4)\n[3.0.3](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.3) | 2018-11-30   | 1.0, 1.1, 1.2, 2.0, 3.0   | [tag v3.0.3](https://github.com/swagger-api/swagger-codegen/tree/v3.0.3)\n[3.0.2](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.2)| 2018-10-19 | 1.0, 1.1, 1.2, 2.0, 3.0 | Minor release\n[3.0.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.1)| 2018-10-05 | 1.0, 1.1, 1.2, 2.0, 3.0 | Major release with breaking changes\n[3.0.0](https://github.com/swagger-api/swagger-codegen/releases/tag/v3.0.0)| 2018-09-06 | 1.0, 1.1, 1.2, 2.0, 3.0 | Major release with breaking changes\n2.4.6-SNAPSHOT (current master, upcoming minor release) [SNAPSHOT](https://oss.sonatype.org/content/repositories/snapshots/io/swagger/swagger-codegen-cli/2.4.6-SNAPSHOT/)| TBD   | 1.0, 1.1, 1.2, 2.0   | Minor release\n[2.4.5](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.5) (**current stable**) | 2019-04-25   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.5](https://github.com/swagger-api/swagger-codegen/tree/v2.4.5)\n[2.4.4](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.4) | 2019-03-26   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.4](https://github.com/swagger-api/swagger-codegen/tree/v2.4.4)\n[2.4.2](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.2) | 2019-02-18   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.2](https://github.com/swagger-api/swagger-codegen/tree/v2.4.2)\n[2.4.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.1) | 2019-01-16   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.1](https://github.com/swagger-api/swagger-codegen/tree/v2.4.1)\n[2.4.0](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.4.0) | 2018-11-30   | 1.0, 1.1, 1.2, 2.0   | [tag v2.4.0](https://github.com/swagger-api/swagger-codegen/tree/v2.4.0)\n[2.3.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.3.1) | 2018-01-17   | 1.0, 1.1, 1.2, 2.0   | [tag v2.3.1](https://github.com/swagger-api/swagger-codegen/tree/v2.3.1)\n[2.3.0](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.3.0) | 2017-12-21   | 1.0, 1.1, 1.2, 2.0   | [tag v2.3.0](https://github.com/swagger-api/swagger-codegen/tree/v2.3.0)\n[2.2.3](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.3) | 2017-07-15   | 1.0, 1.1, 1.2, 2.0   | [tag v2.2.3](https://github.com/swagger-api/swagger-codegen/tree/v2.2.3)\n[2.2.2](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.2) | 2017-03-01   | 1.0, 1.1, 1.2, 2.0   | [tag v2.2.2](https://github.com/swagger-api/swagger-codegen/tree/v2.2.2)\n[2.2.1](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.2.1) | 2016-08-07   | 1.0, 1.1, 1.2, 2.0   | [tag v2.2.1](https://github.com/swagger-api/swagger-codegen/tree/v2.2.1)\n[2.1.6](https://github.com/swagger-api/swagger-codegen/releases/tag/v2.1.6) | 2016-04-06   | 1.0, 1.1, 1.2, 2.0   | [tag v2.1.6](https://github.com/swagger-api/swagger-codegen/tree/v2.1.6)\n2.0.17                     | 2014-08-22   | 1.1, 1.2             | [tag v2.0.17](https://github.com/swagger-api/swagger-codegen/tree/2.0.17)\n1.0.4                      | 2012-04-12   | 1.0, 1.1             | [tag v1.0.4](https://github.com/swagger-api/swagger-codegen/tree/swagger-codegen_2.9.1-1.1)\n\n\n### Prerequisites\n\nIf you're looking for the latest stable version, you can grab it directly from Maven.org (Java 7 runtime at a minimum):\n\n```sh\nwget http://central.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.5/swagger-codegen-cli-2.4.5.jar -O swagger-codegen-cli.jar\n\njava -jar swagger-codegen-cli.jar help\n```\n\nFor Windows users, you will need to install [wget](http://gnuwin32.sourceforge.net/packages/wget.htm) or you can use Invoke-WebRequest in PowerShell (3.0+), e.g. `Invoke-WebRequest -OutFile swagger-codegen-cli.jar http://central.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.5/swagger-codegen-cli-2.4.5.jar`\n\nOn a mac, it's even easier with `brew`:\n```sh\nbrew install swagger-codegen\n```\n\nTo build from source, you need the following installed and available in your `$PATH:`\n\n* [Java 7 or 8](http://java.oracle.com)\n\n* [Apache maven 3.3.3 or greater](http://maven.apache.org/)\n\n#### OS X Users\nDon't forget to install Java 7 or 8. You probably have 1.6.\n\nExport `JAVA_HOME` in order to use the supported Java version:\n```sh\nexport JAVA_HOME=`/usr/libexec/java_home -v 1.8`\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n\n### Building\n\nAfter cloning the project, you can build it from source with this command:\n```sh\nmvn clean package\n```\n\nIf you don't have maven installed, you may directly use the included [maven wrapper](https://github.com/takari/maven-wrapper), and build with the command:\n```sh\n./mvnw clean package\n```\n\n### Homebrew\n\nTo install, run `brew install swagger-codegen`\n\nHere is an example usage:\n```sh\nswagger-codegen generate -i http://petstore.swagger.io/v2/swagger.json -l ruby -o /tmp/test/\n```\n\n### Docker\n\n#### Development in docker\n\nYou can use `run-in-docker.sh` to do all development. This script maps your local repository to `/gen`\nin the docker container. It also maps `~/.m2/repository` to the appropriate container location.\n\nTo execute `mvn package`:\n\n```sh\ngit clone https://github.com/swagger-api/swagger-codegen\ncd swagger-codegen\n./run-in-docker.sh mvn package\n```\n\nBuild artifacts are now accessible in your working directory.\n\nOnce built, `run-in-docker.sh` will act as an executable for swagger-codegen-cli. To generate code, you'll need to output to a directory under `/gen` (e.g. `/gen/out`). For example:\n\n```sh\n./run-in-docker.sh help # Executes 'help' command for swagger-codegen-cli\n./run-in-docker.sh langs # Executes 'langs' command for swagger-codegen-cli\n./run-in-docker.sh /gen/bin/go-petstore.sh  # Builds the Go client\n./run-in-docker.sh generate -i modules/swagger-codegen/src/test/resources/2_0/petstore.yaml \\\n    -l go -o /gen/out/go-petstore -DpackageName=petstore # generates go client, outputs locally to ./out/go-petstore\n```\n\n#### Run Docker in Vagrant\nPrerequisite: install [Vagrant](https://www.vagrantup.com/downloads.html) and [VirtualBox](https://www.virtualbox.org/wiki/Downloads).\n ```sh\ngit clone http://github.com/swagger-api/swagger-codegen.git\ncd swagger-codegen\nvagrant up\nvagrant ssh\ncd /vagrant\n./run-in-docker.sh mvn package\n ```\n\n#### Public Pre-built Docker images\n\n - https://hub.docker.com/r/swaggerapi/swagger-generator/ (official web service)\n - https://hub.docker.com/r/swaggerapi/swagger-codegen-cli/ (official CLI)\n\n\n##### Swagger Generator Docker Image\n\nThe Swagger Generator image can act as a self-hosted web application and API for generating code. This container can be  incorporated into a CI pipeline, and requires at least two HTTP requests and some docker orchestration to access generated code.\n\nExample usage (note this assumes `jq` is installed for command line processing of JSON):\n\n```sh\n# Start container and save the container id\nCID=$(docker run -d swaggerapi/swagger-generator)\n# allow for startup\nsleep 5\n# Get the IP of the running container\nGEN_IP=$(docker inspect --format '{{.NetworkSettings.IPAddress}}'  $CID)\n# Execute an HTTP request and store the download link\nRESULT=$(curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n  \"swaggerUrl\": \"http://petstore.swagger.io/v2/swagger.json\"\n}' 'http://localhost:8188/api/gen/clients/javascript' | jq '.link' | tr -d '\"')\n# Download the generated zip and redirect to a file\ncurl $RESULT > result.zip\n# Shutdown the swagger generator image\ndocker stop $CID && docker rm $CID\n```\n\nIn the example above, `result.zip` will contain the generated client.\n\n##### Swagger Codegen CLI Docker Image\n\nThe Swagger Codegen image acts as a standalone executable. It can be used as an alternative to installing via homebrew, or for developers who are unable to install Java or upgrade the installed version.\n\nTo generate code with this image, you'll need to mount a local location as a volume.\n\nExample:\n\n```sh\ndocker run --rm -v ${PWD}:/local swaggerapi/swagger-codegen-cli generate \\\n    -i http://petstore.swagger.io/v2/swagger.json \\\n    -l go \\\n    -o /local/out/go\n```\n\n(On Windows replace `${PWD}` with `%CD%`)\n\nThe generated code will be located under `./out/go` in the current directory.\n\n## Getting Started\n\nTo generate a PHP client for http://petstore.swagger.io/v2/swagger.json, please run the following\n```sh\ngit clone https://github.com/swagger-api/swagger-codegen\ncd swagger-codegen\nmvn clean package\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n   -i http://petstore.swagger.io/v2/swagger.json \\\n   -l php \\\n   -o /var/tmp/php_api_client\n```\n(if you're on Windows, replace the last command with `java -jar modules\\swagger-codegen-cli\\target\\swagger-codegen-cli.jar generate -i http://petstore.swagger.io/v2/swagger.json -l php -o c:\\temp\\php_api_client`)\n\nYou can also download the JAR (latest release) directly from [maven.org](http://central.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.5/swagger-codegen-cli-2.4.5.jar)\n\nTo get a list of **general** options available, please run `java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar help generate`\n\nTo get a list of PHP specified options (which can be passed to the generator with a config file via the `-c` option), please run `java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar config-help -l php`\n\n## Generators\n\n### To generate a sample client library\nYou can build a client against the swagger sample [petstore](http://petstore.swagger.io) API as follows:\n\n```sh\n./bin/java-petstore.sh\n```\n\n(On Windows, run `.\\bin\\windows\\java-petstore.bat` instead)\n\nThis will run the generator with this command:\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n  -i http://petstore.swagger.io/v2/swagger.json \\\n  -l java \\\n  -o samples/client/petstore/java\n```\n\nwith a number of options. You can get the options with the `help generate` command (below only shows partial results):\n\n```\nNAME\n        swagger-codegen-cli generate - Generate code with chosen lang\n\nSYNOPSIS\n        swagger-codegen-cli generate\n                [(-a <authorization> | --auth <authorization>)]\n                [--additional-properties <additional properties>...]\n                [--api-package <api package>] [--artifact-id <artifact id>]\n                [--artifact-version <artifact version>]\n                [(-c <configuration file> | --config <configuration file>)]\n                [-D <system properties>...] [--git-repo-id <git repo id>]\n                [--git-user-id <git user id>] [--group-id <group id>]\n                [--http-user-agent <http user agent>]\n                (-i <spec file> | --input-spec <spec file>)\n                [--ignore-file-override <ignore file override location>]\n                [--import-mappings <import mappings>...]\n                [--instantiation-types <instantiation types>...]\n                [--invoker-package <invoker package>]\n                (-l <language> | --lang <language>)\n                [--language-specific-primitives <language specific primitives>...]\n                [--library <library>] [--model-name-prefix <model name prefix>]\n                [--model-name-suffix <model name suffix>]\n                [--model-package <model package>]\n                [(-o <output directory> | --output <output directory>)]\n                [--release-note <release note>] [--remove-operation-id-prefix]\n                [--reserved-words-mappings <reserved word mappings>...]\n                [(-s | --skip-overwrite)]\n                [(-t <template directory> | --template-dir <template directory>)]\n                [--type-mappings <type mappings>...] [(-v | --verbose)]\n\nOPTIONS\n        -a <authorization>, --auth <authorization>\n            adds authorization headers when fetching the swagger definitions\n            remotely. Pass in a URL-encoded string of name:header with a comma\n            separating multiple values\n\n...... (results omitted)\n\n        -v, --verbose\n            verbose mode\n\n```\n\nYou can then compile and run the client, as well as unit tests against it:\n\n```sh\ncd samples/client/petstore/java\nmvn package\n```\n\nOther languages have petstore samples, too:\n```sh\n./bin/android-petstore.sh\n./bin/java-petstore.sh\n./bin/objc-petstore.sh\n```\n\n### Generating libraries from your server\nIt's just as easy--just use the `-i` flag to point to either a server or file.\n\n### Modifying the client library format\nDon't like the default swagger client syntax?  Want a different language supported?  No problem!  Swagger Codegen processes mustache templates with the [jmustache](https://github.com/samskivert/jmustache) engine.  You can modify our templates or make your own.\n\nYou can look at `modules/swagger-codegen/src/main/resources/${your-language}` for examples.  To make your own templates, create your own files and use the `-t` flag to specify your template folder.  It actually is that easy.\n\n### Making your own codegen modules\nIf you're starting a project with a new language and don't see what you need, Swagger Codegen can help you create a project to generate your own libraries:\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar meta \\\n  -o output/myLibrary -n myClientCodegen -p com.my.company.codegen\n```\n\nThis will write, in the folder `output/myLibrary`, all the files you need to get started, including a `README.md. Once modified and compiled, you can load your library with the codegen and generate clients with your own, custom-rolled logic.\n\nYou would then compile your library in the `output/myLibrary` folder with `mvn package` and execute the codegen like such:\n\n```sh\njava -cp output/myLibrary/target/myClientCodegen-swagger-codegen-1.0.0.jar:modules/swagger-codegen-cli/target/swagger-codegen-cli.jar io.swagger.codegen.SwaggerCodegen\n```\nFor Windows users, you will need to use `;` instead of `:` in the classpath, e.g.\n```\njava -cp output/myLibrary/target/myClientCodegen-swagger-codegen-1.0.0.jar;modules/swagger-codegen-cli/target/swagger-codegen-cli.jar io.swagger.codegen.SwaggerCodegen\n```\n\nNote the `myClientCodegen` is an option now, and you can use the usual arguments for generating your library:\n\n```sh\njava -cp output/myLibrary/target/myClientCodegen-swagger-codegen-1.0.0.jar:modules/swagger-codegen-cli/target/swagger-codegen-cli.jar \\\n  io.swagger.codegen.SwaggerCodegen generate -l myClientCodegen\\\n  -i http://petstore.swagger.io/v2/swagger.json \\\n  -o myClient\n```\n\n### Where is Javascript???\nSee our [javascript library](http://github.com/swagger-api/swagger-js)--it's completely dynamic and doesn't require\nstatic code generation.\nThere is a third-party component called [swagger-js-codegen](https://github.com/wcandillon/swagger-js-codegen) that can generate angularjs or nodejs source code from a OpenAPI Specification.\n\n:exclamation: On Dec 7th 2015, a Javascript API client generator has been added by @jfiala.\n\n### Generating a client from local files\nIf you don't want to call your server, you can save the OpenAPI Spec files into a directory and pass an argument\nto the code generator like this:\n\n```\n-i ./modules/swagger-codegen/src/test/resources/2_0/petstore.json\n```\n\nGreat for creating libraries on your ci server, from the [Swagger Editor](http://editor.swagger.io)... or while coding on an airplane.\n\n### Selective generation\nYou may not want to generate *all* models in your project.  Likewise you may want just one or two apis to be written.  If that's the case, you can use system properties to control the output:\n\nThe default is generate *everything* supported by the specific library.  Once you enable a feature, it will restrict the contents generated:\n\n```sh\n# generate only models\njava -Dmodels {opts}\n\n# generate only apis\njava -Dapis {opts}\n\n# generate only supporting files\njava -DsupportingFiles\n\n# generate models and supporting files\njava -Dmodels -DsupportingFiles\n```\n\nTo control the specific files being generated, you can pass a CSV list of what you want:\n```sh\n# generate the User and Pet models only\n-Dmodels=User,Pet\n\n# generate the User model and the supportingFile `StringUtil.java`:\n-Dmodels=User -DsupportingFiles=StringUtil.java\n```\n\nTo control generation of docs and tests for api and models, pass false to the option. For api, these options are  `-DapiTests=false` and `-DapiDocs=false`. For models, `-DmodelTests=false` and `-DmodelDocs=false`.\nThese options default to true and don't limit the generation of the feature options listed above (like `-Dapi`):\n\n```sh\n# generate only models (with tests and documentation)\njava -Dmodels {opts}\n\n# generate only models (with tests but no documentation)\njava -Dmodels -DmodelDocs=false {opts}\n\n# generate only User and Pet models (no tests and no documentation)\njava -Dmodels=User,Pet -DmodelTests=false {opts}\n\n# generate only apis (without tests)\njava -Dapis -DapiTests=false {opts}\n\n# generate only apis (modelTests option is ignored)\njava -Dapis -DmodelTests=false {opts}\n```\n\nWhen using selective generation, _only_ the templates needed for the specific generation will be used.\n\n### Ignore file format\n\nSwagger Codegen supports a `.swagger-codegen-ignore` file, similar to `.gitignore` or `.dockerignore` you're probably already familiar with.\n\nThe ignore file allows for better control over overwriting existing files than the `--skip-overwrite` flag. With the ignore file, you can specify individual files or directories can be ignored. This can be useful, for example if you only want a subset of the generated code.\n\nExamples:\n\n```sh\n# Swagger Codegen Ignore\n# Lines beginning with a # are comments\n\n# This should match build.sh located anywhere.\nbuild.sh\n\n# Matches build.sh in the root\n/build.sh\n\n# Exclude all recursively\ndocs/**\n\n# Explicitly allow files excluded by other rules\n!docs/UserApi.md\n\n# Recursively exclude directories named Api\n# You can't negate files below this directory.\nsrc/**/Api/\n\n# When this file is nested under /Api (excluded above),\n# this rule is ignored because parent directory is excluded by previous rule.\n!src/**/PetApiTests.cs\n\n# Exclude a single, nested file explicitly\nsrc/IO.Swagger.Test/Model/AnimalFarmTests.cs\n```\n\nThe `.swagger-codegen-ignore` file must exist in the root of the output directory.\n\nUpon first code generation, you may also pass the CLI option `--ignore-file-override=/path/to/ignore_file` for greater control over generated outputs. Note that this is a complete override, and will override the `.swagger-codegen-ignore` file in an output directory when regenerating code.\n\nEditor support for `.swagger-codegen-ignore` files is available in IntelliJ via the [.ignore plugin](https://plugins.jetbrains.com/plugin/7495--ignore).\n\n### Customizing the generator\n\nThere are different aspects of customizing the code generator beyond just creating or modifying templates.  Each language has a supporting configuration file to handle different type mappings, etc:\n\n```sh\n$ ls -1 modules/swagger-codegen/src/main/java/io/swagger/codegen/languages/\nAbstractJavaJAXRSServerCodegen.java\nAbstractTypeScriptClientCodegen.java\n... (results omitted)\nTypeScriptAngularClientCodegen.java\nTypeScriptNodeClientCodegen.java\n```\n\nEach of these files creates reasonable defaults so you can get running quickly.  But if you want to configure package names, prefixes, model folders, etc. you can use a json config file to pass the values.\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n  -i http://petstore.swagger.io/v2/swagger.json \\\n  -l java \\\n  -o samples/client/petstore/java \\\n  -c path/to/config.json\n```\nand `config.json` contains the following as an example:\n```json\n{\n  \"apiPackage\" : \"petstore\"\n}\n```\n\nSupported config options can be different per language. Running `config-help -l {lang}` will show available options.\n**These options are applied via configuration file (e.g. config.json) or by passing them with `java -jar swagger-codegen-cli.jar -D{optionName}={optionValue}`**. (If `-D{optionName}` does not work, please open a [ticket](https://github.com/swagger-api/swagger-codegen/issues/new) and we'll look into it)\n\n```sh\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar config-help -l java\n```\n\nOutput\n\n```\nCONFIG OPTIONS\n\tmodelPackage\n\t    package for generated models\n\n\tapiPackage\n\t    package for generated api classes\n...... (results omitted)\n\tlibrary\n\t    library template (sub-template) to use:\n\t    jersey1 - HTTP client: Jersey client 1.18. JSON processing: Jackson 2.4.2\n\t    jersey2 - HTTP client: Jersey client 2.6\n\t    feign - HTTP client: Netflix Feign 8.1.1.  JSON processing: Jackson 2.6.3\n\t    okhttp-gson (default) - HTTP client: OkHttp 2.4.0. JSON processing: Gson 2.3.1\n\t    retrofit - HTTP client: OkHttp 2.4.0. JSON processing: Gson 2.3.1 (Retrofit 1.9.0)\n        retrofit2 - HTTP client: OkHttp 2.5.0. JSON processing: Gson 2.4 (Retrofit 2.0.0-beta2)\n        google-api-client - HTTP client: google-api-client 1.23.0. JSON processing: Jackson 2.8.9\n        rest-assured - HTTP client: rest-assured : 3.1.0. JSON processing: Gson 2.6.1. Only for Java8\n```\n\nYour config file for Java can look like\n\n```json\n{\n  \"groupId\":\"com.my.company\",\n  \"artifactId\":\"MyClient\",\n  \"artifactVersion\":\"1.2.0\",\n  \"library\":\"feign\"\n}\n```\n\nFor all the unspecified options default values will be used.\n\nAnother way to override default options is to extend the config class for the specific language.\nTo change, for example, the prefix for the Objective-C generated files, simply subclass the `ObjcClientCodegen.java`:\n\n```java\npackage com.mycompany.swagger.codegen;\n\nimport io.swagger.codegen.languages.*;\n\npublic class MyObjcCodegen extends ObjcClientCodegen {\n    static {\n        PREFIX = \"HELO\";\n    }\n}\n```\n\nand specify the `classname` when running the generator:\n\n```\n-l com.mycompany.swagger.codegen.MyObjcCodegen\n```\n\nYour subclass will now be loaded and overrides the `PREFIX` value in the superclass.\n\n### Bringing your own models\n\nSometimes you don't want a model generated.  In this case, you can simply specify an import mapping to tell\nthe codegen what _not_ to create.  When doing this, every location that references a specific model will\nrefer back to your classes.  Note, this may not apply to all languages...\n\nTo specify an import mapping, use the `--import-mappings` argument and specify the model-to-import logic as such:\n\n```\n--import-mappings Pet=my.models.MyPet\n```\n\nOr for multiple mappings:\n\n```\n--import-mappings Pet=my.models.MyPet,Order=my.models.MyOrder\n```\nor\n```\n--import-mappings Pet=my.models.MyPet --import-mappings Order=my.models.MyOrder\n```\n\n\n### Validating your OpenAPI Spec\n\nYou have options.  The easiest is to use our [online validator](https://github.com/swagger-api/validator-badge) which not only will let you validate your spec, but with the debug flag, you can see what's wrong with your spec.  For example:\n\nhttp://online.swagger.io/validator/debug?url=http://petstore.swagger.io/v2/swagger.json\n\n### Generating dynamic html api documentation\n\nTo do so, just use the `-l dynamic-html` flag when reading a spec file.  This creates HTML documentation that is available as a single-page application with AJAX.  To view the documentation:\n\n```sh\ncd samples/dynamic-html/\nnpm install\nnode .\n```\n\nWhich launches a node.js server so the AJAX calls have a place to go.\n\n\n### Generating static html api documentation\n\nTo do so, just use the `-l html` flag when reading a spec file.  This creates a single, simple HTML file with embedded css so you can ship it as an email attachment, or load it from your filesystem:\n\n```sh\ncd samples/html/\nopen index.html\n```\n\n\n### To build a server stub\n\nPlease refer to https://github.com/swagger-api/swagger-codegen/wiki/Server-stub-generator-HOWTO for more information.\n\n### To build the codegen library\n\nThis will create the Swagger Codegen library from source.\n\n```sh\nmvn package\n```\n\nNote!  The templates are included in the library generated.  If you want to modify the templates, you'll need to either repackage the library OR specify a path to your scripts\n\n## Workflow Integration\n\n### Maven Integration\n\nYou can use the [swagger-codegen-maven-plugin](modules/swagger-codegen-maven-plugin/README.md) for integrating with your workflow, and generating any codegen target.\n\n### Gradle Integration\n\n[Gradle Swagger Generator Plugin](https://github.com/int128/gradle-swagger-generator-plugin) is available for generating source code and API document.\n\n## GitHub Integration\n\nTo push the auto-generated SDK to GitHub, we provide `git_push.sh` to streamline the process. For example:\n\n 1) Create a new repository in GitHub (Ref: https://help.github.com/articles/creating-a-new-repository/)\n\n 2) Generate the SDK\n```sh\n java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate \\\n -i modules/swagger-codegen/src/test/resources/2_0/petstore.json -l perl \\\n --git-user-id \"swaggerapi\" \\\n --git-repo-id \"petstore-perl\" \\\n --release-note \"Github integration demo\" \\\n -o /var/tmp/perl/petstore\n```\n 3) Push the SDK to GitHub\n```sh\ncd /var/tmp/perl/petstore\n/bin/sh ./git_push.sh\n```\n\n## Online generators\n\nOne can also generate API client or server using the online generators (https://generator.swagger.io)\n\nFor example, to generate Ruby API client, simply send the following HTTP request using curl:\n```sh\ncurl -X POST -H \"content-type:application/json\" -d '{\"swaggerUrl\":\"http://petstore.swagger.io/v2/swagger.json\"}' https://generator.swagger.io/api/gen/clients/ruby\n```\nThen you will receieve a JSON response with the URL to download the zipped code.\n\nTo customize the SDK, you can `POST` to `https://generator.swagger.io/gen/clients/{language}` with the following HTTP body:\n```json\n{\n  \"options\": {},\n  \"swaggerUrl\": \"http://petstore.swagger.io/v2/swagger.json\"\n}\n```\nin which the `options` for a language can be obtained by submitting a `GET` request to `https://generator.swagger.io/api/gen/clients/{language}`:\n\nFor example, `curl https://generator.swagger.io/api/gen/clients/python` returns\n```json\n{\n  \"packageName\":{\n    \"opt\":\"packageName\",\n    \"description\":\"python package name (convention: snake_case).\",\n    \"type\":\"string\",\n    \"default\":\"swagger_client\"\n  },\n  \"packageVersion\":{\n    \"opt\":\"packageVersion\",\n    \"description\":\"python package version.\",\n    \"type\":\"string\",\n    \"default\":\"1.0.0\"\n  },\n  \"sortParamsByRequiredFlag\":{\n    \"opt\":\"sortParamsByRequiredFlag\",\n    \"description\":\"Sort method arguments to place required parameters before optional parameters.\",\n    \"type\":\"boolean\",\n    \"default\":\"true\"\n  }\n}\n```\nTo set package name to `pet_store`, the HTTP body of the request is as follows:\n```json\n{\n  \"options\": {\n    \"packageName\": \"pet_store\"\n  },\n  \"swaggerUrl\": \"http://petstore.swagger.io/v2/swagger.json\"\n}\n```\nand here is the curl command:\n```sh\ncurl -H \"Content-type: application/json\" -X POST -d '{\"options\": {\"packageName\": \"pet_store\"},\"swaggerUrl\": \"http://petstore.swagger.io/v2/swagger.json\"}' https://generator.swagger.io/api/gen/clients/python\n```\n\nInstead of using `swaggerUrl` with an URL to the OpenAPI/Swagger spec, one can include the spec in the JSON payload with `spec`, e.g.\n```json\n{\n  \"options\": {},\n  \"spec\": {\n    \"swagger\": \"2.0\",\n    \"info\": {\n      \"version\": \"1.0.0\",\n      \"title\": \"Test API\"\n    },\n    ...\n  }\n}\n```\n\nGuidelines for Contribution\n---------------------------\n\nPlease refer to this [page](https://github.com/swagger-api/swagger-codegen/blob/master/CONTRIBUTING.md)\n\nCompanies/Projects using Swagger Codegen\n----------------------------------------\nHere are some companies/projects using Swagger Codegen in production. To add your company/project to the list, please visit [README.md](https://github.com/swagger-api/swagger-codegen/blob/master/README.md) and click on the icon to edit the page.\n- [Acando](https://www.acando.de/)\n- [Accengage](https://www.accengage.com/)\n- [Accruent](https://www.accruent.com/)\n- [Activehours](https://www.activehours.com/)\n- [Actonica](https://www.actonica.com)\n- [Acunetix](https://www.acunetix.com/)\n- [Adaptant](https://www.adaptant.io/)\n- [Atlassian](https://www.atlassian.com/)\n- [Autodesk](http://www.autodesk.com/)\n- [Avenida Compras S.A.](https://www.avenida.com.ar)\n- [AYLIEN](http://aylien.com/)\n- [Balance Internet](https://www.balanceinternet.com.au/)\n- [beemo](http://www.beemo.eu)\n- [bitly](https://bitly.com)\n- [BeezUP](http://www.beezup.com)\n- [Box](https://box.com)\n- [Bufferfly Network](https://www.butterflynetinc.com/)\n- [Cachet Financial](http://www.cachetfinancial.com/)\n- [carpolo](http://www.carpolo.co/)\n- [Carus](https://www.carus.com/)\n- [Cisco](http://www.cisco.com/)\n- [CloudBoost](https://www.CloudBoost.io/)\n- [Cloudsmith](https://cloudsmith.io/)\n- [Conplement](http://www.conplement.de/)\n- [Cummins](http://www.cummins.com/)\n- [Cupix](http://www.cupix.com)\n- [DBBest Technologies](https://www.dbbest.com)\n- [DecentFoX](http://decentfox.com/)\n- [DocRaptor](https://docraptor.com)\n- [DocuSign](https://www.docusign.com)\n- [Elastic](https://www.elastic.co/)\n- [Ergon](http://www.ergon.ch/)\n- [Dell EMC](https://www.emc.com/)\n- [eureka](http://eure.jp/)\n- [everystory.us](http://everystory.us)\n- [Expected Behavior](http://www.expectedbehavior.com/)\n- [fashionTrade](https://www.fashiontrade.com/)\n- [Fastly](https://www.fastly.com/)\n- [FINRA](https://github.com/FINRAOS/herd/)\n- [Flat](https://flat.io)\n- [Finder](http://en.finder.pl/)\n- [Fitwell](https://fitwell.co/)\n- [FH Münster - University of Applied Sciences](http://www.fh-muenster.de)\n- [FormAPI](https://formapi.io/)\n- [Fotition](https://www.fotition.com/)\n- [Gear Zero Network](https://www.gearzero.ca)\n- [General Electric](https://www.ge.com/)\n- [Genesys - PureCloud](http://developer.mypurecloud.com/)\n- [Germin8](http://www.germin8.com)\n- [GigaSpaces](http://www.gigaspaces.com)\n- [GMO Pepabo](https://pepabo.com/en/)\n- [goTransverse](http://www.gotransverse.com/api)\n- [GraphHopper](https://graphhopper.com/)\n- [Gravitate Solutions](http://gravitatesolutions.com/)\n- [HashData](http://www.hashdata.cn/)\n- [Hewlett Packard Enterprise](https://hpe.com)\n- [High Technologies Center](http://htc-cs.com)\n- [Hootsuite](https://hootsuite.com/)\n- [Huawei Cloud](http://www.huaweicloud.com/en-us/product/cs.html)\n- [Husbanken](https://www.husbanken.no)\n- [IBM](https://www.ibm.com)\n- [IMS Health](http://www.imshealth.com/en/solution-areas/technology-and-applications)\n- [Individual Standard IVS](http://www.individual-standard.com)\n- [INSPIDE](http://www.inspide.com)\n- [Intent HQ](http://www.intenthq.com)\n- [Kabuku](http://www.kabuku.co.jp/en)\n- [Kurio](https://kurio.co.id)\n- [Kuroi](http://kuroiwebdesign.com/)\n- [Kuary](https://kuary.com/)\n- [Kubernetes](https://kubernetes.io/)\n- [LANDR Audio](https://www.landr.com/)\n- [Lascaux](http://www.lascaux.it/)\n- [Leanix](http://www.leanix.net/)\n- [Leica Geosystems AG](http://leica-geosystems.com)\n- [LiveAgent](https://www.ladesk.com/)\n- [LXL Tech](http://lxltech.com)\n- [Lyft](https://www.lyft.com/developers)\n- [MailMojo](https://mailmojo.no/)\n- [Metaswitch](https://www.metaswitch.com/)\n- [Mindera](http://mindera.com/)\n- [Mporium](http://mporium.com/)\n- [Neverfail](https://neverfail.com/)\n- [NTT DATA](http://www.nttdata.com/)\n- [nViso](http://www.nviso.ch/)\n- [Okiok](https://www.okiok.com)\n- [Onedata](http://onedata.org)\n- [Open International Systems](https://openintl.com/)\n- [OrderCloud.io](http://ordercloud.io)\n- [OSDN](https://osdn.jp)\n- [PagerDuty](https://www.pagerduty.com)\n- [PagerTree](https://pagertree.com)\n- [Pepipost](https://www.pepipost.com)\n- [Peatio Tech](https://www.peatio.tech)\n- [Plexxi](http://www.plexxi.com)\n- [Pixoneye](http://www.pixoneye.com/)\n- [PostAffiliatePro](https://www.postaffiliatepro.com/)\n- [PracticeBird](https://www.practicebird.com/)\n- [Prill Tecnologia](http://www.prill.com.br)\n- [Prokarma](https://www.prokarma.com)\n- [QAdept](http://qadept.com/)\n- [QuantiModo](https://quantimo.do/)\n- [QuickBlox](https://quickblox.com/)\n- [Rapid7](https://rapid7.com/)\n- [Red Hat](https://www.redhat.com/)\n- [Reload! A/S](https://reload.dk/)\n- [REstore](https://www.restore.eu)\n- [REST United](https://restunited.com)\n- [Revault Sàrl](http://revault.ch)\n- [Riffyn](https://riffyn.com)\n- [Royal Bank of Canada (RBC)](http://www.rbc.com/canada.html)\n- [Saritasa](https://www.saritasa.com/)\n- [SAS](https://www.sas.com)\n- [SCOOP Software GmbH](http://www.scoop-software.de)\n- [SessionM](https://www.sessionm.com/)\n- [Shine Solutions](https://shinesolutions.com/)\n- [Simpfony](https://www.simpfony.com/)\n- [Skurt](http://www.skurt.com)\n- [Slamby](https://www.slamby.com/)\n- [SmartRecruiters](https://www.smartrecruiters.com/)\n- [snapCX](https://snapcx.io)\n- [SPINEN](http://www.spinen.com)\n- [Sponsoo](https://www.sponsoo.de)\n- [SRC](https://www.src.si/)\n- [Stardog Ventures](https://www.stardog.io)\n- [Stingray](http://www.stingray.com)\n- [StyleRecipe](http://stylerecipe.co.jp)\n- [Svenska Spel AB](https://www.svenskaspel.se/)\n- [Switch Database](https://www.switchdatabase.com/)\n- [TaskData](http://www.taskdata.com/)\n- [ThirdWatch.ai](https://www.thirdwatch.ai/)\n- [ThoughtWorks](https://www.thoughtworks.com)\n- [Tpay](https://tpay.com)\n- [Trexle](https://trexle.com/)\n- [Upwork](http://upwork.com/)\n- [uShip](https://www.uship.com/)\n- [VMware](https://vmware.com/)\n- [Viavi Solutions Inc.](https://www.viavisolutions.com)\n- [W.UP](http://wup.hu/?siteLang=en)\n- [Wealthfront](https://www.wealthfront.com/)\n- [Webever GmbH](https://www.webever.de/)\n- [WEXO A/S](https://www.wexo.dk/)\n- [XSky](http://www.xsky.com/)\n- [Yelp](http://www.yelp.com/)\n- [Zalando](https://tech.zalando.com)\n- [ZEEF.com](https://zeef.com/)\n- [zooplus](https://www.zooplus.com/)\n\nPresentations/Videos/Tutorials/Books\n----------------------------------------\n- 2011/08/31 - [Introducing Swagger](https://www.slideshare.net/fehguy/introducing-swagger) by [Tony Tam](https://twitter.com/fehguy)\n- 2014/05/22 - [Swagger APIs for Humans and Robots](https://www.slideshare.net/fehguy/swagger-apis-for-humans-and-robots-gluecon) by [Tony Tam](https://twitter.com/fehguy) at [Gluecon](http://gluecon.com/)\n- 2014/11/11 - [Genie 2.0: Second Wish Granted!](https://medium.com/netflix-techblog/genie-2-0-second-wish-granted-d888d79455c6) by [Tom Gianos](http://www.linkedin.com/in/thomasgianos/) and [Amit Sharma](https://www.linkedin.com/pub/amit-sharma/5/163/a83) @ [Netflix](https://www.netflix.com/) Big Data Platform Team\n- 2015/07/28 - [Enriching RESTful Services with Swagger](https://blog.philipphauer.de/enriching-restful-services-swagger/) by [Philipp Hauer](https://blog.philipphauer.de/)\n- 2015/11/11 - [Generate client stubs & document your REST-API using Swagger & Spring](https://www.youtube.com/watch?v=43GhBbP--oI) by [Johannes Fiala](https://github.com/jfiala) @ Devoxx Belgium 2015\n- 2015/12/03 - [こんなに簡単! Swagger Codegenのカスタマイズ](http://qiita.com/Quramy/items/c583f3213f0b77ff1bac) by [Quramy](http://qiita.com/Quramy)\n- 2016/01/12 - [Generate client side code using Swagger Codegen](http://rnavagamuwa.com/open-source/generate-client-side-code-using-swagger-codegen/) by [RNAVAGAMUWA](http://rnavagamuwa.com/author/admin/)\n- 2016/01/15 - [How to end manual REST-API client coding](https://www.youtube.com/watch?v=RzZRdqZp6Oo) by [Johannes Fiala](https://github.com/jfiala) @ dotJS 2015\n- 2016/04/27 - [Automated REST API Development](https://yos.io/2016/04/27/automated-api-development/) by [Yos Riady](https://www.linkedin.com/in/yosriady)\n- 2016/05/29 - [Generating Java Spring-MVC code from Swagger Spec](https://www.clianz.com/2016/05/29/java-mvc-swagger-gen/) by [@icha024](https://github.com/icha024)\n- 2016/07/22 - [Building Microservices? Here is what you should know](https://cloudncode.blog/2016/07/22/msa-getting-started/) by Sumit Maingi\n- 2016/08/23 - [Generating Dreamfactory Client SDKs based on Swagger API Definitions](http://blog.dreamfactory.com/generating-dreamfactory-client-sdks-based-on-swagger-api-definitions) by [Phil Schuler](https://github.com/philicious/)\n- 2016/09/28 - [1 UNBELIEVABLE TRICK TO CREATE AN EASY TO CONSUME API IN .NET](https://stapp.space/1-simple-trick-to-create-a-good-api-in-net/) by [Piotr Stapp](https://stapp.space/author/piotr-stapp/)\n- 2016/10/10 - [Using swagger-codegen with Marketo](http://developers.marketo.com/blog/using-swagger-codegen-with-marketo/) by [Kenny Elkington](http://developers.marketo.com/blog/using-swagger-codegen-with-marketo/)\n- 2016/10/12 - [Designing a Swagger API](https://sookocheff.com/post/api/swagger/) by [Kevin Sookocheff](https://sookocheff.com/)\n- 2016/11/05 - [How to generate a REST Application](https://www.youtube.com/watch?v=iyC9BWMe75Q) by [Johannes Fiala](https://github.com/jfiala) @ DevFest Vienna 2016\n- 2016/11/10 - [Building an AEM API clients ecosystem](http://blog.cliffano.com/2016/11/10/adobe-marketing-cloud-community-expo/) by Cliffano Subagio, Michael Diender, Stephen Shim from [Shine Solutions](https://shinesolutions.com/) @ [Adobe Marketing Cloud Community Expo (AMCCE)](https://www.meetup.com/Melbourne-AEM-CQ-Meetup/events/233363101/)\n- 2016/11/18 - [How to generate a REST CXF3 application from Swagger-Contract](https://www.slideshare.net/johannes_fiala/how-to-generate-a-rest-cxf3-application-from-swagger-apacheconeu-2016) by [Johannes Fiala](https://github.com/jfiala) @ ApacheConEU 2016\n- 2016/11/25 - [Swagger Codegen for Swift3 and NodeJS](https://normand1.github.io/blog/swift/swagger/codegen/2016/11/25/Swagger-Codegen-for-Swift3-and-NodeJS.html) by [David Norman](https://github.com/normand1)\n- 2016/12/08 - [Building an API with Swagger](https://www.youtube.com/watch?v=PbwQWw7xSOM)\n- 2016/12/08 - [Generate client side code using Swagger Codegen](https://carra-lucia-ltd.co.uk/2016/12/08/generate-client-side-code-using-swagger-codegen/) by [theFerkel](https://carra-lucia-ltd.co.uk/author/theferkel/)\n- 2017/01/16 - [Zero to API in 4 minutes](https://cidrblock.github.io/zero-to-api-in-4-minutes.html) by [Bradley A. Thornton](https://github.com/cidrblock)\n- 2017/02/09 - [「Swaggerを利用した新規サービス開発」というタイトルで登壇して来ました](https://techblog.recochoku.jp/1055) by [recotech](https://www.slideshare.net/recotech)\n- 2017/03/03 - [Swagger Codegen の使い方の簡単な説明です](https://speakerdeck.com/wagyu298/swagger-codegen) by [wagyu298](https://github.com/wagyu298)\n- 2017/03/24 - [Using Open API Specification To Put Lyft SDK Support in the Fast Lane](https://medium.com/lyft-developer-platform/using-open-api-specification-to-put-lyft-sdk-support-in-the-fast-lane-7b623218e4ee) by [Val Polouchkine](https://github.com/vpolouchkine)\n- 2017/04/13 - [Automatically Generating your API Client with Swagger and Swagger Codegen](https://www.youtube.com/watch?v=EzKwi-u9jQo) by [Jesse Collis](https://github.com/jessedc) @ Melbourne Cocoaheads\n- 2017/04/27 - [Swagger Codegen のPHP実装があまりにアレだったので、ライブラリ自作して公開してみた](http://qiita.com/imunew/items/2e9c472e0097e329f2cd) by [imunew](http://qiita.com/imunew)\n- 2017/05/17 - [Diseño de APIs con OpenAPI](https://www.slideshare.net/pjmolina/diseo-de-apis-con-openapi) by [Pedro J. Molina](https://github.com/pjmolina) @ [JSDayES 2017](http://2017.jsday.es/)\n- 2017/05/22 - [Presentation of the Vert.x-Swagger project](http://vertx.io/blog/presentation-of-the-vert-x-swagger-project/) by [@phiz71](http://github.com/phiz71)\n- 2017/05/22 - [Automatically generating your API from a swagger file using gradle](https://www.jcore.com/2017/05/22/automatically-generating-api-using-swagger-and-gradle/) by [Deniz Turan](https://www.jcore.com/author/deniz/)\n- 2017/06/21 - [Swagger Presentation - Warsaw Ruby Users Group](https://www.youtube.com/watch?v=uCnnDMFQB8U) by [@rafalpetryka](http://github.com/rafalpetryka)\n- 2017/06/29 - [Making SDKs: the bespoke, the hopeful and the generated](https://devrel.net/developer-experience/making-sdks-bespoke-hopeful-generated) by [Tristan Sokol](https://github.com/tristansokol) ([Square](https://github.com/square)) at DevXcon 2017\n- 2017/07/11 - [OpenAPI development with Python](https://www.slideshare.net/TakuroWada/20170711-euro-python2017) by [和田拓朗](https://github.com/taxpon) at [EuroPython 2017](https://ep2017.europython.eu/en/)\n- 2017/07/29 - [How Square makes its SDKs](https://medium.com/square-corner-blog/how-square-makes-its-sdks-6a0fd7ea4b2d) by [Tristan Sokol](https://github.com/tristansokol) ([Square](https://github.com/square))\n- 2017/07/31 - [How to Generate a Deployable REST CXF3 Application from a Swagger-Contract](https://www.youtube.com/watch?v=gM63rJlUHZQ) by [Johannes Fiala](https://github.com/jfiala) @ Voxxed Days Vienna\n- 2017/08/11 - [Swagger Codegen 自动生成Retrofit 代码](https://juejin.im/entry/598d8eb86fb9a03c52459e2a) by [徐磊](http://www.jianshu.com/u/792c738b33fc)\n- 2017/08/24 - [APIs First](https://engineering.squarespace.com/blog/2017/apis-first) by [roykachouh](https://github.com/roykachouh) ([Square](https://github.com/square))\n- 2017/08/31 - [Bringing Jenkins Remote Access API To The Masses](http://blog.cliffano.com/2017/09/01/jenkins-world-2017/) by [Cliffano Subagio](http://cliffano.com) from [Shine Solutions](https://shinesolutions.com/) @ [Jenkins World 2017](https://jenkinsworld20162017.sched.com/)\n- 2017/09/08 - [Swagger Codegen で自動生成したクライアントSDKを使う(iOS編)](http://blog.techium.jp/entry/2017/09/08/071650) by [kfurue](http://profile.hatena.ne.jp/kfurue/)\n- 2017/09/09 - [Swagger Codegen で自動生成したクライアントSDKを使う(RxSwift 編)](http://blog.techium.jp/entry/2017/09/09/113003) by [kfurue](http://profile.hatena.ne.jp/kfurue/)\n- 2017/09/09 - [OpenAPIを利用したPythonWebアプリケーション開発](https://www.slideshare.net/TakuroWada/openapipythonweb) by [和田拓朗](https://github.com/taxpon) at [PyCon JP 2017](https://pycon.jp/2017/ja/)\n- 2017/09/21 - [Generating an Elastic Cloud Enterprise Client](https://www.elastic.co/blog/generating-an-elastic-cloud-enterprise-client) by [Greg Marzouka](https://github.com/gmarz) ([Elastic](https://www.elastic.co/))\n- 2017/09/26 - [How to Use IoT Application Enablement Api Hub JSON Descriptor in Postman and How to Generate Client Code](https://www.linkedin.com/in/radu-simen/) by [Radu Simen](https://www.linkedin.com/in/radu-simen/) ([SAP](https://www.sap.com/))\n- 2017/09/28 - [Swagger Codegenで APIクライアントgem 自動生成 #m3kt](https://speakerdeck.com/juntaki/swagger-codegende-apikuraiantogem-zi-dong-sheng-cheng-number-m3kt) by [Jumpei Takiyasu](https://github.com/juntaki)\n- 2017/09/30 - [Swaggerのテンプレートを魔改造した話 #渋谷java](https://www.slideshare.net/int128/swagger-80309224) by [Hidetake Iwata](https://github.com/int128) ([NTT DATA Corporation](http://www.nttdata.com/global/en/))\n- 2017/10/04 - [Enterprise-friendly Java client for Microsoft Machine Learning Server](https://blogs.msdn.microsoft.com/mlserver/2017/10/04/enterprise-friendly-java-client-for-microsoft-machine-learning-server/) by [Pratik Palnitkar](https://www.linkedin.com/in/pratikpalnitkar/) ([Microsoft](https://www.microsoft.com/))\n- 2017/10/08 - [Generating a REST Ada client with OpenAPI and Swagger Codegen](https://blog.vacs.fr/vacs/blogs/post.html?post=2017/10/08/Generating-a-REST-Ada-client-with-OpenAPI-and-Swagger-Codegen) by [Stephane Carrez](https://github.com/stcarrez)\n- 2017/11/08 - [A Beginner's Guide to Code Generation for REST APIs](https://gum.co/swagger_codegen_beginner)(eBook) by [William Cheng](https://twitter.com/wing328)\n- 2017/11/18 - [10年前のレガシーシステムをサーバーサイドKotlinでフルリニューアルしている話 #jjug_ccc #ccc_g2](https://speakerdeck.com/maeharin/10nian-qian-falseregasisisutemuwosabasaidokotlindehururiniyuarusiteiruhua-number-jjug-ccc-number-ccc-g2) by [Hidenori Maehara](https://github.com/maeharin)\n- 2017/11/21 - [swagger-codegen から眺める Swift4](https://speakerdeck.com/d_date/swagger-codegen-karatiao-meru-swift4) by [Daiki Matsudate](https://github.com/d-date)\n- 2017/12/07 - [API-driven development with OpenAPI and Swagger, Part 2](https://www.itworld.com/article/3199190/apis/api-driven-development-with-openapi-and-swagger-part-2.html) by Matthew Tyson\n- 2017/12/29 - [REST APIs代码生成指南](https://gumroad.com/l/swagger_codegen_beginner_zh)(eBook) by [William Cheng](https://github.com/wing328), [Xin Meng](https://github.com/xmeng1)\n- 2017/12/21 - [Using Protocol Buffer to Generate SDK at Hootsuite](http://code.hootsuite.com/using-protocol-buffer-to-generate-sdk-at-hoosuite/?lipi=urn%3Ali%3Apage%3Ad_flagship3_messaging%3By4ATz3SDRXyvXJJ14LQysQ%3D%3D) by [Joy Zhang](https://www.linkedin.com/in/joy8zhang/)\n- 2018/01/11 - [Swagger 工具箱介绍及代码自动生成示例](https://github.com/qct/swagger-example) by [qct](https://github.com/qct)\n- 2018/01/19 - [Generowanie kodu usług REST - przewodnik dla początkujących](https://gum.co/swagger_codegen_beginner_pl)(eBook) by [William Cheng](https://github.com/wing328), [Tomasz Prus](https://github.com/tomplus), [Bartek Kryza](https://github.com/bkryza)\n- 2018/02/03 - [Writing REST APIs with OpenAPI and Swagger Ada](https://www.slideshare.net/StephaneCarrez1/writing-rest-apis-with-openapi-and-swagger-ada/StephaneCarrez1/writing-rest-apis-with-openapi-and-swagger-ada) by [Stephane Carrez](https://github.com/stcarrez) at [FOSDEM 2018](https://fosdem.org/2018)\n- 2018/02/28 - [OpenAPI–An eBay Perspective](https://www.ebayinc.com/stories/blogs/tech/openapi-an-ebay-perspective/) by Shekhar Banerjee (eBay)\n- 2018/03/16 - [REST APIのためのコード生成入門](https://gumroad.com/l/swagger_codegen_beginner_jp) by [William Cheng](https://github.com/wing328), [中野暁人](https://github.com/ackintosh), [和田拓朗](https://github.com/taxpon)\n\n# Swagger Codegen Core Team\n\nSwagger Codegen core team members are contributors who have been making significant contributions (review issues, fix bugs, make enhancements, etc) to the project on a regular basis.\n\n## Core Team Members\n\n\n## Template Creator\nHere is a list of template creators:\n * API Clients:\n   * Ada: @stcarrez\n   * Akka-Scala: @cchafer\n   * Apex: @asnelling\n   * Bash: @bkryza\n   * C++ REST: @Danielku15\n   * C# (.NET 2.0): @who\n   * C# (.NET Standard 1.3 ): @Gronsak\n   * C# (.NET 4.5 refactored): @jimschubert\n   * Clojure: @xhh\n   * Dart: @yissachar\n   * Dart (refactored in 2.4.0): @joernahrens\n   * Elixir: @niku\n   * Elm: @trenneman\n   * Eiffel: @jvelilla\n   * Erlang: @tsloughter\n   * Groovy: @victorgit\n   * Go: @wing328\n   * Go (rewritten in 2.3.0): @antihax\n   * Haskell (http-client): @jonschoning\n   * Java (Feign): @davidkiss\n   * Java (Retrofit): @0legg\n   * Java (Retrofit2): @emilianobonassi\n   * Java (Jersey2): @xhh\n   * Java (okhttp-gson): @xhh\n   * Java (RestTemplate): @nbruno\n   * Java (RESTEasy): @gayathrigs\n   * Java (Vertx): @lopesmcc\n   * Java (Google APIs Client Library): @charlescapps\n   * Java (Rest-assured): @viclovsky\n   * Javascript/NodeJS: @jfiala\n   * Javascript (Closure-annotated Angular) @achew22\n   * JMeter: @davidkiss\n   * Kotlin: @jimschubert\n   * Lua: @daurnimator\n   * Perl: @wing328\n   * PHP (Guzzle): @baartosz\n   * PowerShell: @beatcracker\n   * R: @ramnov\n   * Rust: @farcaller\n   * Rust (rust-server): @metaswitch\n   * Scala (scalaz & http4s): @tbrown1979\n   * Swift: @tkqubo\n   * Swift 3: @hexelon\n   * Swift 4: @ehyche\n   * TypeScript (Node):  @mhardorf\n   * TypeScript (Angular1):  @mhardorf\n   * TypeScript (Fetch): @leonyu\n   * TypeScript (Angular2): @roni-frantchi\n   * TypeScript (jQuery): @bherila\n * Server Stubs\n   * Ada: @stcarrez\n   * C# ASP.NET5: @jimschubert\n   * C# NancyFX: @mstefaniuk\n   * C++ Pistache: @sebymiano\n   * C++ Restbed: @stkrwork\n   * Erlang Server: @galaxie\n   * Go Server: @guohuang\n   * Haskell Servant: @algas\n   * Java MSF4J: @sanjeewa-malalgoda\n   * Java Spring Boot: @diyfr\n   * Java Undertow: @stevehu\n   * Java Play Framework: @JFCote\n   * Java PKMST: @anshu2185 @sanshuman @rkumar-pk @ninodpillai\n   * JAX-RS RestEasy: @chameleon82\n   * JAX-RS CXF: @hiveship\n   * JAX-RS CXF (CDI): @nickcmaynard\n   * JAX-RS RestEasy (JBoss EAP): @jfiala\n   * Kotlin: @jimschubert\n   * PHP Lumen: @abcsun\n   * PHP Slim: @jfastnacht\n   * PHP Symfony: @ksm2\n   * PHP Zend Expressive (with Path Handler): @Articus\n   * Ruby on Rails 5: @zlx\n   * Rust (rust-server): @metaswitch\n   * Scala Finch: @jimschubert\n   * Scala Lagom: @gmkumar2005\n * Documentation\n   * HTML Doc 2: @jhitchcock\n   * Confluence Wiki: @jhitchcock\n * Configuration\n   * Apache2: @stkrwork\n\n## How to join the core team\n\nHere are the requirements to become a core team member:\n- rank within top 50 in https://github.com/swagger-api/swagger-codegen/graphs/contributors\n  - to contribute, here are some good [starting points](https://github.com/swagger-api/swagger-codegen/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22)\n- regular contributions to the project\n  - about 3 hours per week\n  - for contribution, it can be addressing issues, reviewing PRs submitted by others, submitting PR to fix bugs or make enhancements, etc\n\n To become a Template Creator, simply submit a PR for new API client (e.g. Rust, Elixir) or server stub (e.g. Ruby Grape) generator.\n\n# Swagger Codegen Technical Committee\n\nMembers of the Swagger Codegen technical committee shoulder the following responsibilities:\n\n- Provides guidance and direction to other users\n- Reviews pull requests and issues\n- Improves the generator by making enhancements, fixing bugs or updating documentations\n- Sets the technical direction of the generator\n\nWho is eligible? Those who want to join must have at least 3 PRs merged into a generator. (Exceptions can be granted to template creators or contributors who have made a lot of code changes with less than 3 merged PRs)\n\n## Members of Technical Committee\n\n| Languages     | Member (join date) |\n|:-------------|:-------------|\n| ActionScript |      |\n| Ada | @stcarrez (2018/02) |\n| Android |  |\n| Apex  |     |\n| Bash  | @kenjones-cisco (2017/09) |\n| C++      | @fvarose (2017/11) |\n| C#        | @mandrean (2017/08) |\n| Clojure   |  |\n| Dart      | @ircecho (2017/07) |\n| Eiffel    | |\n| Elixir    |  |\n| Elm       |  |\n| Erlang    | |\n| Groovy    |  |\n| Go        | |\n| Haskell   | |\n| Java      | |\n| Kotlin     | |\n| Lua     | |\n| NodeJS/Javascript | @CodeNinjai (2017/07) |\n| ObjC      |  |\n| Perl      | |\n| PHP      | @dkarlovi (2017/07) @mandrean (2017/08) |\n| Python   | @kenjones-cisco (2017/11)|\n| R        |  |\n| Ruby      | @zlx (2017/09) |\n| Rust      | |\n| Scala     | |\n| Swift     | @ehyche (2017/08) |\n| TypeScript | |\n\n\n# License information on Generated Code\n\nThe Swagger Codegen project is intended as a benefit for users of the Swagger / Open API Specification.  The project itself has the [License](#license) as specified.  In addition, please understand the following points:\n\n* The templates included with this project are subject to the [License](#license).\n* Generated code is intentionally _not_ subject to the parent project license\n\nWhen code is generated from this project, it shall be considered **AS IS** and owned by the user of the software.  There are no warranties--expressed or implied--for generated code.  You can do what you wish with it, and once generated, the code is your responsibility and subject to the licensing terms that you deem appropriate.\n\nLicense\n-------\n\nCopyright 2018 SmartBear Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
fmvilas/swagger-node-codegen: >
  <p align="center"><img src="logo.png"></p>

  <p align="center">
    <strong>OpenAPI Node.js<br>Code Generator</strong>
  </p>

  <br><br>

  Use your API OpenAPI 3.x/Swagger 2 definition to generate Node.js
  ES7-compliant code for your API.


  The generated code features:


  * ES7

  * ESLint

  * YAML config file

  * Express

  * No transpiling


  ## Install


  To use it from the CLI:


  ```bash

  npm install -g swagger-node-codegen

  ```


  To use it as a module in your project:


  ```bash

  npm install --save swagger-node-codegen

  ```


  ## Requirements


  * Node.js v7.6+


  ## Usage


  ### From the command-line interface (CLI)


  ```bash
    Usage: snc [options] <swaggerFile>


    Options:

      -V, --version                  output the version number
      -o, --output <outputDir>       directory where to put the generated files (defaults to current directory)
      -t, --templates <templateDir>  directory where templates are located (defaults to internal nodejs templates)
      -h, --help                     output usage information
  ```


  #### Examples


  The shortest possible syntax:

  ```bash

  snc swagger.yaml

  ```


  Specify where to put the generated code:

  ```bash

  snc swagger.yaml -o ./my-api

  ```


  ### As a module in your project


  ```js

  const path = require('path');

  const codegen = require('swagger-node-codegen');

  const swagger = require('./swagger.json');


  codegen.generate({
    swagger,
    target_dir: path.resolve(__dirname, './my-api')
  }).then(() => {
    console.log('Done!');
  }).catch(err => {
    console.error(`Something went wrong: ${err.message}`);
  });

  ```


  The `swagger` parameter can be either JSON or a path pointing to a JSON or
  YAML file.


  ```js

  const path = require('path');

  const codegen = require('swagger-node-codegen');


  codegen.generate({
    swagger: path.resolve(__dirname, './swagger.yml'),
    target_dir: path.resolve(__dirname, './my-api')
  }).then(() => {
    console.log('Done!');
  }).catch(err => {
    console.error(`Something went wrong: ${err.message}`);
  });

  ```

  #### Using async/await


  The function `codegen.generate` returns a Promise, so it means you can use
  async/await:


  ```js

  const path = require('path');

  const codegen = require('swagger-node-codegen');


  try {
    await codegen.generate({
      swagger: path.resolve(__dirname, './swagger.yml'),
      target_dir: path.resolve(__dirname, './my-api')
    });
    console.log('Done!');
  } catch (err) {
    console.error(`Something went wrong: ${err.message}`);
  }

  ```


  ## API Documentation


  ### Modules


  <dl>

  <dt><a href="#module_codegen">codegen</a></dt>

  <dd><p>This module generates a code skeleton for an API using
  OpenAPI/Swagger.</p>

  </dd>

  <dt><a href="#codegen.module_generate">generate</a> ⇒
  <code>Promise</code></dt>

  <dd><p>Generates a code skeleton for an API given an OpenAPI/Swagger file.</p>

  </dd>

  </dl>


  <a name="module_codegen"></a>


  ### codegen

  This module generates a code skeleton for an API using OpenAPI/Swagger.


  <a name="codegen.module_generate"></a>


  #### generate ⇒ <code>Promise</code>

  Generates a code skeleton for an API given an OpenAPI/Swagger file.



  | Param | Type | Description |

  | --- | --- | --- |

  | config | <code>Object</code> | Configuration options |

  | config.swagger | <code>Object</code> \| <code>String</code> |
  OpenAPI/Swagger JSON or a string pointing to an OpenAPI/Swagger file. |

  | config.target_dir | <code>String</code> | Path to the directory where the
  files will be generated. |

  | config.templates| <code>String</code> | Path to the directory where custom
  templates are (optional). |



  ## Templates

  You can create your own [templates](./templates/README.md).


  ## Authors


  * Fran Méndez ([@fmvilas](http://twitter.com/fmvilas))

  * Richard Klose ([@richardklose](http://github.com/richardklose))
janephp/open-api: >
  # Jane OpenAPI


  Generate a PHP Client API (PSR7 compatible) given a [OpenAPI (Swagger)
  specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).


  ## License


  View the [LICENSE](LICENSE) file attach to this project.


  ## Resources

   * [Documentation](http://jane.readthedocs.io/en/latest/)
   * [Contributing](https://github.com/janephp/janephp/blob/master/CONTRIBUTING.md)
   * [Report Issues](https://github.com/janephp/janephp/issues) and [send Pull Requests](https://github.com/janephp/janephp/pulls) 
   in the [main Jane Repository](https://github.com/janephp/janephp)
   
  ## Sponsor


  [![JoliCode](https://jolicode.com/images/logo.svg)](https://jolicode.com)


  Open Source time sponsored by JoliCode


  ## Credits


  * [All contributors](https://github.com/jolicode/jane/graphs/contributors)
dtzar/openapi-auto-test: >-
  {"message":"Not
  Found","documentation_url":"https://developer.github.com/v3/repos/contents/#get-the-readme"}
apiaryio/dredd: >
  # Dredd — HTTP API Testing Framework


  [![npm
  version](https://badge.fury.io/js/dredd.svg)](https://www.npmjs.com/package/dredd)

  [![Build
  Status](https://travis-ci.org/apiaryio/dredd.svg?branch=master)](https://travis-ci.org/apiaryio/dredd)

  [![Build
  Status](https://ci.appveyor.com/api/projects/status/n3ixfxh72qushyr4/branch/master?svg=true)](https://ci.appveyor.com/project/Apiary/dredd/branch/master)

  [![Dependency
  Status](https://david-dm.org/apiaryio/dredd.svg)](https://david-dm.org/apiaryio/dredd)

  [![devDependency
  Status](https://david-dm.org/apiaryio/dredd/dev-status.svg)](https://david-dm.org/apiaryio/dredd?type=dev)

  [![Greenkeeper
  badge](https://badges.greenkeeper.io/apiaryio/dredd.svg)](https://greenkeeper.io/)

  [![Documentation
  Status](https://readthedocs.org/projects/dredd/badge/?version=latest)](https://readthedocs.org/projects/dredd/builds/)

  [![Coverage
  Status](https://coveralls.io/repos/apiaryio/dredd/badge.svg?branch=master)](https://coveralls.io/github/apiaryio/dredd)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/dredd/badge.svg)](https://snyk.io/test/npm/dredd)


  ![Dredd - HTTP API Testing Framework](docs/_static/images/dredd.png?raw=true)


  > **Dredd is a language-agnostic command-line tool for validating

  API description document against backend implementation of the API.**


  - [Documentation][]

  - [Changelog][]

  - [Contributor's Guidelines][]


  Dredd reads your API description and step by step validates whether your API

  implementation replies with responses as they are described in the

  documentation.


  ### Supported API Description Formats


  - [API Blueprint][]

  - [OpenAPI 2][] (formerly known as Swagger)

  - [OpenAPI 3][]
  ([experimental](https://github.com/apiaryio/api-elements.js/blob/master/packages/fury-adapter-oas3-parser/STATUS.md),
  contributions welcome!)


  ### Supported Hooks Languages


  Dredd supports writing [hooks](https://dredd.org/en/latest/hooks/)

  — a glue code for each test setup and teardown. Following languages are
  supported:


  - [Go](https://dredd.org/en/latest/hooks-go/)

  - [Node.js (JavaScript)](https://dredd.org/en/latest/hooks-nodejs/)

  - [Perl](https://dredd.org/en/latest/hooks-perl/)

  - [PHP](https://dredd.org/en/latest/hooks-php/)

  - [Python](https://dredd.org/en/latest/hooks-python/)

  - [Ruby](https://dredd.org/en/latest/hooks-ruby/)

  - [Rust](https://dredd.org/en/latest/hooks-rust/)

  - Didn't find your favorite language? _[Add a new
  one!](https://dredd.org/en/latest/hooks-new-language/)_


  ### Supported Systems


  - Linux, macOS, Windows, ...

  - [Travis CI][], [CircleCI][], [Jenkins][], [AppVeyor][], ...


  ## Installation


  ```

  $ npm install -g dredd

  ```


  ## Quick Start


  1.  Create an [API Blueprint][] file called `api-description.apib`.
      Follow [tutorial at API Blueprint website][API Blueprint tutorial]
      or just take one of the [ready-made examples][API Blueprint examples].
  2.  Run interactive configuration:

      ```shell
      $ dredd init
      ```
  3.  Run Dredd:

      ```shell
      $ dredd
      ```
  4.  To see how to use all Dredd's features, browse the
      [full documentation][Documentation].


  ## Howtos, Tutorials, Blogposts (3rd party)


  - [Dredd - Language-agnostic HTTP API Testing Tool - Interview with Honza
  Javorek](https://survivejs.com/blog/dredd-interview/) *3/22/2019*

  - [Testing your API with
  Dredd](https://medium.com/mop-developers/testing-your-api-with-dredd-c02e6ca151f2)
  *9/27/2018*

  - [Writing Testable API Documentation Using APIB and Dredd
  (Rails)](https://blog.rebased.pl/2018/06/29/testable-api-docs.html)
  *6/29/2018*

  - [Design-first API Specification Workflow
  Matures](https://philsturgeon.uk/api/2018/03/01/api-specification-workflow-matures/)
  *3/1/2018*

  - [Writing and testing API specifications with API Blueprint, Dredd and
  Apiary](https://hackernoon.com/writing-and-testing-api-specifications-with-api-blueprint-dreed-and-apiary-df138accce5a)
  *12/04/2017*

  - [Testing an API Against its
  Documentation](https://dev.to/albertofdzm/testing-an-api-against-documentation-6cl)
  *11/23/2017*

  - [Keeping Documentation
  Honest](https://blog.apisyouwonthate.com/keeping-documentation-honest-d9ab5351ddd4)
  *11/21/2017*

  - [Apiary designed APIs tested using
  Dredd](https://redthunder.blog/2017/09/20/apiary-designed-apis-tested-using-dredd/)
  *09/20/2017*

  - [Dredd + Swagger for REST API
  testing](https://codeburst.io/dredd-swagger-for-rest-api-testing-715d1af5e8c5)
  *01/24/2017*

  - [Testing Your API Documentation With
  Dredd](https://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/)
  *08/08/2016*

  - [DREDD API Tester works with API
  Blueprints](http://www.finklabs.org/articles/api-blueprint-dredd.html)
  *07/05/2016*

  - [Documentation driven API Development using Laravel, Dredd and
  Apiary](https://medium.com/frianbiz/api-php-pilot%C3%A9e-par-la-doc-3c9eb4daa2aa)
  *06/21/2016*

  - [Dredd v1.1.0: A Bit
  Different](https://philsturgeon.uk/api/2016/06/20/dredd-v1-1-0-a-bit-different/)
  *06/20/2016*

  - [Dredd: Do Your HTTP API
  Justice](https://philsturgeon.uk/api/2015/01/28/dredd-api-testing-documentation/)
  *01/28/2015*




  [API Blueprint]: https://apiblueprint.org/

  [API Blueprint tutorial]: https://apiblueprint.org/documentation/tutorial.html

  [API Blueprint examples]:
  https://github.com/apiaryio/api-blueprint/tree/master/examples

  [OpenAPI 2]:
  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md

  [OpenAPI 3]:
  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md


  [Documentation]: https://dredd.org/en/latest/

  [Changelog]: https://github.com/apiaryio/dredd/releases

  [Contributor's Guidelines]: https://dredd.org/en/latest/contributing/


  [Travis CI]: https://travis-ci.org/

  [CircleCI]: https://circleci.com/

  [Jenkins]: https://jenkins.io/

  [AppVeyor]: https://www.appveyor.com/
quen2404/openapi-diff: >
  # OpenAPI-diff 


  Compare two OpenAPI specifications(3.x) and render the difference to html file
  or markdown file.


  [![CircleCI](https://circleci.com/gh/quen2404/openapi-diff/tree/master.svg?style=svg)](https://circleci.com/gh/quen2404/openapi-diff/tree/master)


  # Requirements

  `jdk1.8+`


  # Feature

  * Supports OpenAPi spec v3.0.

  * Depth comparison of parameters, responses, endpoint, http
  method(GET,POST,PUT,DELETE...)

  * Supports swagger api Authorization

  * Render difference of property with Expression Language

  * html & markdown render


  # Maven


  Available on [Maven
  Central](https://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22com.qdesrame%22%20AND%20a%3A%22openapi-diff%22)


  ```xml

  <dependency>
      <groupId>com.qdesrame</groupId>
      <artifactId>openapi-diff</artifactId>
      <version>1.2.0</version>
  </dependency>

  ```


  # Docker


  Available on [Docker Hub](https://hub.docker.com/r/quen2404/openapi-diff/) as
  `quen2404/openapi-diff`.


  ## Build the image


  This is only required if you want to try new changes in the Dockerfile of this
  project.


  ```bash

  docker build -t local-openapi-diff .

  ```


  You can replace the local image name `local-openapi-diff` by any name of your
  choice.


  ## Run an instance


  In this example the `$(pwd)/src/test/resources` directory is mounted in the
  `/specs` directory of the container

  in readonly mode (`ro`).


  ```bash

  docker run -t \
    -v $(pwd)/src/test/resources:/specs:ro \
    quen2404/openapi-diff /specs/path_1.yaml /specs/path_2.yaml
  ```


  The remote name `quen2404/openapi-diff` can be replaced with
  `local-openapi-diff` or the name you gave to your local image.


  # Usage

  OpenDiff can read swagger api spec from json file or http.


  ## Command Line


  ```bash

  $ openapi-diff --help

  usage: openapi-diff <old> <new>
      --debug                     Print debugging information
      --error                     Print error information
   -h,--help                      print this message
      --header <property=value>   use given header for authorisation
      --html <file>               export diff as html in given file
      --info                      Print additional information
   -l,--log <level>               use given level for log (TRACE, DEBUG,
                                  INFO, WARN, ERROR, OFF). Default: ERROR
      --markdown <file>           export diff as markdown in given file
   -o,--output <format=file>      use given format (html, markdown) for
                                  output in file
      --off                       No information printed
      --query <property=value>    use query param for authorisation
      --state                     Only output diff state: no_changes,
                                  incompatible, compatible
      --trace                     be extra verbose
      --version                   print the version information and exit
      --warn                      Print warning information
  ```


  ## Direct Invocation


  ```java

  public class Main {
      public static final String OPENAPI_DOC1 = "petstore_v3_1.json";
      public static final String OPENAPI_DOC2 = "petstore_v2_2.yaml";
          
      public static void main(String[] args) {
          ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);

          //...
      }
  }

  ```


  ### Render difference

  ---

  #### HTML

  ```java

  String html = new HtmlRender("Changelog",
          "http://deepoove.com/swagger-diff/stylesheets/demo.css")
                  .render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testNewApi.html");
      fw.write(html);
      fw.close();

  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  #### Markdown

  ```java

  String render = new MarkdownRender().render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testDiff.md");
      fw.write(render);
      fw.close();
      
  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  ### Extensions

  This project uses Java Service Provider Inteface (SPI) so additional
  extensions can be added. 


  To build your own extension, you simply need to create a
  `src/main/resources/META-INF/services/com.qdesrame.openapi.diff.compare.ExtensionDiff`
  file with the full classname of your implementation.  Your class must also
  implement the `com.qdesrame.openapi.diff.compare.ExtensionDiff` interface. 
  Then, including your library with the `openapi-diff` module will cause it to
  be triggered automatically.


  # Example

  ### CLI Output


  ```text

  ==========================================================================

  ==                            API CHANGE LOG                            ==

  ==========================================================================
                               Swagger Petstore                             
  --------------------------------------------------------------------------

  --                              What's New                              --

  --------------------------------------------------------------------------

  - GET    /pet/{petId}


  --------------------------------------------------------------------------

  --                            What's Deleted                            --

  --------------------------------------------------------------------------

  - POST   /pet/{petId}


  --------------------------------------------------------------------------

  --                          What's Deprecated                           --

  --------------------------------------------------------------------------

  - GET    /user/logout


  --------------------------------------------------------------------------

  --                            What's Changed                            --

  --------------------------------------------------------------------------

  - PUT    /pet
    Request:
          - Deleted application/xml
          - Changed application/json
            Schema: Backward compatible
  - POST   /pet
    Parameter:
      - Add tags in query
    Request:
          - Changed application/xml
            Schema: Backward compatible
          - Changed application/json
            Schema: Backward compatible
  - GET    /pet/findByStatus
    Parameter:
      - Deprecated status in query
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - GET    /pet/findByTags
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - DELETE /pet/{petId}
    Parameter:
      - Add newHeaderParam in header
  - POST   /pet/{petId}/uploadImage
    Parameter:
      - Changed petId in path
  - POST   /user
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithArray
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithList
    Request:
          - Changed application/json
            Schema: Backward compatible
  - GET    /user/login
    Parameter:
      - Delete password in query
  - GET    /user/logout

  - GET    /user/{username}
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - PUT    /user/{username}
    Request:
          - Changed application/json
            Schema: Backward compatible
  --------------------------------------------------------------------------

  --                                Result                                --

  --------------------------------------------------------------------------
                   API changes broke backward compatibility                 
  --------------------------------------------------------------------------

  ```


  ### Markdown

  ```markdown

  ### What's New

  ---

  * `GET` /pet/{petId} Find pet by ID


  ### What's Deleted

  ---

  * `POST` /pet/{petId} Updates a pet in the store with form data


  ### What's Deprecated

  ---

  * `GET` /user/logout Logs out current logged in user session


  ### What's Changed

  ---

  * `PUT` /pet Update an existing pet  
      Request

          Deleted request body : [application/xml]
          Changed response : [application/json]
  * `POST` /pet Add a new pet to the store  
      Parameter

          Add tags //add new query param demo
      Request

          Changed response : [application/xml]
          Changed response : [application/json]
  * `GET` /pet/findByStatus Finds Pets by status  
      Parameter

      Return Type

          Changed response : [200] //successful operation
  * `GET` /pet/findByTags Finds Pets by tags  
      Return Type

          Changed response : [200] //successful operation
  * `DELETE` /pet/{petId} Deletes a pet  
      Parameter

          Add newHeaderParam
  * `POST` /pet/{petId}/uploadImage uploads an image for pet  
      Parameter

          petId Notes ID of pet to update change into ID of pet to update, default false
  * `POST` /user Create user  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithArray Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithList Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `GET` /user/login Logs user into the system  
      Parameter

          Delete password //The password for login in clear text
  * `GET` /user/logout Logs out current logged in user session  

  * `PUT` /user/{username} Updated user  
      Request

          Changed response : [application/json]
  * `GET` /user/{username} Get user by user name  
      Return Type

          Changed response : [200] //successful operation
  ```


  # License

  openapi-diff is released under the Apache License 2.0.


  # Thanks

  * Adarsh Sharma / [adarshsharma](https://github.com/adarshsharma)


  * [Sayi](https://github.com/Sayi) for his project
  [swagger-diff](https://github.com/Sayi/swagger-diff) 
    which was a source of inspiration for this tool
Mermade/openapi-filter: >
  # openapi-filter


  Filter internal paths, operations, parameters, schemas etc from
  OpenAPI/Swagger definitions


  Simply tag any object within the definition with an `x-internal` specification
  extension, and it will be removed from the output.


  For example:


  ```yaml

  openapi: 3.0.0

  info:
    title: API
    version: 1.0.0
  paths:
    /:
      get:
        x-internal: true
        ...
  ```


  Works with OpenAPI/Swagger 2.0 and 3.0.x and AsyncAPI 1.x definitions.


  ```

  Usage: openapi-filter [options] {infile} [{outfile}]


  Options:
    --valid        try to ensure inverse output is valid                 [boolean]
    -h, --help     Show help                                             [boolean]
    --version      Show version number                                   [boolean]
    -i, --inverse  output filtered elements only                         [boolean]
    -t, --tags     tags to filter by             [array] [default: ["x-internal"]]
  ```


  use `--` to separate tags from other options, i.e.:


  `openapi-filter --tags x-private x-hidden -- source.yaml target.yaml`


  or


  ```javascript

  let openapiFilter = require('openapi-filter');

  let options = {}; // defaults are shown

  //options.inverse = false;

  //options.valid = false;

  //options.tags = ['x-internal'];

  let res = openapiFilter.filter(obj,options);

  ```
Mermade/openapi-extract: >
  # openapi-extract


  extract paths, operations, parameters, schemas etc from OpenAPI/Swagger
  definitions


  Works with OpenAPI/Swagger 2.0 and 3.0.x definitions.


  ```

  Usage: openapi-extract [options] {infile} [{outfile}]


  Options:
    -h, --help         Show help                                         [boolean]
    --version          Show version number                               [boolean]
    --server           include server information                        [boolean]
    -p, --path         the path to extract                                [string]
    -o, --operationid  the operationId to extract                         [string]
    -m, --method       the method to extract for the given path           [string]
    -i, --info         copy full info object, otherwise minimal          [boolean]
    -s, --security     include security information                      [boolean]
    -v, --verbose      increase verbosity                                [boolean]
  ```


  or


  ```javascript

  let openapiExtractor = require('openapi-extract');

  let options = {};

  // options.path = '...';

  // options.method = '...';

  // options.operationid = '...';

  let res = openapiExtractor.extract(obj,options);

  ```
webonix/swagger-docs-cfml: >
  swagger-docs-cfml

  =================


  create swagger docs from CFML (Railo) ReST components


  this is a *Work in Progress - updating to Swagger 2.0*


  This app will scan for ReST CFCs in given path and will dynamically create a
  swagger doc for each resource found


  Get Swagger UI

  --------------

  [https://github.com/wordnik/swagger-ui](https://github.com/wordnik/swagger-ui)


  Instructions

  ------------

  * I put swagger-docs-cfm in subdirectory called 'docs' (within the swagger
  directory)

  * Create Rewrite rule - ^/swagger/docs/(.+)$ /swagger/docs/index.cfm?path=/$1

  * Set path to your ReST components in Application.cfc setupApp()

  * Set swagger['basePath'] in index.cfm. and other swagger["info"] properties

  * Launch Swagger UI, eg http://localhost/swagger

  * Enter docs URL eg http://localhost/swagger/docs

  * Hopefully you can browser and try for ReST API


  Suggestions

  -----------

  I have just started messing around with swagger and knocked this a quickly.
  Please let me know if you have any suggestions


  To do

  -----

  * Add Basic Authentication

  * config for baseURL and info properties
silas/swagger-framework: >
  # Swagger Framework [![Build
  Status](https://travis-ci.org/silas/swagger-framework.png?branch=master)](https://travis-ci.org/silas/swagger-framework)


  Swagger Framework is a module for creating [Swagger Specification][spec]
  validated web resources using the standard Node HTTP request listener
  interface.


  It validates and normalizes incoming requests, validates Swagger
  Specification, and generates the documentation endpoints.

   * [Documentation](#documentation)
   * [Example](#example)
   * [License](#license)

  ## Documentation

   * [Framework](#framework)
   * [Api](#api)
   * [Resource](#resource)
   * [Operation](#operation)
   * [Request Handler](#request-handler)
     * [sf](#sf)

  <a name="framework"/>

  ### Class: swagger.Framework(spec, [options])


  Declares a Framework using the [Swagger API Resource
  Listing](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#51-resource-listing)
  specification.


  You should not include the `apis` attribute.


  This acts as a container for all the API's and contains helper methods for
  serving HTTP resources and the documentation endpoints.


  <a name="framework-setup"/>

  #### framework.setup()


  Validates resources attached to framework. This is automatically called by
  [framework.dispatcher](#framework-dispatcher) and
  [framework.server](#framework-server).


  <a name="framework-api"/>

  #### framework.api(spec, [options])


  Declares and attaches [Api](#api) class.


  <a name="framework-api-instance"/>

  #### framework.api(api)


  Attaches [Api](#api) instance.


  <a name="framework-dispatcher"/>

  #### framework.dispatcher([options])


  Returns a function that implements the Node HTTP
  [requestListener](http://nodejs.org/api/http.html#http_http_createserver_requestlistener)
  interface.


  It also supports the Express/Connect style `next` argument.


  **Example (Express)**


  ```javascript

  app.use('/api-docs', framework.docs.dispatcher());

  app.use('/', framework.dispatcher());

  ```


  <a name="framework-server"/>

  #### framework.server([options])


  Returns an
  [http.Server](http://nodejs.org/api/http.html#http_class_http_server) instance
  which serves API's on `/` and the documentation endpoint on `/api-docs`.


  **Example**


  ```javascript

  framework.server().listen(8000);

  ```


  <a name="api"/>

  ### Class: swagger.Api(spec, [options])


  Declares an Api using the [Swagger API
  Declaration](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#52-api-declaration)
  specification.


  You should not include the `apis` attribute.


  <a name="api-resource"/>

  #### api.resource(spec, [options])


  Declares and attaches [Resource](#resource) class.


  <a name="api-resource-instance"/>

  #### api.resource(resource)


  Attaches [Resource](#resource) instance.


  <a name="api-model"/>

  #### api.model(spec)


  Declares a Model using the [Swagger Model
  Object](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#527-model-object)
  specification.


  <a name="resource"/>

  ### Class: swagger.Resource(spec, [options])


  Declares a Resource using the [Swagger API
  Object](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#522-api-object)
  specification.


  You should not include the `operations` attribute.


  <a name="resource-operation"/>

  #### resource.operation(spec, [options], [callback])


  Declares and attaches [Operation](#operation) class.


  <a name="resource-operation-instance"/>

  #### resource.operation(operation)


  Attaches [Operation](#operation) instance.


  <a name="operation"/>

  ### Class: swagger.Operation(spec, [options], [callback...])


  Declares an Operation using the [Swagger Operation
  Object](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#523-operation-object)
  specification.


  <a name="request-handler"/>

  ### Request Handler


  The [Operation](#operation) class takes a callback that will be called when an
  HTTP request matches the declared API, Resource, Operation, and passes all
  validation checks.


  This function has an Express-style signature (`function(req, res, next)`)
  where `req` and `res` are standard Node
  [http](http://nodejs.org/api/http.html) objects (or whatever your framework
  passes it). `next` is a callback that can be called to skip the current
  handler, or with an `Error` parameter to stop execution and activate the error
  handler. If you're using a framework (i.e. Express) that supports `next` then
  calls will proprogate back to the framework.


  <a name="sf"/>

  ### sf


  This object is attached to the `req` and `res` instances. It is used to pass
  state between middleware and includes helper functions.


  <a name="sf-accept"/>

  #### sf.accept


  This is an [Accepts](https://github.com/expressjs/accepts#api) instance.


  <a name="sf-body"/>

  #### sf.body


  This is an object of body values. It has already been validated and normalized
  against the Swagger specification.


  Additional values are discarded unless the `removeBody` option is set to
  `false`.


  <a name="sf-form"/>

  #### sf.form


  This is an object of form values. It has already been validated and normalized
  against the Swagger specification.


  Additional values are discarded unless the `removeForm` option is set to
  `false`.


  <a name="sf-header"/>

  #### sf.header


  This is an object of headers. It has already been validated and normalized
  against the Swagger specification.


  Additional headers are discarded unless the `removeHeader` option is set to
  `false`.


  <a name="sf-path"/>

  #### sf.path


  This is an object of path segments. It has already been validated and
  normalized against the Swagger specification.


  <a name="sf-produce"/>

  #### sf.produce


  <a name="sf-reply"/>

  #### sf.reply([statusCode], [body])


  This formats and replies to the HTTP request.


  `statusCode` should be a numeric HTTP response code (defaults to 200).


  `body` should be the response content.


  <a name="sf-reply-error"/>

  #### sf.reply([statusCode], err)


  This formats and replies to the HTTP request.


  `statusCode` should be a numeric HTTP response code (defaults to 500).


  `err` should be an instance of `Error`. If `err.statusCode` is defined it will
  be used as the return status code. If `err.expose` is truthy then
  `err.toJSON()` (if defined) or `err.message` will be set as the response body.


  <a name="sf-responseMessage"/>

  #### Callback: sf.responseMessage(reply)


  This is a callback that you can attach to the `sf` attribute to format `reply`
  calls.


  `reply` will be an object that contains `statusCode`, `body`, and `args`.
  `statusCode` and `body` are the response attributes that `reply` interpreted
  from the caller. `args` is an array of the actual arguments.


  `responseMessage` should either return an object with `statusCode` and `body`,
  or a falsy value and handle the response itself.


  <a name="sf-query"/>

  #### sf.query


  This is an object of query parameters. It has already been validated and
  normalized against the Swagger specification.


  Additional query parameters are discarded unless the `removeQuery` option is
  set to `false`.


  <a name="sf-url"/>

  #### sf.url


  This is a [URL](http://nodejs.org/api/url.html) object for the resource.


  ## Example


  See more in the
  [examples](https://github.com/silas/swagger-framework/tree/master/examples)
  directory.


  ``` javascript

  var swagger = require('swagger-framework');


  var host = '127.0.0.1';

  var port = 8000;

  var url = 'http://' + host + ':' + port;


  var framework = swagger.Framework({ basePath: url });


  var api = framework.api({
    path: '/pet',
    description: 'Manage pets',
    consumes: ['application/json'],
    produces: ['application/json'],
  });


  var resource = api.resource({ path: '/pet/{petId}' });


  var operation = resource.operation(
    {
      method: 'GET',
      summary: 'Find pet by ID',
      notes: 'Returns a pet based on ID',
      type: 'Pet',
      nickname: 'getPetById',
      parameters: [
        {
          name: 'petId',
          description: 'ID of pet that needs to be fetched',
          required: true,
          type: 'integer',
          paramType: 'path',
          minimum: '1',
          maximum: '100000',
        },
      ],
      responseMessages: [
        {
          code: 400,
          message: 'Invalid ID supplied',
        },
        {
          code: 404,
          message: 'Pet not found',
        },
      ],
    },
    function(req, res) {
      res.sf.reply(200, {
        message: 'pet id ' + req.sf.path.petId,
      });
    }
  );


  api.model({
    id: 'Pet',
    required: ['id', 'name'],
    properties: {
      id: {
        type: 'integer',
        description: 'unique identifier for the pet',
        minimum: '0',
        maximum: '100',
      },
      name: {
        type: 'string'
      },
      photoUrls: {
        type: 'array',
        items: { type: 'string' },
      },
      status: {
        type: 'string',
        description: 'pet status in the store',
        enum: ['available', 'pending', 'sold'],
      },
    },
  });


  if (module.parent) {
    module.exports = framework;
  } else {
    framework.server().listen(port, host, function(err) {
      if (err) throw err;

      console.log('Server started ' + url + '/');
    });
  }

  ```


  ## License


  This work is licensed under the MIT License (see the LICENSE file).


  [spec]:
  https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#readme
batdevis/swagger_engine: >
  # LOOKING FOR MAINTAINER


  I'm sorry but I can't maintain this project anymore.


  If you want to maintain this project, contact me (batdevis[at]gmail.com) and I
  will transfer the ownership.


  # SwaggerEngine


  Include [swagger-ui](https://github.com/swagger-api/swagger-ui) as rails
  engine.


  Current master works with Rails 4.0+. If you're looking for Rails 3.0 support,

  try version 0.0.3.


  ## Swagger specifications


  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md


  ## Install


  Add to Gemfile


  ```gem 'swagger_engine'```


  Add to your config/routes.rb


  ```mount SwaggerEngine::Engine, at: "/api-docs"```


  ### Protect your route


  #### Devise


  ```

  authenticate :user do
    mount SwaggerEngine::Engine, at: "/api-docs"
  end

  ```


  or


  ```

  authenticate :user, lambda { |u| u.admin? } do
    mount SwaggerEngine::Engine, at: "/api-docs"
  end

  ```


  #### Basic http auth


  Set username and password in `config/initializers/swagger_engine.rb`:


  ```

  SwaggerEngine.configure do |config|
    config.admin_username = ENV['ADMIN_USERNAME']
    config.admin_password = ENV['ADMIN_PASSWORD']
  end

  ```


  ## Configure


  ### Json files


  Set the path of your json files in a initializer:


  ```

  #config/initializers/swagger_engine.rb


  SwaggerEngine.configure do |config|
    config.json_files = {
      v1: "lib/swagger/swagger_v1.json",
      v2: "lib/swagger/swagger_v2.json"
    }
  end

  ```

  `lib/swagger/` is a good place to place them..


  ### Edit your json files


  Use [Swagger editor](https://github.com/swagger-api/swagger-editor).


  ## License


  This project rocks and uses MIT-LICENSE.


  ## Developed in collaboration with


  [Rawfish](http://rawfishindustries.com)


  [![Rawfish
  Logo](http://rawfishindustries.com/wp-content/uploads/2015/03/logo_rawfish_WEB.jpg)](http://rawfishindustries.com)
signalfx/swagger-angular-client: >
  # swagger-angular-client


  > AngularJS service for communicating with endpoints described by
  [swagger](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md)
  v1.2.


  # Usage

  To use, include one of these files in your application:

  *
  *[swagger-angular-client.js](https://raw.githubusercontent.com/signalfx/swagger-angular-client/master/dist/swagger-angular-client.js)*

  *
  *[swagger-angular-client.js.min](https://raw.githubusercontent.com/signalfx/swagger-angular-client/master/dist/swagger-angular-client.min.js)*,
  a minified version ([source
  map](https://raw.githubusercontent.com/signalfx/swagger-angular-client/master/dist/swagger-angular-client.min.js.map))


  You may also `bower install swagger-angular-client` to install using bower.
  Once you've included the script, you can include the `swagger-client` module
  as a dependency to your existing application and use the swaggerClient service
  to generate api clients.


  Schemas can be generated using
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema).


  # Simple Example

  ```html

  <!DOCTYPE html>

  <html>

  <head>
    <meta charset="utf-8">
    <title>Example</title>
    <script src="angular.js"></script>
  </head>

  <body ng-app="myApp" ng-cloak>
      Pet: {{ pet.name || 'Loading...' }}

    <script src="swagger-client.js"></script>

    <!-- `petStoreSchema.js` exposes the JSON object generated by [fetch-swagger-schema] when run against http://petstore.swagger.wordnik.com/api/api-docs to the window as `PetStoreSchema` (see `examples/petStoreSchema.js`). -->
    <script src="petStoreSchema.js"></script>

    <script>
    angular.module('myApp', ['swagger-client'])
      .run(function($rootScope, swaggerClient){
        var api = swaggerClient(PetStoreSchema);

        api.auth('secret-key');
        api.pet.addPet({id: 1, name: 'Bob'}).then(function(){
          return api.pet.getPetById(1);
        }).then(function(pet){
          $rootScope.pet = pet;
        });
      });
    </script>
  </body>

  </html>

  ```


  # Real-world Example

  ```javascript

  'use strict';


  // First, we need to define a provider for the api client, we'll call it
  'myAPI'

  angular.module('data').provider('myAPI',

  ['window', function(window){
    var schema = window.API_SCHEMA,
      auth;

    // Override the base path to enable pointing to different backends
    this.basePath = function(basePath){
      schema.apis.forEach(function(api){
        api.apiDeclaration.basePath = basePath;
      });
    };

    // Allows for setting the auth token during .config() phase of app start up.
    this.auth = function(authToken){
      auth = authToken;
    };

    // Instantiates the swagger-angular-client
    this.$get = ['$rootScope', 'swaggerClient', function($rootScope, swaggerClient){
      var api = swaggerClient(schema);
      api.authorization(auth);

      // Handle any future api token changes
      $rootScope.$on('api token changed', function($event, authToken){
        api.authorization(authToken);
      });

      return api;
    }];
  }])


  // Now we'll configure myAPI during app start up by setting the auth token.

  // You would decide where this token comes from. Maybe it's ok to embed
  directly

  // in the code. Maybe it comes from a cookie. Maybe you don't even need auth.

  // This all depends on your auth scheme.

  .config(['myAPIProvider', function(myAPIProvider){
    myAPIProvider.auth(THE_TOKEN);
  }])


  // Finally, we can start using myAPI in the application

  .run(['myAPI', function(myAPI){
    // This would be an application-specific call. In this example, we make an
    // http request to a api endpoint to notify the metrics resource that the
    // application has loaded.
    myAPI.metrics.appLoaded({
      time: Date.now()
    });
  }]);


  ```
richhollis/swagger-docs: >
  # Swagger::Docs


  Generates swagger-ui json files for rails apps with APIs. You add the swagger
  DSL to your controller classes and then run one rake task to generate the json
  files.


  [![Gem Version](https://badge.fury.io/rb/swagger-docs.svg)][gem]

  [![Dependency
  Status](https://gemnasium.com/richhollis/swagger-docs.svg?travis)][gemnasium]


  [gem]: https://rubygems.org/gems/swagger-docs

  [travis]: http://travis-ci.org/richhollis/swagger-docs

  [gemnasium]: https://gemnasium.com/richhollis/swagger-docs

  [coveralls]: https://coveralls.io/r/richhollis/swagger-docs


  ## Swagger Version Specification Support


  This project supports elements of the v1.2 swagger specification. It *does
  not* support the v2 specification. If you are looking for support for the
  newer specification the please see the
  [swagger-blocks](https://github.com/fotinakis/swagger-blocks/) project. I
  don't currently have any plans to add support for v2.0 at this time due to
  time constraints, but I'm open to accepting a PR on  this. Contact me if you
  are interested in helping with that effort - thanks!


  ## Example usage


  Here is an extract of the DSL from a user controller API class:


  ```ruby

  swagger_controller :users, "User Management"


  swagger_api :index do
    summary "Fetches all User items"
    notes "This lists all the active users"
    param :query, :page, :integer, :optional, "Page number"
    response :unauthorized
    response :not_acceptable
    response :requested_range_not_satisfiable
  end

  ```


  ## Installation


  Add this line to your application's Gemfile:

      gem 'swagger-docs'

  And then execute:

      $ bundle

  Or install it yourself as:

      $ gem install swagger-docs

  ## Usage


  ### Create Initializer


  Create an initializer in config/initializers (e.g. swagger_docs.rb) and define
  your APIs:


  ```ruby

  Swagger::Docs::Config.register_apis({
    "1.0" => {
      # the extension used for the API
      :api_extension_type => :json,
      # the output location where your .json files are written to
      :api_file_path => "public/api/v1/",
      # the URL base path to your API
      :base_path => "http://api.somedomain.com",
      # if you want to delete all .json files at each generation
      :clean_directory => false,
      # Ability to setup base controller for each api version. Api::V1::SomeController for example.
      :parent_controller => Api::V1::SomeController,
      # add custom attributes to api-docs
      :attributes => {
        :info => {
          "title" => "Swagger Sample App",
          "description" => "This is a sample description.",
          "termsOfServiceUrl" => "http://helloreverb.com/terms/",
          "contact" => "apiteam@wordnik.com",
          "license" => "Apache 2.0",
          "licenseUrl" => "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
      }
    }
  })

  ```


  #### Configuration options


  The following table shows all the current configuration options and their
  defaults. The default will be used if you don't supply your own value.


  <table>

  <thead>

  <tr>

  <th>Option</th>

  <th>Description</th>

  <th>Default</th>

  </tr>

  </thead>

  <tbody>


  <tr>

  <td><b>api_extension_type</b></td>

  <td>The extension, if necessary, used for your API - e.g. :json or :xml </td>

  <td>nil</td>

  </tr>


  <tr>

  <td><b>api_file_path</b></td>

  <td>The output file path where generated swagger-docs files are written to.
  </td>

  <td>public/</td>

  </tr>


  <tr>

  <td><b>base_path</b></td>

  <td>The URI base path for your API - e.g. api.somedomain.com</td>

  <td>/</td>

  </tr>


  <tr>

  <td><b>base_api_controller / base_api_controllers</b></td>

  <td>The base controller class your project uses; it or its subclasses will be
  where you call swagger_controller and swagger_api. An array of base controller
  classes may be provided.</td>

  <td>ActionController::Base</td>

  </tr>


  <tr>

  <td><b>clean_directory</b></td>

  <td>When generating swagger-docs files this option specifies if the
  api_file_path should be cleaned first. This means that all files will be
  deleted in the output directory first before any files are generated.</td>

  <td>false</td>

  </tr>


  <tr>

  <td><b>formatting</b></td>

  <td>Specifies which formatting method to apply to the JSON that is written.
  Available options: :none, :pretty</td>

  <td>:pretty</td>

  </tr>


  <tr>

  <td><b>camelize_model_properties</b></td>

  <td>Camelizes property names of models. For example, a property name called
  first_name would be converted to firstName.</td>

  <td>true</td>

  </tr>


  <tr>

  <td><b>parent_controller</b></td>

  <td>Assign a different controller to use for the configuration</td>

  <td></td>

  </tr>


  </tbody>

  </table>



  ### Documenting a controller


  ```ruby

  class Api::V1::UsersController < ApplicationController

    swagger_controller :users, "User Management"

    swagger_api :index do
      summary "Fetches all User items"
      notes "This lists all the active users"
      param :query, :page, :integer, :optional, "Page number"
      param :path, :nested_id, :integer, :optional, "Team Id"
      response :unauthorized
      response :not_acceptable, "The request you made is not acceptable"
      response :requested_range_not_satisfiable
    end

    swagger_api :show do
      summary "Fetches a single User item"
      param :path, :id, :integer, :optional, "User Id"
      response :ok, "Success", :User
      response :unauthorized
      response :not_acceptable
      response :not_found
    end

    swagger_api :create do
      summary "Creates a new User"
      param :form, :first_name, :string, :required, "First name"
      param :form, :last_name, :string, :required, "Last name"
      param :form, :email, :string, :required, "Email address"
      param_list :form, :role, :string, :required, "Role", [ "admin", "superadmin", "user" ]
      response :unauthorized
      response :not_acceptable
    end

    swagger_api :update do
      summary "Updates an existing User"
      param :path, :id, :integer, :required, "User Id"
      param :form, :first_name, :string, :optional, "First name"
      param :form, :last_name, :string, :optional, "Last name"
      param :form, :email, :string, :optional, "Email address"
      param :form, :tag, :Tag, :required, "Tag object"
      response :unauthorized
      response :not_found
      response :not_acceptable
    end

    swagger_api :destroy do
      summary "Deletes an existing User item"
      param :path, :id, :integer, :optional, "User Id"
      response :unauthorized
      response :not_found
    end

    # Support for Swagger complex types:
    # https://github.com/wordnik/swagger-core/wiki/Datatypes#wiki-complex-types
    swagger_model :Tag do
      description "A Tag object."
      property :id, :integer, :required, "User Id"
      property :name, :string, :optional, "Name"
      property_list :type, :string, :optional, "Tag Type", ["info", "warning", "error"]
    end
  end

  ```


  #### Support for Enums (PR #108)


  ```

  property_list :type, :string, :optional, "Type", ["info", "warning", "error"]

  ```


  #### Custom resource paths`(PR #126)


  ```ruby

  class Api::V1::UsersController < ApplicationController

    swagger_controller :users, "User Management", resource_path: "/some/where"
  ```


  ### DRYing up common documentation


  Suppose you have a header or a parameter that must be present on several
  controllers and methods. Instead of duplicating it on all the controllers you
  can do this on your API base controller:


  ```ruby

  class Api::BaseController < ActionController::Base
    class << self
      Swagger::Docs::Generator::set_real_methods

      def inherited(subclass)
        super
        subclass.class_eval do
          setup_basic_api_documentation
        end
      end

      private
      def setup_basic_api_documentation
        [:index, :show, :create, :update, :delete].each do |api_action|
          swagger_api api_action do
            param :header, 'Authentication-Token', :string, :required, 'Authentication token'
          end
        end
      end
    end
  end

  ```


  And then use it as a superclass to all you API controllers. All the subclassed
  controllers will have the same documentation applied to them.


  #### Alternate method


  Using a block for the swagger_api definition:


  ```ruby

  class Api::V1::UserController < Api::V1::BaseController

    swagger_controller :user, "Users"

    def self.add_common_params(api)
      api.param :form, "user[first_name]", :string, :optional, "Notes"
      api.param :form, "user[last_name]", :string, :optional, "Name"
      api.param :form, "user[email]", :string, :optional, "Email"
    end

    swagger_api :create do |api|
      summary "Create a new User item"
      Api::V1::UserController::add_common_params(api)
      response :unauthorized
      response :not_acceptable
      response :unprocessable_entity
    end
    
    swagger_api :update do |api|
      summary "Update an existing User item"
      Api::V1::UserController::add_common_params(api)
      response :unauthorized
      response :not_acceptable
      response :unprocessable_entity
    end
  end

  ```


  ### DSL Methods


  <table>

  <thead>

  <tr>

  <th>Method</th>

  <th>Description</th>

  </tr>

  </thead>

  <tbody>


  <tr>

  <td>summary</td>

  <td>The summary of the API</td>

  </tr>


  <tr>

  <td>notes (optional)</td>

  <td>The associated notes for the API</td>

  </tr>


  <tr>

  <td>param</td>

  <td>Standard API Parameter</td>

  </tr>


  <tr>

  <td>param_list</td>

  <td>Standard API Enum/List parameter.</td>

  </tr>


  <tr>

  <td>response</td>

  <td>Takes a symbol or status code and passes it to `Rack::Utils.status_code`.
  The current list of status codes can be seen here:
  https://github.com/rack/rack/blob/master/lib/rack/utils.rb. An optional
  message can be added.</td>

  </tr>


  </tbody>

  </table>


  ### Run rake task to generate docs


  ```

  rake swagger:docs

  ```


  Swagger-ui JSON files should now be present in your api_file_path (e.g.
  ./public/api/v1)


  #### Additional logging for generation failures


  Errors aren't displayed by default. To see all error messages use the
  ```SD_LOG_LEVEL``` environment variable when running the rake task:


  ```

  SD_LOG_LEVEL=1 rake swagger:docs

  ```


  Currently only constantize errors are shown.


  Errors are written to ```$stderr```. Error logging methods can be found in
  ```Config``` and can be overridden for custom behaviour.


  Thanks to **[@tomtt](https://github.com/tomtt/)** who originally suggested
  this idea in #81


  ### Sample


  A sample Rails application where you can run the above rake command and view
  the output in swagger-ui can be found here:


  https://github.com/richhollis/swagger-docs-sample


  ![Screen shot
  1](https://github.com/richhollis/swagger-docs-sample/raw/master/swagger-docs-screenshot-2.png)



  ### Advanced Customization


  #### Inheriting from a custom Api controller


  By default swagger-docs is applied to controllers inheriting from
  ApplicationController.

  If this is not the case for your application, use this snippet in your
  initializer

  _before_ calling Swagger::Docs::Config#register_apis(...).


  ```ruby

  class Swagger::Docs::Config
    def self.base_api_controller; Api::ApiController end
  end

  ```


  #### Custom route discovery for supporting Rails Engines


  By default, swagger-docs finds controllers by traversing routes in
  `Rails.application`.

  To override this, you can customize the `base_application` config in an
  initializer:


  ```ruby

  class Swagger::Docs::Config
    def self.base_application; Api::Engine end
  end

  ```


  If you want swagger to find controllers in `Rails.application` and/or multiple

  engines you can override `base_application` to return an array. 


  ```ruby

  class Swagger::Docs::Config
    def self.base_application; [Rails.application, Api::Engine, SomeOther::Engine] end
  end

  ```


  Or, if you prefer you can override `base_applications` for this purpose. The
  plural

  `base_applications` takes precedence over `base_application` and MUST return
  an

  array.


  ```ruby

  class Swagger::Docs::Config
    def self.base_applications; [Rails.application, Api::Engine, SomeOther::Engine] end
  end

  ```


  #### Transforming the `path` variable


  Swagger allows a distinction between the API documentation server and the
  hosted API

  server through the `path` variable (see [Swagger: No server
  Integrations](https://github.com/wordnik/swagger-core/wiki/No-server-Integrations)).
  To override the default swagger-docs behavior, you can provide a
  `transform_path`

  class method in your initializer:


  ```ruby

  class Swagger::Docs::Config
    def self.transform_path(path, api_version)
      "http://example.com/api-docs/#{api_version}/#{path}"
    end
  end

  ```


  The transformation will be applied to all API `path` values in the generated
  `api-docs.json` file.


  #### Precompile


  It is best-practice *not* to keep documentation in version control. An easy
  way

  to integrate swagger-docs into a conventional deployment setup (e.g.
  capistrano,

  chef, or opsworks) is to piggyback on the 'assets:precompile' rake task. And
  don't forget

  to add your api documentation directory to .gitignore in this case.


  ```ruby

  #Rakefile or lib/task/precompile_overrides.rake

  namespace :assets do
    task :precompile do
      Rake::Task['assets:precompile'].invoke
      Rake::Task['swagger:docs'].invoke
    end
  end

  ```


  ### Output files


  api-docs.json output:



  ```json

  {
    "apiVersion": "1.0",
    "swaggerVersion": "1.2",
    "basePath": "/api/v1",
    "apis": [
      {
        "path": "/users.{format}",
        "description": "User Management"
      }
    ]
  }

  ```


  users.json output:


  ```json

  {
    "apiVersion": "1.0",
    "swaggerVersion": "1.2",
    "basePath": "http://api.somedomain.com/api/v1/",
    "resourcePath": "/users",
    "apis": [
      {
        "path": "/users",
        "operations": [
          {
            "summary": "Fetches all User items",
            "parameters": [
              {
                "paramType": "query",
                "name": "page",
                "type": "integer",
                "description": "Page number",
                "required": false
              }
            ],
            "responseMessages": [
              {
                "code": 401,
                "message": "Unauthorized"
              },
              {
                "code": 406,
                "message": "The request you made is not acceptable"
              },
              {
                "code": 416,
                "message": "Requested Range Not Satisfiable"
              }
            ],
            "method": "get",
            "nickname": "Api::V1::Users#index"
          }
        ]
      },
      {
        "path": "nested/{nested_id}/sample",
        "operations": [
          {
            "summary": "Fetches all User items",
            "parameters": [
              {
                "paramType": "query",
                "name": "page",
                "type": "integer",
                "description": "Page number",
                "required": false
              },
              {
                "paramType": "path",
                "name": "nested_id",
                "type": "integer",
                "description": "Team Id",
                "required": false
              }
            ],
            "responseMessages": [
              {
                "code": 401,
                "message": "Unauthorized"
              },
              {
                "code": 406,
                "message": "The request you made is not acceptable"
              },
              {
                "code": 416,
                "message": "Requested Range Not Satisfiable"
              }
            ],
            "method": "get",
            "nickname": "Api::V1::Users#index"
          }
        ]
      },
      {
        "path": "/users",
        "operations": [
          {
            "summary": "Creates a new User",
            "parameters": [
              {
                "paramType": "form",
                "name": "first_name",
                "type": "string",
                "description": "First name",
                "required": true
              },
              {
                "paramType": "form",
                "name": "last_name",
                "type": "string",
                "description": "Last name",
                "required": true
              },
              {
                "paramType": "form",
                "name": "email",
                "type": "string",
                "description": "Email address",
                "required": true
              }
            ],
            "responseMessages": [
              {
                "code": 401,
                "message": "Unauthorized"
              },
              {
                "code": 406,
                "message": "Not Acceptable"
              }
            ],
            "method": "post",
            "nickname": "Api::V1::Users#create"
          }
        ]
      },
      {
        "path": "/users/{id}",
        "operations": [
          {
            "summary": "Fetches a single User item",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "type": "integer",
                "description": "User Id",
                "required": false
              }
            ],
            "responseMessages": [
              {
                "code": 401,
                "message": "Unauthorized"
              },
              {
                "code": 404,
                "message": "Not Found"
              },
              {
                "code": 406,
                "message": "Not Acceptable"
              }
            ],
            "method": "get",
            "nickname": "Api::V1::Users#show"
          }
        ]
      },
      {
        "path": "/users/{id}",
        "operations": [
          {
            "summary": "Updates an existing User",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "type": "integer",
                "description": "User Id",
                "required": true
              },
              {
                "paramType": "form",
                "name": "first_name",
                "type": "string",
                "description": "First name",
                "required": false
              },
              {
                "paramType": "form",
                "name": "last_name",
                "type": "string",
                "description": "Last name",
                "required": false
              },
              {
                "paramType": "form",
                "name": "email",
                "type": "string",
                "description": "Email address",
                "required": false
              },
              {
                "paramType": "form",
                "name": "tag",
                "type": "Tag",
                "description": "Tag object",
                "required": true
              }
            ],
            "responseMessages": [
              {
                "code": 401,
                "message": "Unauthorized"
              },
              {
                "code": 404,
                "message": "Not Found"
              },
              {
                "code": 406,
                "message": "Not Acceptable"
              }
            ],
            "method": "put",
            "nickname": "Api::V1::Users#update"
          }
        ]
      },
      {
        "path": "/users/{id}",
        "operations": [
          {
            "summary": "Deletes an existing User item",
            "parameters": [
              {
                "paramType": "path",
                "name": "id",
                "type": "integer",
                "description": "User Id",
                "required": false
              }
            ],
            "responseMessages": [
              {
                "code": 401,
                "message": "Unauthorized"
              },
              {
                "code": 404,
                "message": "Not Found"
              }
            ],
            "method": "delete",
            "nickname": "Api::V1::Users#destroy"
          }
        ]
      }
    ],
    "models": {
      "Tag": {
        "id": "Tag",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "User Id"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "foo": "test"
          }
        },
        "description": "A Tag object."
      }
    }
  }

  ```


  ## Thanks to our contributors


  Thanks to jdar, fotinakis, stevschmid, ldnunes, aaronrenner and all of our
  contributors for making swagger-docs even better.


  ## Related Projects


  **[@fotinakis](https://github.com/fotinakis/)** has created Swagger::Blocks -
  a DSL for pure Ruby code blocks:
  [swagger-blocks](https://github.com/fotinakis/swagger-blocks/)


  A [cors rack middleware for testing swagger
  apis](https://gist.github.com/richhollis/b98a8b0599860145ad86) designed to be
  used in Rails development environments.



  ## More About Me


  [Rich Hollis](http://richhollis.co.uk)


  ## Contributing


  When raising a Pull Request please ensure that you have provided good test
  coverage for the request you are making.


  1. Fork it

  2. Create your feature branch (`git checkout -b my-new-feature`)

  3. Commit your changes (`git commit -am 'Add some feature'`)

  4. Push to the branch (`git push origin my-new-feature`)

  5. Create new Pull Request
EiffelWebFramework/swagger: |
  Swagger
  =======

  This is a Swagger protocol implementation in Eiffel.

  Note: This is a work in progress, and the API could change in a future.

  ## Authors

  + [@oligot](https://github.com/oligot)
  + [@weilers](https://github.com/weilers)
  + B. Marchal
SmartBear/swagger4j: >
  ## swagger4j


  A simple java library for reading and writing [Swagger 1.X
  definitions](https://swagger.io). Supports both JSON and XML formats. The
  current version is

  reasonably in line with the latest swagger core release except that it doesn't
  support any of the JSON Schema/Data Model constructs yet. Apache 2.0 licensed.


  If you're interested in reading Swagger 2.0 definitions you're better off
  using the official
  [swagger-parser](https://github.com/swagger-api/swagger-parser)


  ### Getting started


  Clone this repo from GitHub and build it yourself with maven (with "mvn
  install"). 


  The latest version is also available in the SmartBear maven repository at
  soapui.org, add this to your pom with


  ```xml

  <repositories>
      <repository>
          <id>soapUI Repository</id>
          <url>http://www.soapui.org/repository/maven2</url>
      </repository>
  </repositories>

  ```


  and add the corresponding dependency:


  ```xml

  <dependency>
      <groupId>com.smartbear</groupId>
      <artifactId>swagger4j</artifactId>
      <version>1.0.0</version>
  </dependency>

  ```


  swagger4j has a runtime dependency

  on jsonp
  ([https://java.net/projects/jsonp/](https://java.net/projects/jsonp/)) which
  you can add to your maven pom with.


  ```xml

  <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.json</artifactId>
      <version>1.0-b06</version>
  </dependency>

  ```


  Once added to your classpath you can start reading swagger definitions, for
  example


  ```java

  ResourceListing resourceListing = Swagger.readSwagger(
  "http://petstore.swagger.wordnik.com/api/api-docs.json" )

  for( ResourceListingApi apiRef : resourceListing.getApis() )

  {
     ApiDeclaration apiDeclaration = apiRef.getDeclaration();
     for( Api api : apiDeclaration.getApis())
     {
         ...
     }
  }

  ```


  and of course you can write them as well


  ```java

  SwaggerFactory factory = Swagger.createSwaggerFactory();


  ApiDeclaration apiDeclaration = factory.createApiDeclaration(
  "http://api.mycompany.com/apis", "/user" );

  Api api = apiDeclaration.addApi( "{id}" );

  Operation op = api.addOperation( "getuserbyid", Operation.Method.GET );

  op.addParameter( "id", Parameter.ParamType.path );


  ResourceListing rl = factory.createResourceListing(
  "http://api.mycompany.com/apis" );

  rl.setApiVersion( "1.0" );

  rl.addApi( apiDeclaration, "user-doc.{format}" );


  Swagger.writerSwagger( rl, "api-docs" );

  ```


  The API is closely modeled after the Swagger specification, if you are
  familiar with that it should be a breeze to use.

  If you aren't familiar with Swagger and its spec head right over to the
  swagger website at 

  [https://github.com/wordnik/swagger-core/wiki](https://github.com/wordnik/swagger-core/wiki)
  to learn all about it.


  Javadoc is available in the zip at sourceforge.


  ### Library Design


  Swagger4j uses a standard Factory/Builder approach with interfaces defining
  the entire Swagger object model and a

  default implementation implementing them. If you have any suggestions on how
  to improve the actual API please don't

  hesitate to get in touch by adding tickets here at GitHub for bugs, issues,
  feature requests - Thank you!


  Please note the following:

  - the whole DataModel/DataType part of Swagger is not yet supported

  - paths to APIs referred to in a ResourceListing are resolved by adding the
  path of the api to the basePath defined

  in the resourceListing. If the basePath is relative - it is resolved
  relatively to the host/root of the ResourceListing

  URI.


  ### Usages


  * Version 0.2+ of the SoapUI-Swagger-Plugin use swagger4j to parse and
  generate Swagger definitions.


  ### Future improvements


  * None planned at this point!


  ### Release History


  * 20130527 - Initial beta1 release

  * 20131119 - beta2 release, adds support for Swagger 1.2 and 1.0

  * 20140505 - beta3 bugfixes

  * 20140512 - beta4 more bugfixes

  * 20151029 - 1.0.0 release - more bugfixes
ROAMSYS/swaggerapi: >
  # Swagger Java Client


  * [Configuration](#configuration)

  * [Register the Swagger API components](#register-the-swagger-api-components)
      * [Start Up listener](#start-up-listener)
      * [Servlet for API calls](#servlet-for-api-calls)
  * [Example API declaration](#example-api-declaration)
      * [API class annotation](#api-class-annotation)
      * [API method annotations](#api-method-annotations)
      * [Method parameters](#method-parameters)
  * [License](#license)


  ## Configuration


  Create a class that extends the **SwaggerAPIListener** class. Here you can do
  all your configuration using the instance of SwaggerAPIConfig. Use the
  **registerModel** method to add your API services.

  ````java

  public class SwaggerListener extends SwaggerAPIListener {
      
      @Override
      public void initialize(final SwaggerAPIConfig config) {
          config.allowCrossOriginAccess();
          config.setAPIVersion("0.1.0");
          config.setBasePath("http://example.roamsys.lan:8080/api/");
          config.setSwaggerVersion("1.1");
          config.setDefaultContentType(SwaggerAPIConfig.CONTENT_TYPE_JSON_UTF8);
          config.registerModel(new TestModel());
      }
  }

  ````

  ## Register the Swagger API components


  ### Start Up listener

  Register the start up listener class you've created in your **web.xml**. This
  will initiate the Swagger API services at the start up of your application.

  ````xml

  <web-app ...>
    ...
    <listener>
      ...
      <listener-class>com.roamsys.example.gwt.server.swagger.SwaggerListener</listener-class>
    </listener>
  </web-app>

  ````


  ### Servlet for API calls

  Edit your **web.xml** and add the Swagger API servlet. Thats all.

  ````xml

  <web-app ...>
    ...
    <servlet>
      <servlet-name>SwaggerAPI</servlet-name>
      <servlet-class>com.roamsys.swagger.SwaggerAPIServlet</servlet-class>
    </servlet>
    <servlet-mapping>
      <servlet-name>SwaggerAPI</servlet-name>
      <url-pattern>/api/*</url-pattern>
    </servlet-mapping>
  </web-app>

  ````


  ## Example API declaration

  ````java

  @SwaggerModel (path = "/metadata")

  public class MetadataAPI implements SwaggerAPIModel {

      @SwaggerApi (
        notes = "Returns a list of all documents",
        method = HTTPMethod.GET,
        path = "/all",
        summary = "Get document list")
      public void all(final SwaggerAPIContext context) throws IOException {
          context.getResponse().getWriter().println("[ { \"name\" : \"document 1\", \"hash\" : \"abc\"}, { \"name\": \"another document\", \"hash\" : \"rrr\"} ]");
      }

      @SwaggerApi (
        notes = "Returns detailed information a specific document",
        method = HTTPMethod.GET,
        path = "/details/{hash}",
        summary = "Get document details")
      public void allForTypeAndFormat(final SwaggerAPIContext context,
              @SwaggerParameter (
                name = "hash",
                description = "The document hash",
                required = true,
                paramType = ParamType.PATH,
                dataType = DataType.STRING
              ) final String hash) {
          if (hash.equals("abc")) {
              context.getResponse().getWriter().println("{ \"name\" : \"document 1\", \"hash\" : \"abc\", , \"size\" : 1232, , \"extension\" : \"odt\"}");
          } else if (hash.equals("rrr")) {
              context.getResponse().getWriter().println("{ \"name\" : \"another document\", \"hash\" : \"rrr\", , \"size\" : 3532, , \"extension\" : \"zip\"}");
          }
      }
  }

  ````

  ### API class annotation


  Each class defining an API has to be annotated with @SwaggerModel(path =
  "pathToAPIs"). All APIs defined in the class will have that path as prefix. 

  The following example defines two APIs. Both APIs will be available thru the
  base path of your application followed by */metadata*.


  ### API method annotations


  To make an method available as public API annotate it with @SwaggerApi and
  provide the usual Swagger specifications:


  * **notes** - A description for the API

  * **method** - The HTTP method GET, PUT, POST, DELETE

  * **path** - The URL pattern containing placeholders for parameters

  * **summary** - A short description or name for the API


  ### Method parameters


  The parameters used in the URL must annotated with the @SwaggerParameter
  annotation, which uses the following properties:


  * **name** - The name of the parameter, should be the same as the method
  argument

  * **description** - A short description for the parameter

  * **required** - Set this to *true* for mandatory parameters, optional
  parameters should be placed at the end of the URL, if paramType is PATH

  * **paramType** - The type/kind of the parameter
       * *PATH* - For parameters placed in a REST-full URL seperated by slashes
       * *QUERY* - For parameters in a query string append to the URL
       * *BODY* - For parameters in a the body (the data) of a PUT or POST request
       * *HEADER* - For parameters in the request header
       * *FORM* - For parameters in a request body encoded with *multipart/form-data*
  * **dataType** - The data type of the parameter
       * *STRING*
       * *INTEGER*
       * *DATE*
       * *BOOLEAN*
       * *FLOAT*
       * *DOUBLE*
       * *BYTE*
       * *DATETIME*

  **Note:** At the moment not all *dataType*s and *paramType*s are supported.
  But feel free to fix that.


  ## License


  The MIT License (MIT)


  Copyright (c) 2014 Roamsys S.A.


  Permission is hereby granted, free of charge, to any person obtaining a copy

  of this software and associated documentation files (the "Software"), to deal

  in the Software without restriction, including without limitation the rights

  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

  copies of the Software, and to permit persons to whom the Software is

  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in all

  copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

  SOFTWARE.
ryankennedy/swagger-jaxrs-doclet: >
  **[Carma-Public/swagger-jaxrs-doclet](https://github.com/Carma-Public/swagger-jaxrs-doclet
  "Carma-Public/swagger-jaxrs-doclet") has been doing more recent development on
  a fork of this project. Please consider checking that fork out first.**


  # Swagger Doclet [![Build
  Status](https://travis-ci.org/ryankennedy/swagger-jaxrs-doclet.png)](https://travis-ci.org/ryankennedy/swagger-jaxrs-doclet)


  A JavaDoc Doclet that can be used to generate a Swagger resource listing
  suitable for feeding to

  swagger-ui.


  ## Usage


  To use the Swagger Doclet in your Maven project, add the following to your POM
  file.


  ```xml

  <?xml version="1.0" encoding="UTF-8"?>

  <project xmlns="http://maven.apache.org/POM/4.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>

      <groupId>…</groupId>
      <artifactId>…</artifactId>
      <version>…</version>
      
      <dependencies>
          …
      </dependencies>

      <build>
          <plugins>
              <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-javadoc-plugin</artifactId>
                  <version>2.9.1</version>
                  <executions>
                      <execution>
                          <id>generate-service-docs</id>
                          <phase>generate-resources</phase>
                          <configuration>
                              <doclet>com.hypnoticocelot.jaxrs.doclet.ServiceDoclet</doclet>
                              <docletArtifact>
                                  <groupId>com.hypnoticocelot</groupId>
                                  <artifactId>jaxrs-doclet</artifactId>
                                  <version>0.0.4-SNAPSHOT</version>
                              </docletArtifact>
                              <reportOutputDirectory>${project.build.outputDirectory}</reportOutputDirectory>
                              <useStandardDocletOptions>false</useStandardDocletOptions>
                              <additionalparam>-apiVersion 1 -docBasePath /apidocs -apiBasePath /</additionalparam>
                          </configuration>
                          <goals>
                              <goal>javadoc</goal>
                          </goals>
                      </execution>
                  </executions>
              </plugin>
          </plugins>
      </build>
  </xml>

  ```


  ## Example


  An example project using Dropwizard is included in
  `jaxrs-doclet-sample-dropwizard`. To get it running, run the following
  commands.


  ```

  $ cd jaxrs-doclet-sample-dropwizard

  $ mvn package

  $ java -jar target/jaxrs-doclet-sample-dropwizard-0.0.4-SNAPSHOT.jar server
  sample.yml

  ```


  The example server should be running on port 8080:


  ```

  $ curl localhost:8080/apidocs/service.json

  {
    "apiVersion" : "1",
    "basePath" : "/apidocs/",
    "apis" : [ {
      "path" : "/Auth.{format}",
      "description" : ""
    }, {
      "path" : "/HttpServletRequest.{format}",
      "description" : ""
    }, {
      "path" : "/ModelResource_modelid.{format}",
      "description" : ""
    }, {
      "path" : "/Recursive.{format}",
      "description" : ""
    }, {
      "path" : "/Response.{format}",
      "description" : ""
    }, {
      "path" : "/greetings_name.{format}",
      "description" : ""
    } ],
    "swaggerVersion" : "1.1"
  }

  $

  ```


  ## Override Swagger UI


  To override the swagger ui included with the doclet, create your own
  swagger-ui.zip file and add a swaggerUiZipPath to the additionalparam
  attribute in the pom file.


  ```

  <additionalparam>-apiVersion 1 -docBasePath /apidocs -apiBasePath /
  -swaggerUiZipPath ../../../src/main/resources/swagger-ui.zip</additionalparam>

  ```
signalfx/swagger-node-client: >
  # Swagger Node Client


  Create client APIs for [Swagger API
  Specifications](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md).


  Given a schema object, this tool returns an api object which can be used to
  interact with the API server described by the schema. The schema can be
  generated using 
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema)).


  ## Usage


  `npm install swagger-node-client` to install, then `var swaggerNodeClient =
  require('swagger-node-client')` and pass in your schema object (generated
  using 
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema)).


  ## Examples


  First, a simple example. Let's say you saved a schema json file, then loaded
  it

  into your app as the `schema` variable. Now you can call operations on the API

  by using swaggerNodeClient:

  ```javascript

  // Assuming the variable schema exists

  var swaggerNodeClient = require('swagger-node-client');

  var api = swaggerNodeClient(schema);


  // for apiKey authorization use: api.auth('my-token')

  // for basicAuth use: api.auth('username', 'password')

  // authorization may be set for any level (api, api.resource, or
  api.operation)


  api.pet.getPetById(id).then(function(pet){
    console.log(pet);
  });

  ```



  Here's a more advanced case in which we're leveraging promises to implement a

  'getOrCreate' method, which doesn't actually exist within the api:

  ```javascript

  var swaggerNodeClient = require('swagger-node-client');

  var api = swaggerNodeClient(schema);


  function getOrCreate(id, name){
      return api.pet.getPetById(id).catch(function(response){
          // If pet doesn't exist, create a new one.
          if(response.status === 404){
              var pet = {id: id, name: name};
              return api.pet.addPet(pet).then(function(){
                  return pet;
              });
          }

          // Unknown error
          console.error(response.error.toString());
      });
  }


  getOrCreate(23, 'bob').then(function(pet){
      console.log('Got pet:', pet);
  }, function(error){
      console.error(error.toString());
  });

  ```


  ## API


  #### `api = swaggerNodeClient(schema)`

  * *schemaObject* - A json object describing the schema (generated by
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema)).

  * *api* - An object which can be used as the api for the given schema. The
  first-level objects are the resources within the schema and the second-level
  functions are the operations which can be performed on those resources.


  #### `api.<resource>`

  A map of all the resources as defined in the schema to their operation handler
  (e.g. `api.pet`).


  #### `responsePromise = api.<resource>.<operationHandler>(data, options)`

  This is the actual operation function to initiate a request to the API
  endpoint (e.g., `api.pet.getPetById`).


  The operation handler takes two parameters:

  * *data* - A map of the operation data parameters. If the operation only has
  one parameter, the value may be used directly (i.e. `api.pet.getPetById(1,
  callback)` is the same as `api.pet.getPetById({petId: 1}, callback)`).

  * *options* - A map of the options to use when calling the operation (see
  below for full list).


  The response promise is an ES6 promise. A HTTP response in the 200s range will
  result

  in a resolved promise and anything else will result in a rejected promises. A
  resolved

  promise value is whatever the server responded with (JSON is automatically
  parsed).  A

  rejected promise value is a map with a `status`, `data`, and `error`
  properties, where

  the status is the HTTP status, data is the response body from the server, and
  error

  is a JavaScript error (if any occurred).


  Here's an example:

  ```javascript

  // use of .then(successHandler, failHandler)

  responsePromise.then(function(response){
      console.log('successful response:', response);
  }, function(response){
      console.log('request failed due to error:', response.error);
  });

  ```


  ## Developing

  After installing [nodejs](http://nodejs.org) execute the following:


  ```shell

  git clone https://github.com/signalfx/swagger-node-client.git

  cd swagger-node-client

  npm install

  npm run dev

  ```

  The build engine will test and build everything, start a server hosting the
  `example` folder on [localhost:3000](http://localhost:3000), and watch for any
  changes and rebuild when nescessary.


  To generate minified files in `dist`:

  ```shell

  npm run dist

  ```
springfox/springfox-grails-integration: >
  = SpringFox Grails Integration


  image:https://api.bintray.com/packages/springfox/maven-repo/springfox-grails-integration/images/download.svg["Download",
  link="https://bintray.com/springfox/maven-repo/springfox-grails-integration/_latestVersion"]

  image:https://circleci.com/gh/springfox/springfox-grails-integration.svg?style=svg["CircleCI",
  link="https://circleci.com/gh/springfox/springfox-grails-integration"]

  image:https://codecov.io/gh/springfox/springfox-grails-integration/branch/master/graph/badge.svg["codecov",link="https://codecov.io/gh/springfox/springfox-grails-integration"]

  image:https://api.codacy.com/project/badge/Grade/77fbd793eb06447d9f1bf47eb8cdad8b["Codacy
  code quality",
  link="https://www.codacy.com/app/dilip-krishnan-github/springfox-grails-integration?utm_source=github.com&utm_medium=referral&utm_content=springfox/springfox-grails-integration&utm_campaign=Badge_Grade"]

  image:https://app.fossa.io/api/projects/git%2Bgithub.com%2Fspringfox%2Fspringfox-grails-integration.svg?type=shield["FOSSA
  Status",
  link="https://app.fossa.io/projects/git%2Bgithub.com%2Fspringfox%2Fspringfox-grails-integration?ref=badge_shield"]


  SpringFox Grails integration library that produces grails specific
  documentation.


  == Development Environment


  === IDE setup 


  ==== IntelliJ IDEA


  - File >> open >> build.gradle

  - Make sure to check the 'use the default gradle wrapper' option.

  - First time build


  ```bash

  ./gradlew cleanIdea idea


  ```


  === Build


  - To get more output from any gradle commands/tasks append a `-i` (info) or
  `-d` (debug) e.g.

  ```bash

  ./gradlew clean build -i


  ```

  - To publish to local maven repository

  ```bash

  ./gradlew clean build publishToMavenLocal -i


  ```


  == Getting Started


  :releaseVersion: 1.0.0

  :snapshotVersion: 1.0.1-SNAPSHOT

  :springfoxVersion: 2.7.0

  :springfoxRfc6570Version: 1.0.0


  The SpringFox Grails integration library depends on
  http://springfox.github.io/springfox/docs/current/[Springfox]


  image:https://api.bintray.com/packages/springfox/maven-repo/springfox/images/download.svg["Download",
  link="https://bintray.com/springfox/maven-repo/springfox/_latestVersion"]



  == Dependencies

  The Springfox libraries are hosted on
  https://bintray.com/springfox/maven-repo/springfox/view[bintray] and jcenter.

  The artifacts can be viewed accessed at the following locations:


  * Release:
     ** https://jcenter.bintray.com/io/springfox/
     ** http://jcenter.bintray.com/io/springfox/
  * Snapshot
   ** http://oss.jfrog.org/simple/oss-snapshot-local/io/springfox/
   ** http://oss.jfrog.org/oss-snapshot-local/io/springfox/

  SpringFox has multiple modules and the dependencies will vary depending on the
  desired API specification standard.

  Below outlines how to include the springfox-swagger2 module which produces
  Swagger 2.0 API documentation.


  TIP: Refer the main documentation on how to
  http://springfox.github.io/springfox/docs/current/#swagger-ui[include
  springfox bundled swagger-ui] dependencies


  NOTE: Please refer the main documentation on how to
  http://springfox.github.io/springfox/docs/current/#dependencies[include the
  springfox-swagger2 dependencies]

  which are required for this integration library to work.


  === Release

  [source,groovy]

  [subs="verbatim,attributes"]

  ----

  repositories {
    jcenter()
  }


  dependencies {
      compile "io.springfox.grails:springfox-grails:{releaseVersion}" //<1>
  }

  ----


  === Snapshot


  [source,groovy]

  [subs="verbatim,attributes"]

  ----

  repositories {
     maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
  }


  dependencies {
      compile "io.springfox.grails:springfox-grails:{snapshotVersion}" //<1>
  }

  ----


  == Configuration


  In your Application (GrailsAutoConfiguration) startup entry-point follow the
  steps below


  [source,groovy]

  [subs="verbatim,attributes"]

  ----


  // 1. Enable SpringFox on your project

  @EnableSwagger2

  // 2. Import the springfox grails integration configuration

  @Import([springfox.documentation.grails.SpringfoxGrailsIntegrationConfiguration])

  class Application extends GrailsAutoConfiguration {
    static void main(String[] args) {
      GrailsApp.run(Application, args)
    }

    // 3. **Optionally** define a custom docket or omit this step to use the default
    // For grails it is preferrable to use use the following settings.
    @Bean
    Docket api() {
      new Docket(DocumentationType.SWAGGER_2)
          .ignoredParameterTypes(MetaClass)
          .select()
          .paths(not(ant("/error")))
          .build()
    }

     // 4. **Optionally** in the absense of asset pipeline configure the swagger-ui webjar to serve the scaffolded
     swagger UI
     @Bean
     static WebMvcConfigurerAdapter webConfigurer() {
       new WebMvcConfigurerAdapter() {
         @Override
         void addResourceHandlers(ResourceHandlerRegistry registry) {
           if (!registry.hasMappingForPattern("/webjars/**")) {
             registry
                 .addResourceHandler("/webjars/**")
                 .addResourceLocations("classpath:/META-INF/resources/webjars/")
           }
           if (!registry.hasMappingForPattern("/swagger-ui.html")) {
             registry
                 .addResourceHandler("/swagger-ui.html")
                 .addResourceLocations("classpath:/META-INF/resources/swagger-ui.html")
           }
         }
        }
      }
  }

  ----


  == Swagger UI integration


  IMPORTANT: In order to use the bundled swagger UI as explained in ___step 4___
  above. The following library needs to be

  included in the `build.gradle`


  [source,groovy]

  [subs="verbatim,attributes"]

  ----

  repositories {
    jcenter()
  }


  dependencies {
      compile "compile "io.springfox:springfox-swagger-ui:{springfoxVersion}" //<1>
  }

  ----


  NOTE: The latest released version is
  image:https://api.bintray.com/packages/springfox/maven-repo/springfox/images/download.svg["Springfox
  Version",

  link="https://bintray.com/springfox/maven-repo/springfox/_latestVersion"]


  == Extensibility

  The library comes with intelligent defaults imeplemented by
  `DefaultGrailsAlternateTypeRuleConvention`. However the

  defaults can be tweaked using one of these extensibility mechanisms. The
  following classes can be implemented and

  registered as a bean to augment default behavior.


  - AlternateTypeRuleConvention - for adding custom conventions for replacing
  grails types

  - GrailsPropertySelector - for overriding the selection of grails properties
  by the default convention

  - GrailsPropertyTransformer - for overriding the transformer of the grails
  property

  - GeneratedClassNamingStrategy - for naming the generated class mixins



  == Demo application


  The demo application is available in
  https://github.com/springfox/springfox-grails-demo[this repository]. You can

  see a live demo running or
  https://immense-escarpment-17128.herokuapp.com/swagger-ui.html[heroku here].


  == Troubleshooting


  If you get an exception when you try to run your app, this might be because of
  the chosen profile for your application.

  If you use the `rest-api` profile, everything should be fine, but if you've
  chosen the `web` profile, it is likely that

  you have to add something like this.

      grails.serverURL: http://localhost:8080
      
  to your `application.yml` for the plugin to render absolute links.




  ## License

  image:https://app.fossa.io/api/projects/git%2Bgithub.com%2Fspringfox%2Fspringfox-grails-integration.svg?type=large["FOSSA
  Status",
  link="https://app.fossa.io/projects/git%2Bgithub.com%2Fspringfox%2Fspringfox-grails-integration?ref=badge_large"]
rantav/flask-restful-swagger: >
  # flask-restful-swagger


  ### We have a new project lead!

  We have a new project lead, @niall-byrne (Dec 2015), thank you Niall!



  ## What is flask-restful-swagger?

  flask-restful-swagger is a wrapper for
  [flask-restful](http://flask-restful.readthedocs.org/en/latest/) which enables
  [swagger](https://developers.helloreverb.com/swagger/) support.


  In essense, you just need to wrap the Api instance and add a few python
  decorators to get full swagger support.


  ## How to:

  Install:


  ```

  pip install flask-restful-swagger

  ```

  (This installs flask-restful as well)



  And in your program, where you'd usually just use flask-restful, add just a
  little bit of sauce and get a swagger spec out.



  ```python

  from flask import Flask

  from flask_restful import Api

  from flask_restful_swagger import swagger


  app = Flask(__name__)


  ###################################

  # Wrap the Api with swagger.docs. It is a thin wrapper around the Api class
  that adds some swagger smarts

  api = swagger.docs(Api(app), apiVersion='0.1')

  ###################################



  # You may decorate your operation with @swagger.operation

  class Todo(Resource):
      "Describing elephants"
      @swagger.operation(
          notes='some really good notes',
          responseClass=ModelClass.__name__,
          nickname='upload',
          parameters=[
              {
                "name": "body",
                "description": "blueprint object that needs to be added. YAML.",
                "required": True,
                "allowMultiple": False,
                "dataType": ModelClass2.__name__,
                "paramType": "body"
              }
            ],
          responseMessages=[
              {
                "code": 201,
                "message": "Created. The URL of the created blueprint should be in the Location header"
              },
              {
                "code": 405,
                "message": "Invalid input"
              }
            ]
          )
      def get(self, todo_id):
      
  # Operations not decorated with @swagger.operation do not get added to the
  swagger docs


  class Todo(Resource):
      def options(self, todo_id):
          """
          I'm not visible in the swagger docs
          """
          pass


  # Then you add_resource as you usually would


  api.add_resource(TodoList, '/todos')

  api.add_resource(Todo, '/todos/<string:todo_id>')


  # You define models like this:

  @swagger.model

  class TodoItem:
    "A description ..."
    pass

  # Swagger json:
      "models": {
          "TodoItemWithArgs": {
              "description": "A description...",
              "id": "TodoItem",
          },

  # If you declare an __init__ method with meaningful arguments then those args
  could be used to deduce the swagger model fields.

  @swagger.model

  class TodoItemWithArgs:
    "A description ..."
    def __init__(self, arg1, arg2, arg3='123'):
      pass

  # Swagger json:
      "models": {
          "TodoItemWithArgs": {
              "description": "A description...",
              "id": "TodoItem",
              "properties": {
                  "arg1": {
                      "type": "string"
                  },
                  "arg2": {
                      "type": "string"
                  },
                  "arg3": {
                      "default": "123",
                      "type": "string"
                  }
              },
              "required": [
                  "arg1",
                  "arg2"
              ]
          },


  # Additionally, if the model class has a `resource_fields` class member then
  flask-restful-swagger is able to deduce the swagger spec by this list of
  fields.


  @swagger.model

  class TodoItemWithResourceFields:
    resource_fields = {
        'a_string': fields.String
    }

  # Swagger json:
      "models": {
          "TodoItemWithResourceFields": {
              "id": "TodoItemWithResourceFields",
              "properties": {
                  "a_string": {
                      "type": "string"
                  },
              }
          }

  # And in order to close the loop with flask-restify you'd also need to tell
  flask-restify to @marshal_with the same list of fields when defining your
  methods.

  # Example:


  @marshal_with(TodoItemWithResourceFields.resource_fields)

  def get()
    return ...

  ```


  # Using @marshal_with

  Let us recap usage of @marshal_with.

  flask-restful has a decorator `@marshal_with`. With the following setup it's
  possible to define the swagger model types with the same logic as
  `@marshal_with`.


  You have to:


  ```python

  # Define your model with resource_fields

  @swagger.model

  class TodoItemWithResourceFields:
    resource_fields = {
        'a_string': fields.String,
        'a_second_string': fields.String(attribute='a_second_string_field_name')
    }

  # And use @marshal_with(YourClass.resource_fields):

  @marshal_with(TodoItemWithResourceFields.resource_fields)

  def get()
    return ...
  ```



  # Running and testing


  Now run your flask app


  ```

  python example.py

  ```


  And visit:


  ```

  curl http://localhost:5000/api/spec.json

  ```


  # Passing more metadata to swagger

  When creating the `swagger.docs` object you may pass additional arguments,
  such as the following:


  ```

  api_spec_url - where to serve the swagger spec from. Default is /api/spec.
  This will make the json

  available at /api/spec as well as /api/spec.json and will also present a nice
  interactive

  HTML interface at /api/spec.html


  apiVersion - passed directly to swagger as the apiVersion attribute. Default:
  0.0


  basePath - passed directly to swagger as the basePath attribute. Default:
  'http://localhost:5000' (do not include a slash at the end)


  resourcePath - same as before. default: '/'


  produces - same as before, passed directly to swagger. The default is
  ["application/json"]


  swaggerVersion - passed directly to swagger. Default: 1.2


  description - description of this API endpoint. Defaults to 'Auto generated
  API docs by flask-restful-swagger'

  ```


  # Accessing the result json spec and an Interactive HTML interface

  Assuming you provided `swagger.docs` with a parameter
  `api_spec_url='/api/spec'` (or left out in which case the default is
  '/api/spec') you may access the resulting json at /api/spec.json.

  You may also access /api/spec.html where you'd find an interactive HTML page
  that lets you play with the API to some extent.  


  Here's how this HTML page would look like: 


  ![An example /api/spec.html
  page](http://cl.ly/image/312Q2u091u24/Screen%20Shot%202013-12-17%20at%2012.26.02%20PM.png)


  # Accessing individual endpoints (.help.json)

  flask-restful-swagger adds some useful help pages (well, json documents) to
  each of your resources. This isn't part of the swagger spec, but could be
  useful anyhow.

  With each endpoint you register, there's also an automatically registered help
  endpoint which ends with a .help.json extension.

  So for example when registering the resource `api.add_resource(TodoList,
  '/todos')` you may access the actual api through the url `/todos` and you may
  also access the help page at `/todos.help.json`. This help page spits out the
  relevant json content only for this endpoint (as opposed to `/api/spec.json`
  which spits out the entire swagger document, which could be daunting)


  Example:


  ```

  ### python:


  > api.add_resource(TodoList, '/todos')


  ### Shell:


  $ curl localhost:5000/todos.help.json

  {
      "description": null,
      "operations": [
          {
              "method": "GET",
              "nickname": "nickname",
              "parameters": [],
              "summary": null
          },
          {
              "method": "POST",
              "nickname": "create",
              "notes": "Creates a new TODO item",
              "parameters": [
                  {
                      "allowMultiple": false,
                      "dataType": "TodoItem",
                      "description": "A TODO item",
                      "name": "body",
                      "paramType": "body",
                      "required": true
                  }
              ],
              "responseClass": "TodoItem",
              "responseMessages": [
                  {
                      "code": 201,
                      "message": "Created. The URL of the created blueprint should be in the Location header"
                  },
                  {
                      "code": 405,
                      "message": "Invalid input"
                  }
              ],
              "summary": null
          }
      ],
      "path": "/todos"
  }

  ```

  When registering an endpoint with path parameters (e.g. `/todos/<string:id>`)
  then the .help url is may be found at the swagger path, e.g.
  `/todos/{id}.help.json` where {id} is just that - a literal string "{id}"


  Example:


  ```

  ### Python:

  > api.add_resource(Todo, '/todos/<string:todo_id>')


  ### Shell:
   # You might need to quote and escape to prevent the shell from messing around

  curl 'localhost:5000/todos/\{todo_id\}.help.json'

  {
      "description": "My TODO API",
      "operations": [
          {
              "method": "DELETE",
              "nickname": "nickname",
              "parameters": [
                  {
                      "dataType": "string",
                      "name": "todo_id"
                  }
              ],
              "summary": null
          },
          {
              "method": "GET",
              "nickname": "get",
              "notes": "get a todo item by ID",
              "parameters": [
                  {
                      "allowMultiple": false,
                      "dataType": "string",
                      "description": "The ID of the TODO item",
                      "name": "todo_id_x",
                      "paramType": "path",
                      "required": true
                  }
              ],
              "responseClass": "TodoItemWithResourceFields",
              "summary": "Get a todo task"
          },
          {
              "method": "PUT",
              "nickname": "nickname",
              "parameters": [
                  {
                      "dataType": "string",
                      "name": "todo_id"
                  }
              ],
              "summary": null
          }
      ],
      "path": "/todos/{todo_id}"
  }

  ```



  # Accessing individual endpoints as HTML (.help.html)

  Similarly to the `.help.json` URLs we have `.help.html` pages which are static
  HTML pages to document your APIs.

  Here's a screenshot to illustrate:

  ![An example .help.html
  page](http://cl.ly/image/160E3G2F2B3u/Screen%20Shot%202013-12-10%20at%209.49.37%20PM.png)





  __This project is part of the [Cloudify Cosmo
  project](https://github.com/CloudifySource/)__
emicklei/go-restful: "go-restful\n==========\npackage for building REST-style Web Services using Google Go\n\n[![Build Status](https://travis-ci.org/emicklei/go-restful.png)](https://travis-ci.org/emicklei/go-restful)\n[![Go Report Card](https://goreportcard.com/badge/github.com/emicklei/go-restful)](https://goreportcard.com/report/github.com/emicklei/go-restful)\n[![GoDoc](https://godoc.org/github.com/emicklei/go-restful?status.svg)](https://godoc.org/github.com/emicklei/go-restful)\n\n- [Code examples](https://github.com/emicklei/go-restful/tree/master/examples)\n\nREST asks developers to use HTTP methods explicitly and in a way that's consistent with the protocol definition. This basic REST design principle establishes a one-to-one mapping between create, read, update, and delete (CRUD) operations and HTTP methods. According to this mapping:\n\n- GET = Retrieve a representation of a resource\n- POST = Create if you are sending content to the server to create a subordinate of the specified resource collection, using some server-side algorithm.\n- PUT = Create if you are sending the full content of the specified resource (URI).\n- PUT = Update if you are updating the full content of the specified resource.\n- DELETE = Delete if you are requesting the server to delete the resource\n- PATCH = Update partial content of a resource\n- OPTIONS = Get information about the communication options for the request URI\n    \n### Example\n\n```Go\nws := new(restful.WebService)\nws.\n\tPath(\"/users\").\n\tConsumes(restful.MIME_XML, restful.MIME_JSON).\n\tProduces(restful.MIME_JSON, restful.MIME_XML)\n\nws.Route(ws.GET(\"/{user-id}\").To(u.findUser).\n\tDoc(\"get a user\").\n\tParam(ws.PathParameter(\"user-id\", \"identifier of the user\").DataType(\"string\")).\n\tWrites(User{}))\t\t\n...\n\t\nfunc (u UserResource) findUser(request *restful.Request, response *restful.Response) {\n\tid := request.PathParameter(\"user-id\")\n\t...\n}\n```\n\t\n[Full API of a UserResource](https://github.com/emicklei/go-restful/tree/master/examples/restful-user-resource.go) \n\t\t\n### Features\n\n- Routes for request &#8594; function mapping with path parameter (e.g. {id}) support\n- Configurable router:\n\t- (default) Fast routing algorithm that allows static elements, regular expressions and dynamic parameters in the URL path (e.g. /meetings/{id} or /static/{subpath:*}\n\t- Routing algorithm after [JSR311](http://jsr311.java.net/nonav/releases/1.1/spec/spec.html) that is implemented using (but does **not** accept) regular expressions\n- Request API for reading structs from JSON/XML and accesing parameters (path,query,header)\n- Response API for writing structs to JSON/XML and setting headers\n- Customizable encoding using EntityReaderWriter registration\n- Filters for intercepting the request &#8594; response flow on Service or Route level\n- Request-scoped variables using attributes\n- Containers for WebServices on different HTTP endpoints\n- Content encoding (gzip,deflate) of request and response payloads\n- Automatic responses on OPTIONS (using a filter)\n- Automatic CORS request handling (using a filter)\n- API declaration for Swagger UI ([go-restful-openapi](https://github.com/emicklei/go-restful-openapi), see [go-restful-swagger12](https://github.com/emicklei/go-restful-swagger12))\n- Panic recovery to produce HTTP 500, customizable using RecoverHandler(...)\n- Route errors produce HTTP 404/405/406/415 errors, customizable using ServiceErrorHandler(...)\n- Configurable (trace) logging\n- Customizable gzip/deflate readers and writers using CompressorProvider registration\n\n## How to customize\nThere are several hooks to customize the behavior of the go-restful package.\n\n- Router algorithm\n- Panic recovery\n- JSON decoder\n- Trace logging\n- Compression\n- Encoders for other serializers\n- Use [jsoniter](https://github.com/json-iterator/go) by build this package using a tag, e.g. `go build -tags=jsoniter .`\n\nTODO: write examples of these.\n\n## Resources\n\n- [Example posted on blog](http://ernestmicklei.com/2012/11/go-restful-first-working-example/)\n- [Design explained on blog](http://ernestmicklei.com/2012/11/go-restful-api-design/)\n- [sourcegraph](https://sourcegraph.com/github.com/emicklei/go-restful)\n- [showcase: Zazkia - tcp proxy for testing resiliency](https://github.com/emicklei/zazkia)\n- [showcase: Mora - MongoDB REST Api server](https://github.com/emicklei/mora)\n\nType ```git shortlog -s``` for a full list of contributors.\n\n© 2012 - 2018, http://ernestmicklei.com. MIT License. Contributions are welcome.\n"
springfox/springfox-grails-demo: >-
  # springfox-grails-demo


  This is minimalistic repo, which assumes prior knowledge of grails 3.x.


  Sample application to demonstrate the capabilities of integrating with grails


  Details on how to configure the grails app are available in the [library
  repository](https://github.com/springfox/springfox-grails-integration). You
  can see this demo running [live
  here](https://immense-escarpment-17128.herokuapp.com/swagger-ui.html).



  To run the application


  ```bash

  ./grailsw run-app

  ```


  the swagger-ui page should be available at
  `http://localhost:8080/swagger-ui.html`
gong023/swagger-assert: >
  # Swagger-assert

  enable to assert swagger 1.2 doc keys and API response. For Swagger 2 take a
  look to [SwaggerAssertions](https://github.com/Maks3w/SwaggerAssertions)


  [![Build
  Status](https://travis-ci.org/gong023/swagger-assert.svg)](https://travis-ci.org/gong023/swagger-assert)

  [![Coverage
  Status](https://coveralls.io/repos/gong023/swagger-assert/badge.png?branch=master)](https://coveralls.io/r/gong023/swagger-assert?branch=master)


  ## Installation

  composer

  ```javascript
      "require-dev": {
          "gong023/swagger-assert": "dev-master"
      }
  ```

  requires PHP5.4+


  ## Usage


  ### Sample API

  Sample API is below. Swagger-assert enables you to assert that `/plain`
  response has swagger keys `id`,`name`.


  ```php

  /**
   * @SWG\Resource(
   *     resourcePath="plain",
   *     @SWG\Api(
   *         path="/plain",
   *         description="plain api structure",
   *         @SWG\Operation(
   *             method="GET",type="SimpleMember",nickname="plain"
   *         )
   *     )
   * )
   *
   * @SWG\Model(
   *     id="SimpleMember",
   *     @SWG\Property(name="id", type="integer", required=true, description="user id"),
   *     @SWG\Property(name="name", type="string", required=true, description="user name")
   * )
   */
  $app->get('/plain', function () use ($app) {
      $response = [
          'id'   => 0,
          'name' => 'kohsaka'
      ];

      return $app->json($response);
  });

  ```


  ### Ready

  At first, call `SwaggerAssert::analyze` at the start of the test. Argument is
  directory path where annotation file exists.


  ```php

  // testing bootstrap.php

  \SwaggerAssert\SwaggerAssert::analyze($targetDir);

  ```


  ### Assert keys

  Second, call `SwaggerAssert::responseHasSwaggerKeys` in test class.
   - First argument: array of API response
   - Second argument: string of http method
   - Third argument: url of API endpoint

  When testing the sample API by PHPUnit, code is as follows.


  ```php


  use SwaggerAssert\SwaggerAssert;


  class PlainApiTest extends \PHPUnit_Framework_TestCase

  {
      public function testResponseHasSwaggerKeys()
      {
          $response = $this->request('get', '/plain');
          $result = SwaggerAssert::responseHasSwaggerKeys(array $response, 'get', '/plain', $onlyRequired = true);

          $this->assertTrue($result);
      }
  }

  ```

  `SwaggerAssert::responseHasSwaggerKeys` compares API response keys and keys in
  swagger doc and return true when they match.

  If they differs, output below error message.


  ```

  SwaggerAssert\Exception\CompareException: Failed asserting that API response
  and swagger document are equal.

  --- Response

  +++ Swagger

  @@ @@
   Array (
  -    0 => 'id'

  -    1 => 'name'

  +    0 => 'name'
   )
  ```

  The fourth argument is optional. If you give false, `responseHasSwaggerKeys`
  contains required=false keys to assert. Default value is true.


  if you need more sample, please take a look at
  [swagger-assert-sandbox](https://github.com/gong023/swagger-assert-sandbox).


  ## Motivation

  Swagger doc and API response sometimes differ. If they differ, the swagger doc
  causes confusion in development.

  So create library to assert API response and swagger doc.


  ## Bugs & Contributions

  Please report bugs by opening an issue.


  Contributions are welcome.
worldline/swagger-jack: >
  # Swagger for Express

  [![Build
  Status](https://travis-ci.org/feugy/swagger-jack.png)](https://travis-ci.org/feugy/swagger-jack)



  [Swagger](http://developers.helloreverb.com/swagger/) is a specification and
  complete framework implementation for describing, producing, consuming, and
  visualizing RESTful web services.


  It provides:


  * _specification_: to write descriptors of your API

  * _tools_: based on this descriptors: friendly GUI for documentation, client
  libraries...


  **Swagger-Jack** is a nodeJS modules that implements the swagger specification
  and offers you three middlewares to:


  1. _generate_ your routes from a swagger descriptor, binding them to your own
  controller functions

  2. _validate_ all the API inputs (query parameter, headers, bodies...)

  3. report _errors_ in a consistent way



  ## How can I use it ?


  First, get the module, by referencing it inside your package.json:


  ```js
    "dependencies": {
      "express": "3.1.0",
      "swagger-jack": "1.0.0"
    }
  ```


  Then, when creating your Express application, import and configure the two
  middlewares:


  ```js
    var express = require('express'),
        swagger = require('swagger-jack');

    var app = express();
    
    app.use(express.bodyParser())
      .use(express.methodOverride())
      .use(swagger.generator(app, {
        // general descriptor part
        apiVersion: '2.0',
        basePath: 'http://my-hostname.com/api'
      }, [{
        // descriptor of a given resource
        api: {
          resourcePath: '/user'
          apis: [{
            path: '/user/'
            operations: [{
              httpMethod: 'POST',
              nickname: 'create'
            }, {
              httpMethod: 'GET',
              nickname: 'list'

            }]
          }]
        },
        // controller for this resource
        controller:
          create: function(req, res, next) {
            // create a new user...
          },
          list: function(req, res, next) {
            // list existing users...
          }
      }])
      .use(swagger.validator(app))
      .use(swagger.errorHandler())
    
    app.get "/api/unvalidated", function(req, res, next) {
      // not documented not validated
    }
    app.listen(8080);
  ```



  ### Generator middleware


  Generator takes the following parameters:


  1. your express application,

  1. a general descriptor object (which is totally not constraint: put whatever
  you need in it), 

  1. an array of "resources",

  1. optionnal `options` (see below)


  A "resource" is composed by a *resource* descriptor, and the corresponding
  code (what we called *controller*).


  The middleware will automatically add to your express application the routes
  found inside the *resource* descriptor, and bound them to the provided
  *controller* (it uses the `nickname` attribute from the descriptor to bound
  the right controller's method).


  In the previous example, two routes are created:


  1. `POST /api/user/` to create a user (controller method `create()`)

  1. `GET /api/user/` to list existing users (controller method `list()`)


  As explained in the swagger specification, the descriptor `basePath` attribute
  is used as url prefix for every resources and their operations. 

  You should not repeat it in resources paths and apis path.


  The `resourcePath` in resource object is intended to be repeated in every api
  path.


  If you just want to document some existing routes, just provide a resource
  descriptor, and no associated controller. 

  Of course, no validation will be provided.


  You can still register routes and middleware within your application, like
  you've used to. 

  But they will not be documented nor validated.


  The following options are available:


  - descPath `String`: path of generated swagger descriptor. Must contain
  leading slash. Default to `/api-docs.json`, with `basePath` used as prefix.



  ### Validator middleware


  Validator will analyze the declared parameters of your descriptor, and
  validate the input.

  It will handle parameter casting, range validation and declared model
  compliance (thank to the excellent
  [json-gate](https://github.com/oferei/json-gate)).


  All casted values (except body parameters) are available inside the controller
  methods with the `req.input` associative array.

  No matter if parameter is from path, query or header: it will be present
  inside `req.input`.


  You can still use the Express original function (`req.params`, `req.param()`,
  `req.headers`...), but beware: values are just strings.



  Bodies are also validated, but parsing is done by express's bodyParser
  middleware: it takes in account json and multipart bodies. For other bodies
  kind, validator will read itself the body, and perfoms casting.


  **Caution** You *must* use `express.bodyParser()` *before*
  `swagger.validator`. 


  **Caution** You *can't* read the body by yourself (with *data*/*end* request
  events) for routes declared with `swagger.validator`. 


  If you do not need validation, no problem: just remove the validator
  middleware.



  ### Error middleware


  Validation errors (and your custom business errors) are handled by the error
  middleware.

  It uses the express's error mecanism: invoke the next() method with an
  argument.


  Weither it's a string or an object, it will be serialized into a json response
  with an http status (500 by default).


  For example:


  ```js
    use(swagger.generator(app, { 
      // general descriptor ... 
    }, [{
      api: // resource descriptor...
      controller: {
        create: function(req, res, next) {
          if (// error check...) {
            var err = new Error('forbidden !');
            err.status = 403;
            return next(err);
          }
          // process ...
        }
      }
    }]))
  ```


  Input validation errors are reported the same way.


  You may not use the error middleware and provide your own.



  ### Power-tip !


  Use js-yaml to store your descriptor in a separate file, and split your code
  into other controller modules:


  ```js
    var express = require('express'),
        swagger = require('swagger-jack'),
        yaml = require('js-yaml');
    
    var app = express();
    
    app.use(express.bodyParser())
      .use(express.methodOverride())
      .use(swagger.generator(app, 
        require('/api/general.yml'), 
        [{
          api: require('/api/users.yml'),
          controller: require('/controller/users')
        },{
          api: require('/api/commands.yml'),
          controller: require('/controller/commands')
        }])
      .use(swagger.validator(app))
      .use(swagger.errorHandler())
    
    app.listen(8080);
  ```



  ### Really hacky power-tip


  For very specific cases, it's possible to use the validation function without
  request.


  For example:


  ```js
    // init your application as usual
    var app = express();
    var validator; // don't init yet ! the generator was not invoked
    app.use(express.bodyParser())
      .use(express.methodOverride())
      .use(swagger.generator(app,
        ...
      , [{
        api: require('./fixtures/validatedApi.yml'),
        controller: require('./controller')
      ])
      // keep the validator middleware.
      .use(validator = swagger.validator(app))
      .use(swagger.errorHandler())

    ...

    // manually validate a "fake" url
    var casted = {};
    var url = '/api/queryparams';
    // method, Express path, url, query, headers, body, casted, callback
    validator.validate('GET', url, url, {param1:"-2", param2:"5.5"}, {}, {}, casted, function(err) {
      if (err) {
        // handle validation errors
      } else {
        // you can use casted values safely.
      }
    });
  ```


  You still need to use an Express application and to declare generator and
  validator middlewares.


  Documentation for the `validate()` function can be found [in the source
  code](https://github.com/feugy/swagger-jack/blob/master/src/validator.coffee#L216)



  ## TODO How does it works ?


  To be Done



  ## What about
  [swagger-node-express](https://github.com/wordnik/swagger-node-express) ?


  Reverb folks (the ones who made Swagger) provide an express module to enhance
  your Express application by returning the swagger descriptor.


  It provides a quick way to describe your code in Json and register your
  express routes.

  To me it's very handy for a start, but has three problems:


  1. your descriptor is inside your code, and splitted into parts, which makes
  it not easy to read

  2. you do not use any more the marvellous express functions, but the one
  provided by swagger-node-epxress

  3. it does not use the descriptor to automatize input validation, and you
  still have to cast and check your parameters



  ## Changelog


  ### 1.6.3

  - fix "Bug in method 'convertModel', for detecting circular reference"
  ([details](https://github.com/feugy/swagger-jack/issues/25)) 


  ### 1.6.2


  - fix mising leading / on generated descriptor, when using non empty basePath 
  ([details](https://github.com/feugy/swagger-jack/issues/19))


  ### 1.6.1


  - do not prepend basePath to api's path with swagger root descriptor
  ([details](https://github.com/feugy/swagger-jack/issues/19))

  - enforce validator on api declared with basePath


  ### 1.6.0


  - fix basePath handling, be more strict on operation path validation
  ([details](https://github.com/feugy/swagger-jack/issues/10))

  - allow validation utilities to be used without Express's request object
  ([details](https://github.com/feugy/swagger-jack/issues/11))


  ### 1.5.0


  - more strict check for mandatory data inside descriptors

  - test missing models that are referenced in apis


  ### 1.4.2


  - only expose relevant models inside the swagger descriptor for a given
  resource ([details](https://github.com/feugy/swagger-jack/pull/9))

  - be less restrictive on model content
  ([details](https://github.com/feugy/swagger-jack/pull/8))


  ### 1.4.1


  - check model id unicity to avoid erasure

  - allow apis to contain unwired resources. Allow to document handy-managed
  routes


  ### 1.4.0


  - use CakeFile for better build/test portability

  - enhance documentation

  - allow swagger descriptor path customization
  ([details](https://github.com/feugy/swagger-jack/issues/6))


  ### 1.3.1


  - fix when req.body is undefined
  ([details](https://github.com/feugy/swagger-jack/pull/4))


  ### 1.3.0


  - allow anonymous complex bodies to have multiple occurences 


  ### 1.2.0


  - allow body parameter to be facultative

  - fix packaging issues with coffee. Only contributors need to install it
  globally (as well as mocha)


  ### 1.1.0


  - be more strict regarding multipart management 


  ### 1.0.1


  - add some test on multipart/related body parsing 

  - enhance documentation

  - use [Travis CI](https://travis-ci.org/feugy/swagger-jack)



  ## License (MIT)


  Swagger is shipped with an MIT Licence. 


  Copyright (c) 2013 Atos Worldline


  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.



  --------

  ### Addendum: what's with that name ?


  We looked for a fun and yet eloquent name. But swagger.js was already used.

  [Jack Swagger](http://www.wwe.com/superstars/jackswagger) is an american catch
  superstar, and we never heard about him before, but it perfectly fits your
  naming goals :)
Luracast/Restler: >
  ![Restler](public/examples/resources/Restler.png) Luracast Restler

  ==================================================================

  [![Gitter](https://badges.gitter.im/Join
  Chat.svg)](https://gitter.im/Luracast/Restler?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

  [![Latest Stable
  Version](https://poser.pugx.org/luracast/restler/v/stable.png)](https://packagist.org/packages/luracast/restler)
  [![Total
  Downloads](https://poser.pugx.org/luracast/restler/downloads.png)](https://packagist.org/packages/luracast/restler)
  [![Latest Unstable
  Version](https://poser.pugx.org/luracast/restler/v/unstable.png)](https://packagist.org/packages/luracast/restler)
  [![License](https://poser.pugx.org/luracast/restler/license.png)](https://packagist.org/packages/luracast/restler)


  ### Version 3.0 Release Candidate 5


  Restler is a simple and effective multi-format Web API Server written in PHP.


  Just deal with your business logic in php, restler will take care of the REST!


  > if you do not have PHP >= 5.3.2 on your server and wont be able to upgrade
  you may

  > use [Restler 2](https://github.com/Luracast/Restler/tree/v2) instead


  ### Restler 3 - *Better APIs by Design*


  * [Developer Home](http://luracast.com/products/restler/)

  * [Live Examples](http://bit.ly/Restler3LiveExamples)

  * Updates on [Facebook](https://www.facebook.com/Luracast) and
  [Twitter](http://twitter.com/Luracast)

  * [Features](#features)

  * [Installation](#installation)

  * [Quick Start Guide](#quick-start-guide)

  * [Change Log](#change-log)


  Features

  --------


  * No Learning Curve

  * Light weight

  * Flexible

  * Highly Customizable

  * Many Examples that can be tried on your localhost to get started

  * Supports HTTP request methods HEAD, GET, POST, PUT, DELETE, OPTIONS and
  PATCH
    via header or request parameter (method)
  * Supports both RESTful and Pragmatic REST API Design

  * Clients can use X-HTTP-Method-Override header, supports Cross Origin
  Resource
    Sharing and JSONP
  * Two way format(media type) conversion both send and receive
      * Pluggable content Formatter framework and api
      * Comes with JSON, XML, Yaml, Amf, and Plist(both XML and Binary) format
        support
  * Pluggable Authentication schemes
      * OAuth 2 Server
  * Pluggable Filters to effectively manage API usage
      * API Rate Limiting Filter
  * Routing
      * Manual Routing (Annotation)
          * Using `@url GET my/custom/url/{param}` PHPDoc comments
      * Auto Routing (Reflection)
          * URL to Method mapping
          * URL part to Method parameter mapping
          * Query parameters to Method parameter mapping
          * Request body to Method parameter mapping
          * `[planned]` Header to Method parameter mapping
  * Cache built-in
      * Client Side Caching support
      * Proxy Caching support
      * Server Side Caching
          * `[planned]` ETag, If-None-Match support
          * `[planned]` Last-Modified, If-Modified-Since support
  * API Features
      * Always supports URLEncoded format for simplified input (POST vars)
      * Automatic parameter validation and type conversion
      * API versioning support by URL and/or vendor specific MIME
      * API documentation and discovery using [Restler API Explorer](https://github.com/Luracast/Restler-API-Explorer)
      * Throttling and Performance tuning
  * Management
      * `[planned]` Unit Testing using [PHPUnit](https://github.com/sebastianbergmann/phpunit/)
      * Behavior Driven API testing using [Behat](http://behat.org/) and [Guzzle](https://github.com/guzzle/guzzle)
      * Command line Project Management using [Respect/Foundation](https://github.com/Respect/Foundation)
      * Dependency Management using [Composer](http://getcomposer.org/)
      * Source code distributed under LGPL


  Git Repository and the Branches

  -------------------------------


  1. Most stable and recent version is maintained at the `master` branch,
  previous
     versions are kept in the branches such as `v1` and `v2`

  2. Version branch with the current version such as `v3` is used for building
  up
     the next release. It's documentation may not be updated frequently and thus
     reserved for the daring ones.

  3. Feature branches such as `features/html` and `features/router` are purely
     for experimentation purpose to try out a feature


  Installation

  ------------


  Make sure PHP 5.3.2 or above (at least 5.3.4 recommended to avoid potential
  bugs)

  is available on your server


  ### 1. Install Composer


  Restler uses [Composer](http://getcomposer.org/) to manage its dependencies.

  First, download a copy of `composer.phar`. It can be kept in your project
  folder

  or ideally in `usr/local/bin` to use it globally for all your projects. If you

  are on Windows, you can use the composer

  [windows installer](https://getcomposer.org/Composer-Setup.exe) instead.


  ### 2. Install Restler


  #### Option 1. Using composer create-project


  You may install Restler by running the create project command in your
  terminal.

  Replace {projectName} with your actual project name. It will create a folder

  with that name and install Restler.


  ```console

  php composer.phar create-project luracast/restler {projectName}

  ```

  > **Note:-**

  >

  > 1. If you do not want the additional formats and BDD tools you can include

  >    `--no-dev` to enforce exclusion of dev packages.

  >

  > 2. If you want to try the bleading edge v3 branch or any of the feature

  >    branches include `3.x-dev` or `dev-features/html` in the above command


  #### Option 2. Downloading from github


  Once Composer is installed, download the [latest version]() of the Restler

  framework and extract its contents into a directory on your server. Next, in
  the

  root of your Restler project, run the `php composer.phar install`

  (or `composer install`) command to install all of the framework's
  dependencies.

  This process requires Git to be installed on the server to successfully
  complete

  the installation.


  If you want to update the Restler framework, you may issue the

  `php composer.phar update` command.


  > **Note:-** If are not allowed to install composer and git on your server,
  you

  > can install and run them on your development machine. The resulting files
  and

  > folders can be uploaded and used on the server.



  ### 3. Configure


  Ideally public folder should be mapped as your web root, It is optional, but

  recommended to avoid exposing unneeded files and folders.


  ### 4. Try it out


  Try the live examples in your localhost


  ### 5. Run some test


  Update the base_url specified in `behat.yml` and then try the following
  command


  ```console


  bin/behat


  ```


  This will test the examples against the behaviors expected, for example


  ```gherkin


  Feature: Testing CRUD Example
      Scenario: Creating new Author with JSON
          Given that I want to make a new "Author"
          And his "name" is "Chris"
          And his "email" is "chris@world.com"
          And the request is sent as JSON
          When I request "/examples/_007_crud/authors"
          Then the response status code should be 200
          And the response should be JSON
          And the response has a "id" property

  ```


  All set, Happy Restling! :)


  Quick Start Guide

  -----------------


  Once you have got restler installed with the above steps, you can quickly
  create

  your application by following these steps


  ### 1. Write API


  Create your **API classes** with all needed public and protected methods



  ### 2. Open the Gateway


  Create the **gateway (index.php)** as follows


  ```php

  <?php

  require_once '../../../vendor/restler.php';

  use Luracast\Restler\Restler;


  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->handle(); //serve the response

  ```


  ### 3. Prettify URLs


  **Enable URL Rewriting**


  Make sure all the requests are routed to index.php by enabling URL Rewriting
  for

  your website


  For example:-


  If you are on Apache, you can use an .htaccess file such as


  ```apache

  DirectoryIndex index.php

  <IfModule mod_rewrite.c>
      RewriteEngine On
      RewriteRule ^$ index.php [QSA,L]
      RewriteCond %{REQUEST_FILENAME} !-f
      RewriteCond %{REQUEST_FILENAME} !-d
      RewriteRule ^(.*)$ index.php [QSA,L]
  </IfModule>

  <IfModule mod_php5.c>
      php_flag display_errors On
  </IfModule>

  ```


  > **Note:-** This requires `AllowOverride` to be set to `All` instead of
  `None`

  > in the `httpd.conf` file, and might require some tweaking on some server

  > configurations. Refer to
  [mod_rewrite](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)

  > documentation for more info.


  If you are on Nginx, you have to make sure you set the `server_name` and pass
  the

  PHP scripts to fast cgi (PHP-FPM) listening on 127.0.0.1:9000

      server {
              listen        80;
              server_name   api.luracast.com; //change it to match your server name

              //... other stuff

              location ~ \.php$ {
                  root           /var/www/html;
                  fastcgi_pass   127.0.0.1:9000;
                  fastcgi_index  index.php;
                  fastcgi_param  SCRIPT_FILENAME  /var/www/html/$fastcgi_script_name;
                  include        fastcgi_params;
              }

              //... other stuff

      }

  > **Note:-** This requires PHP, PHP-FPM to be properly installed and
  configured.

  > Refer to [PHP FastCGI](http://wiki.nginx.org/PHPFcgiExample) example for
  more

  > info.



  ### 4. Customise


  **Fine tune to suit your needs**



  ```php

  <?php

  require_once '../../../vendor/restler.php';

  use Luracast\Restler\Restler;

  use Luracast\Restler\Defaults;

  //set the defaults to match your requirements

  Defaults::$throttle = 20; //time in milliseconds for bandwidth throttling

  //setup restler

  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->addAPIClass('Resources'); //from restler framework for API Explorer

  $r->addFilterClass('RateLimit'); //Add Filters as needed

  $r->handle(); //serve the response

  ```


  If you have successfully completed Installation Step 2, you should have

  [Restler API Explorer](https://github.com/Luracast/Restler-API-Explorer)
  installed

  in `vendor/Luracast/explorer` folder. Create a symbolic link of

  `vendor/Luracast/explorer/dist` or copy the folder and name it as `explorer`


  Place the explorer in the same folder as the `index.php`


  Explore the api and try it out by openings `explorer/index.html` from the web

  root on your browser


  Happy Exploring! :)


  > **Note:-** Using eAccelerator can make restler to fail as it removes the

  > comments. More info can be found
  [here](http://wildlyinaccurate.com/eaccelerator-and-doctrine-2)


  ### 5. Annotate


  Restler supports annotations in the form of PHPDoc comments for API fine
  tuning


  They are documented in detail under [Annotations](ANNOTATIONS.md)


  ### 6. Authorize


  In order to protect your api, authenticate and allow valid users


  ```php

  <?php

  require_once '../../../vendor/restler.php';

  use Luracast\Restler\Restler;

  $r = new Restler();

  $r->addAPIClass('YourApiClassNameHere'); // repeat for more

  $r->addAuthenticationClass('CustomAuth'); //Add Authentication classes as
  needed

  $r->handle(); //serve the response

  ```


  ### 7. Start Production


  By default Restler runs in debug mode more fine tuned for API developer, by

  showing detailed error messages and prettifying the api result to human
  readbale

  form


  By turning on production mode you will gain some performance boost as it will

  cache the routes (comment parsing happens only once instead of every api
  call),

  few other files and avoid giving out debug information


  ```php

  <?php

  require_once '../../../vendor/restler.php';

  use Luracast\Restler\Restler;


  //setup restler


  $r = new Restler(true); //turn on production mode by passing true.

  //If you are using file based cache (the default) make sure cache folder is

  //writable. when you make changes to your code make sure you delete the

  // routes.php inside the cache folder

  //...

  ```



  Change Log

  ----------

  ### Restler 3.0 RC5

   * Scope (an dependency injection container) is added. It's register method allows adding api classes that has some dependencies.
   * Improves HtmlFormat to support blade templates and makes it easily extendable to add your own templates.
   * HtmlFormat::$format has been renamed as HtmlFormat::$template for better clarrity
   * HtmlFormat now supports auto templating to load relevant template for an API method based on the mapped url.
   * Tag, a utility class for generating html tags in object oriented way.
   * Emmet class that extends a subset of emmet to create a a template engine.
   * Forms class to auto generate forms for any API method prebuilt in HTML5, Twitter Bootstrap 3, Zurb Foundation formats.
   * Validator improved to allow suppressing validation errors from throwing exceptions immediatly, so that API call can reach the API method
   * Validator improved to be form validation friendly.
   * Nav class creating html navigation interface.
   * OAuth examles updgrated to use version 1.0 of OAuth2 library.
   * Many bug fixes and improvements.


  ### Restler 3.0 RC4

   * `$reques_data` in api method parameters and `getRequestData()` on restler
     instance now excludes `$_GET` parameters.
   * Returning null from api method now excludes the response body. This behaviour
     can be changed by setting `Defaults::$emptyBodyForNullResponse` to false.
   * Added many api examples under tests folder for testing feature by feature
     using BDD
   * Support for custom class parameters and array of custom class parameters
   * Ability to pass the parameter directly as the body of the request when it is
     the only parameter
   * Fixes to composer.json and publish stable release as composer package on
     packagist.
   * New Routes class with improved routing, including wild card routes and smart
     routing based on paramter type.
   * Possibility to use any autoloader including composer's autoloader for maximum
     interoperability
   * Moved to using the [rodneyrehm/plist](https://packagist.org/packages/rodneyrehm/plist)
     package for CFPropertyList.
   * Removed required packages as they are not technically "required" per se,
     Restler works out of the box.
   * Created supported packages as require-dev instead which will be installed via
     `composer install --dev`
   * Added suggested section for all the supported packages.
   * Added keywords to package descriptor
   * Added branch alias to indicate that v3 is the snapshot for v3.0.x-dev
   * Released Restler as package on packagist.

  ### Restler 3.0 RC3


  * Added Defaults::$cacheDirectory to set cache directory in one central place

  * Added JSONP support with JsFormat class by extending JsonFormat.

  * Fixes fatal error when the JSON sent in the request body is not an object or
    array
  * Improves inline comment parsing by array conversion when delimiter is found
    and tag is not @pattern
  * RateLimit class re-written to support all range of time units
    second|minute|hour|day|week|month to have fine grained control
  * Resources class improved to include description for body parameters

  * Fixes Resources not to include namespace when the return type is array of
    custom class
  * Fixed Resource not to include the API of another class when the current api
    name is a begins with part of the other API
  * Added two more ways to exclude API's from explorer/documentation
      * `Resources::$excludedHttpMethods` (array)
      * `Resources::$excludedPaths` (array)
  * Fixes unescaped unicode bug in PHP < 5.4

  * Fixes a bug with ValidationInfo parsing @choice inline comment

  * Added Charset support

  * Added Language (basic) support

  * Updated the BDD tests to include new features

  * Fixes a bug in Restler class which affects $_GET overriding `Defaults`

  * Fixes a bug in XmlFormat parsing XML content to array

  * Added support for JSONP via jsFormat extension of JsonFormat

  * Fixes a bug in unicode un-escaping for JsonFormat in PHP < 5.4

  * Fixes the order so that responseFormat->setCharset is called before encoding
    the response
  * Documentation improvements and minor bug fixes


  ### Restler 3.0 RC2


  * Filter classes can use authentication status and respond differently for
    authenticated users by implementing iUseAuthentication interface
  * `RateLimit` class added to rate limit the api usage

  * Fixed a bug with setCompatibilityMode

  * Resources updated to use only paths for resource identification instead of
    class name
      * Enabled Access Control for Documentation
  * Fixed CommentParser to ignore repeated white space so that it parses
  comments
    correctly
  * Fixed comment parsing for @status and @expires tags

  * Added the following Examples
      * Documentation
      * Rate Limit
      * Access Control
  * CRUD example updated to include PATCH support




  ### Restler 3.0


  **Restler 3.0** is completely rewritten from Restler 2.0 with best practices
  in

  mind for


  * PHP Coding

  * RESTfulness and/or Pragmatic REST

  * API Design


  **Restler 3.0**


  * uses namespaces, Late Static Bindings, and Closures and thus it is **PHP
  5.3+**
    only (if you need **PHP 5.0+** support use [Restler 2](https://github.com/Luracast/Restler/tree/v2))
  * provides backward compatibility for Restler 1 and 2.
    Use `$r->setCompatibilityMode($version);`
  * supports hybrid api which provides extended data to authenticated users
    Use `@access hybrid` PHPDoc comment
  * uses smart auto routing by default where API method parameters that
    have default values are no longer mapped to the URL, instead they are
    mapped to query strings to reduce ambiguity in the url.
  * supports `suppress_response_codes` as query string, when set to true;
    all http responses will be returned with HTTP OK with the errors in the
    body to accommodate mobile and less privileged clients.
  * has improved `CommentParser` which adds support for embedded data in
  multiple
    formats
      * inline doc comments `{@name value}`
      * query string params \`\`\` param1=value&param2=value2\`\`\`
      * json \`\`\` {"param1": value, "param2": value2}\`\`\` which can be placed
        in multi-lines
  * has `Defaults` class with static properties that can be changed to suit the
    needs
  * iAuthenticate is now using `__isAllowed` method instead of
  `__isAuthenticated`
    so that same
    class can be used for Authentication or Filtering
  * iUseAuthentication interface added to help hybrid access api methods and
    filters to find out about user authentication status
  * iFilter interface updated to provide charset support

  * ...(more to follow)


  ### Restler 2.0


  Restler 2.0 is a major rewrite to use convention over configuration and it is

  optimized for performance. Here are some of the major changes and improvements


  * PHPDoc comments to map a method to URI are now optional.

  * All public methods that does not begin with an underscore are mapped
    automatically to the method name (`gateway\classname\methodname\param1\...`)
  * If we do not specify the second parameter for
    `$restler->addAPIClass` it will be mapped to the class name instead of mapping
     it to the root
  * Restler 2 is written for PHP 5.3 and above but it make use of compat.php and
    work on any version of PHP starting from PHP 5.0
signalfx/swagger-cli-client: >
  # Swagger CLI Client


  Generates a command-line interface for any 

  [Swagger
  Specification](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md)
  so you can do things like:


  ![Example usage](https://i.imgur.com/IVhxFlE.png)


  ## Usage

  This intended to be embedded within a wrapper application which can provide it
  the schema object (which is generated using
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema)). For
  example, here's the petstore-cli file:


  ```javascript

  #!/usr/bin/env node


  var swaggerCli = require('../'),
    schema = require('./petstore-schema.json');

  swaggerCli(schema);

  ```


  To create a cli app for your schema, just require your schema instead of the
  petstore schema.


  ## Auth lookup strategy

  By default the cli will first use the `--auth` param (if defined), then it'll
  use the `<appname>_AUTH` (e.g., PETSTORECLI_AUTH) env variable (if defined),
  and finally a yaml/json file called `.<app-name>` (e.g. ~/.petstore-cli which
  may contain "`auth: MY_TOKEN`").


  ## Overriding the base path

  You can override your api base path via the same lookup strategy as auth keys,
  this is useful for testing and development. Pass in `--basePathOverride
  <path>` or defined a `<app-name>_BASE_PATH` or a `basePath` key-value pair in
  the `.<app-name>` config file. 
concentricsky/django-tastypie-swagger: >
  ![Concentric
  Sky](https://concentricsky.com/media/uploads/images/csky_logo.jpg)


  ## Django Tastypie Swagger


  **django-tastypie-swagger** is a small adapter library to construct
  [Swagger](http://swagger.wordnik.com/) documentation from
  [Tastypie](https://django-tastypie.readthedocs.org) resources.


  This package provides two things:


  1. An embedded instance of [Swagger UI](https://github.com/wordnik/swagger-ui)
  to point a URL to.

  2. Automatic [Resource
  Listing](https://github.com/wordnik/swagger-core/wiki/Resource-Listing) and
  [API
  Declaration](https://github.com/wordnik/swagger-core/wiki/API-Declaration)
  generation that is consumed by #1



  ### Table of Contents

  - [Version History](#version-history)

  - [Documentation](#documentation)

  - [Installation](#installation)

  - [Getting Started](#getting-started)

  - [Contributors](#contributors)

  - [License](#license)

  - [About Concentric Sky](#about-concentric-sky)



  ## Version History


  - v0.1.3 Various bug fixes and documentation updates

  - v0.1.2 Fixes for Django 1.5 compatibility

  - v0.1.1 Public codebase was released



  ## Documentation


  Detailed documentation is available on [Read The
  Docs](http://django-tastypie-swagger.readthedocs.org/en/latest/).



  ## Installation


  Install package::

      pip install django-tastypie-swagger

  Add to INSTALLED_APPS::

      INSTALLED_APPS = [
          ...

          'tastypie_swagger',

          ...
      ]


  ## Getting Started


  Enable documentation for an api endpoint by adding a URL to your urlpatterns.


  eg::

    
      urlpatterns = patterns('',
          ...

          url(r'api/myapi/doc/',
            include('tastypie_swagger.urls', namespace='myapi_tastypie_swagger'),
            kwargs={"tastypie_api_module":"myapp.registration.my_api", "namespace":"myapi_tastypie_swagger"}
          ),

          ...
      )


  To declare more than one endpoint, repeat the above URL definition and change
  the namespace.


  Swagger documentation will be served up at the URL(s) you configured.



  ## Contributors


  Contributors to this project are listed in the CONTRIBUTORS.md file. If you
  contribute to this project, please add your name to the file.



  ## License


  This project is licensed under the Apache License, Version 2.0. Details can be
  found in the LICENSE.md file. License for third-party code is available in
  3RDPARTYLICENSES.md.



  ## About Concentric Sky


  _For nearly a decade, Concentric Sky has been building technology solutions
  that impact people everywhere. We work in the mobile, enterprise and web
  application spaces. Our team, based in Eugene Oregon, loves to solve complex
  problems. Concentric Sky believes in contributing back to our community and
  one of the ways we do that is by open sourcing our code on GitHub. Contact
  Concentric Sky at hello@concentricsky.com._
fliptoo/swagger-express: >
  {swagger-express}

  =========


  [Swagger](https://developers.helloreverb.com/swagger/) is a specification and
  complete framework 

  implementation for describing, producing, consuming, and visualizing RESTful
  web services.

  View [demo](http://petstore.swagger.wordnik.com/).


  __{swagger-express}__ is a simple and clean solution to integrate swagger with
  express.


  ## Installation

      $ npm install -g swagger-express

  ## Quick Start


  Configure {swagger-express} as express middleware.



  `apiVersion`      -> Your api version.


  `swaggerVersion`  -> Swagger version.


  `swaggerUI`       -> Where is your swagger-ui?


  `swaggerURL`      -> Path to use for swagger ui web interface.


  `swaggerJSON`     -> Path to use for swagger ui JSON.


  `basePath`        -> The basePath for swagger.js


  `info`            -> [Metadata][info] about the API


  `apis`            -> Define your api array.


  `middleware`      -> Function before response.


  ```

  var swagger = require('swagger-express');


  app.configure(function(){
    ...
    app.use(swagger.init(app, {
      apiVersion: '1.0',
      swaggerVersion: '1.0',
      swaggerURL: '/swagger',
      swaggerJSON: '/api-docs.json',
      swaggerUI: './public/swagger/',
      basePath: 'http://localhost:3000',
      info: {
        title: 'swagger-express sample app',
        description: 'Swagger + Express = {swagger-express}'
      },
      apis: ['./api.js', './api.yml'],
      middleware: function(req, res){}
    }));
    app.use(app.router);
    ...
  });

  ```


  [info]:
  https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#513-info-object


  ## Read from jsdoc


  Example 'api.js'


  ```js


  /**
   * @swagger
   * resourcePath: /api
   * description: All about API
   */

  /**
   * @swagger
   * path: /login
   * operations:
   *   -  httpMethod: POST
   *      summary: Login with username and password
   *      notes: Returns a user based on username
   *      responseClass: User
   *      nickname: login
   *      consumes: 
   *        - text/html
   *      parameters:
   *        - name: username
   *          description: Your username
   *          paramType: query
   *          required: true
   *          dataType: string
   *        - name: password
   *          description: Your password
   *          paramType: query
   *          required: true
   *          dataType: string
   */
  exports.login = function (req, res) {
    var user = {};
    user.username = req.param('username');
    user.password = req.param('password');
    res.json(user);
  }


  /**
   * @swagger
   * models:
   *   User:
   *     id: User
   *     properties:
   *       username:
   *         type: String
   *       password:
   *         type: String    
   */
  ```


  ## Read from yaml file


  Example 'api.yml'


  ```yml

  resourcePath: /api

  description: All about API

  apis: 


  - path: /login
    operations:

    - httpMethod: POST
      summary: Login with username and password
      notes: Returns a user based on username
      responseClass: User
      nickname: login
      consumes: 
        - text/html
      parameters:

      - name: username
        dataType: string
        paramType: query
        required: true
        description: Your username

      - name: password
        dataType: string
        paramType: query
        required: true
        description: Your password

  models:
      User:
        id: User
        properties:
          username:
            type: String
          password:
            type: String    
  ```


  ## Read from jsdoc


  Example 'api.coffee'


  ```coffee


  ###
   * @swagger
   * resourcePath: /api
   * description: All about API
  ###


  ###
   * @swagger
   * path: /login
   * operations:
   *   -  httpMethod: POST
   *      summary: Login with username and password
   *      notes: Returns a user based on username
   *      responseClass: User
   *      nickname: login
   *      consumes:
   *        - text/html
   *      parameters:
   *        - name: username
   *          description: Your username
   *          paramType: query
   *          required: true
   *          dataType: string
   *        - name: password
   *          description: Your password
   *          paramType: query
   *          required: true
   *          dataType: string
  ###


  ###
   * @swagger
   * models:
   *   User:
   *     id: User
   *     properties:
   *       username:
   *         type: String
   *       password:
   *         type: String
  ###

  ```



  ## Examples


  Clone the {swagger-express} repo, then install the dev dependencies:

      $ git clone git://github.com/fliptoo/swagger-express.git --depth 1
      $ cd swagger-express
      $ npm install

  and run the example:

      $ cd example
      $ node app.js
      
  # Credits


  - [Express](https://github.com/visionmedia/express)

  - [swagger-jack](https://github.com/feugy/swagger-jack)


  ## License


  (The MIT License)


  Copyright (c) 2013 Fliptoo &lt;fliptoo.studio@gmail.com&gt;


  Permission is hereby granted, free of charge, to any person obtaining

  a copy of this software and associated documentation files (the

  'Software'), to deal in the Software without restriction, including

  without limitation the rights to use, copy, modify, merge, publish,

  distribute, sublicense, and/or sell copies of the Software, and to

  permit persons to whom the Software is furnished to do so, subject to

  the following conditions:


  The above copyright notice and this permission notice shall be

  included in all copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,

  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.

  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY

  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,

  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE

  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
KevM/fubumvc-swagger: "FubuMVC Swagger\r\n===============\r\n\r\nThis project helps your [FubuMVC](https://github.com/DarthFubuMVC/fubumvc) web application\r\n generate API documentation via [Swagger](http://swagger.wordnik.com/).\r\n \r\n[![swagger demo](https://github.com/KevM/fubumvc-swagger/raw/gh-pages/images/hellofubuswagger.png)](http://fubuswagger.apphb.com/)\r\n\r\nSee our [Hello Swagger](http://fubuswagger.apphb.com/) live demo.\r\n\r\n### How do I get it? ###\r\n\r\nWe have a [nuget package](https://nuget.org/packages/FubuMVC.Swagger) available.\r\n\r\n```PM> Install-Package FubuMVC.Swagger```\r\n\r\n#### Building Swagger\r\n\r\nTo build just run rake grabbing the albacore gem if you don't already have it. \r\n\r\n```rb\r\ngem install albacore\r\nrake\r\n```\r\n\r\n### How do I put this in my peanut butter?\r\n\r\n**Note:** This should all be simplified when I find the time to figure out Fubu Bottles. \r\n\r\nYour API documented should support content negitiation and be grouped under the route **/api**. Take a look at the [HelloSwagger](https://github.com/KevM/fubumvc-swagger/tree/master/src/HelloSwagger) for examples. \r\n\r\n#### Checklist\r\n\r\nAdd a reference to this project. Why not [use nuget](https://nuget.org/packages/FubuMVC.Swagger)!\r\n\r\nAdd the following to your FubuRegistry:\r\n\r\n```cs\r\nApplyConvention<SwaggerConvention>();\r\nServices(s=> s.AddService<IActionGrouper, APIRouteGrouper>());\r\n```\r\n\r\nCopy the swagger-ui directory into your **/content** direcotry.\r\n\r\nLaunch your web app and take a look at the **/api** to see if it is working.\r\n\r\n### What does this convention do?\r\n\r\nThree routes will be added to your application:\r\n\r\n```html\r\nGET /api\r\n```\r\nThis route serves up the Swagger-UI page currently embedded into FubuSwagger. _This part needs work._\r\n\r\n```html\r\nGET /api/resources.json\r\n```\r\nSwagger UI does some resource discovery and uses the output of this route to find all of the API groups in your project. \r\n\r\n```html\r\nGET /api/{GroupKey}.json\r\n```\r\nDetails of each API group present in your app. \r\n\r\nPointing a Swagger UI web site at ```http://localhost:port/api/``` should render pretty API documentation for your web application.\r\n\r\n### Why do I not see documentation for my actions?\r\n\r\nMake sure the actions you wish to document are enabled for \"Conneg\"\r\n\r\nIn this example I have two marker interfaces which are used to mark input models on actions which will be APIs. \r\n\r\n```cs\r\ngraph.Behaviors\r\n .Where(x => x.InputType().CanBeCastTo<IApi>() || x.InputType().CanBeCastTo<IUnauthenticatedApi>())\r\n .Each(x => x.MakeAsymmetricJson());\r\n```\r\n\r\nThis example will force the result of these actions to be JSON. Note: This configuration is working around a bug in FubuMVC where normal browser usage will return XML for Conneg enabled endpoints. :( \r\n\r\nBetter yet take a look at the [HelloSwagger](https://github.com/KevM/fubumvc-swagger/tree/master/src/HelloSwagger) demo application and see how it is wired up and organized.\r\n\r\n### How do I add more detail to my APIs\r\n\r\nYou can use data annotations to mark up your input models and their properties.\r\n\r\n```cs\r\n[Description(\"Workflow object history\")]\r\npublic class HistoryRequest : IApi \r\n{\r\n    [Required, Description(\"Type of workflow object. Typically this is 'case'.\")]\r\n    [AllowableValues(\"case\", \"subcase\", \"solution\", \"<any workflow object name>\")]\r\n    public string Type { get; set; }\r\n    [Required, Description(\"Id of the workflow object.\")]\r\n    public string Id { get; set; }\r\n\r\n    [Description(\"Limit the amout of history returned the given number of days. When this parameter is not specified. All history items will be returned.\")]\r\n\tpublic int DaysOfHistory { get; set; }\r\n}\r\n```"
ServiceStack/ServiceStack: "Follow [@ServiceStack](https://twitter.com/servicestack) or join the [Google+ Community](https://plus.google.com/communities/112445368900682590445)\nfor updates, or [StackOverflow](http://stackoverflow.com/questions/ask) or the [Customer Forums](https://forums.servicestack.net/) for support.\n\n> View the [Release Notes](https://servicestack.net/release-notes) for latest features or see [servicestack.net/features](https://servicestack.net/features) for an overview.\n\n### Simple, Fast, Versatile and full-featured Services Framework\n\nServiceStack is a simple, fast, versatile and highly-productive full-featured [Web](http://razor.servicestack.net) and \n[Web Services](http://docs.servicestack.net/web-services.html) Framework that's \nthoughtfully-architected to [reduce artificial complexity](http://docs.servicestack.net/why-not-odata.html#why-not-complexity) and promote \n[remote services best-practices](http://docs.servicestack.net/advantages-of-message-based-web-services.html) \nwith a [message-based design](http://docs.servicestack.net/what-is-a-message-based-web-service.html) \nthat allows for maximum re-use that can leverage an integrated \n[Service Gateway](http://docs.servicestack.net/service-gateway.html) \nfor the creation of loosely-coupled \n[Modularized Service](http://docs.servicestack.net/modularizing-services.html) Architectures.\nServiceStack Services are consumable via an array of built-in fast data formats (inc. \n[JSON](https://github.com/ServiceStack/ServiceStack.Text), \nXML, \n[CSV](http://docs.servicestack.net/csv-format.html), \n[JSV](http://docs.servicestack.net/json-jsv-and-xml.html), \n[ProtoBuf](http://docs.servicestack.net/protobuf-format.html), \n[Wire](http://docs.servicestack.net/wire-format.html) and \n[MsgPack](http://docs.servicestack.net/messagepack-format.html)) \nas well as XSD/WSDL for [SOAP endpoints](http://docs.servicestack.net/soap-support.html) and \n[Rabbit MQ](http://docs.servicestack.net/rabbit-mq.html), \n[Redis MQ](http://docs.servicestack.net/messaging-and-redis.html) and\n[Amazon SQS](https://github.com/ServiceStack/ServiceStack.Aws#sqsmqserver) MQ hosts. \n\nIts design and simplicity focus offers an unparalleled suite of productivity features that can be declaratively enabled \nwithout code, from creating fully queryable Web API's with just a single Typed Request DTO with\n[Auto Query](http://docs.servicestack.net/autoquery.html) supporting \n[every major RDBMS](https://github.com/ServiceStack/ServiceStack.OrmLite#8-flavours-of-ormlite-is-on-nuget) \nto the built-in support for\n[Auto Batched Requests](http://docs.servicestack.net/auto-batched-requests.html) \nor effortlessly enabling rich [HTTP Caching](http://docs.servicestack.net/http-caching.html) and\n[Encrypted Messaging](http://docs.servicestack.net/encrypted-messaging.html) \nfor all your existing services via [Plugins](http://docs.servicestack.net/plugins.html).\n\nYour same Services also serve as the Controller in ServiceStack's [Smart Razor Views](http://razor.servicestack.net/)\nreducing the effort to serve both \n[Web and Single Page Apps](https://github.com/ServiceStackApps/LiveDemos) as well as \n[Rich Desktop and Mobile Clients](https://github.com/ServiceStackApps/HelloMobile) that are able to deliver instant interactive \nexperiences using ServiceStack's real-time [Server Events](http://docs.servicestack.net/server-events.html).\n\nServiceStack Services also maximize productivity for consumers providing an \n[instant end-to-end typed API without code-gen](http://docs.servicestack.net/csharp-client.html) enabling\nthe most productive development experience for developing .NET to .NET Web Services.\n\n### [Generate Instant Typed APIs from within all Major IDEs!](http://docs.servicestack.net/add-servicestack-reference.html)\n\nServiceStack now integrates with all Major IDE's used for creating the best native experiences on the most popular platforms \nto enable a highly productive dev workflow for consuming Web Services, making ServiceStack the ideal back-end choice for powering \nrich, native iPhone and iPad Apps on iOS with Swift, Mobile and Tablet Apps on the Android platform with Java, OSX Desktop Appications \nas well as targetting the most popular .NET PCL platforms including Xamarin.iOS, Xamarin.Android, Windows Store, WPF, WinForms and Silverlight: \n\n<img src=\"https://raw.githubusercontent.com/ServiceStack/Assets/master/img/wikis/ide-ss-plugin-logos.png\" align=\"right\" />\n\n#### [VS.NET integration with ServiceStackVS](https://visualstudiogallery.msdn.microsoft.com/5bd40817-0986-444d-a77d-482e43a48da7)\n\nProviding instant Native Typed API's for \n[C#](http://docs.servicestack.net/csharp-add-servicestack-reference.html), \n[TypeScript](http://docs.servicestack.net/typescript-add-servicestack-reference.html),\n[F#](http://docs.servicestack.net/fsharp-add-servicestack-reference.html) and \n[VB.NET](http://docs.servicestack.net/vbnet-add-servicestack-reference.html) \ndirectly in Visual Studio for the \n[most popular .NET platforms](https://github.com/ServiceStackApps/HelloMobile) including iOS and Android using \n[Xamarin.iOS](https://github.com/ServiceStackApps/HelloMobile#xamarinios-client) and \n[Xamarin.Android](https://github.com/ServiceStackApps/HelloMobile#xamarinandroid-client) on Windows.\n\n#### [Xamarin Studio integration with ServiceStackXS](http://docs.servicestack.net/csharp-add-servicestack-reference.html#xamarin-studio)\n\nProviding [C# Native Types](http://docs.servicestack.net/csharp-add-servicestack-reference.html) \nsupport for developing iOS and Android mobile Apps using \n[Xamarin.iOS](https://github.com/ServiceStackApps/HelloMobile#xamarinios-client) and \n[Xamarin.Android](https://github.com/ServiceStackApps/HelloMobile#xamarinandroid-client) with \n[Xamarin Studio](https://www.xamarin.com/studio) on OSX. The **ServiceStackXS** plugin also provides a rich web service \ndevelopment experience developing Client applications with \n[Mono Develop on Linux](http://docs.servicestack.net/csharp-add-servicestack-reference.html#xamarin-studio-for-linux)\n\n#### [Xcode integration with ServiceStackXC Plugin](http://docs.servicestack.net/swift-add-servicestack-reference.html)\n\nProviding [an instant Native Typed API in Swift](http://docs.servicestack.net/swift-add-servicestack-reference.html) \nincluding generic Service Clients enabling a highly-productive workflow and effortless consumption of Web Services from \nnative iOS and OSX Applications - directly from within Xcode!\n\n#### [Android Studio integration with ServiceStackIDEA](http://docs.servicestack.net/java-add-servicestack-reference.html)\n\nProviding [an instant Native Typed API in Java](http://docs.servicestack.net/java-add-servicestack-reference.html) \nand [Kotlin](http://docs.servicestack.net/kotlin-add-servicestack-reference.html)\nincluding idiomatic Java Generic Service Clients supporting Sync and Async Requests by levaraging Android's AsyncTasks to enable the creation of services-rich and responsive native Java or Kotlin Mobile Apps on the Android platform - directly from within Android Studio!\n\n#### [IntelliJ integration with ServiceStackIDEA](http://docs.servicestack.net/java-add-servicestack-reference.html#install-servicestack-idea-from-the-plugin-repository)\n\nThe ServiceStack IDEA plugin is installable directly from IntelliJ's Plugin repository and enables seamless integration with IntelliJ Java Maven projects for genearting a Typed API to quickly and effortlessly consume remote ServiceStack Web Services from pure cross-platform Java or Kotlin Clients.\n\n#### [Eclipse integration with ServiceStackEclipse](https://github.com/ServiceStack/ServiceStack.Java/tree/master/src/ServiceStackEclipse#eclipse-integration-with-servicestack)\n\nThe unmatched productivity offered by [Java Add ServiceStack Reference](http://docs.servicestack.net/java-add-servicestack-reference.html) is also available in the \n[ServiceStackEclipse IDE Plugin](https://github.com/ServiceStack/ServiceStack.Java/tree/master/src/ServiceStackEclipse#eclipse-integration-with-servicestack) that's installable \nfrom the [Eclipse MarketPlace](https://marketplace.eclipse.org/content/servicestackeclipse) to provide deep integration of Add ServiceStack Reference with Eclipse Java Maven Projects\nenabling Java Developers to effortlessly Add and Update the references of their evolving remote ServiceStack Web Services.\n\n#### [servicestack-cli - Simple command-line utilities for ServiceStack](http://docs.servicestack.net/add-servicestack-reference.html#simple-command-line-utilities-for-servicestack)\n\nIn addition to our growing list of supported IDE's, the [servicestack-cli](https://github.com/ServiceStack/servicestack-cli)\ncross-platform command-line npm scripts makes it easy for build servers, automated tasks and command-line runners of your \nfavorite text editors to easily Add and Update ServiceStack References!\n\n## Simple Customer Database REST Services Example\n\nThis example is also available as a [stand-alone integration test](https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/CustomerRestExample.cs):\n\n```csharp\n//Web Service Host Configuration\npublic class AppHost : AppSelfHostBase\n{\n    public AppHost() \n        : base(\"Customer REST Example\", typeof(CustomerService).Assembly) {}\n\n    public override void Configure(Container container)\n    {\n        //Register which RDBMS provider to use\n        container.Register<IDbConnectionFactory>(c => \n            new OrmLiteConnectionFactory(\":memory:\", SqliteDialect.Provider));\n\n        using (var db = container.Resolve<IDbConnectionFactory>().Open())\n        {\n            //Create the Customer POCO table if it doesn't already exist\n            db.CreateTableIfNotExists<Customer>();\n        }\n    }\n}\n\n//Web Service DTO's\n[Route(\"/customers\", \"GET\")]\npublic class GetCustomers : IReturn<GetCustomersResponse> {}\n\npublic class GetCustomersResponse\n{\n    public List<Customer> Results { get; set; } \n}\n\n[Route(\"/customers/{Id}\", \"GET\")]\npublic class GetCustomer : IReturn<Customer>\n{\n    public int Id { get; set; }\n}\n\n[Route(\"/customers\", \"POST\")]\npublic class CreateCustomer : IReturn<Customer>\n{\n    public string Name { get; set; }\n}\n\n[Route(\"/customers/{Id}\", \"PUT\")]\npublic class UpdateCustomer : IReturn<Customer>\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n}\n\n[Route(\"/customers/{Id}\", \"DELETE\")]\npublic class DeleteCustomer : IReturnVoid\n{\n    public int Id { get; set; }\n}\n\n// POCO DB Model\npublic class Customer\n{\n    [AutoIncrement]\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n}\n\n//Web Services Implementation\npublic class CustomerService : Service\n{\n    public object Get(GetCustomers request)\n    {\n        return new GetCustomersResponse { Results = Db.Select<Customer>() };\n    }\n\n    public object Get(GetCustomer request)\n    {\n        return Db.SingleById<Customer>(request.Id);\n    }\n\n    public object Post(CreateCustomer request)\n    {\n        var customer = new Customer { Name = request.Name };\n        Db.Save(customer);\n        return customer;\n    }\n\n    public object Put(UpdateCustomer request)\n    {\n        var customer = Db.SingleById<Customer>(request.Id);\n        if (customer == null)\n            throw HttpError.NotFound(\"Customer '{0}' does not exist\".Fmt(request.Id));\n\n        customer.Name = request.Name;\n        Db.Update(customer);\n\n        return customer;\n    }\n\n    public void Delete(DeleteCustomer request)\n    {\n        Db.DeleteById<Customer>(request.Id);\n    }\n}\n\n```\n\n### [Calling the above REST Service from any C#/.NET Client](http://docs.servicestack.net/csharp-add-servicestack-reference.html)\n\n> No code-gen required, can re-use above Server DTOs:\n\n```csharp\nvar client = new JsonServiceClient(BaseUri);\n\n//GET /customers\nvar all = client.Get(new GetCustomers());                         // Count = 0\n\n//POST /customers\nvar customer = client.Post(new CreateCustomer { Name = \"Foo\" });\n\n//GET /customer/1\ncustomer = client.Get(new GetCustomer { Id = customer.Id });      // Name = Foo\n\n//GET /customers\nall = client.Get(new GetCustomers());                             // Count = 1\n\n//PUT /customers/1\ncustomer = client.Put(\n    new UpdateCustomer { Id = customer.Id, Name = \"Bar\" });       // Name = Bar\n\n//DELETE /customers/1\nclient.Delete(new DeleteCustomer { Id = customer.Id });\n\n//GET /customers\nall = client.Get(new GetCustomers());                             // Count = 0\n```\n\nSame code also works with [Android, iOS, Xamarin.Forms, UWP and WPF clients](https://github.com/ServiceStackApps/HelloMobile).\n\n> [F#](http://docs.servicestack.net/fsharp-add-servicestack-reference.html) and \n[VB.NET](http://docs.servicestack.net/vbnet-add-servicestack-reference.html) can re-use same \n[.NET Service Clients](http://docs.servicestack.net/csharp-client.html) and DTO's\n\n### [Calling from TypeScript](http://docs.servicestack.net/typescript-add-servicestack-reference.html#ideal-typed-message-based-api)\n\n```ts\nconst client = new JsonServiceClient(baseUrl);\nconst { results } = await client.get(new GetCustomers());\n```\n\n### [Calling from Swift](http://docs.servicestack.net/swift-add-servicestack-reference.html#jsonserviceclientswift)\n\n```swift\nlet client = JsonServiceClient(baseUrl: BaseUri)\n\nclient.getAsync(GetCustomers())\n    .then {\n        let results = $0.results;\n    }\n```\n\n### [Calling from Java](http://docs.servicestack.net/java-add-servicestack-reference.html#jsonserviceclient-usage)\n\n```java\nJsonServiceClient client = new JsonServiceClient(BaseUri);\n\nGetCustomersResponse response = client.get(new GetCustomers());\nList<Customer> results = response.results; \n```\n\n### [Calling from Kotlin](http://docs.servicestack.net/kotlin-add-servicestack-reference.html#jsonserviceclient-usage)\n\n```kotlin\nval client = JsonServiceClient(BaseUri)\n\nval response = client.get(GetCustomers())\nval results = response.results\n```\n\n### [Calling from Dart](http://docs.servicestack.net/dart-add-servicestack-reference)\n\n```dart\nvar client = new JsonServiceClient(BaseUri);\n\nvar response = await client.get(GetCustomers());\nvar results = client.results;\n```\n\n### [Calling from jQuery using TypeScript Definitions](http://docs.servicestack.net/typescript-add-servicestack-reference.html#typescript-interface-definitions)\n\n```js\n$.getJSON($.ss.createUrl(\"/customers\", request), request, (r: GetCustomersResponse) => {\n    var results = r.results;\n});\n```\n\nUsing TypeScript Definitions with Angular HTTP Client:\n\n```ts\nthis.http.get<GetCustomersResponse>(createUrl('/customers', request)).subscribe(r => {\n    this.results = r.results;\n});\n```\n\n### Calling from jQuery\n\n```js\n$.getJSON(baseUri + \"/customers\", function(r) {\n\tvar results = r.results;\n});\n```\n\nThat's all the application code required to create and consume a simple database-enabled REST Web Service!\n\n## Getting Started\n\n * [Start with the **Getting Started** section](http://docs.servicestack.net/create-your-first-webservice.html)\n * [Example Apps and Demos](https://github.com/ServiceStackApps/LiveDemos)\n * [Community resources](http://docs.servicestack.net/community-resources.html)\n\n### [Release Notes](https://servicestack.net/release-notes)\n\n## Download\n\nIf you have [NuGet](http://www.nuget.org/) installed, the easiest way to get started is to: \n\n### [Install ServiceStack via NuGet](https://servicestack.net/download).\n\n_Latest v4+ on NuGet is a [commercial release](https://servicestack.net/pricing) with [free quotas](https://servicestack.net/download#free-quotas)._\n\n### [Docs and Downloads for older v3 BSD releases](https://github.com/ServiceStackV3/ServiceStackV3)\n\n### [Live Demos](https://github.com/ServiceStackApps/LiveDemos)\n\n**The [Definitive list of Example Projects, Use-Cases, Demos, Starter Templates](https://github.com/ServiceStackApps/LiveDemos)**\n    \n## Copying\n\nSince September 2013, ServiceStack source code is available under GNU Affero General Public License/FOSS License Exception, see license.txt in the source. \nAlternative commercial licensing is also available, see https://servicestack.net/pricing for details.\n\n## Contributing\n\nContributors need to approve the [Contributor License Agreement](https://docs.google.com/forms/d/16Op0fmKaqYtxGL4sg7w_g-cXXyCoWjzppgkuqzOeKyk/viewform) before any code will be reviewed, see the [Contributing docs](http://docs.servicestack.net/contributing.html) for more details. All contributions must include tests verifying the desired behavior.\n\n## OSS Libraries used\n\nServiceStack includes source code of the great libraries below for some of its core functionality. \nEach library is released under its respective licence:\n\n  - [Mono](https://github.com/mono/mono) [(MIT License)](https://github.com/mono/mono/blob/master/LICENSE)\n  - [Funq IOC](http://funq.codeplex.com) [(MS-PL License)](https://opensource.org/licenses/MS-PL)\n  - [Fluent Validation](https://github.com/JeremySkinner/FluentValidation) [(Apache License 2.0)](https://github.com/JeremySkinner/FluentValidation/blob/master/License.txt)\n  - [Mini Profiler](https://github.com/MiniProfiler/dotnet) [(MIT License)](https://github.com/MiniProfiler/dotnet/blob/master/LICENSE.txt)\n  - [Dapper](https://github.com/StackExchange/Dapper) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)\n  - [TweetStation's OAuth library](https://github.com/migueldeicaza/TweetStation) [(MIT License)](https://github.com/migueldeicaza/TweetStation/blob/master/LICENSE)\n  - [MarkdownSharp](https://code.google.com/archive/p/markdownsharp) [(MIT License)](https://opensource.org/licenses/mit-license.php)\n  - [MarkdownDeep](https://github.com/toptensoftware/markdowndeep) [(Apache License 2.0)](http://www.toptensoftware.com/markdowndeep/license)\n  - [HtmlCompressor](https://code.google.com/archive/p/htmlcompressor) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)\n  - [JSMin](https://github.com/douglascrockford/JSMin/blob/master/jsmin.c) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)\n  - [RecyclableMemoryStream](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream) [(MIT License)](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream/blob/master/LICENSE)\n  - [ASP.NET MVC](https://github.com/aspnet/Mvc) [(Apache License 2.0)](https://github.com/aspnet/Mvc/blob/release/2.2/LICENSE.txt)\n  - [CoreFX](https://github.com/dotnet/corefx) [(MIT License)](https://github.com/dotnet/corefx/blob/master/LICENSE.TXT)\n\n## Find out More\n\nFollow [@ServiceStack](https://twitter.com/ServiceStack) and \n[+ServiceStack](https://plus.google.com/u/0/communities/112445368900682590445) for project updates.\n\n-----\n\n## Core Team\n\n - [mythz](https://github.com/mythz) (Demis Bellot)\n - [layoric](https://github.com/layoric) (Darren Reid) / [@layoric](https://twitter.com/layoric)\n - [xplicit](https://github.com/xplicit) (Sergey Zhukov) / [@quantumcalc](https://twitter.com/quantumcalc)\n - [desunit](https://github.com/desunit) (Sergey Bogdanov) / [@desunit](https://twitter.com/desunit)\n - [arxisos](https://github.com/arxisos) (Steffen Müller) / [@arxisos](https://twitter.com/arxisos)\n\n## Contributors \n\nA big thanks to GitHub and all of ServiceStack's contributors:\n\n - [bman654](https://github.com/bman654) (Brandon Wallace)\n - [iristyle](https://github.com/iristyle) (Ethan Brown)\n - [superlogical](https://github.com/superlogical) (Jake Scott)\n - [itamar82](https://github.com/itamar82)\n - [chadwackerman](https://github.com/chadwackerman)\n - [derfsplat](https://github.com/derfsplat)\n - [johnacarruthers](https://github.com/johnacarruthers) (John Carruthers)\n - [mvitorino](https://github.com/mvitorino) (Miguel Vitorino)\n - [bsiegel](https://github.com/bsiegel) (Brandon Siegel)\n - [mdavid](https://github.com/mdavid) (M. David Peterson)\n - [lhaussknecht](https://github.com/lhaussknecht) (Louis Haussknecht)\n - [grendello](https://github.com/grendello) (Marek Habersack)\n - [SteveDunn](https://github.com/SteveDunn) (Steve Dunn)\n - [kcherenkov](https://github.com/kcherenkov) (Konstantin Cherenkov)\n - [timryan](https://github.com/timryan) (Tim Ryan)\n - [letssellsomebananas](https://github.com/letssellsomebananas) (Tymek Majewski)\n - [danbarua](https://github.com/danbarua) (Dan Barua)\n - [JonCanning](https://github.com/JonCanning) (Jon Canning)\n - [paegun](https://github.com/paegun) (James Gorlick)\n - [pvasek](https://github.com/pvasek) (pvasek)\n - [derfsplat](https://github.com/derfsplat) (derfsplat)\n - [justinrolston](https://github.com/justinrolston) (Justin Rolston)\n - [danmiser](https://github.com/danmiser) (Dan Miser)\n - [danatkinson](https://github.com/danatkinson) (Dan Atkinson)\n - [brainless83](https://github.com/brainless83) (Thomas Grassauer)\n - [angelcolmenares](https://github.com/angelcolmenares) (angel colmenares)\n - [dbeattie71](https://github.com/dbeattie71) (Derek Beattie)\n - [danielwertheim](https://github.com/danielwertheim) (Daniel Wertheim)\n - [greghroberts](https://github.com/greghroberts) (Gregh Roberts)\n - [int03](https://github.com/int03) (Selim Selçuk)\n - [andidog](https://github.com/AndiDog) (AndiDog)\n - [chuckb](https://github.com/chuckb) (chuckb)\n - [niemyjski](https://github.com/niemyjski) (Blake Niemyjski)\n - [mj1856](https://github.com/mj1856) (Matt Johnson)\n - [matthieugd](https://github.com/matthieugd) (Matthieu)\n - [tomaszkubacki](https://github.com/tomaszkubacki) (Tomasz Kubacki)\n - [e11137](https://github.com/e11137) (Rogelio Canedo)\n - [davidroth](https://github.com/davidroth) (David Roth)\n - [meebey](https://github.com/meebey) (Mirco Bauer)\n - [codedemonuk](https://github.com/codedemonuk) (Pervez Choudhury)\n - [jrosskopf](https://github.com/jrosskopf) (Joachim Rosskopf)\n - [friism](https://github.com/friism) (Michael Friis)\n - [mp3125](https://github.com/mp3125)\n - [aurimas86](https://github.com/aurimas86)\n - [parnham](https://github.com/parnham) (Dan Parnham)\n - [yeurch](https://github.com/yeurch) (Richard Fawcett)\n - [damianh](https://github.com/damianh) (Damian Hickey)\n - [freeman](https://github.com/freeman) (Michel Rasschaert)\n - [kvervo](https://github.com/kvervo) (Kvervo)\n - [pauldbau](https://github.com/pauldbau) (Paul Du Bois)\n - [justinpihony](https://github.com/JustinPihony) (Justin Pihony) \n - [bokmadsen](https://github.com/bokmadsen) (Bo Kingo Damgaard)\n - [dragan](https://github.com/dragan) (Dale Ragan)\n - [sneal](https://github.com/sneal) (Shawn Neal)\n - [johnsheehan](https://github.com/johnsheehan) (John Sheehan)\n - [jschlicht](https://github.com/jschlicht) (Jared Schlicht)\n - [kumarnitin](https://github.com/kumarnitin) (Nitin Kumar)\n - [davidchristiansen](https://github.com/davidchristiansen) (David Christiansen)  \n - [paulecoyote](https://github.com/paulecoyote) (Paul Evans)\n - [kongo2002](https://github.com/kongo2002) (Gregor Uhlenheuer)\n - [brannonking](https://github.com/brannonking) (Brannon King)\n - [alexandrerocco](https://github.com/alexandrerocco) (Alexandre Rocco)\n - [cbarbara](https://github.com/cbarbara)\n - [assaframan](https://github.com/assaframan) (Assaf Raman)\n - [csakshaug](https://github.com/csakshaug) (Christian Sakshaug)\n - [johnman](https://github.com/johnman)\n - [jarroda](https://github.com/jarroda)\n - [ssboisen](https://github.com/ssboisen) (Simon Skov Boisen)\n - [paulduran](https://github.com/paulduran) (Paul Duran)\n - [pruiz](https://github.com/pruiz) (Pablo Ruiz García)\n - [fantasticjamieburns](https://github.com/fantasticjamieburns)\n - [pseabury](https://github.com/pseabury)\n - [kevingessner](https://github.com/kevingessner) (Kevin Gessner)\n - [iskomorokh](https://github.com/iskomorokh) (Igor Skomorokh)\n - [royjacobs](https://github.com/royjacobs) (Roy Jacobs)\n - [robertmircea](https://github.com/robertmircea) (Robert Mircea)\n - [markswiatek](https://github.com/markswiatek) (Mark Swiatek)\n - [flq](https://github.com/flq) (Frank Quednau)\n - [ashd](https://github.com/ashd) (Ash D)\n - [thanhhh](https://github.com/thanhhh)\n - [algra](https://github.com/algra) (Alexey Gravanov)\n - [jimschubert](https://github.com/jimschubert) (Jim Schubert)\n - [gkathire](https://github.com/gkathire)\n - [mikaelwaltersson](https://github.com/mikaelwaltersson) (Mikael Waltersson)\n - [asunar](https://github.com/asunar) (Alper)\n - [chucksavage](https://github.com/chucksavage) (Chuck Savage)\n - [sashagit](https://github.com/sashagit) (Sasha)\n - [froyke](https://github.com/froyke) (Froyke)\n - [dbhobbs](https://github.com/dbhobbs) (Daniel Hobbs)\n - [bculberson](https://github.com/bculberson) (Brad Culberson)\n - [awr](https://github.com/awr) (Andrew)\n - [pingvinen](https://github.com/pingvinen) (Patrick)\n - [citndev](https://github.com/CITnDev) (Sebastien Curutchet)\n - [cyberprune](https://github.com/cyberprune)\n - [jorbor](https://github.com/jorbor) (Jordan Hayashi)\n - [bojanv55](https://github.com/bojanv55)\n - [i-e-b](https://github.com/i-e-b) (Iain Ballard)\n - [pietervp](https://github.com/pietervp) (Pieter Van Parys)\n - [franklinwise](https://github.com/franklinwise)\n - [ckasabula](https://github.com/ckasabula) (Chuck Kasabula)\n - [dortzur](https://github.com/dortzur) (Dor Tzur)\n - [allenarthurgay](https://github.com/allenarthurgay) (Allen Gay)\n - [viceberg](https://github.com/vIceBerg) \n - [vansha](https://github.com/vansha) (Ivan Korneliuk)\n - [aaronlerch](https://github.com/aaronlerch) (Aaron Lerch)\n - [glikoz](https://github.com/glikoz)\n - [danielcrenna](https://github.com/danielcrenna) (Daniel Crenna)\n - [stevegraygh](https://github.com/stevegraygh) (Steve Graygh)\n - [jrmitch120](https://github.com/jrmitch120) (Jeff Mitchell)\n - [manuelnelson](https://github.com/manuelnelson) (Manuel Nelson)\n - [babcca](https://github.com/babcca) (Petr Babicka)\n - [jgeurts](https://github.com/jgeurts) (Jim Geurts)\n - [driis](https://github.com/driis) (Dennis Riis)\n - [gshackles](https://github.com/gshackles) (Greg Shackles)\n - [jsonmez](https://github.com/jsonmez) (John Sonmez)\n - [dchurchland](https://github.com/dchurchland) (David Churchland)\n - [softwx](https://github.com/softwx) (Steve Hatchett)\n - [ggeurts](https://github.com/ggeurts) (Gerke Geurts)\n - [andrewrissing](https://github.com/AndrewRissing) (Andrew Rissing)\n - [jjavery](https://github.com/jjavery) (James Javery)\n - [suremaker](https://github.com/suremaker) (Wojtek)\n - [cheesebaron](https://github.com/cheesebaron) (Tomasz Cielecki)\n - [mikkelfish](https://github.com/mikkelfish) (Mikkel Fishman)\n - [johngibb](https://github.com/johngibb) (John Gibb)\n - [stabbylambda](https://github.com/stabbylambda) (David Stone)\n - [mikepugh](https://github.com/mikepugh) (Mike Pugh)\n - [permalmberg](https://github.com/permalmberg) (Per Malmberg)\n - [adamralph](https://github.com/adamralph) (Adam Ralph)\n - [shamsulamry](https://github.com/shamsulamry) (Shamsul Amry)\n - [peterlazzarino](https://github.com/peterlazzarino) (Peter Lazzarino)\n - [kevin-montrose](https://github.com/kevin-montrose) (Kevin Montrose)\n - [msarchet](https://github.com/msarchet) (Michael Sarchet)\n - [jeffgabhart](https://github.com/jeffgabhart) (Jeff Gabhart)\n - [pkudinov](https://github.com/pkudinov) (Pavel Kudinov)\n - [permalmberg](https://github.com/permalmberg) (Per Malmberg)\n - [namman](https://github.com/namman) (Nick Miller)\n - [leon-andria](https://github.com/leon-andria) (Leon Andria)\n - [kkolstad](https://github.com/kkolstad) (Kenneth Kolstad)\n - [electricshaman](https://github.com/electricshaman) (Jeff Smith)\n - [ecgan](https://github.com/ecgan) (Gan Eng Chin)\n - [its-tyson](https://github.com/its-tyson) (Tyson Stolarski)\n - [tischlda](https://github.com/tischlda) (David Tischler)\n - [connectassist](https://github.com/connectassist) (Carl Healy)\n - [starteleport](https://github.com/starteleport)\n - [jfoshee](https://github.com/jfoshee) (Jacob Foshee)\n - [nardin](https://github.com/nardin) (Mamaev Michail)\n - [cliffstill](https://github.com/cliffstill)\n - [somya](https://github.com/somya) (Somya Jain)\n - [thinkbeforecoding](https://github.com/thinkbeforecoding) (Jérémie Chassaing)\n - [paksys](https://github.com/paksys) (Khalil Ahmad)\n - [mcguinness](https://github.com/mcguinness) (Karl McGuinness)\n - [jpasichnyk](https://github.com/jpasichnyk) (Jesse Pasichnyk)\n - [waynebrantley](https://github.com/waynebrantley) (Wayne Brantley)\n - [dcartoon](https://github.com/dcartoon) (Dan Cartoon)\n - [alexvodovoz](https://github.com/alexvodovoz) (Alex Vodovoz)\n - [jluchiji](https://github.com/jluchiji) (Denis Luchkin-Zhou)\n - [grexican](https://github.com/grexican)\n - [akoslukacs](https://github.com/akoslukacs) (Ákos Lukács)\n - [medianick](https://github.com/medianick) (Nick Jones)\n - [arhoads76](https://github.com/arhoads76)\n - [dylanvdmerwe](https://github.com/dylanvdmerwe) (Dylan v.d Merwe)\n - [mattiasw2](https://github.com/mattiasw2) (Mattias)\n - [paultyng](https://github.com/paultyng) (Paul Tyng)\n - [h2oman](https://github.com/h2oman) (Jason Waterman)\n - [anewton](https://github.com/anewton) (Allen Newton)\n - [sami1971](https://github.com/sami1971)\n - [russellchadwick](https://github.com/russellchadwick) (Russell Chadwick)\n - [cyberzed](https://github.com/cyberzed) (Stefan Daugaard Poulsen)\n - [filipw](https://github.com/filipw) (Filip Wojcieszyn)\n - [ghuntley](https://github.com/ghuntley) (Geoffrey Huntley)\n - [baramuse](https://github.com/baramuse)\n - [pdegenhardt](https://github.com/pdegenhardt) (Phil Degenhardt)\n - [captncraig](https://github.com/captncraig) (Craig Peterson)\n - [abattery](https://github.com/abattery) (Jae sung Chung)\n - [biliktamas79](https://github.com/biliktamas79)\n - [garuma](https://github.com/garuma) (Jérémie Laval)\n - [dsimunic](https://github.com/dsimunic)\n - [adamfowleruk](https://github.com/adamfowleruk) (Adam Fowler)\n - [bfriesen](https://github.com/bfriesen) (Brian Friesen)\n - [roryf](https://github.com/roryf) (Rory Fitzpatrick)\n - [stefandevo](https://github.com/stefandevo)\n - [gdassac](https://github.com/gdassac)\n - [metal10k](https://github.com/metal10k)\n - [cmelgarejo](https://github.com/cmelgarejo)\n - [skaman](https://github.com/skaman)\n - [rossipedia](https://github.com/rossipedia) (Bryan J. Ross)\n - [wimatihomer](https://github.com/wimatihomer) (Wim Pool)\n - [sword-breaker](https://github.com/sword-breaker)\n - [adebisi-fa](https://github.com/adebisi-fa) (Adebisi Foluso A.)\n - [mbischoff](https://github.com/mbischoff) (M. Bischoff)\n - [ivanfioravanti](https://github.com/ivanfioravanti) (Ivan Fioravanti)\n - [inhibition](https://github.com/inhibition) (Keith Hassen)\n - [joshearl](https://github.com/joshearl) (Josh Earl)\n - [friism](https://github.com/friism) (Michael Friis)\n - [corkupine](https://github.com/corkupine)\n - [bchavez](https://github.com/bchavez) (Brian Chavez)\n - [nhhagen](https://github.com/nhhagen) (Niels Henrik Hagen)\n - [daggmano](https://github.com/daggmano) (Darren Oster)\n - [chappoo](https://github.com/chappoo) (Steve Chapman)\n - [julrichkieffer](https://github.com/julrichkieffer) (Julrich Kieffer)\n - [adamclarsen](https://github.com/adamclarsen) (Adam Larsen)\n - [joero74](https://github.com/joero74) (Joerg Rosenkranz)\n - [ddotlic](https://github.com/ddotlic) (Drazen Dotlic)\n - [chrismcv](https://github.com/chrismcv) (Chris McVittie)\n - [marcioalthmann](https://github.com/marcioalthmann) (Márcio Fábio Althmann)\n - [mmertsock](https://github.com/mmertsock) (Mike Mertsock)\n - [johnkamau](https://github.com/johnkamau) (John Kamau)\n - [uhaciogullari](https://github.com/uhaciogullari) (Ufuk Hacıoğulları)\n - [davybrion](https://github.com/davybrion) (Davy Brion)\n - [aleshi](https://github.com/aleshi) (Alexander Shiryaev)\n - [alexandryz](https://github.com/alexandryz) (Alexandr Zaozerskiy)\n - [mistobaan](https://github.com/mistobaan) (Fabrizio Milo)\n - [niemyjski](https://github.com/niemyjski) (Blake Niemyjski)\n - [alexandernyquist](https://github.com/alexandernyquist) (Alexander Nyquist)\n - [mcduck76](https://github.com/mcduck76)\n - [kojoru](https://github.com/kojoru)\n - [jeremy-bridges](https://github.com/jeremy-bridges) (Jeremy Bridges)\n - [andreabalducci](https://github.com/andreabalducci) (Andrea Balducci)\n - [robertthegrey](https://github.com/RobertTheGrey) (Robert Greyling)\n - [robertbeal](https://github.com/robertbeal) (Robert Beal)\n - [improvedk](https://github.com/improvedk) (Mark Rasmussen)\n - [foresterh](https://github.com/foresterh) (Jamie Houston)\n - [peterkahl](https://github.com/peterkahl) (Peter Kahl)\n - [helgel](https://github.com/helgel)\n - [anthonycarl](https://github.com/anthonycarl) (Anthony Carl)\n - [mrjul](https://github.com/mrjul) (Julien Lebosquain)\n - [pwhe23](https://github.com/pwhe23) (Paul Wheeler)\n - [aleksd](https://github.com/aleksd)\n - [miketrebilcock](https://github.com/miketrebilcock) (Mike Trebilcock)\n - [markwoodhall](https://github.com/markwoodhall) (Mark Woodhall)\n - [theonlylawislove](https://github.com/theonlylawislove) (Paul Knopf)\n - [callumvass](https://github.com/callumvass) (Callum Vass)\n - [bpruitt-goddard](https://github.com/bpruitt-goddard)\n - [gregpakes](https://github.com/gregpakes) (Greg Pakes)\n - [caspiancanuck](https://github.com/caspiancanuck) (Caspian Canuck)\n - [merwer](https://github.com/merwer)\n - [pavelsavara](https://github.com/pavelsavara) (Pavel Savara)\n - [markwalls](https://github.com/markwalls) (Mark Walls)\n - [prasannavl](https://github.com/prasannavl) (Prasanna Loganathar)\n - [wilfrem](https://github.com/wilfrem)\n - [emiba](https://github.com/emiba)\n - [lucky-ly](https://github.com/lucky-ly) (Dmitry Svechnikov)\n - [hhandoko](https://github.com/hhandoko) (Herdy Handoko)\n - [datawingsoftware](https://github.com/datawingsoftware)\n - [tal952](https://github.com/tal952)\n - [bretternst](https://github.com/bretternst)\n - [kevinhoward](https://github.com/kevinhoward) (Kevin Howard)\n - [mattbutton](https://github.com/mattbutton) (Matt Button)\n - [torbenrahbekkoch](https://github.com/torbenrahbekkoch) (Torben Rahbek Koch)\n - [pilotmartin](https://github.com/pilotmartin) (Pilot Martin)\n - [catlion](https://github.com/catlion)\n - [tstade](https://github.com/tstade) (Toft Stade)\n - [niltz](https://github.com/niltz) (Jeff Sawatzky)\n - [nhalm](https://github.com/nhalm)\n - [fhurta](https://github.com/fhurta) (Filip Hurta)\n - [discobanan](https://github.com/discobanan)\n - [x-cray](https://github.com/x-cray)\n - [jeremistadler](https://github.com/jeremistadler) (Jeremi Stadler)\n - [bangbite](https://github.com/bangbite)\n - [felipesabino](https://github.com/felipesabino) (Felipe Sabino)\n - [xelom](https://github.com/xelom) (Arıl Bozoluk)\n - [shiweichuan](https://github.com/shiweichuan) (Weichuan Shi)\n - [kojoru](https://github.com/kojoru) (Konstantin Yakushev)\n - [eddiegroves](https://github.com/eddiegroves) (Eddie Groves)\n - [fetters5](https://github.com/fetters5)\n - [rcollette](https://github.com/rcollette) (Richard Collette)\n - [urihendler](https://github.com/urihendler) (Uri Hendler)\n - [laurencee](https://github.com/laurencee) (Laurence Evans)\n - [m-andrew-albright](https://github.com/m-andrew-albright) (Andrew Albright)\n - [lee337](https://github.com/lee337) (Lee Venkatsamy)\n - [kaza](https://github.com/kaza)\n - [mishfit](https://github.com/mishfit)\n - [rfvgyhn](https://github.com/rfvgyhn) (Chris)\n - [caioproiete](https://github.com/caioproiete) (Caio Proiete)\n - [sjuxax](https://github.com/sjuxax) (Jeff Cook)\n - [madaleno](https://github.com/madaleno) (Luis Madaleno)\n - [yavosh](https://github.com/yavosh) (Yavor Shahpasov)\n - [fvoncina](https://github.com/fvoncina) (Facundo Voncina)\n - [devrios](https://github.com/devrios) (Dev Rios)\n - [bfkelsey](https://github.com/bfkelsey) (Ben Kelsey)\n - [maksimenko](https://github.com/maksimenko)\n - [dixon](https://github.com/dixon) (Jarrod Dixon)\n - [kal](https://github.com/kal) (Kal Ahmed)\n - [mhanney](https://github.com/mhanney) (Michael Hanney)\n - [bcms](https://github.com/bcms)\n - [mgravell](https://github.com/mgravell) (Marc Gravell)\n - [lafama](https://github.com/lafama) (Denis Ndwiga)\n - [jamesgroat](https://github.com/jamesgroat) (James Groat)\n - [jamesearl](https://github.com/jamesearl) (James Cunningham)\n - [remkoboschker](https://github.com/remkoboschker) (Remko Boschker)\n - [shelakel](https://github.com/shelakel)\n - [schmidt4brains](https://github.com/schmidt4brains) (Doug Schmidt)\n - [joplaal](https://github.com/joplaal)\n - [aifdsc](https://github.com/aifdsc) (Stephan Desmoulin)\n - [nicklarsen](https://github.com/nicklarsen) (NickLarsen)\n - [connectassist](https://github.com/connectassist) (Carl Healy)\n - [et1975](https://github.com/et1975) (Eugene Tolmachev)\n - [barambani](https://github.com/barambani)\n - [nhalm](https://github.com/et1975)\n\n\n***\n\n## Similar open source projects\n\nSimilar Open source .NET projects for developing or accessing web services include:\n\n * [Nancy Fx](http://nancyfx.org) - A Sinatra-inspired lightweight Web Framework for .NET:\n * [Fubu MVC](https://fubumvc.github.io/) - A \"Front Controller\" pattern-style MVC framework designed for use in web applications built on ASP.NET:\n * [Rest Sharp](http://restsharp.org) - An open source REST client for .NET\n"
rahulsom/swaggydoc: >
  [![Build
  Status](https://travis-ci.org/rahulsom/swaggydoc.svg?branch=develop)](https://travis-ci.org/rahulsom/swaggydoc)


  ![Unmaintained](https://img.shields.io/badge/status-unmaintained-yellow.svg)
  This repository is not actively maintained. If you are interested in taking it
  over, please let me know.


  ## Documentation


  User Documentation is at https://rahulsom.github.io/swaggydoc


  ## Contributing


  Before you can run any other commands, you will have to obtain the swagger
  assets.


  ```bash

  ./bowerize.sh

  ```


  Running grails3 plugin in dev mode

  ```bash

  ./gradlew swaggydoc-grails3:bootRun

  ```


  Running grails2 plugin in dev mode

  ```bash

  ./gradlew grails2:run

  ```
glennjones/hapi-swagger: >
  # hapi-swagger


  This is a [OpenAPI (aka Swagger)](https://openapis.org/) plug-in for
  [HAPI](http://hapijs.com/) When installed it will self document the API
  interface

  in a project.


  [![build
  status](https://img.shields.io/travis/glennjones/hapi-swagger.svg?style=flat-square)](http://travis-ci.org/glennjones/hapi-swagger)

  [![Coverage
  Status](https://img.shields.io/coveralls/glennjones/hapi-swagger/dev.svg?style=flat-square)](https://coveralls.io/r/glennjones/hapi-swagger)

  [![npm
  downloads](https://img.shields.io/npm/dm/hapi-swagger.svg?style=flat-square)](https://www.npmjs.com/package/hapi-swagger)

  [![MIT
  license](http://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](https://raw.github.com/glennjones/microformat-shic/master/license.txt)


  [Release Notes for
  v9.0.x](https://github.com/glennjones/hapi-swagger/issues/487) which only
  supports hapi v17 and above.

  Note: For hapi versions below v17, you must use versions
  [v7.x.x](https://github.com/glennjones/hapi-swagger/tree/v7.x) of this module.


  # Install


  You can add the module to your HAPI using npm:

      $ npm install hapi-swagger --save

  If you want to view the documentation from your API you will also need to
  install the `inert` and `vision` plugs-ins which support templates and static

  content serving.

      $ npm install inert --save
      $ npm install vision --save

  # Documentation


  * [Options Reference](optionsreference.md)

  * [Usage Guide](usageguide.md)



  # Quick start


  In your HAPI apps main JavaScript file add the following code to created a
  HAPI `server` object. You will also add the routes for you API as describe on
  hapijs.com site.



  ```Javascript

  const Hapi = require('hapi');

  const Inert = require('inert');

  const Vision = require('vision');

  const HapiSwagger = require('hapi-swagger');

  const Pack = require('./package');


  (async () => {
      const server = await new Hapi.Server({
          host: 'localhost',
          port: 3000,
      });
      
      const swaggerOptions = {
          info: {
                  title: 'Test API Documentation',
                  version: Pack.version,
              },
          };
      
      await server.register([
          Inert,
          Vision,
          {
              plugin: HapiSwagger,
              options: swaggerOptions
          }
      ]);
      
      try {
          await server.start();
          console.log('Server running at:', server.info.uri);
      } catch(err) {
          console.log(err);
      }
      
      server.route(Routes);
  })();

  ```


  # Tagging your API routes

  As a project may be a mixture of web pages and API endpoints you need to tag
  the routes you wish Swagger to

  document. Simply add the `tags: ['api']` property to the route object for any
  endpoint you want documenting.


  You can even specify more tags and then later generate tag-specific
  documentation. If you specify

  `tags: ['api', 'foo']`, you can later use `/documentation?tags=foo` to load
  the documentation on the

  HTML page (see next section).


  ```Javascript

  {
      method: 'GET',
      path: '/todo/{id}/',
      options: {
          handler: handlers.getToDo,
          description: 'Get todo',
          notes: 'Returns a todo item by the id passed in the path',
          tags: ['api'], // ADD THIS TAG
          validate: {
              params: {
                  id : Joi.number()
                          .required()
                          .description('the id for the todo item'),
              }
          }
      },
  }

  ```


  Once you have tagged your routes start the application. __The plugin adds a
  page into your site with the route `/documentation`__,

  so the the full URL for the above options would be
  `http://localhost:3000/documentation`.




  # Contributing


  Read the [contributing
  guidelines](https://github.com/glennjones/hapi-swagger/blob/master/.github/CONTRIBUTING.md)
  for details.





  # Thanks

  I would like to thank all that have contributed to the project over the last
  couple of years. This is a hard project to maintain, getting HAPI to work with
  Swagger is like putting a round plug in a square hole. Without the help of
  others it would not be possible.
stemey/gform-admin: >+
  #admin-gform


  admin-gform is a generic client application to administrate data and invoke
  services.


  [live demo](http://www.toobop.net/gform-admin)


  ### Data administration


  admin-gform generates master detail views to browse, create, update and delete
  entities via restful services.

  The ui consists of a table for browsing resource documents and a form to edit
  a single resource. Both table and

  form are created according to the resource's schema. This schema must be
  supplied in either json schema or gform schema format.




  ### Service invokation


  admin-gform is a [swagger](http://swagger.wordnik.com) client. It actually
  exceeds the default swagger ui's features by providing a complete form for

  posting and putting new or changed resources.


  Limitations:


  * does not support file upload



  ## Installation


  to install and run the build app use:

      git clone https://github.com/stemey/gform-admin
      bower install
      grunt build
      grunt server dist
      open browser at localhost:3333

  to run the dev app use:

      grunt server
      open browser at localhost:3333


  ## Configuration


  The configuration contains the default swagger and gform services to connect
  to. It is a json file located at /src/app/services.json:


      {
          "services": [
              {
                  "type": "app/service/BaucisCrudService",
                  "name": "blog (crud)",
                  "url": "http://localhost:3333/api/gform"

              },
              {
                  "type": "app/service/SwaggerMetaService",
                  "name": "swagger example",
                  "url": "http://localhost/source/gform-admin-new/src/app/wordnik/api"

              }
       ]
      }


  A service has a name displayed in the menu, a url of the service's api and a
  type. The type defines how to interpret the api - as swagger or gform api.


  ## Gform-Rest-Api


  The schemata to create the generic front end is provided through rest
  services. It works similar to the swagger api, The Api consists of two calls:


  ### 1. Listing of available resources


  The main service call returns general meta data of all resources. A resource
  meta data consists of a name and urls to the schema, the resource and
  optionally the collection.

  These urls must be absolute or relative to the provided basePath or the url of
  the listing itself.


      {
        "basePath": "http://localhost:3333/api/",
        "resources": [
          {
            "name": "vegetable"
            "schemaUrl": "./gform/vegetables",
            "resourceUrl": "./vegetables/",
            "collectionUrl": "./vegetables/",
          }
        ]
      }

  ### 2. The schemata


  All referenced schema may reference external schemas relative to the basePath
  as well.



  ## Libraries and examples


  ### Live example


  [gform-admin](http://www.toobop.net/gform-admin) provides access to swagger
  example application and crud operations on BlogPost and User data in
  lcoalstorage.


  ### Mongoose


  A complete implementation of the gform rest api for
  [mongoose](http://www.github.com/Learnboost/mongoose) is available 
  [here](http://www.github.com/stemey/baucis-gform). An example application

  is available
  [here](http://www.github.com/stemey/mongoose-administration-example)



mac-/ratify: "ratify\n======\n\nA Hapi plugin for validating the schema of path, query, request body, and response body params using [JSON-schema](http://json-schema.org/), while providing documenation for your end points via [Swagger](https://helloreverb.com/developers/swagger)\n\n[![Build Status](https://secure.travis-ci.org/mac-/ratify.png)](http://travis-ci.org/mac-/ratify)\n[![Coverage Status](https://coveralls.io/repos/mac-/ratify/badge.png)](https://coveralls.io/r/mac-/ratify)\n[![Code Climate](https://codeclimate.com/github/mac-/ratify.png)](https://codeclimate.com/github/mac-/ratify)\n[![NPM version](https://badge.fury.io/js/ratify.png)](http://badge.fury.io/js/ratify)\n[![Dependency Status](https://david-dm.org/mac-/ratify.png)](https://david-dm.org/mac-/ratify)\n\n[![NPM](https://nodei.co/npm/ratify.png?downloads=true&stars=true)](https://nodei.co/npm/ratify/)\n\n## Contributing\n\nThis module makes use of a `Makefile` for building/testing purposes. After obtaining a copy of the repo, run the following commands to make sure everything is in working condition before you start your work:\n\n\tmake install\n\tmake test\n\nBefore committing a change to your fork/branch, run the following commands to make sure nothing is broken:\n\n\tmake test\n\tmake test-cov\n\nDon't forget to bump the version in the `package.json` using the [semver](http://semver.org/spec/v2.0.0.html) spec as a guide for which part to bump. Submit a pull request when your work is complete.\n\n***Notes:***\n* Please do your best to ensure the code coverage does not drop. If new unit tests are required to maintain the same level of coverage, please include those in your pull request.\n* Please follow the same coding/formatting practices that have been established in the module.\n\n## Installation\n\n\tnpm install ratify\n\n## Usage\n\nTo install this plugin on your Hapi server, do something similar to this:\n\n\tvar Hapi = require('hapi');\n\tvar server = new Hapi.Server();\n\n\tvar ratifyOptions = {};\n\n\tserver.register({ register: require('ratify'), options: ratifyOptions }, function(err) {\n\t\tif (err) {\n\t\t\tconsole.log('error', 'Failed loading plugin: ratify');\n\t\t}\n\t});\n\n## Plugin Options\n\n### `auth`\n\nUsed to add authentication to the swagger routes that get created by the plugin. Valid values are described [here](https://github.com/spumko/hapi/blob/master/docs/Reference.md#route-options) under the `auth` property.\n\nDefaults to `false`\n\n### `baseUrl`\n\nThe protocol, hostname, and port where the application is running.\n\nDefaults to `'http://localhost'`\n\n### `startingPath`\n\nThe path at which all of the swagger routes begin at. This is the endpoint you would pass to an instance of the swagger UI.\n\nDefaults to `'/api-docs'`\n\n### `apiVersion`\n\nThe version of your API.\n\nDefaults to `''`\n\n### `responseContentTypes`\n\nA collection of valid response types returned by your services.\n\nDefaults to `['application/json']`\n\n### `swaggerHooks`\n\nAn object in which the property names represent swagger generated elements and the values must be functions to be invoked to customize how those elements are processed.\n\nPossible values:\n* `params`: `function(params, route, type)`\n* `operation`: `function(operation, route, resourceType, path)`\n* `routeNameGroup`: `function(route)`\n\n### `errorReporters`\n\nAn object in which the property keys represent elements that can be validated (`\"headers\"`, `\"query\"`, `\"path\"`, `\"payload\"`, `\"response\"`) and the values are initialized [ZSchemaErrors instances](https://github.com/dschenkelman/z-schema-errors) to be used to report those errors.\n\n### Parameter Validation\n\nOnce your server is set to use ratify, you can specify route-specific validations in each route config like so:\n\n\tvar route = {\n\t\tmethod: 'GET',\n\t\tpath: '/foo/{bar}',\n\t\tconfig: {\n\t\t\thandler: function(request, reply) {\n\n\t\t\t},\n\t\t\tplugins: {\n\t\t\t\tratify: {\n\t\t\t\t\tpath: {\n\t\t\t\t\t\t// path parameters schema\n\t\t\t\t\t},\n\t\t\t\t\tquery: {\n\t\t\t\t\t\t// query parameters schema\n\t\t\t\t\t},\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t// header parameters schema\n\t\t\t\t\t},\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\t// request payload schema\n\t\t\t\t\t},\n\t\t\t\t\tresponse: {\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\t// response payload schema\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsample: 100, // percentage of responses to test against the schema\n\t\t\t\t\t\tfailAction: 'log' // action to take when schena validation fails. Valid options are; 'log' and 'error'\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\tserver.route(route);\n\nAll schemas should follow the [JSON schema specification](http://json-schema.org/).\n\n***Notes:***\nIn addition to the JSON schema defined types, ratify allows you to specify \"file\" as a payload type. If this is specified, no validation against JSON schema is performed, but swagger documentation will still be provided.\n\n#### Type Conversion\n\nIn the process of validating the properties based on the schema, ratify will attempt to convert path, header, and query params to the type defined in the schema. For example, if you have a query paramter called `limit` and it's type is `number`, since all query parameters are parsed as strings by Hapi, ratify will convert the string to a number.\n\nRatify can also specifically convert query parameters that are intended to be arrays. For example, both of the following query strings will result in a property called `types` having an array value:\n\n* `?types=first&types=second&types=third`\n* `?types[0]=first&types[2]=third&types[1]=second`\n\nResult:\n\n```\n{\n\ttypes: ['first', 'second', 'third']\n}\n```\n\n### Swagger Documentation\n\nRatify automatically generates routes that produce JSON in the format of the [Swagger API Specification](https://github.com/wordnik/swagger-core). In order to ge tthe most of the documentation, it's best to ensure there are descriptions to all your parameters as allowed by the JSON schema spec.\n\n## Version Compatibility\n\n### Currently compatible with: Hapi 10.x.x (Node v4)\n\n* 0.2.x - Hapi 1.x.x\n* 0.3.x - Don't use!\n* 0.4.x - Hapi 4.x.x\n* 0.6.x - Hapi 6.x.x\n* 0.7.x - Hapi 7.x.x\n* 0.8.x - Hapi 8.x.x\n* 0.10.x - Hapi 9.x.x\n* 1.x.x - Hapi 10.x.x (Node v4)\n* 2.x.x - Hapi 11.x.x\n* 3.x.x - Hapi 16.x.x\n\n"
marcgibbons/django-rest-swagger: >
  # Django REST Swagger


  [![build-status-badge]][build-status]

  [![codecov](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/marcgibbons/django-rest-swagger)

  [![pypi-version]][pypi]

  [![Dependency
  Status](https://www.versioneye.com/user/projects/579cb582aa78d50051183c0e/badge.svg?style=flat-square)](https://www.versioneye.com/user/projects/579cb582aa78d50051183c0e)



  [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)



  #### An API documentation generator for Swagger UI and Django REST Framework


  Full documentation: http://marcgibbons.github.io/django-rest-swagger/



  # Help Wanted!


  As you may have noticed, I have not been keeping up with pull requests and
  issues and am looking for help maintaining this project! Between working
  fulltime, having 2 kids (3 and under), teaching Python and running for
  political office, I can't possibly keep up. So, if you like this project and
  want to help out, I'm specifically looking for:

    * Issue triage (separating how-to-use from bugs and feature requests)
    * Pull request review & triage
    
  Please contact me on Twitter @marcgibb or at marcgbbns at gmail dot com if you
  are interested!


  ## Installation


  1. `pip install django-rest-swagger`


  2. Add `rest_framework_swagger` to your `INSTALLED_APPS` setting:

      ```python
          INSTALLED_APPS = (
              ...
              'rest_framework_swagger',
          )
      ```

  ## Rendering Swagger Specification and Documentation


  This package ships with two renderer classes:


  1. `OpenAPIRenderer` generates the OpenAPI (fka Swagger) JSON schema
  specification. This renderer will be presented if:
    -  `Content-Type: application/openapi+json` is specified in the headers.
    - `?format=openapi` is passed as query param
  2. `SwaggerUIRenderer` generates the Swagger UI and requires the
  `OpenAPIRenderer`



  ### Quick Start Example:

  ```python

  from django.conf.urls import url

  from rest_framework_swagger.views import get_swagger_view


  schema_view = get_swagger_view(title='Pastebin API')


  urlpatterns = [
      url(r'^$', schema_view)
  ]

  ```


  ## Requirements

  * Django 1.8+

  * Django REST framework 3.5.1+

  * Python 2.7, 3.5, 3.6



  ## Testing


  - Run `$ tox` to execute the test suite against all supported environments.

  - Run `./runtests.py` to run the test suite within the current environment.


  ## Bugs & Contributions

  Please report bugs by opening an issue


  Contributions are welcome and are encouraged!


  ## Special Thanks

  Many thanks to Tom Christie & all the contributors who have developed [Django
  REST Framework](http://django-rest-framework.org/)



  [build-status-badge]:
  https://travis-ci.org/marcgibbons/django-rest-swagger.svg?branch=master

  [build-status]: https://travis-ci.org/marcgibbons/django-rest-swagger

  [pypi-version]: https://img.shields.io/pypi/v/django-rest-swagger.svg

  [pypi]: https://pypi.python.org/pypi/django-rest-swagger

  [license]: https://pypi.python.org/pypi/django-rest-swagger/

  [docs-badge]: https://readthedocs.io/projects/django-rest-swagger/badge/

  [docs]: http://django-rest-swagger.readthedocs.io/
signalfx/swagger-client-generator: >
  # Swagger Client Generator

  [![Build
  Status](https://travis-ci.org/signalfx/swagger-client-generator.svg?branch=master)](https://travis-ci.org/signalfx/swagger-client-generator)


  Generates a client given a requests handler and a [Swagger API
  Specification](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md)
  schema (which can be generated with
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema): `npm
  install -g fetch-swagger-schema; fetch-swagger-schema <api-docs url>
  <destination>`).


  This is intended to be a helper for creating swagger clients by passing in a
  request handler for the platform being used (e.g., you XHR request handler in
  browsers, and request in node). It provides [robust client-side
  validation](https://github.com/signalfx/swagger-validate) according to the API
  endpoints and converts given data into appropriate url, header, and body
  information to be consumed by the request handler.


  ## Example

  ```js

  function requestHandler(error, request){
    if(error) return console.error(error.toString());

    var xhr = new XMLHttpRequest();
    xhr.open(request.method, request.url)

    if(request.headers){
      Object.keys(request.headers).forEach(function(header){
        xhr.setRequestHeader(header, request.headers[header]);
      });
    }

    xhr.onloadend = function(){
      request.options.callback(this.response);
    };

    xhr.send(request.body);
  }


  // assumes that 'schema' already exists in scope and is the schema object for

  // http://petstore.swagger.io/api/api-docs 

  var api = swaggerClientGenerator(schema, requestHandler);


  // for apiKey authorization use: api.auth('my-token')

  // for basicAuth use: api.auth('username', 'password')

  // authorization may be set for any level (api, api.resource, or
  api.operation)


  api.pet.getPetById(2, function(response){
    console.log(response);
  });

  ```

  ## Creating a schema object

  A schema is just a compilation of the Swagger Resource Listing object with
  each Resource object embedded directly within it. You can fetch one and save
  it automatically by using
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema):

  ```shell

  # install the fetch-swagger-schema tool

  npm install -g fetch-swagger-schema

  fetch-swagger-schema <url to a swagger api docs> <destination>

  # the generated schema json file will be at <destination>

  ```


  ## API

  #### `api = swaggerClientGenerator(schemaObject, requestHandler)`

  * *schemaObject* - A json object describing the schema (generally generated by
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema)).

  * *requestHandler* - A function which accepts two parameters `error` and
  `request`. The error object will be a
  [ValidationErrors](https://github.com/signalfx/swagger-validate#swaggervalidateerrorsvalidationerrors)
  object if an validation error occurs, otherwise it will be undefined. The
  request object is defined below.

  * *api* - An object which can be used as the api for the given schema. The
  first-level objects are the resources within the schema and the second-level
  functions are the operations which can be performed on those resources.


  #### `api.<resource>`

  A map of all the resources as defined in the schema to their operation handler
  (e.g. `api.pet`).


  #### `requestHandlerResponse = api.<resource>.<operationHandler>(data,
  options)`

  This is the actual operation handler invoked by the clients (e.g.,
  `api.pet.getPetById`).


  The operation handler takes two parameters:

  * *data* - A map of the operation data parameters. If the operation only has
  one parameter, the value may be used directly (i.e. `api.pet.getPetById(1,
  callback)` is the same as `api.pet.getPetById({petId: 1}, callback)`).

  * *options* - A map of the options to use when calling the operation. This
  differs based on operation but it may include parameters such as `contentType`
  or `accept` and it commonly includes options to pass to the request handler
  (such as a callback function when the request completes). If options is a
  function, then the `callback` property of options will be a reference to the
  function for convenience (e.i. `api.pet.getPetById(1, callback)` is the same
  as `api.pet.getPetById(1, { callback: callback })`.


  The operation handler processes the data and options, passes the processed
  `request` data to the `requestHandler` and returns the result of the
  requestHandler back to the caller. The operation handler does not process the
  results of the requestHandler before returning it to the caller. 


  #### `url = api.<resource>.<operationHandler>.getUrl(data)`

  Intended for advanced use-cases. Returns the URL which would be called if the
  operation were to be called using this operation handler. The acceptable HTTP
  method to call this url can be found at
  `api.<resource>.<operationHandler>.operation.method`.


  #### `requestHandler(error, request)`

  The request handler is the second parameter for the swaggerClientGenerator and
  will be called whenever an operation is invoked. If there are any validation
  errors, the errors parameter be a
  [ValidationErrors](https://github.com/signalfx/swagger-validate#swaggervalidateerrorsvalidationerrors)
  object describing the validation errors in detail.


  The request object will have the following properties which should be used to
  issue the actual HTTP request:

  * *method* - The HTTP method string for the operation

  * *url* - The url string to call for the operation

  * *headers* - A map of the request headers

  * *body* - The body of the request

  * *options* - Options passed in as the second parameter to the operation
  handler, commonly used for callbacks

  * *operation* - The metadata of the operation being invoked

  * *data* - The raw data used to generate the url, headers, and body

  * *errorTypes* - A map of [all possible error
  types](https://github.com/signalfx/swagger-validate#swaggervalidateerrorsvalidationerrors)
  which are used in the error parameter (useful for instanceof checks)


  ##### `operation` objects

  This object, which is found in either `request.operation` or
  `api.<resource>.<operationHandler>.operation` contains references to the
  entire schema object:

  *
  [Operation](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#523-operation-object)
  - `operation`

  * [API
  Object](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#522-api-object)
  - `operation.apiObject`

  * [API
  Declaration](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#52-api-declaration)
  - `operation.apiObject.apiDeclaration`

  * [Resource
  Object](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#512-resource-object)
  - `operation.apiObject.resourceObject`

  * [Resource
  Listing](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#51-resource-listing)-
  `operation.apiObject.resourceObject.resourceListing`


  ## Developing

  After installing [nodejs](http://nodejs.org) execute the following:


  ```shell

  git clone https://github.com/signalfx/swagger-ajax-client.git

  cd swagger-ajax-client

  npm install

  npm run dev

  ```

  The build engine will test and build everything, start a server hosting the
  `example` folder on [localhost:3000](http://localhost:3000), and watch for any
  changes and rebuild when nescessary.


  To generate minified files in `dist`:

  ```shell

  npm run dist

  ```
solso/source2swagger: >+
  ## Description


  Coming soon...


  ## Usage


  #### Dependencies


  * Ruby (1.8x or 1.9x)

  * Gem 

  * JSON gem (gem install json)


  #### Parameters

       $ bin/source2swagger

       Usage: source2swagger [options]
       -i, --input PATH                 Directory of the input source code
       -e, --ext ("rb"|"c"|"js"|"py")   File extension of the source code
       -f, --file FILENAME              Overwrites options: -i and -e. Takes a single annotated source code file
       -c, --comment ("##~"|"//~")      Comment tag used to write docs
       -o, --output PATH                Directory where the json output will be saved (optional)

  #### Example

        $ bin/source2swagger -i ~/project/lib -e "rb" -c "##~"

  This will output the Swagger compatible JSON specs on the terminal. 


  For this example the file annotated with the swagger spec are ruby files (*-e
  "rb"*). The annotations

  started with *##~* to distinguish them from normal ruby comments that start
  *#*. 


  The source code is on the directory *~/project/lib* , note that the path is
  handled recursively, it will analyze all ruby

  file under the declared path.


  You can also target a single file setting the option *-f* 

        $ bin/source2swagger -f ~/data/test/sample3.rb -c "##~"


  Add *-o /tmp* and it will write the JSON file(s) to */tmp*


  #### Contributions


  Feel free to extend the code and issue a pull request,


  The test suite can be invoked as

        $ rake test

  Requires *rake* and the *gem test/unit*



  ## How to


  Check
  [test/data/sample3.rb](https://github.com/solso/source2swagger/blob/master/test/data/sample3.rb)
  for a comprehensive real example of the *source2swagger* inline docs for Ruby.


  The names of the attributes can be seen on the section Grammar (partially) or
  better yet in the original [Swagger
  Specification](http://swagger.wordnik.com/spec). 


  #### API names declaration


  First you need to declare the API

        ##~ a = source2swagger.namespace("your_api_spec_name")

  This will generate the file your_api_spec_name.json. The name can be declared
  in multiple files and several times in the same file. Each time *namespace* is
  invoked it returns the reference to the root element of the API named
  "your_api_spec_name".


  #### Setting attributes elements


  One by one,

        ##~ a.basePath = "http://helloworld.3scale.net"
        ##~ a.swaggerVersion = "0.1a"
        ##~ a.apiVersion = "1.0"

  or all at the same time,

        ##~ a.set "basePath" => "http://helloworld.3scale.net", "swaggerVersion" => "0.1a", "apiVersion" => "1.0"


  You can always combine

        ##~ a.set "basePath" => "http://helloworld.3scale.net", "swaggerVersion" => "0.1a"
        ##~ a.apiVersion = "1.0"

  #### Adding and element to a list attribute

        ##~ op = a.operations.add   
        ##~ op.httpMethod = "GET"
        ##~ op.tags = ["production"] 
        ##~ op.nickname = "get_word"
        ##~ op.deprecated = false
        ##~
        ##~ op = a.operations.add
        ##~ op.set :httpMethod => "POST", :tags => ["production"], :nickname => "set_word", :deprecated => false
    
  Two elements (*operations*) were added to *a.operations*, you can also add
  directly if you do not need to have a reference to the variable *op*

        ##~ a.operations.add :httpMethod => "GET", :tags => ["production"], :nickname => "get_word", :deprecated => false
        ##~ a.operations.add :httpMethod => "POST", :tags => ["production"], :nickname => "set_word", :deprecated => false

  #### Using variables for common structures


  The source2swagger notation also allows you to define variables that can be
  defined anywhere on the source code files as *@name = value*, the value is
  typically a hash structure in ruby notation (*{"key_1" => "value_1", ... ,
  "key_n" => "value_n"}*) 


  *Note:* all variable declarations are evaluated before the non-variable
  statements so vars will always available no matter where they are defined. For
  instance,

      ... 
      ##  in foo.rb
      ##~ op.parameters.add @parameter_app_id
      ...
      ## in bar.rb
      ##~ @parameter_app_id = {"name" => "word", "description" => "The word whose sentiment is to be set", "dataType" => "string", "required" => true, "paramType" => "path"}
      ...
    

  #### Adding comments


  You can add comments on the inline docs specification, just use the normal
  comment tags of your language

      ##~ op = a.operations.add   
      ##
      ##  HERE IS MY COMMENT (do not use the comment tag, e.g. ##~ but the comment tag specific of your language, in ruby #)
      ##
      ##~ op.httpMethod = "GET"

      

  Check
  [test/data/sample3.rb](https://github.com/solso/source2swagger/blob/master/test/data/sample3.rb)
  for a comprehensive real example of the *source2swagger* inline docs for Ruby.



  ### Grammar


  (partial)


  For a more comprehensive specification of the fields needed to declare your
  API on the Swagger format you can always go to the
  [source](http://swagger.wordnik.com/spec) 

        $ROOT

        a = source2swagger.namespace(STRING)

        a.basepath = STRING             [required, ]
        a.swaggerVersion = STRING       []
        a.apiVersion = STRING           []
        a.apis = LIST[$ENDPOINTS]       [required, ]

        a.models = LIST[$MODELS]        []

        $ENDPOINTS

        e = a.apis.add

        e.path = STRING                 [required, ]
        e.format = LIST[STRING]         [required, ]
        e.description = STRING          [required, ]
        e.errorResponses = LIST[$ERRORS][]
        e.operations = LIST[$OPERATIONS][]

        $OPERATIONS

        o = e.operations.add

        o.httpMethod = STRING           [required, ]
        o.tags = LIST[STRING]           []
        o.nickname = STRING             []
        o.deprecated = BOOLEAN          []
        o.summary = STRING              []
        o.responseClass = STRING        []
        o.parameters = LIST[$PARAMETERS][]

        PARAMETERS

        p = o.parameters.add

        p.name = STRING                 [required]
        p.description = STRING          []
        p.dataType = STRING             [required]
        p.allowMultiple = BOOLEAN       []
        p.required = BOOLEAN            []
        p.paramType = STRING

        ERRORS

        err = e.operations.add

        err.reason = STRING             []
        err.code = INT                  []

  ## Extra Resources


  You can edit and view the generated Swagger JSON specs online here: [JSON
  Editor](http://jsoneditor.appspot.com/)


  It's pretty basic but it works great for a quick manual inspection and edition

  of the json generated by *source2swagger*. If you know of another online
  editor 

  please let us know. 


  ## License


  MIT License


myfreeweb/octohipster: >
  Current [semantic](http://semver.org/) version:


  ```clojure

  [octohipster "0.2.1-SNAPSHOT"]

  ```


  # octohipster [![Build
  Status](https://travis-ci.org/myfreeweb/octohipster.png?branch=master)](https://travis-ci.org/myfreeweb/octohipster)
  [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)


  Octohipster is


  - a REST library/toolkit/microframework for Clojure

  - that allows you to build HTTP APIs

  - in a declarative
  [Webmachine](https://github.com/basho/webmachine/wiki/Overview)-like style,
  using [Liberator](https://github.com/clojure-liberator/liberator)

  - powered by [Ring](https://github.com/ring-clojure/ring); you can add [rate
  limiting](https://github.com/myfreeweb/ring-ratelimit),
  [authentication](https://github.com/cemerick/friend),
  [metrics](http://metrics-clojure.readthedocs.org/en/latest/ring.html), [URL
  rewriting](https://github.com/ebaxt/ring-rewrite) and more with just
  middleware


  It allows you to make APIs that


  - support hypermedia ([HAL+JSON](http://stateless.co/hal_specification.html),
  [Collection+JSON](http://amundsen.com/media-types/collection/) and
  Link/Link-Template HTTP headers; works with
  [Frenetic](http://dlindahl.github.com/frenetic/))

  - support multiple output formats (JSON, EDN, YAML and any custom format)

  - have [Swagger](https://github.com/wordnik/swagger-core/wiki) documentation 

  - use [JSON Schema](http://json-schema.org) for validation *and* documentation

  - have pagination


  ## Concepts


  - a **resource** is a single endpoint that accepts requests and returns
  responses

  - a **group** is a collection of resources with a single URL prefix (eg. a
  group /things contains resources /things/ and /things/{id}) and zero or more
  shared properties (usually the schema)

  - a **documenter** is a function that returns a resource which documents
  regular resources (Swagger, HAL root, etc)

  - a **mixin** is a function that is applied to multiple resources to give them
  shared behavior (eg. collection or entry behavior)

  - a **response handler** is a function that is used to encode response data to
  a particular content-type (JSON, EDN, YAML, etc.)

  - a **params handler** is a function that is used to decode incoming data from
  a particular content-type (JSON, EDN, YAML, etc.)


  ## Usage


  ```clojure

  (ns example
    (:use [octohipster core routes mixins pagination]
          [octohipster.documenters swagger schema]
          org.httpkit.server)
    (:import org.bson.types.ObjectId)
    (:require [monger.core :as mg]
              [monger.query :as mq]
              [monger.collection :as mc]
              monger.json))

  (mg/connect!)

  (mg/set-db! (mg/get-db "octohipster-example"))


  ;;;; The "model"

  ;;;;  tip: make it a separate namespace, eg. app.models.contact

  (def contact-schema
    {:id "Contact"
     :type "object"
     :properties {:name {:type "string"}
                  :phone {:type "integer"}}
     :required [:name]})

  (defn contacts-count [] (mc/count "contacts"))

  (defn contacts-all []
    (mq/with-collection "contacts"
      (mq/find {})
      (mq/skip *skip*)
      (mq/limit *limit*)))
  (defn contacts-find-by-id [x] (mc/find-map-by-id "contacts" (ObjectId. x)))

  (defn contacts-insert! [x]
    (let [id (ObjectId.)]
      (mc/insert "contacts" (assoc x :_id id))
      (mc/find-map-by-id "contacts" id)))
  (defn contacts-update! [x old] (mc/update "contacts" old x :multi false))

  (defn contacts-delete! [x] (mc/remove "contacts" x))


  ;;;; The resources

  ;; with shared pieces of documentation

  (def name-param
    {:name "name", :dataType "string", :paramType "path", :required "true", :description "The name of the contact", :allowMultiple false})

  (def body-param
    {:dataType "Contact", :paramType "body", :required true, :allowMultiple false})

  (defresource contact-collection
    :desc "Operations with multiple contacts"
    :mixins [collection-resource]
    :clinks {:item ::contact-item}
    :data-key :contacts
    :exists? (fn [ctx] {:contacts (contacts-all)})
    :post! (fn [ctx] {:item (-> ctx :request :non-query-params contacts-insert!)})
    :count (fn [req] (contacts-count))
    :doc {:get {:nickname "getContacts", :summary "Get all contacts"}
          :post {:nickname "createContact", :summary "Create a contact"}})

  (defresource contact-item
    :desc "Operations with individual contacts"
    :url "/{_id}"
    :mixins [item-resource]
    :clinks {:collection ::contact-collection}
    :data-key :contact
    :exists? (fn [ctx]
               (if-let [doc (-> ctx :request :route-params :_id contacts-find-by-id)]
                 {:contact doc}))
    :put! (fn [ctx]
            (-> ctx :request :non-query-params (contacts-update! (:contact ctx)))
            {:contact (-> ctx :request :route-params :_id contacts-find-by-id)})
    :delete! (fn [ctx]
               (-> ctx :contact contacts-delete!)
               {:contact nil})
    :doc {:get {:nickname "getContact", :summary "Get a contact", :parameters [name-param]}
          :put {:nickname "updateContact", :summary "Overwrite a contact", :parameters [name-param body-param]}
          :delete {:nickname "deleteContact", :summary "Delete a contact", :parameters [name-param]}})

  ;;;; The group

  (defgroup contact-group
    :url "/contacts"
    :add-to-resources {:schema contact-schema}  ; instead of typing the same for all resources in the group
    :resources [contact-collection contact-item])

  ;;;; The handler

  (defroutes site
    :groups [contact-group]
    :documenters [schema-doc schema-root-doc swagger-doc swagger-root-doc])

  (defn -main [] (run-server site {:port 8080}))

  ```


  Also, [API Documentation](http://myfreeweb.github.com/octohipster) is
  available.


  ## Contributing


  By participating in this project you agree to follow the [Contributor Code of
  Conduct](http://contributor-covenant.org/version/1/1/0/).


  Please take over the whole project!  

  I don't use Clojure a lot nowadays.  

  Talk to me: <greg@unrelenting.technology>.


  ## License


  This is free and unencumbered software released into the public domain.  

  For more information, please refer to the `UNLICENSE` file or
  [unlicense.org](http://unlicense.org).
gettyimages/spray-swagger: |
  ## Use https://github.com/swagger-spray/swagger-spray instead
skrusty/dotswaggen: >
  [![Build
  Status](https://travis-ci.org/skrusty/dotswaggen.svg?branch=master)](https://travis-ci.org/skrusty/dotswaggen)

  # DotSwagGen

  DotSwagGen is a command line code generator for the swagger specification. It
  allows you to generate client code for .NET from a simple swagger spec file
  which defines a REST Api.


  ## Templates

  DotSwagGen uses a template engine to create code output in any language for a
  given swagger specification. 


  Currently there are two templates included, a C# Model and a C# Operation
  template. You can create your own templates for specific requirements or
  languages.


  ## Usage

  Usage: dotswaggen -s \<filename.json\> -n test.namespace -o \<directory\>

    -s, --swagger      Required. Input files to be processed.

    -n, --namespace    Required. The namespace to use for generated code

    -o, --output       Required. The folder to output rendered code to

    --t-prefix         Prefix the template filename for each template type

    --o-prefix         Prefix the output filename for each file generated
    
    --o-single-name    The filename to write all output to

    --help             Display this help screen.

  ## Swagger Spec Support

  Currently we only support Swagger 1.2. 

  1.1 is planned to arrive soon.
yvasiyarov/swagger: >

  ![alt text](
  https://s3.amazonaws.com/tw-chat/attach/579528d6e2f2c2aebfe7f957e4572ca0/1.png 
  "Logo Title Text 1")



  ## Swagger UI Generator for Go




  ### About


  This is a utility for automatically generating API documentation from
  annotations in Go code. It generates the documentation as JSON, according to
  the [Swagger Spec](https://github.com/wordnik/swagger-spec), and then displays
  it using [Swagger UI](https://github.com/swagger-api/swagger-ui).


  This tool was inspired by [Beego](http://beego.me/docs/advantage/docs.md), and
  follows the same annotation standards set by Beego.

  The main difference between this tool and Beego is that this generator doesn't
  depend on the Beego framework. You can use any framework to implement your API
  (or don't use a framework at all). You just add declarative comments to your
  API controllers, then run this generator and your documentation is ready! For
  an example of what such documentation looks like when presented via Swagger
  UI, see the Swagger [pet store example](http://petstore.swagger.wordnik.com/).


  This tool focuses on _documentation generation_ as opposed to _client_
  generation. If that is all you need, it will be significantly easier to
  integrate this tool into your existing codebase/workflow as opposed to
  [goswagger](https://goswagger.io/). One significant advantage of this tool is
  that it allows you to easily reference objects that are outside of your
  package.


  _This tool currently generates Swagger 1.x spec files -- there are plans to
  update the tool to support Swagger 2.x at some point._


  ### Quick Start Guide


  1. Add comments to your API source code, [see Declarative Comments Format
  ](https://github.com/yvasiyarov/swagger/wiki/Declarative-Comments-Format)


  2. Download Swagger for Go by using ```go get github.com/yvasiyarov/swagger```


  3. Or, compile the Swagger generator from sources.
      `go install`

      This will create a binary in your $GOPATH/bin folder called swagger (Mac/Unix) or swagger.exe (Windows).

  4. Run the Swagger generator.
      Make sure to specify the full package name and an optional entry point (if the entry point isn't `$pkg/main.go`).

      Example:
      
      ```
      $ pwd
      /Users/dselans/Code/go/src/github.com/yvasiyarov/swagger
      $ ./$GOPATH/bin/swagger -apiPackage="github.com/yvasiyarov/swagger/example" -mainApiFile=example/web/main.go -output=./API.md -format=markdown
      ```
      
  ### Command Line Flags

  |  Switch  |  Description   |

  |------------------|---------------------------|    

  | **-apiPackage**  | Package with API controllers implementation |

  | **-mainApiFile** | Main API file. This file is used for generating the
  "General API Info" bits. If `-mainApiFile` is not specified, then
  `$apiPackage/main.go` is assumed. | 

  | **-format**      | One of: `go\|swagger\|asciidoc\|markdown\|confluence`.
  Default is `-format="go"`. See See
  [docs](https://github.com/yvasiyarov/swagger/wiki/Generate-Different-Formats).
  |

  | **-output**     | Output specification. Default varies according to -format.
  See
  [docs](https://github.com/yvasiyarov/swagger/wiki/Generate-Different-Formats).
  |

  | **controllerClass**  | Speed up parsing by specifying which receiver objects
  have the controller methods. The default is to search all methods. The
  argument can be a regular expression. For example,
  `-controllerClass="(Context\|Controller)$"` means the receiver name must end
  in Context or Controller. |

  | **contentsTable**     | Whether to generate Table of Contents; default:
  `true`. |

  | **models**       | Generate 'Models' section; default `true`. |

  | **vendoringPath** | Override default vendor directory (eg. `$CWD/vendor` and
  `$GOPATH/src/$apiPackage/vendor`) |

  | **disableVendoring** | Disable vendor usage altogether | 

  | **enableDebug** | Enable debug log output |


  ### Note on Swagger-UI


  To run the generated swagger UI (assuming you used -format="go"), copy/move
  the generated docs.go file to a new folder under GOPATH/src. Also bring in the
  web.go-example file, renaming it to web.go. Then: `go run web.go docs.go`


  ### Additional Documentation


  **Project Status** :
  [Alpha](https://github.com/yvasiyarov/swagger/wiki/Declarative-Comments-Format)


  **Declarative Comments Format** : [Read more
  ](https://github.com/yvasiyarov/swagger/wiki/Declarative-Comments-Format)


  **Technical Notes** : [Read
  More](https://github.com/yvasiyarov/swagger/wiki/Technical-Notes)


  **Known Limitations** : [Read
  More](https://github.com/yvasiyarov/swagger/wiki/Known-Limitations)
      
   **Generating Different Format Docs**: [Read More](https://github.com/yvasiyarov/swagger/wiki/Generate-Different-Formats)
SerenaFeng/tornado-swagger: >
  # tornado-swagger


  ## What is tornado-swagger?

  tornado is a wrapper for tornado which enables swagger-ui support.


  In essense, you just need to wrap the Api instance and add a few python
  decorators to get full swagger support.


  ## How to:

  Install:


  ```

  pip install .

  ```

  (This installs tornado and epydoc as well)



  And in your program, where you'd usually just use tornado, add just a little
  bit of sauce and get a swagger spec out.



  ```python

  from tornado.web import RequestHandler, HTTPError

  from tornado_swagger import swagger


  swagger.docs()


  # You may decorate your operation with @swagger.operation and use docs to
  inform information

  class ItemNoParamHandler(GenericApiHandler):
      @swagger.operation(nickname='create')
      def post(self):
          """
              @param body: create test results for a item.
              @type body: L{Item}
              @return 200: item is created.
              @raise 400: invalid input
          """

  # Operations not decorated with @swagger.operation do not get added to the
  swagger docs


  class ItemNoParamHandler(GenericApiHandler):
      def options(self):
          """
          I'm not visible in the swagger docs
          """
          pass


  # Then you use swagger.Application instead of tornado.web.Application

  # and do other operations as usual


  def make_app():
      return swagger.Application([
          (r"/items", ItemNoParamHandler),
          (r"/items/([^/]+)", ItemHandler),
          (r"/items/([^/]+)/cases/([^/]+)", ItemOptionParamHandler),
      ])

  # You define models like this:

  @swagger.model

  class Item:
      """
          @descriptin:
              This is an example of a model class that has parameters in its constructor
              and the fields in the swagger spec are derived from the parameters to __init__.
          @notes:
              In this case we would have property1, property2 as required parameters and property3 as optional parameter.
          @property property3: Item decription
          @ptype property3: L{PropertySubclass}
      """
      def __init__(self, property1, property2=None):
          self.property1 = property1
          self.property2 = property2

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                      "default": null
                  }
              ]
          }
      }

  # If you declare an __init__ method with meaningful arguments

  # then those args could be used to deduce the swagger model fields.

  # just as shown above


  # if you declare an @property in docs, this property property2 will also be
  used to deduce the swagger model fields

  class Item:
      """
          @property property3: Item description
      """
      def __init__(self, property1, property2):
          self.property1 = property1
          self.property2 = property2

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                  }
                  "property3": {
                      "type": "string"
                  }
              ]
          }
      }

  # if you declare an argument with @ptype, the type of this argument will be
  specified rather than the default 'string'

  class Item:
      """
          @ptype property3: L{PropertySubclass}
      """
      def __init__(self, property1, property2, property3=None):
          self.property1 = property1
          self.property2 = property2
          self.property3 = property3

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                  },
                  "property3": {
                      "type": "PropertySubclass"
                      "default": null
                  }
              ]
          }
      }

  # if you want to declare an list property, you can do it like this:

  class Item:
      """
          @ptype property3: L{PropertySubclass}
          @ptype property4: C{list} of L{PropertySubclass}
      """
      def __init__(self, property1, property2, property3, property4=None):
          self.property1 = property1
          self.property2 = property2
          self.property3 = property3
          self.property4 = property4

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                  },
                  "property3": {
                      "type": "PropertySubclass"
                      "default": null
                  },
                  "property4": {
                      "default": null,
                      "items": {
                          "type": "PropertySubclass"},
                          "type": "array"
                      }
                  }
              ]
          }
      }
  ```


  # Running and testing


  Now run your tornado app


  ```

  python basic.py

  ```


  And visit:


  ```

  curl http://localhost:7111/swagger/spec

  ```


  access to web

  ```

  http://localhost:7111/swagger/spec.html

  ```


  # Passing more metadata to swagger

  customized arguments used in creating the 'swagger.docs' object will be
  supported later
siemens/restapidoc: "restapidoc [![Build Status](https://travis-ci.org/siemens/restapidoc.svg?branch=master)](https://travis-ci.org/siemens/restapidoc)\r\n==========\r\n\r\nThis is a RESTful API documentation plugin for the [Grails][Grails] web application framework.\r\nVery much inspired by [Swagger][Swagger] API documentation, this plugin reuses the available information of\r\nGrails Domain classes and Controllers to minimize documentation effort and to improve consistency.\r\nThis approach aims to be a deeper and less narrative Grails integration than the original [Swagger][Swagger] JAX-RS idea. It\r\n* is extending the Grails RestController\r\n* is using Grails HalRenderer\r\n* uses Annotations just for documentation purpose and not for semantic information\r\n* is as concise as possible\r\n* reuses already some basic annotations from Swagger but\r\n* it is not \"Swagger compatible\" \r\n* Grails 3.0 and above is not supported\r\n\r\n[Grails]: http://grails.org/\r\n[plugins]: http://grails.org/plugins/\r\n[Swagger]: https://github.com/wordnik/swagger-core\r\n\r\n**Current Version 0.1.4**\r\n\r\n![Grails restapidoc](https://github.com/siemens/restapidoc/blob/master/screenshot1.png?raw=true)\r\n\r\n\r\nQuick Start\r\n-----------\r\n* it is recommended to use Grails >= 2.3.7. It is best tested with Grails 2.4.4. Please install it as required by Grails or use the grailsw wrapper.\r\n* EITHER Use the Binary by adding restapidoc it to your grails-app/conf/BuildConfig.groovy:\r\n    ```\r\n    compile \":restapidoc:0.1.4\"\r\n    ```\r\n* OR: Download this project by git clone e.g. to directory restapidoc.\r\n    * cd restapidoc\r\n    * to test it:\r\n    ```\r\n    grails test-app --echoOut\r\n    ```\r\n    * The project provides a Grails wrapper, so if you don't have Grails installed, run the tests with\r\n    ```\r\n    grailsw test-app --echoOut\r\n    ```\r\n\r\n    * Create a new Grails project parallel to restapidoc. Edit BuildConfig.groovy, add:\r\n    ```\r\n\tgrails.plugin.location.'restapidoc'=\"../restapidoc\"\r\n    ```\r\n\r\n* edit your spring/resources.groovy, add e.g. HalJsonRenderer:\r\n\r\n```Groovy\r\n\timport grails.rest.render.hal.HalJsonCollectionRenderer\r\n\timport grails.rest.render.hal.HalJsonRenderer\r\n\tbeans = {\r\n\t\thalPCollectionRenderer(HalJsonCollectionRenderer, Pet)\r\n\t\thalPRenderer(HalJsonRenderer, Pet)\r\n\t}\r\n```\r\n\r\n* add documentation to your Grails Domains e.g.:\r\n\r\n```Groovy\r\n\timport restapidoc.annotations.ApiDescription\r\n\timport restapidoc.annotations.ApiProperty\r\n\r\n\t@ApiDescription(description = \"Endangered Animals\")\r\n\tclass Pet {\r\n\t\t@ApiProperty(description = \"Binomial name\")\r\n    \tString name \r\n\t}\r\n```\r\n\r\n* add documentation to your Grails Controller. If you want some generic Documentation for RestfulControllers, you can extend DocumentedRestfulController e.g. here PetController:\r\n\r\n```Groovy\r\n\timport restapidoc.DocumentedRestfulController\r\n\timport restapidoc.annotations.ApiDescription\r\n\r\n\t@ApiDescription(description=\"Unrealistic shop for endangered animals\")\r\n\tclass PetController extends DocumentedRestfulController  {\r\n\t\tstatic responseFormats = ['hal','json']\r\n\t\tPetController() {\r\n\t\t\tsuper(Pet)\r\n\t\t}\r\n\t}\r\n```\r\n\r\n* start your Grails app and open the Api Controller, e.g. http://localhost:8080/HalTest/apiBrowse/index\r\n* you can find this sample as fully running Grails Application under https://github.com/muenchhausen/HalTest\r\n\r\nAPI Documentation\r\n-----------------\r\nThe following Annotations - similar like Swagger - are available:\r\n* ApiIgnore: element will be ignored in documentation\r\n* ApiDescription: used for Domain classes and Controller documentation\r\n* ApiProperty: domain property\r\n* ApiParam: paramter of a controller\r\n* ApiParams: a list of ApiParam\r\n* ApiOperation: controller operation\r\n* ApiResponse: controller operation response\r\n* ApiResponses: List of ApiResponse\r\n* DeleteMethod / GetMethod / PostMethod / PutMethod: marks controller operation as RESTful CRUD \r\n\r\n\r\nHistory\r\n-------\r\n* 0.1.4 Grails 2.4.4 tested\r\n* 0.1.3 Grails 2.4.2 tested, issue#4 and issue#5, inherited domain attributes\r\n* 0.1.2 Grails 2.4.0 support\r\n* 0.1.1 publish binary version of this plugin\r\n* 0.1 initial version\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) Siemens AG, 2013\r\n\r\nThis restapidoc plugin is licensed under the terms of the [Apache License, Version 2.0][Apache License, Version 2.0].\r\n[Apache License, Version 2.0]: http://www.apache.org/licenses/LICENSE-2.0.html\r\n"
josephpconley/swagger2postman: >-
  # swagger2postman


  [![Join the chat at
  https://gitter.im/josephpconley/swagger2postman](https://badges.gitter.im/josephpconley/swagger2postman.svg)](https://gitter.im/josephpconley/swagger2postman?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

  Create a Postman collection from Swagger documentation


  ##Motivation


  [Swagger UI](https://github.com/swagger-api/swagger-ui) provides a nice way to
  interact with an API documented by the [Swagger
  specification](https://github.com/swagger-api/swagger-spec).  

  But if you're working with an identical API across multiple environments, or
  you want to test edge cases that Swagger UI doesn't support 

  (like omitting a required query parameter), Swagger UI comes up a bit short.  


  [Postman](https://www.getpostman.com/) to the rescue!  Using Postman you can
  define variables for multiple environments and have more control over request
  generation. 


  ##Purpose

  This library takes Swagger documentation served in JSON and converts it into a
  JSON collection which can be imported directly into Postman.

  You can see a full description of the Swagger JSON spec at
  [http://swagger.io/specification/](http://swagger.io/specification/)


  ##Command line


  To convert a Swagger 2.0 JSON file to a valid Postman collection:

      sbt "runMain com.josephpconley.swagger2postman.app.v2.Swagger2PostmanApp <filename> <collectionName> [<headerKey=headerValue> ... ]"

  To convert a Swagger 1.2 hosted endpoint to a valid Postman collection:

      sbt "runMain com.josephpconley.swagger2postman.app.v12.Swagger2PostmanApp <host> <collectionName> [<headerKey=headerValue> ... ]"


  ##Demo


  Try out an online version at
  [http://app.josephpconley.com/swagger2postman](http://app.josephpconley.com/swagger2postman)


  Or using `curl` to convert a Swagger 2.0 document into a Postman JSON import
  file:
      
      curl -X POST --data "@v2petstore-swagger.json" "http://app.josephpconley.com/swagger20?name=my_collection&header_key=header_value" --header "Content-Type:application/json" > my_collection.json 


  ##Multiple environments


  To take advantage of multi-environment testing, I would first run
  swagger2postman against a hosted Swagger doc.

  Then I do a simple Find/Replace, replacing the target host with a handlebars
  variable like `{{host}}`.

  Then I create environments in Postman that define a value for the config key
  `host`.

  Toggling these environments with your imported collection will let you
  seamlessly test your API in different environments.
   
  You can also use environment variables for authentication.  If your API uses a
  header for authentication, then pass a `headerKey`=`{{headerValue}}`

  so that all endpoints get a global authentication header with an
  environment-dependent value.


  ##Release Notes

  ### 1.1

  - Initial support for Swagger 2.0


  ### 1.0

  - Initial support for Swagger 1.2
wonderlic/swagger-validation: "# Validation for swagger-node-express\n\n[![Build Status](https://img.shields.io/travis/wonderlic/swagger-validation/master.svg)](https://travis-ci.org/wonderlic/swagger-validation)\n[![NPM version](https://badge.fury.io/js/swagger-validation.svg)](http://badge.fury.io/js/swagger-validation)\n[![Code Climate](https://codeclimate.com/github/wonderlic/swagger-validation/badges/gpa.svg)](https://codeclimate.com/github/wonderlic/swagger-validation)\n\nDocumentUp available here: [http://documentup.com/wonderlic/swagger-validation](http://documentup.com/wonderlic/swagger-validation)\n\n## Quick Description\n\n#### Validating a request\nThis module validates a request from a swagger-node-express application using the existing swagger-node-express objects,\nparameters, and models following the [swagger specification 1.2](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md). \nIt returns an array of JavaScript Error objects if there are any validation errors. For now,\nit only uses the message property of the Error object which, using lo-dash or Underscore.js, can be got easily via \n\n```javascript\nvar errors = _.pluck(_.pluck([VALIDATION RETURN], 'error'), 'message');)\n```\n\n#### Validating an object\nWhile the main intention of this module is to validate the request passed into express via swagger-node-express,\nthere are use cases where an object must be validated outside of a request (for example, if an object passed into a\nrequest is also used in other methods that do their own validation or during unit testing). To support this\nfunctionality, as of version 1.3.0, if the req object passed into the validate function does not have one of the\nexpected paramType properties (query, path, body, form, or header) then validation will be done against\nthe req object itself. Therefore, this can be used to validate that an object matches the swagger specification outside\nof a request. Validating an object follows all the same rules outlined under *[Validating a request](#validating-a-request)*,\nbut ignores the paramType on the Swagger spec as it already has the object / value to validate.\n\nAdditionally, as of version 1.4.0, passing in a model name instead of the swagger specification will validate the object\ndirectly instead of looking at the request. However, this functionality only works with objects. Any non-object passed\nin will return an error instead of being validated.\n\nAs an example:\n\n```javascript\n    var validate = require('swagger-validation');\n    var models = require(\"./models.js\");\n    var ret = validate('[MODEL NAME HERE]', obj, models);\n```\n\n## Installation\n\nUsing NPM, include the `swagger-validation` module in your `package.json` dependencies.\n\n```json\n{\n\t...\n\t\"dependencies\": {\n\t\t\"swagger-validation\": \"~1.4\",\n\t\t...\n\t}\n\t...\n}\n```\n\n## Adding validation to swagger-node-express\n\nThere are few different ways to use this module within swagger-node-express depending on what you are trying to accomplish.\n\n### Use the middleware component of Swagger \n\nThe benefit of this is that, by default, all methods will have their request validated \nagainst the parameters specified automatically. \n\n```javascript\n\n// add this to the swagger definition, usually defined in the app.js\nswagger.addMiddleware(function(req, res, spec, models) {\n  var ret = validate(spec, req, models);\n  if(ret.length) {\n    var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n    var message = 'validation failure - ' + errors.join();\n    return { 'code' : 400, 'message': message };\n  }\n});\n\n```\n\n**(NOTE: As of 8-7-2014, this is still a pull request of swagger and has not been approved. As such,\nthis implementation WILL change if / when it gets pulled into swagger-node-express).**\n\n### Validate each method individually \n\nFor the following method (using the swagger-application \"test application\" inside swagger-node-express)\n\n```javascript\nexports.findById = {\n  'spec': {\n    description : \"Operations about pets\",  \n    path : \"/pet/{petId}\",\n    method: \"GET\",\n    summary : \"Find pet by ID\",\n    notes : \"Returns a pet based on ID\",\n    type : \"Pet\",\n    nickname : \"getPetById\",\n    produces : [\"application/json\"],\n    parameters : [param.path(\"petId\", \"ID of pet that needs to be fetched\", \"string\")],\n    responseMessages : [swe.invalid('id'), swe.notFound('pet')]\n  },\n  'action': function (req,res) {\n    if (!req.params.petId) {\n      throw swe.invalid('id'); }\n    var id = parseInt(req.params.petId);\n    var pet = petData.getPetById(id);\n\n    if(pet) res.send(JSON.stringify(pet));\n    else throw swe.notFound('pet',res);\n  }\n};\n```\n\nchange it to \n\n```javascript\nexports.findById = {\n  'spec': {\n    description : \"Operations about pets\",  \n    path : \"/pet/{petId}\",\n    method: \"GET\",\n    summary : \"Find pet by ID\",\n    notes : \"Returns a pet based on ID\",\n    type : \"Pet\",\n    nickname : \"getPetById\",\n    produces : [\"application/json\"],\n    parameters : [param.path(\"petId\", \"ID of pet that needs to be fetched\", \"string\")],\n    responseMessages : [swe.invalid('id'), swe.notFound('pet')]\n  },\n  'action': function (req,res) {\n    \n    var validate = require('swagger-validation');\n    var models = require(\"./models.js\");\n    var _ = require('lodash');\n    // models are only needed if this is intended to validate an object\n    var ret = validate(exports.findById.spec, req, models); \n    if(ret.length) {\n      var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n      res.send(JSON.stringify({\n        'message': 'validation failure - ' + errors.join(),\n        'code': 400\n      }), 400);\n      return;\n    }\n  \n    if (!req.params.petId) {\n      throw swe.invalid('id'); }\n    var id = parseInt(req.params.petId);\n    var pet = petData.getPetById(id);\n\n    if(pet) res.send(JSON.stringify(pet));\n    else throw swe.notFound('pet',res);\n  }\n};\n```\n\nor, for a little cleaner approach:\n\n```javascript\nexports.findById = {\n  'spec': {\n    description : \"Operations about pets\",\n    path : \"/pet/{petId}\",\n    method: \"GET\",\n    summary : \"Find pet by ID\",\n    notes : \"Returns a pet based on ID\",\n    type : \"Pet\",\n    nickname : \"getPetById\",\n    produces : [\"application/json\"],\n    parameters : [param.path(\"petId\", \"ID of pet that needs to be fetched\", \"string\")],\n    responseMessages : [swe.invalid('id'), swe.notFound('pet')]\n  },\n  'action': function (req,res) {\n    validateReq(req, res, exports.findById.spec, function() {\n      if (!req.params.petId) {\n        throw swe.invalid('id'); }\n      var id = parseInt(req.params.petId);\n      var pet = petData.getPetById(id);\n\n      if(pet) res.send(JSON.stringify(pet));\n      else throw swe.notFound('pet',res);\n    });\n  }\n};\n\n// put this somewhere else, either in the same file or put it in a \n// separate module using the standard module.exports Node convention\nvar validate = require('swagger-validation');\nvar _ = require('lodash');\nvar models = require(\"./models.js\");\n\nfunction validateReq(req, res, spec, func) {\n  var ret = validate(spec, req, models);\n  if(ret.length) {\n    var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n    res.send(JSON.stringify({\n      'message': 'validation failure - ' + errors.join(),\n      'code': 400\n    }), 400);\n    return;\n  }\n\n  func();\n}\n\n```\n\n### Modify swagger-node-express directly\n\nWhile this would have the same benefit as the first one that, by default, all methods \nwill have their request validated against the parameters specified automatically, this is **non-standard** and **can lead to unintended consequences**. \nThis **will** be deprecated / removed once the pull request specified above gets pulled in.\n\n```javascript\n\n    // /swagger-node-express/lib/swagger.js\n    // lines 418 - 420 currently have\n    else {\n      callback(req, res, next);\n    }\n\n    // change it to \n    else {\n      var validate = require('swagger-validation');\n      var ret = validate(spec, req, self.allModels);\n      if(ret.length) {\n        var errors = _.pluck(_.pluck(ret, 'error'), 'message');\n        res.send(JSON.stringify({\n          'message': 'validation failure - ' + errors.join(),\n          'code': 400\n        }), 400);\n        return;\n      }\n    \n      callback(req, res, next);\n    }\n        \n```\n\n## Functionality outside of Swagger specification\n\nSwagger-validation adheres to the official swagger specification, but does provide non-standard\nfunctionality to allow additional validation / ease that the official swagger specification doesn't support.\n\n### String pattern matching (RegExp)\n\nIt is possible to validate string types using a RegExp pattern defined on your swagger object. For the following example:\n\n```javascript\nexports.findByName = {\n  spec: {\n    description : \"Find pet by name\",  \n    path : \"/pet/{petName}\",\n    method: \"GET\",\n    type : \"Pet\",\n    produces : [\"application/json\"],\n    parameters : [{\n      id: \"petName\",\n      description: \"petName\",\n      type: \"string\",\n      pattern: \"^dr*\"\n    }]\n  }\n};\n```\n\nSwagger-validation will now enforce that all names sent to the /pet/{petName} route start with `\"dr\"`.\n`pattern` will accept any regex string.  An invalid regex string will report an error.\n\n### Date pattern matching (moment.js format)\n\nMuch like the string pattern matching mentioned above, swagger objects with a type of `string` and a format of\n`date` or `date-time` also accept a `pattern` property. However, instead of a RegExp string, they accept a\n[moment.js format string](http://momentjs.com/docs/#/displaying/format/). By default, it uses `moment.ISO_8601()`,\nwhich should match any ISO 8601 compatible date. If you want to be more explicit, you can specify your own\nformat using the `pattern` property.\n\n### Value manipulation\n\nIn addition to validating the request / object, swagger-validation will replace the value on the request / object\naccording to the following chart:\n\n| Input Type | Swagger Type | Swagger Format | Output | \n| ----- | ----- | ----- | ----- |\n| string integer/long e.g. `\"123\"` | `integer` | `int32` or `int64` | integer/long e.g. `123` |\n| string hex e.g. `\"0x123\"` | `integer` | `int32` or `int64` | integer/long e.g. `291` |\n| string float/double e.g. `\"123.01\"` | `number` | `float` or `double`| float/double e.g. `123.01` |\n| string boolean e.g. `\"true\"` | `boolean` | | boolean e.g. `true` |\n| string date e.g. `\"2014-08-10\"` | `string` | `date` | Date object e.g. `new Date(\"2014-08-10\")`** |\n| string date e.g. `\"2014-08-10T12:00:01\"` | `string` | `date-time` | Date object e.g. `new Date(\"2014-08-10T12:00:01\")`** |\n\n** The date conversions are done using the [moment.js](//momentjs.com/) library. \nBy default, it uses the `moment.ISO_8601()` format for parsing dates, but can be overridden by changing the `pattern` property\n\nIn addition, if a defaultValue is specified for the param and the value is null, undefined, or an empty string,\nswagger-validation will replace the value on the req with the defaultValue for that parameter.\n\n#### NOTE\nAs JavaScript doesn't pass method parameters by reference for non object / array values (such as strings or numbers),\npassing in a value type cannot convert the value. Therefore, passing in a value type without an object will not\nconvert the value. This only applies when passing in the value itself NOT when the value is part of the request.\nIf the value is on the request, regardless of type, it will still convert the value and update the request.\n\n### Validation object\n\nSwagger-validation adds another object to the swagger.spec definition called validation that looks like this\n\n```javascript\nvalidation = {\n  enabled : [true / false],\n  replaceValues : [true / false]\n};\n```\n\nand can be used like \n\n```javascript\nexports.findByName = {\n  spec: {\n    description : \"Find pet by name\",  \n    path : \"/pet/{petName}\",\n    method: \"GET\",\n    type : \"Pet\",\n    validation = {\n      replaceValues : false\n    },\n    produces : [\"application/json\"],\n    parameters : [{\n      id: \"petName\",\n      description: \"petName\",\n      type: \"string\",\n      pattern: \"/^dr*/i\"\n    }]\n  }\n};\n```\n\nThe `enabled` property turns on / off swagger-validation holistically for the particular spec. <br/>\nThe `replaceValues` property turns on / off the functionality to manipulate values on the req (detailed in the previous section). <br/>\nBoth of these values default to true (so validation is enabled as well as it will replace the values on the req).\n\n## Types of validation\n\n| Type | Format | Description |\n| ----- | ------ | ----- |\n| `array` | | This checks that each value inside the array corresponds to the type that was specified. It doesn't check that the array contains 'empty' values, even if the array parameter is required as spec doesn't have a way to say all values inside the array are required. <br/><br/> While the spec says `uniqueItems` marks the array to be treated like a set instead of an array (and not that this is invalid if it isn't unique), it does have the potential to lead to an unintentional and unintended loss of data, so this throws a validation error that what you are passing isn't unique over just allowing the non-unique data to be lost. As such, if all the items passed their validation, check for uniqueness. This only validates uniqueness after all the items in the array are validated. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `boolean` | | This only handles native boolean types or converting from `true` / `false` strings, as the concept is not uniform for other types (ie, if it's a number, should it be 0 = false and 1 = true or should any non-zero number be true). However, this only handles strings that are the string representation in JavaScript of their boolean counterparts, so True, TRUE, etc. will not validate. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `integer` | | This allows all forms of a number (so 2, 2.0, 2e0, 0x2). As a hex value COULD be the hex representation of an actual integer (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `integer` | `int32` | This allows all forms of a number (so 2, 2.0, 2e0, 0x2) and allows numbers between -9007199254740991 and +9007199254740991 (both inclusive). As a hex value COULD be the hex representation of an actual integer (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `integer` | `int64` | This allows all forms of a number (so 2, 2.0, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` (exclusive) and `Number.MAX_VALUE` (inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `file` | | This has no type validation, but it is valid. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `number` | | This allows all forms of a number (so 2, 2.0, 2.2, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` and `Number.MAX_VALUE` (both inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `number` | `float` | This allows all forms of a number (so 2, 2.0, 2.2, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` and `Number.MAX_VALUE` (both inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `number` | `double` | This allows all forms of a number (so 2, 2.0, 2.2, 2e0, 0x2) and allows numbers between `Number.MIN_VALUE` and `Number.MAX_VALUE` (both inclusive). As a hex value COULD be the hex representation of an actual number (and JavaScript parses it for us anyway), allow JavaScript to treat hex numbers in the way it wants to. Additionally, if a minimum or maximum is defined this ensures the value is greater than the minimum (if minimum defined) or less than the maximum (if maximum defined). <br/><br/> This does have issues with edge case validation (such as Number.MAX_VALUE + 1) as, per [IEEE-754 2008 §4.3.1 spec](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4610935), JavaScript does rounding during addition, so essentially, Number.MAX_VALUE + 1 will equal Number.MAX_VALUE not Number.Infinity. There isn't anything we can do about this as it is correct, per spec, but it isn't intuitive. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `object` | | This checks that the value is a valid Object by iterating through each property on the associated model and calling out to the respective validation method to validate that property. After validating the properties on this object's model, it will recursively look to see if any other models have this model in their subType array. If so, it will validate those properties as well. It will continue to do this until no more types are found in the subType array. <br/><br/>If the parameter is simply object (not a reference to a model), this will only validate that the type is an object and not check any properties of the object.<br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | | If an enum is defined this ensures that the value is inside the enum list (which is case-sensitive). <br/><br/>If a pattern is defined this also ensures that the value adheres to it.<br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | `byte` | This has no type validation, but it is valid. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | `date` | There is no definitive definition in the swagger spec as to what constitutes a valid date or date-time (more than likely due to the varied formats a date could have). Therefore, swagger-validation will accept a 'pattern' property on the Swagger Property/Parameter Objects, which is a moment.js format string, that specifies the explicit format expected for the date format. If no pattern property is detected, moment.ISO_8601 will be used by default. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n| `string` | `date-time` | There is no definitive definition in the swagger spec as to what constitutes a valid date or date-time (more than likely due to the varied formats a date could have). Therefore, swagger-validation will accept a 'pattern' property on the Swagger Property/Parameter Objects, which is a moment.js format string, that specifies the explicit format expected for the date format. If no pattern property is detected, moment.ISO_8601 will be used by default. <br/><br/> If \"nothing\" was passed into the validate function and it's required with no default value, then this will throw a parameter is required error.\n\n## Documentation\n\nFull documentation of how all code works in swagger-validation is available in both markdown and HTML format (using jsdoc).\nTo create it, run the default Gulp task (cli - gulp default).\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2014 Wonderlic, Inc. <SoftwareDevelopment@wonderlic.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
signalfx/swagger-validate: >
  # Validate Swagger Objects

  [![Build
  Status](https://travis-ci.org/signalfx/swagger-validate.svg?branch=master)](https://travis-ci.org/signalfx/swagger-validate)


  A detailed validation provider for
  [Swagger](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md)
  objects.


  Given a relevant Swagger spec, this tool will provide detailed information
  about any validation errors which can be

  caught automatically. This is useful for catching invalid requests to a server
  on the client-side before a call is

  ever issues. Currently, these objects can be validated according to their
  Swagger specification:

  *
  [Models](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#527-model-object)
  (supports inheritance)

  *
  [Operations](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#523-operation-object)

  * [Data
  types](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#433-data-type-fields)


  ## Basic Example

  ```javascript

  var catModel = {
      id: 'Cat',
      required: ['name'],
      properties: {
        name: { type: 'string' },
        age: { type: 'number' }
      }
  };


  var myCat = {
      name: 'Grumpy',
      age: 'blue'
  };


  var error = swaggerValidate.model(myCat, catModel);


  console.error(error.toString());

  // ValidationErrors: Cat is invalid:

  //   age is invalid: "blue" is not a number (got a string instead)

  ```


  ## Installation and Use

  For nodejs: `npm install swagger-validate` then use `var swaggerValidate =
  require('swagger-validate')` to include it in a script.


  For browsers: `bower install swagger-validate` or include the
  `./dist/swagger-validate.js` file as a script tag to put the swaggerValidate
  function in the global scope. You may also `require` it with browserify or
  with Requirejs instead of including it as a script tag.


  ## API


  ### var error = swaggerValidate.model(object, model[, models])

  Validate an object using a given model spec.


  #### Parameters

  * *object* - the instance to validate against the defined model

  * *model* - the model to use when validating the object

  * *models* - optional map of model names to models to be used when
  dereferencing linked models (such as $refs or inherited properties).


  #### Returns

  * *error* or *undefined* - if a validation error is found, a ValidationErrors
  object will be returned with the details of the error(s).


  ### swaggerValidate.errors.ValidationErrors

  The primary error object emitted by the validator with the following
  properties:

  * *name* - The name of the error (always 'ValidationErrors')

  * *message* - A human readable message of the error

  * *specName* - The name of the specification object used for the validation

  * *spec* - The specification used for the validation (such as a model or an
  operation object)

  * *value* - The object which failed the validation

  * *errors* - A list of ValidationError objects for each invalid field in the
  given object.


  ### swaggerValidate.errors.ValidationError

  This is the wrapper around individual validation errors. Each invalid field in
  a given object will have one ValidationError object within the
  ValidationErrors.errors list.


  * *name* - The name of the error (always 'ValidationError')

  * *message* - A human readable message of the error

  * *specName* - The name of the specification object used for the validation

  * *spec* - The specification used for the validation (such as a model property
  or an operation parameter)

  * *error* - A subtype of DataTypeValidationError object with specific error
  details.


  ### swaggerValidate.errors.DataValidationError

  This is a super class for the individual validation errors that can occur in
  properties. Here's a full list of the different types, all which are
  accessable via swaggerValidate.errors[*name of error*]:

  * *NotAStringError* - The value was expected to be a string but wasn't.

  * *NotABooleanError* - The value was expected to be a boolen but wasn't.

  * *NotAnArrayError* - The value was expected to be an array but wasn't.

  * *NotVoidError* - The value was expected to be void but wasn't.

  * *NotANumberError* - The value was expected to be a number but wasn't.

  * *NotAnIntegerError* - The value was a number but not an integer as expected.

  * *NumberTooLargeError* - The value was a number but over the maximum value
  allowed by the model.

  * *NumberTooSmallError* - The value was a number but under the minumum value
  allowed by the model.

  * *DuplicateInSetError* - The value is an array which has duplicates, which is
  not allowed by the model.

  * *ErrorsInArrayElementsError* - Errors occurred within the elements of an
  array. Depending on the type of an array these errors may be of
  ValidationErrors type or subtypes of DataValidationErrors.

  * *MissingValueError* - The value is required by the model but doesn't exist.


  ## Developing

  After installing [nodejs](http://nodejs.org) execute the following:


  ```shell

  git clone https://github.com/signalfx/swagger-validate.git

  cd swagger-validate

  npm install

  npm run dev

  ```

  The build engine will test and build everything, start a server hosting the
  `example` folder on [localhost:3000](http://localhost:3000), and watch for any
  changes and rebuild when nescessary.


  To generate minified files in `dist`:

  ```shell

  npm run dist

  ```
DarthFubuMVC/fubumvc: "# Building FubuMVC\r\n\r\nThe FubuMVC codebase still uses Rake for build automation, but as of September 2015, you don't **have** to use Rake to develop with FubuMVC if you don't want to. You **will need \r\nto have Node.js or Io.js and npm installed** in order to build the client side assets for FubuMVC's diagnostics package before working with the C# code.\r\n\r\n## With Rake\r\n\r\nAssuming you have Ruby 2.1+ installed on your computer, go to a command line and type...\r\n\r\n1. bundle install\r\n1. rake\r\n\r\n\r\n## Visual Studio.Net Only\r\n\r\nThere is a small command file called `build.cmd` that can be executed once to bring down nuget and npm dependencies and build the client side assets that FubuMVC \r\nneeds for its embedded. diagnostics. Run this command at least once before opening Visual Studio.Net.\r\n\r\nFrom there, open the solution file at `src/FubuMVC.sln` and go to town.\r\n\r\n\r\n# Working with Storyteller\r\n\r\n* `rake open_st` -- Opens the Storyteller test suite in the Storyteller client for interactive editing and execution\r\n* `rake storyteller` -- Runs all the Storyteller specifications\r\n\r\n# Working with Diagnostics\r\n\r\nOpen the diagnostics harness application to the browser with the command `rake diagnostics`. This command will start webpack in a new window against the client side\r\nattributes in the `javascript` folder in \"watched\" mode. This command also compiles and starts the `DiagnosticsHarness` application in a NOWIN server before opening a browser\r\nwindow to the newly launched application. The browser will auto-refresh whenever a new version of the webpack `bundle.js` file is saved. You will have to stop and restart\r\nthe FubuMVC application to see any changes to the server side.\r\n \r\n\r\n"
kenshoo/swagger-validator: >
  # Swagger Validator

  [![Build
  Status](https://travis-ci.org/kenshoo/swagger-validator.svg?branch=master)](https://travis-ci.org/kenshoo/swagger-validator)


  ## Overview

  Validates swagger.yaml file.

  Validation are done assuming JAX-RS resources and Jackson POJOs.


  The default validations include:

  - Resources validations:
    - The resource class exists (See x-javaClass)
    - The resource class annotated with @Path and that the value matches.
    - For each operation validate that:
      - Exists method in a resource annotated with the proper annotation (e.g. GET, POST, etc.)
      - Operation is tagged.
  - Definitions validations:
    -  The POJO exists (See x-javaClass)
    -  Property from definition matches a property in POJO (By default property in Swagger equals to field in POJO)
    -  POJO doesn't use forbidden types (e.g. using primitive types is forbidden)
    -  Warning is printed if unrecommended type is used.

  ## Validator Elements

  The Swagger Validator expects additional elements to be present in the
  swagger.yaml to perform the validations.

  #### x-javaClass

  **x-javaClass** defines the fully qualified name of the desired class. This is
  used to validate that the relevant class really exists in the classpath and
  it's a starting point for addition validations.


  ## Download

  The Swagger Validator is distributed using Maven Central.


  ### Maven Dependency

  ```

  <dependency>
    <groupId>com.kenshoo</groupId>
    <artifactId>swagger-validator</artifactId>
    <version>${swagger-validator-version}</version>
  </dependency>

  ```


  ## Running 

  The SwaggerValidator is a simple Java class. It must be run in the classpath
  containing all the resources and definitions. 


  #### Example

  ```

  SwaggerValidator swaggerValidator = new
  SwaggerValidator(getClass().getResourceAsStream("/swagger.yaml"));

  swaggerValidator.validateDefinitions();

  swaggerValidator.validateResources();

  ```

  See unit tests for more examples.


  #### Customization

  ```

  SwaggerValidatorConf conf = new SwaggerValidatorConf() {
      @Override
      public Set<Class<?>> getForbiddenClasses() {
          return Collections.emptySet();
      }
  };

  SwaggerValidator swaggerValidator = new
  SwaggerValidator(getClass().getResourceAsStream("/swagger.yaml"), conf);

  swaggerValidator.validateDefinitions(); // forbidden types won't be validated

  ```
nelmio/NelmioApiDocBundle: >
  NelmioApiDocBundle

  ==================


  [![Build

  Status](https://travis-ci.org/nelmio/NelmioApiDocBundle.svg?branch=master)](http://travis-ci.org/nelmio/NelmioApiDocBundle)

  [![Total
  Downloads](https://poser.pugx.org/nelmio/api-doc-bundle/downloads)](https://packagist.org/packages/nelmio/api-doc-bundle)

  [![Latest Stable

  Version](https://poser.pugx.org/nelmio/api-doc-bundle/v/stable)](https://packagist.org/packages/nelmio/api-doc-bundle)


  The **NelmioApiDocBundle** bundle allows you to generate a decent
  documentation

  for your APIs.


  ## Migrate from 2.x to 3.0


  [To migrate from 2.x to 3.0, follow our
  guide.](https://github.com/nelmio/NelmioApiDocBundle/blob/master/UPGRADE-3.0.md)


  ## Installation


  Open a command console, enter your project directory and execute the following
  command to download the latest version of this bundle:


  ```

  composer require nelmio/api-doc-bundle

  ```


  ## Documentation


  [Read the documentation on
  symfony.com](https://symfony.com/doc/current/bundles/NelmioApiDocBundle/index.html)


  ## Contributing


  See

  [CONTRIBUTING](https://github.com/nelmio/NelmioApiDocBundle/blob/master/CONTRIBUTING.md)

  file.


  ## Running the Tests


  Install the [Composer](http://getcomposer.org/) dependencies:

      git clone https://github.com/nelmio/NelmioApiDocBundle.git
      cd NelmioApiDocBundle
      composer update

  Then run the test suite:

      ./phpunit

  ## License


  This bundle is released under the MIT license.
astaxie/beego: >
  # Beego [![Build
  Status](https://travis-ci.org/astaxie/beego.svg?branch=master)](https://travis-ci.org/astaxie/beego)
  [![GoDoc](http://godoc.org/github.com/astaxie/beego?status.svg)](http://godoc.org/github.com/astaxie/beego)
  [![Foundation](https://img.shields.io/badge/Golang-Foundation-green.svg)](http://golangfoundation.org)
  [![Go Report
  Card](https://goreportcard.com/badge/github.com/astaxie/beego)](https://goreportcard.com/report/github.com/astaxie/beego)



  beego is used for rapid development of RESTful APIs, web apps and backend
  services in Go.

  It is inspired by Tornado, Sinatra and Flask. beego has some Go-specific
  features such as interfaces and struct embedding.

   Response time ranking: [web-frameworks](https://github.com/the-benchmarker/web-frameworks).

  ###### More info at [beego.me](http://beego.me).


  ## Quick Start


  #### Download and install

      go get github.com/astaxie/beego

  #### Create file `hello.go`

  ```go

  package main


  import "github.com/astaxie/beego"


  func main(){
      beego.Run()
  }

  ```

  #### Build and run

      go build hello.go
      ./hello

  #### Go to [http://localhost:8080](http://localhost:8080)


  Congratulations! You've just built your first **beego** app.


  ###### Please see [Documentation](http://beego.me/docs) for more.


  ## Features


  * RESTful support

  * MVC architecture

  * Modularity

  * Auto API documents

  * Annotation router

  * Namespace

  * Powerful development tools

  * Full stack for Web & API


  ## Documentation


  * [English](http://beego.me/docs/intro/)

  * [中文文档](http://beego.me/docs/intro/)

  * [Русский](http://beego.me/docs/intro/)


  ## Community


  * [http://beego.me/community](http://beego.me/community)

  * Welcome to join us in Slack:
  [https://beego.slack.com](https://beego.slack.com), you can get invited from
  [here](https://github.com/beego/beedoc/issues/232)


  ## License


  beego source code is licensed under the Apache Licence, Version 2.0

  (http://www.apache.org/licenses/LICENSE-2.0.html).
signalfx/swagger-ajax-client: >
  # Swagger Ajax Client


  Create XHR clients for [Swagger API
  Specifications](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md).


  Given a schema object, this tool returns an api object which can be used to
  interact with the API server

  described by the schema. The schema can easily be generated using 
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema)).


  # Usage

  To use, include one of these files in your application: 

  *
  *[swagger-ajax-client.js](https://raw.githubusercontent.com/signalfuse/swagger-ajax-client/master/dist/swagger-ajax-client.js)*

  *
  *[swagger-ajax-client.js.min](https://raw.githubusercontent.com/signalfuse/swagger-ajax-client/master/dist/swagger-ajax-client.min.js)*,
  a minified version ([source
  map](https://raw.githubusercontent.com/signalfuse/swagger-ajax-client/master/dist/swagger-ajax-client.min.js.map))


  You may also `bower install swagger-ajax-client` to install using bower. Once
  you've included the script, you can use the swaggerAjaxClient function to
  generate the api using a given schema object.


  Schemas can be generated using
  [fetch-swagger-schema](https://github.com/signalfuse/fetch-swagger-schema).



  ## Examples


  First, a simple example. Let's say you saved a schema json file, then loaded
  it

  into your app as the `schema` variable. Now you can call operations on the API

  by using swaggerAjaxClient:

  ```javascript

  // Assuming the variable schema exists

  var api = swaggerAjaxClient(schema);


  // for apiKey authorization use: api.auth('my-token')

  // for basicAuth use: api.auth('username', 'password')


  api.pet.getPetById(id).then(function(pet){
    console.log(pet);
  });

  ```



  Here's a more advanced case in which we're leveraging promises to implement a

  'getOrCreate' method, which doesn't actually exist within the api:

  ```javascript


  var api = swaggerAjaxClient(schema);


  function getOrCreate(id, name){
      return api.pet.getPetById(id).catch(function(response){
          // If pet doesn't exist, create a new one.
          if(response.status === 404){
              var pet = {id: id, name: name};
              return api.pet.addPet(pet).then(function(){
                  return pet;
              });
          }

          // Unknown error
          console.error(response.error.toString());
      });
  }


  getOrCreate(23, 'bob').then(function(pet){
      console.log('Got pet:', pet);
  }, function(error){
      console.error(error.toString());
  });

  ```


  ## API


  #### `api = swaggerAjaxClient(schema)`

  * *schemaObject* - A json object describing the schema (generated by
  [fetch-swagger-schema](https://github.com/signalfx/fetch-swagger-schema)).

  * *api* - An object which can be used as the api for the given schema. The
  first-level objects are the resources within the schema and the second-level
  functions are the operations which can be performed on those resources.


  #### `api.<resource>`

  A map of all the resources as defined in the schema to their operation handler
  (e.g. `api.pet`).


  #### `responsePromise = api.<resource>.<operationHandler>(data, options)`

  This is the actual operation function to initiate a request to the API
  endpoint (e.g., `api.pet.getPetById`).


  The operation handler takes two parameters:

  * *data* - A map of the operation data parameters. If the operation only has
  one parameter, the value may be used directly (i.e. `api.pet.getPetById(1,
  callback)` is the same as `api.pet.getPetById({petId: 1}, callback)`).

  * *options* - A map of the options to use when calling the operation (see
  below for full list).


  The response promise is an ES6 promise. A HTTP response in the 200s range will
  result

  in a resolved promise and anything else will result in a rejected promises. A
  resolved

  promise value is whatever the server responded with (JSON is automatically
  parsed).  A

  rejected promise value is a map with a `status`, `data`, and `error`
  properties, where

  the status is the HTTP status, data is the response body from the server, and
  error

  is a JavaScript error (if any occurred).


  Here's an example:

  ```javascript

  // use of .then(successHandler, failHandler)

  responsePromise.then(function(response){
      console.log('successful response:', response);
  }, function(response){
      console.log('request failed due to error:', response.error);
  });

  ```


  ## Developing

  After installing [nodejs](http://nodejs.org) execute the following:


  ```shell

  git clone https://github.com/signalfx/swagger-ajax-client.git

  cd swagger-ajax-client

  npm install

  npm run dev

  ```

  The build engine will test and build everything, start a server hosting the
  `example` folder on [localhost:3000](http://localhost:3000), and watch for any
  changes and rebuild when nescessary.


  To generate minified files in `dist`:

  ```shell

  npm run dist

  ```
swagger-api/swagger-ui: "# <img src=\"https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SWU-logo-clr.png\" height=\"80\">\n\n[![NPM version](https://badge.fury.io/js/swagger-ui.svg)](http://badge.fury.io/js/swagger-ui)\n\n**\U0001F449\U0001F3FC Want to score an easy open-source contribution?** Check out our [Good first issue](https://github.com/swagger-api/swagger-ui/issues?q=is%3Aissue+is%3Aopen+label%3A%22Good+first+issue%22) label.\n\n**\U0001F570️ Looking for the older version of Swagger UI?** Refer to the [*2.x* branch](https://github.com/swagger-api/swagger-ui/tree/2.x).\n\n\nThis repository publishes to three different NPM modules:\n\n* [swagger-ui](https://www.npmjs.com/package/swagger-ui) is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc).\n* [swagger-ui-dist](https://www.npmjs.com/package/swagger-ui-dist) is a dependency-free module that includes everything you need to serve Swagger UI in a server-side project, or a single-page application that can't resolve npm module dependencies.\n* [swagger-ui-react](https://www.npmjs.com/package/swagger-ui-react) is Swagger UI packaged as a React component for use in React applications.\n\nWe strongly suggest that you use `swagger-ui` instead of `swagger-ui-dist` if you're building a single-page application, since `swagger-ui-dist` is significantly larger.\n\n\n## Compatibility\nThe OpenAPI Specification has undergone 5 revisions since initial creation in 2010.  Compatibility between Swagger UI and the OpenAPI Specification is as follows:\n\nSwagger UI Version | Release Date | OpenAPI Spec compatibility | Notes\n------------------ | ------------ | -------------------------- | -----\n3.18.3 | 2018-08-03 | 2.0, 3.0 | [tag v3.18.3](https://github.com/swagger-api/swagger-ui/tree/v3.18.3)\n3.0.21 | 2017-07-26 | 2.0 | [tag v3.0.21](https://github.com/swagger-api/swagger-ui/tree/v3.0.21)\n2.2.10 | 2017-01-04 | 1.1, 1.2, 2.0 | [tag v2.2.10](https://github.com/swagger-api/swagger-ui/tree/v2.2.10)\n2.1.5 | 2016-07-20 | 1.1, 1.2, 2.0 | [tag v2.1.5](https://github.com/swagger-api/swagger-ui/tree/v2.1.5)\n2.0.24 | 2014-09-12 | 1.1, 1.2 | [tag v2.0.24](https://github.com/swagger-api/swagger-ui/tree/v2.0.24)\n1.0.13 | 2013-03-08 | 1.1, 1.2 | [tag v1.0.13](https://github.com/swagger-api/swagger-ui/tree/v1.0.13)\n1.0.1 | 2011-10-11 | 1.0, 1.1 | [tag v1.0.1](https://github.com/swagger-api/swagger-ui/tree/v1.0.1)\n\n## Documentation\n\n#### Usage\n- [Installation](docs/usage/installation.md)\n- [Configuration](docs/usage/configuration.md)\n- [CORS](docs/usage/cors.md)\n- [OAuth2](docs/usage/oauth2.md)\n- [Deep Linking](docs/usage/deep-linking.md)\n- [Limitations](docs/usage/limitations.md)\n- [Version detection](docs/usage/version-detection.md)\n\n#### Customization\n- [Overview](docs/customization/overview.md)\n- [Plugin API](docs/customization/plugin-api.md)\n- [Custom layout](docs/customization/custom-layout.md)\n\n#### Development\n- [Setting up](docs/development/setting-up.md)\n- [Scripts](docs/development/scripts.md)\n\n##### Integration Tests\n\nYou will need JDK of version 7 or higher as instructed here\nhttp://nightwatchjs.org/gettingstarted#selenium-server-setup\n\nIntegration tests can be run locally with `npm run e2e` - be sure you aren't running a dev server when testing!\n\n### Browser support\nSwagger UI works in the latest versions of Chrome, Safari, Firefox, Edge and IE11.\n\n### Known Issues\n\nTo help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.\n\n- Only part of the parameters previously supported are available.\n- The JSON Form Editor is not implemented.\n- Support for `collectionFormat` is partial.\n- l10n (translations) is not implemented.\n- Relative path support for external files is not implemented.\n\n## Security contact\n\nPlease disclose any security-related issues or vulnerabilities by emailing [security@swagger.io](mailto:security@swagger.io), instead of using the public issue tracker.\n\n## License\n\nCopyright 2019 SmartBear Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n"
wkennedy/swagger4spring-web: >
  swagger4spring-web

  ==================


  Please note: This project is no longer actively supported. 


  Supports Swagger 1.3 as of version 0.3.0!


  This project aims at providing Swagger support to your Spring-Web based
  application.  It will attempt to document your API based on existing
  Spring-Web annotations if no Swagger annotations exist.  If Swagger
  annotations do exist, it will utilize those in conjunction with the Spring-Web
  annotations.


  ##How-To


  To include swagger4spring-web in your project, you need to include the jar in
  your project.  If you use Maven, please include the following dependency:

          <dependency>
              <groupId>com.knappsack</groupId>
              <artifactId>swagger4spring-web</artifactId>
              <version>0.3.5</version>
          </dependency>

  Java 8+ users, please compile your source using the javac "-parameters"
  argument.  This ensures that your parameter names display correctly in your
  API documentation.


  In order to use swagger4spring-web in your project, you need to declare an
  ApiDocumentationController bean in your

  servlet context.  For example:

          <beans:bean id="documentationController" class="com.knappsack.swagger4springweb.controller.ApiDocumentationController"
                  p:basePath="http://localhost:8080/yourapp"
                  p:baseControllerPackage="com.knappsack.swagger4springweb.controllers.api"
                  p:baseModelPackage="com.knappsack.swagger4springweb.models"
                  p:apiVersion="v1" />

  * basePath - optional - the base URL of your web application, for example
  http://localhost/swagger4spring-web-example

  * baseControllerPackage - optional - this is the package you want
  swagger4spring-web to scan to look for classes annotated with @Controller.  If
  this is not set, all your packages are scanned.

  * baseModelPackage - optional - this is the package you want to scan if all
  your model objects are in a specific directory.  These classes will be added
  to your documentation schema.  If no package is specified only certain return
  types and parameters are added to the documentation schema.

  * additionalControllerPackage - optional - if you have more packages with
  controllers outside of the baseControllerPackage, specify them here.

  * additionalModelPackage - optional - if you have packages outside of the
  baseModelPackage that you want to scan for models, specify them here.

  * apiVersion - required - this is the version of your API

  * apiInfo - optional - if you have information you wish to provide, such as
  license and terms of service, set this.


  If you are using version 0.3.0 or above, you'll also need to add the following
  to the appropriate Spring context file in your application:

      <mvc:annotation-driven>
          <mvc:message-converters>
              <beans:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                  <beans:property name="objectMapper">
                      <beans:bean class="com.knappsack.swagger4springweb.util.ScalaObjectMapper"/>
                  </beans:property>
              </beans:bean>
          </mvc:message-converters>
      </mvc:annotation-driven>

  Once the ApiDocumentationController is wired, you may call go to your base
  path + /api/resourceList (ex:
  http://localhost/swagger4spring-web-example/api/resourceList) in order to
  retrieve an inventory of your APIs.  For an example JSP see this
  [page](https://github.com/wkennedy/swagger4spring-web-example/blob/master/src/main/webapp/WEB-INF/views/documentation.jsp).


  #####Alternative Implementation


  If you wish to use a different request mapping then you may extend create a
  new controller that extends ApiDocumentationController.  For example if you
  want the URL to be /documentation/resourceList instead of /api/resourceList
  you can create a controller like this:

      @Controller
      @RequestMapping(value = "/documentation")
      public class ExampleDocumentationController extends ApiDocumentationController {

          public ExampleDocumentationController() {
              setBaseControllerPackage("com.knappsack.swagger4springweb.controllers.api");
              setBaseModelPackage("com.knappsack.swagger4springweb.models");
              setApiVersion("v1");
          }

         @RequestMapping(value = "/", method = RequestMethod.GET)
         public String documentation() {
              return "documentation";
          }
      }

  In this case you don't have to create the controller bean in your servlet
  context if you are using component scanning and your new controller is set to
  be picked up in the scan.


  To see a working example, please take a look at
  [swagger4spring-web-example](https://github.com/wkennedy/swagger4spring-web-example/
  "swagger4spring-web-example").


  ##Annotation Support

  The following Spring-Web annotations are supported:


  * @Controller

  * @RestController

  * @RequestMapping

  * @ResponseBody

  * @RequestBody

  * @PathVariable

  * @RequestParam

  * @ApiExclude - This annotation is unique to swagger4spring-web.  It allows
  you to specify a controller or method for which you do not want to generate
  Swagger documentation.


  The following Swagger annotations are supported:


  * @Api

  * @ApiResponse

  * @ApiResponses

  * @ApiOperation

  * @ApiParam

  * @ApiModel

  * @ApiModelProperty


  ##External Links

  [Swagger Home](http://developers.helloreverb.com/swagger/ "Swagger Home")


  [Swagger Wiki](https://github.com/wordnik/swagger-core/wiki "Swagger Wiki")


  ##Change Log

  https://github.com/wkennedy/swagger4spring-web/wiki/Change-Log


  ##License

  Copyright (c) 2014 Will Kennedy


  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
sun-opsys/api-doc: >
  [![Build
  Status](https://travis-ci.org/sun-opsys/Doppelauge.svg?branch=travis%2Fintegration)](https://travis-ci.org/sun-opsys/Doppelauge)
  [![](https://jitpack.io/v/sun-opsys/Doppelauge.svg)](https://jitpack.io/#sun-opsys/Doppelauge)



  Doppelauge

  ==========


  Doppelauge is a set of six libraries for the Play Framework.

  All code should be thoroughly tested.


  * Json library: [J](JSON.md#j)

  * Json pattern matcher: [JsonMatcher](JSON.md#jsonmatcher)

  * Json value changer: [JsonChanger](JSON.md#jsonchanger)

  * Json value diff: [JsonDiff](JSON.md#jsondiff)

  * Swagger 2.0 Api doc generator: [API_DOC.md](API_DOC.md)

  * Test by annotation test system:
  [TEST_BY_ANNOTATION.md](TEST_BY_ANNOTATION.md)




  ScalaDoc

  ========

  http://sun-opsys.github.io/Doppelauge/


  Play 2.5.x

  =====================

  Branch ``upgrading-deps has support`` for ``2.5.x``, but you need to inject
  the base classes used in ApiDoc using the same constructs as given in the
  specs, i.e. InjectHelper trait.


  This branch is only tested with static routers. Dependency injected
  Controllers are not tested, and probably will not work . Look at the source
  code and the methods marked @deprecated. There are also functions using the
  injected Environment. You need to use these, and create a new Api that exposes
  them publically. PRs are welcome.


  Play 2.3 vs. Play 2.4

  =====================


  * The master branch uses Play 2.4.

  * Play 2.3 is supported in the play_2.3 branch, but is less updated.




  Installation

  ============

  Add the following lines to build.sbt:

    ```
    resolvers += "jitpack" at "https://jitpack.io"
    libraryDependencies += "com.github.sun-opsys" % "doppelauge" % "1.3.5"
    ```

    More info here: https://jitpack.io/#sun-opsys/doppelauge (gradle/maven/etc.)


  Credits

  =======

  The name "Doppelauge" was suggested by Hans Wilmers.



  License

  ==========


  Copyright 2013-2015 SUN/OPSYS at University of Oslo.


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at
  [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.
abelsilva/swaggerwcf: >
  <h1 align="left">

  SwaggerWcf&nbsp;<a href="https://www.nuget.org/packages/SwaggerWcf">
          <img src="http://img.shields.io/nuget/v/SwaggerWcf.svg?style=flat" alt="nuget status">
      </a>
  </h1>


  Generates [Swagger](http://swagger.io/) (2.0) for WCF services and also
  provides [swagger-ui](https://github.com/swagger-api/swagger-ui).


  With an API described in Swagger you can use multiple Swagger tools like
  client generators, see
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more
  details.


  This project has started as a fork from
  [superstator/Swaggeratr](https://github.com/superstator/Swaggeratr) to
  implement version 2.0 of Swagger.


  ## Getting Started


  ### Step 1: Install SwaggerWcf package


  ```


  Install-Package SwaggerWcf


  ```


  ### Step 2: Configure WCF

  #### ASP.NET


  Add the route in the `Application_Start` method inside `Global.asax`


  ```csharp


  protected void Application_Start(object sender, EventArgs e)

  {
      // [.......]
      
      RouteTable.Routes.Add(new ServiceRoute("api-docs", new WebServiceHostFactory(), typeof(SwaggerWcfEndpoint)));
  }


  ```


  Note: You might need to add a reference to `System.ServiceModel.Activation`


  Edit `Web.config` and add the following (if it doesn't exist yet) inside the
  `system.serviceModel` block


  ```xml


  <serviceHostingEnvironment aspNetCompatibilityEnabled="true"
  multipleSiteBindingsEnabled="true"/>


  ```


  Edit again `Web.config` and add the following (if it doesn't exist yet) inside
  the `system.webServer` block


  ```xml


  <modules runAllManagedModulesForAllRequests="true"/>


  ```

  #### Self Hosted

  Add an endpoint to your App.config file.

  ```xml

  <services>
    <service name="SwaggerWcf.SwaggerWcfEndpoint">
      <endpoint address="http://localhost/docs" binding="webHttpBinding" contract="SwaggerWcf.ISwaggerWcfEndpoint" />
    </service>
  </services>

  ```

  Create a WebServiceHost

  ```csharp

  var swaggerHost = new WebServiceHost(typeof(SwaggerWcfEndpoint));

  swaggerHost.Open();

  ```


  ### Step 3: Optionaly configure WCF response auto types


  Add the following to your config file.

  This will allow the WCF service to accept requests and send replies based on
  the `Content-Type` headers.


  ```xml


  <system.serviceModel>
    <behaviors>
      <endpointBehaviors>
        <behavior>
          <webHttp automaticFormatSelectionEnabled="true" />
        </behavior>
      </endpointBehaviors>
      <!-- [.......] -->
    </behaviors>
  </system.serviceModel>
    
  ```


  ### Step 4: Configure WCF services general information

  #### Configure via config file

  Add the following to your config file and change the values accordingly


  ```xml

  <configSections>
    <section name="swaggerwcf" type="SwaggerWcf.Configuration.SwaggerWcfSection, SwaggerWcf" />
  </configSections>


  <swaggerwcf>
    <tags>
      <tag name="LowPerformance" visible="false" />
    </tags>
    <settings>
      <setting name="InfoDescription" value="Sample Service to test SwaggerWCF" />
      <setting name="InfoVersion" value="0.0.1" />
      <setting name="InfoTermsOfService" value="Terms of Service" />
      <setting name="InfoTitle" value="SampleService" />
      <setting name="InfoContactName" value="Abel Silva" />
      <setting name="InfoContactUrl" value="http://github.com/abelsilva" />
      <setting name="InfoContactEmail" value="no@e.mail" />
      <setting name="InfoLicenseUrl" value="https://github.com/abelsilva/SwaggerWCF/blob/master/LICENSE" />
      <setting name="InfoLicenseName" value="Apache License" />
    </settings>
  </swaggerwcf>

  ```


  Notes:

  * make sure the `configSections` block is the first child of `configuration`

  * `tags` will be described further down


  #### Configure via code

  Configure the base properties via code. New: You can add security settings to
  your api (see also the new Security-Methodattribute)


  ```csharp

  var info = new Info

  {

  Description = "Sample Service to test SwaggerWCF",

  Version = "0.0.1"

  // etc

  };


  var security = new SecurityDefinitions

  {
    {
      "api-gateway", new SecurityAuthorization
      {
        Type = "oauth2",
        Name = "api-gateway",
        Description = "Forces authentication with credentials via an api gateway",
        Flow = "password",
        Scopes = new Dictionary<string, string="">
        {
            { "author", "use author scope"},
            { "admin", "use admin scope"},
        },
        AuthorizationUrl = "http://yourapi.net/oauth/token"
      }
    }
  };


  SwaggerWcfEndpoint.Configure(info, security);

  ```


  ### Step 5: Decorate WCF services interfaces


  For each method, configure the `WebInvoke` or `WebGet` attribute, and add a
  `SwaggerWcfPath` attribute.


  ```csharp


  [ServiceContract]

  public interface IStore

  {
      [SwaggerWcfPath("Create book", "Create a book on the store")]
      [WebInvoke(UriTemplate = "/books",
          BodyStyle = WebMessageBodyStyle.Bare,
          Method = "POST",
          RequestFormat = WebMessageFormat.Json,
          ResponseFormat = WebMessageFormat.Json)]
      [OperationContract]
      Book CreateBook(Book value);
      
      // [.......]
  }


  ```


  ### Step 6: Decorate WCF services class


  Add the `SwaggerWcf` and `AspNetCompatibilityRequirements` attributes to the
  class providing the base path for the service (the same as used in step 2).

  Optinally, for each method, add the `SwaggerWcfTag` to categorize the method
  and the `SwaggerWcfResponse` for each possible response from the service.


  ```csharp


  [AspNetCompatibilityRequirements(RequirementsMode =
  AspNetCompatibilityRequirementsMode.Allowed)]

  [SwaggerWcf("/v1/rest")]

  public class BookStore : IStore

  {
      [SwaggerWcfTag("Books")]
      [SwaggerWcfResponse(HttpStatusCode.Created, "Book created, value in the response body with id updated")]
      [SwaggerWcfResponse(HttpStatusCode.BadRequest, "Bad request", true)]
      [SwaggerWcfResponse(HttpStatusCode.InternalServerError,
          "Internal error (can be forced using ERROR_500 as book title)", true)]
      public Book CreateBook(Book value)
      {
          // [.......]
      }
      
      // [.......]
  }


  ```


  ### Step 7: Decorate data types used in WCF services


  ```csharp


  [DataContract(Name = "book")]

  [Description("Book with title, first publish date, author and language")]

  [SwaggerWcfDefinition(ExternalDocsUrl = "http://en.wikipedia.org/wiki/Book",
  ExternalDocsDescription = "Description of a book")]

  public class Book

  {
      [DataMember(Name = "id")]
      [Description("Book ID")]
      public string Id { get; set; }

      // [.......]
  }


  ```


  Note: make sure you add at least the `DataContract` and `DataMember`
  attributes in classes and properties


  ## Attributes


  | Attribute                | Used in                                    |
  Description                            |
  Options                                                                                            
  |

  | ------------------------ |------------------------------------------- |
  -------------------------------------- |
  ---------------------------------------------------------------------------------------------------
  |

  | `SwaggerWcf`             | `Class`, `Interface`                       |
  Enable parsing WCF service             |
  `ServicePath`                                                                                      
  |

  | `SwaggerWcfHidden`       | `Class`, `Method`, `Property`, `Parameter` | Hide
  element from Swagger             
  |                                                                                                    
  |

  | `SwaggerWcfTag`          | `Class`, `Method`, `Property`, `Parameter` | Add
  a tag to an element                | `TagName`,
  `HideFromSpec`                                                                          
  |

  | `SwaggerWcfHeader`       | `Method`                                   |
  Configure method HTTP headers          | `Name`, `Required`, `Description`,
  `DefaultValue`                                                   |

  | `SwaggerWcfPath`         | `Method`                                   |
  Configure a method in Swagger          | `Summary`, `Description`,
  `OperationId`, `ExternalDocsDescription`, `ExternalDocsUrl`, `Deprecated` |

  | `SwaggerWcfParameter`    | `Parameter`                                |
  Configure method parameters            | `Required`, `Description`,
  `ParameterType`                                                          |

  | `SwaggerWcfProperty`     | `Property`                                 |
  Configure property parameters          | `Required`, `Description`, `Minimum`,
  `Maximum`, `Default`, ...                                     |

  | `SwaggerWcfResponse`     | `Method`                                   |
  Configure method return value          | `Code`, `Description`,
  `EmptyResponseOverride`, `Headers`                                           |

  | `SwaggerWcfDefinition`   | `Class`                                    |
  Configure a data type                  | `ExternalDocsDescription`,
  `ExternalDocsUrl`                                                        |

  | `SwaggerWcfReturnType`   | `Method`                                   |
  Override method return type            |
  `ReturnType`                                                                                       
  |

  | `SwaggerWcfContentTypes` | `Method`                                   |
  Override consume/produce content-types | `ConsumeTypes`,
  `ProduceTypes`                                                                     
  |

  | `SwaggerWcfSecurity`     | `Method`                                   | Add
  security background to this method | `SecurityDefinitionName`, `params
  Scopes`                                                           |



  ## Tags


  Tags are used to create categories in Swagger UI.


  In SwaggerWcf they can also be used to hide or show elements from the Swagger
  output using the configuration file.


  Using the configuration from step 4, any elements with the tag
  `LowPerformance` will be hidden from Swagger.


  When a `SwaggerWcfTag` is added to an element, it may be configured with
  `HideFromSpec`.

  This will prevent this tag to be displayed in the Swagger output.


  When combined with `SwaggerWcfHidden`, if the tag has the value `visible` as
  `true` in `web.config` file, the element will be visible


  ## Query Parameter


  To specify query parameters to a function you may use the following syntax


  ```csharp

  [WebGet(UriTemplate = "/books?filter={filter}", BodyStyle =
  WebMessageBodyStyle.Bare)]

  Book[] ReadBooks(string filter = null);

  ```


  ## Optional Parameters


  To specify a paramter as optional for swagger-ui provide a default value for
  the parameter on the interface.

  ```csharp

  public string Foo(string bar = null);

  ```


  ## Optional Properties


  To mark a property as optional or required, use the `IsRequired` parameter on
  the `DataMember` attribute.



  ## TODO


  * Add some options to configuration in `Web.config`

  * Tests


  ## How to Improve It


  Fork this project
  [abelsilva/swaggerwcf](https://github.com/abelsilva/swaggerwcf) and submit
  pull requests.
fleekjs/fleek-parser: >
  # Fleek Parser - [DEPRECATED]


  [![Build
  Status](https://travis-ci.org/fleekjs/fleek-parser.svg)](https://travis-ci.org/fleekjs/fleek-parser)
  [![npm](https://img.shields.io/npm/l/express.svg)](https://github.com/fleekjs/fleek-parser/blob/master/LICENSE) 
  [![Dependencies](https://img.shields.io/david/fleekjs/fleek-parser.svg)](https://david-dm.org/fleekjs/fleek-parser)
  [![Join the chat at
  https://gitter.im/fleekjs/fleek-parser](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/fleekjs/fleek-parser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  Parser module that parses [swagger documentation](http://swagger.io/) json
  into a single fully dereferenced object. Acts as the linch pin to the
  [Fleekjs](https://github.com/fleekjs) environment of micro-utilities.


  `$ npm install fleek-parser`


  Beyond basic JSON parse:
    - Render all `$ref` within the JSON
    - Render all `$ref` referring to a separate file - **TODO**
    - Merge `allOf` objects
    - provide various utilities to access the Swagger document in a non-standard way

  ## Key


  - [Usage](#usage)
    - [Basic](#basic)
  - [Utilities](#utilities)

  - [Reference Material](#reference-material)
    - [Swagger](#swagger)
  - [Authors](#authors)


  ## Usage


  ### Basic



  _app.js_

  ```javascript

  var parser = require('fleek-parser');


  // parse stringified JSON as json object

  var swaggerFile = fs.readFileSync('./path/to/swagger.json')

  var swagger     = parser.parse(swaggerFile);


  // OR


  // parse JSON file from path

  var swagger = parser.parse("./path/to/swagger.json");

  ```


  _swagger.json_

  ```JSON

  {
    "swagger": "2.0",
    "info": {
      "version": "2.0.0",
      "title": "Swagger Petstore",
      "contact": {
        "name": "Swagger API Team",
        "url": "http://swagger.io"
      }
    },
    "host": "petstore.swagger.io",
    "basePath": "/api",
    "schemes": [
      "http"
    ],
    "paths": {
      "/pets": {
        "get": {
          "tags": [ "Pet Operations" ],
          "summary": "finds pets in the system",
          "responses": {
            "200": {
              "description": "pet response",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Pet"
                }
              }
            }
          }
        }
      }
    },
    "definitions": {
      "Pet": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    }
  }

  ```


  #### Dereference example


  ```javascript

  console.log(swagger.paths['/pets'].get.responses['200'].schema.items)

  // {

  //   "type": "object",

  //   "required": [

  //     "id"

  //   ],

  //   "properties": {

  //     "id": {

  //       "type": "integer",

  //       "format": "int64"

  //     }

  //   }

  // }

  ```


  ## Utilities


  Additional properties are attached to the result to simplify usage


  ```javascript

  var parser  = require('fleek-parser');

  var swagger = parser.parse('./swager.json');


  console.log(swagger.controllers);

  console.log(swagger.routeValidationMap);

  console.log(swagger.sanitizedRoutes);

  ```



  ## Reference Material


  #### Swagger


  - [Home](http://swagger.io/)

  - [Editor Demo](http://editor.swagger.io/)

  -
  [Documentation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)


  #### By the authors


  - [Hart Engineering](http://engineering.hart.com/)


  ## Authors


  - [John Hofrichter](https://github.com/johnhof)

  - [Lan Nguyen](https://github.com/lan-nguyen91)


  _Built and maintained with [<img width="15px"
  src="http://hart.com/wp-content/themes/hart/img/hart_logo.svg">](http://hart.com/)
  by the [Hart](http://hart.com/) team._
pipermerriam/flex: >
  # FLEX


  [![Build
  Status](https://badgen.net/travis/pipermerriam/flex)](https://travis-ci.org/pipermerriam/flex)

  [![Documentation
  Status](https://readthedocs.org/projects/flex-swagger/badge/?version=latest)](https://readthedocs.org/projects/flex-swagger/?badge=latest)

  [![PyPi
  version](https://badgen.net/pypi/v/flex)](https://pypi.org/project/flex/)

  [![PyPi
  downloads](https://img.shields.io/pypi/dm/flex.svg)](https://pypi.python.org/pypi/flex)
     

  Validation tooling for [Swagger
  2.0](https://github.com/wordnik/swagger-spec/blob/master/versions/2.0.md)
  specifications.



  [Documentation on ReadTheDocs](http://flex-swagger.readthedocs.org/en/latest/)


  ## Features


  * Validate swagger schemas.

  * JSON Schema Validation

  * Validation of request/response objects against schema.

  * Command Line interface.



  # CLI Name Change


  Starting in version 5.0.0 the CLI interface has been changed to `swagger-flex`

  due to a collision with the Apache Flex project.
yahehe/Nancy.Swagger: >
  # Nancy.Swagger [![Build
  status](https://ci.appveyor.com/api/projects/status/jm2q8t8y4u18n03r)](https://ci.appveyor.com/project/yahehe/nancy-swagger)


  Nancy plugin for generated API documentation in Swagger format.


  The Swagger specification (v2.0) can be found
  [here](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).


  ### Documentation


  Documentation for Nancy.Swagger can be found in the [wiki
  pages](https://github.com/yahehe/Nancy.Swagger/wiki)


  ### NuGet Packages


  Versions 2.2.0+ of this code uses Nancy v2 and is designed for .NET 4.5.2 and
  .NET Standard 1.6.


  Version 2.1.1 is designed for Nancy v1.4.3 on .Net 4.0+, and creates a Swagger
  2.0 document.


  Version 0.* is designed for Nancy v1.4.3, but creates a Swagger 1.2 document.
   - If for some reason you need to make a change against this version of Nancy.Swagger, you can checkout the 1.4.3-stable branch.

  The code in this repository contains the code for the following NuGet
  packages:
   - https://www.nuget.org/packages/Swagger.ObjectModel
   - https://www.nuget.org/packages/Nancy.Swagger
   - https://www.nuget.org/packages/Nancy.Swagger.Annotations
   
  ### How to Contribute


  Simply fork/clone this repository and start making whatever improvements you
  want! We'll try to make sure there are 'newbie' tickets available for those
  looking to start contributing.


  ### CI NuGet Feed


  The [CI NuGet feed](https://www.myget.org/gallery/nancy-swagger) can be found
  at https://www.myget.org/F/nancy-swagger/
penx/openapi-mock: >
  # OpenAPI Mock


  CLI utility to start a mock server based upon a Swagger/OpenAPI JSON or YAML
  spec file.


  Uses [swagger-node-runner](https://github.com/theganyo/swagger-node-runner)
  and [sway](https://github.com/apigee-127/sway).


  ## Install


  `npm install -g openapi-mock`



  ## Usage


  ```

  Usage: openapi-mock [options] <spec>



  Options:

    -V, --version        output the version number
    -m, --mock <dir>     path to mock directory
    -c, --config <file>  path to config file
    -p, --port <n>       port to start the mock server on
    -h, --help           output usage information
  ```
apigee/undefined: >-
  {"message":"Not
  Found","documentation_url":"https://developer.github.com/v3/repos/contents/#get-the-readme"}
xerions/phoenix_swagger: >-
  # PhoenixSwagger [![Build
  Status](https://travis-ci.org/xerions/phoenix_swagger.svg?branch=master)](https://travis-ci.org/xerions/phoenix_swagger)


  `PhoenixSwagger` is the library that provides [swagger](http://swagger.io/)
  integration

  to the [phoenix](http://www.phoenixframework.org/) web framework.

   - Generate a swagger api specification from phoenix router and controllers
   - Serve [swagger-ui](https://swagger.io/swagger-ui/)
   - Validate requests against parameter schemas
   - Validate responses against schemas in tests

  # Installation


  Follow the [getting started
  guide](https://hexdocs.pm/phoenix_swagger/getting-started.html) to install and
  configure `PhoenixSwagger`.


  # Guides


  See the [full documentation on hexdocs.pm](https://hexdocs.pm/phoenix_swagger)
  or browse the [docs](./docs) directory.


  # Contributing


  Issues and pull requests welcome. You'll also find help on the
  [#phoenix_swagger](https://elixir-lang.slack.com/messages/phoenix_swagger)
  channel on the [elixir-lang slack](https://elixir-lang.slack.com).


  # License


  [Mozilla Public License 2.0](./LICENSE)
apiaryio/fury-adapter-swagger: >
  # Fury Swagger 2.0 Adapter


  [![Greenkeeper
  badge](https://badges.greenkeeper.io/apiaryio/fury-adapter-swagger.svg)](https://greenkeeper.io/)


  [![Build
  Status](https://img.shields.io/travis/apiaryio/fury-adapter-swagger.svg)](https://travis-ci.org/apiaryio/fury-adapter-swagger)

  [![Test
  Coverage](https://img.shields.io/codeclimate/coverage/github/apiaryio/fury-adapter-swagger.svg)](https://codeclimate.com/github/apiaryio/fury-adapter-swagger/coverage)

  [![NPM
  version](https://img.shields.io/npm/v/fury-adapter-swagger.svg)](https://www.npmjs.org/package/fury-adapter-swagger)

  [![License](https://img.shields.io/npm/l/fury-adapter-swagger.svg)](https://www.npmjs.org/package/fury-adapter-swagger)


  This adapter provides support for parsing [Swagger 2.0](http://swagger.io/) in
  [Fury.js](https://github.com/apiaryio/fury.js). It does not yet provide a
  serializer.


  Try the [Fury adapter in your
  browser](https://tonicdev.com/npm/fury-adapter-swagger) to convert Swagger 2.0
  documents into Refract elements.


  ## Install


  ```sh

  npm install fury-adapter-swagger

  ```


  ## Usage


  ```js

  import fury from 'fury';

  import swaggerAdapter from 'fury-adapter-swagger';


  fury.use(swaggerAdapter);


  fury.parse({source: '... your Swagger 2.0 document ...'}, (err, result) => {
    if (err) {
      console.log(err);
      return;
    }

    // The returned `result` is a Minim parse result element.
    console.log(result.api.title);
  });

  ```


  ### Parser Codes


  The following codes are used by the parser when creating warning and error
  annotations.


  Warnings:


  Code | Description

  ---: | -----------
     2 | Source maps are unavailable due either to the input format or an issue parsing the input.
     3 | Data is being lost in the conversion.

  Errors:


  Code | Description

  ---: | -----------
     1 | Error parsing input (e.g. malformed YAML).
     4 | Swagger validation error.
     5 | Swagger to Refract converter error (JS exception).

  ### Swagger Vendor Extensions


  Some Swagger Vendor extensions found in source Swagger documents are converted

  into the output API Element as extension elements.


  The following locations of vendor extensions are supported:


  - within the info object

  - within the paths object

  - within the path-item object

  - within the operation object

  - within the responses object

  - within the security-scheme object


  These vendor extensions will be available as extensions using the relation

  [`https://help.apiary.io/profiles/api-elements/vendor-extensions/`](https://help.apiary.io/profiles/api-elements/vendor-extensions/).
fleekjs/fleek-response: |
  # Fleek Response - [DEPRECATED]

  Response module that must be used with fleek router or fleek web socket.

  Quick reference:
  - Best used with the [fleek-router](#usage)
  - Best used with the [fleek-ws](#usage)


  ## Usage
  ```javascript

    //using a option parameter in generic koa-app
    ...
    var flr = require('fleek-router');

    flr(app, { response : true });

    //using within fleek-router

    var fleekResponse = require("fleek-response");
    var route         = require("koa-router");

    ...

    //psuedocode for using fleek response as middleware
    var sampleRouter = new route['GET'](path, bindRouteData, fleekResponse, middleware);


    //----------------------------------------------------------------------------

    //using with fleek-ws (fleek web socket)

    var fleekResponse = require("fleek-response")('socket');
    var parser        = require('fleek-parser');

    //parse document as json object
    var swagger = parser.parse(docs);

    var responsesHandler = fleekResponse(swagger);

    responsesHandler contain object that load up swagger schema as default response body

  ```

  ## Tip
    - For deeper understanding the use of fleek response, please study fleek-router, and fleek-ws implementation

  ## Authors

  - [John Hofrichter](https://github.com/johnhof)
  - [Lan Nguyen](https://github.com/lan-nguyen91)
marcelojaloto/SwagDoc: >
  # SwagDoc

  SwagDoc is a Delphi library to generate swagger.json file for Swagger Spec
  version 2.0. Create a public documentation REST API using Swagger 2.0 for
  Delphi Language. SwagDoc's only responsibility is to generate the swagger.json
  file. The swagger.json file is responsible for containing all the
  documentation for your REST API. This file must be attached to the Swagger UI
  (User Interface) files. 


  [![PayPal donate
  button](http://img.shields.io/paypal/donate.png?color=yellowgreen)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=AW8TZ2QTDA7K8)



  ## Swagger (Open API) - version 2.0


  SwagDoc follows the specification 2.0 because it is more popular in the market
  and also because it is considered a more stable version to exist the longest.
  SwagDoc does not yet support the Swagger 3.0 version, but depending on the
  demand and contributions to the project it may evolve to support spec 3.0.


  The main prerequisite for working with SwagDoc is to know the Swagger 2.0
  specification that can be viewed in the link below.


  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md


  https://swagger.io/docs/specification/2-0/basic-structure/


  When creating a Swagger documentation for your REST API you can produce a page
  like the following example.


  https://app.swaggerhub.com/apis-docs/swagdoc/sample-api/v1


  ![image](https://user-images.githubusercontent.com/20048296/46588904-c6cd5880-ca79-11e8-8a8a-ec38ba7ff95a.png)



  ## Json Schema


  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schemaObject


  http://json-schema.org



  ## SwagDoc Speeches


  https://www.youtube.com/watch?v=9U3HP3B5UT0 (Pt-Br)



  ## Swagger References and Tutorials 


  https://swagger.io/swagger/media/blog/wp-content/uploads/2017/02/Documenting-An-Existing-API-with-Swagger-2.pdf


  https://idratherbewriting.com/learnapidoc/pubapis_swagger_intro.html



  ## Swagger Tools


  - Swagger:

  https://swagger.io


  - Swagger Editor:

  https://editor.swagger.io


  - Swagger Hub:

  https://swagger.io/tools/swaggerhub


  - The classic swagger sample:

  http://petstore.swagger.io


  - Tools and Integrations:

  https://swagger.io/tools/open-source/open-source-integrations



  ## Swagger UI distribution files


  For you to produce a page containing a Swagger documentation you need the
  Swagger UI distribution files.


  These files you can find in the github swagger-api / swagger-ui repository.


  https://github.com/swagger-api/swagger-ui/tree/master/dist


  ![image](https://user-images.githubusercontent.com/20048296/39937130-2925f868-5525-11e8-921d-c9ff0f59fefd.png)



  First you need to download the swagger user interface files and generate the
  swagger.json file. You then need to change the index.html file to indicate the
  relative path of the location where the swagger.json file is located on your
  web server that is hosting the swagger user interface files.


  See an example below.


  ![image](https://user-images.githubusercontent.com/20048296/39946376-49ad0df0-5544-11e8-8a5c-0980f5e6c257.png)
senchalabs/connect: >
  # Connect


  [![NPM Version][npm-image]][npm-url]

  [![NPM Downloads][downloads-image]][downloads-url]

  [![Build Status][travis-image]][travis-url]

  [![Test Coverage][coveralls-image]][coveralls-url]

    Connect is an extensible HTTP server framework for [node](http://nodejs.org) using "plugins" known as _middleware_.

  ```js

  var connect = require('connect');

  var http = require('http');


  var app = connect();


  // gzip/deflate outgoing responses

  var compression = require('compression');

  app.use(compression());


  // store session state in browser cookie

  var cookieSession = require('cookie-session');

  app.use(cookieSession({
      keys: ['secret1', 'secret2']
  }));


  // parse urlencoded request bodies into req.body

  var bodyParser = require('body-parser');

  app.use(bodyParser.urlencoded({extended: false}));


  // respond to all requests

  app.use(function(req, res){
    res.end('Hello from Connect!\n');
  });


  //create node.js http server and listen on port

  http.createServer(app).listen(3000);

  ```


  ## Getting Started


  Connect is a simple framework to glue together various "middleware" to handle
  requests.


  ### Install Connect


  ```sh

  $ npm install connect

  ```


  ### Create an app


  The main component is a Connect "app". This will store all the middleware

  added and is, itself, a function.


  ```js

  var app = connect();

  ```


  ### Use middleware


  The core of Connect is "using" middleware. Middleware are added as a "stack"

  where incoming requests will execute each middleware one-by-one until a
  middleware

  does not call `next()` within it.


  ```js

  app.use(function middleware1(req, res, next) {
    // middleware 1
    next();
  });

  app.use(function middleware2(req, res, next) {
    // middleware 2
    next();
  });

  ```


  ### Mount middleware


  The `.use()` method also takes an optional path string that is matched against

  the beginning of the incoming request URL. This allows for basic routing.


  ```js

  app.use('/foo', function fooMiddleware(req, res, next) {
    // req.url starts with "/foo"
    next();
  });

  app.use('/bar', function barMiddleware(req, res, next) {
    // req.url starts with "/bar"
    next();
  });

  ```


  ### Error middleware


  There are special cases of "error-handling" middleware. There are middleware

  where the function takes exactly 4 arguments. When a middleware passes an
  error

  to `next`, the app will proceed to look for the error middleware that was
  declared

  after that middleware and invoke it, skipping any error middleware above that

  middleware and any non-error middleware below.


  ```js

  // regular middleware

  app.use(function (req, res, next) {
    // i had an error
    next(new Error('boom!'));
  });


  // error middleware for errors that occurred in middleware

  // declared before this

  app.use(function onerror(err, req, res, next) {
    // an error occurred!
  });

  ```


  ### Create a server from the app


  The last step is to actually use the Connect app in a server. The `.listen()`
  method

  is a convenience to start a HTTP server (and is identical to the
  `http.Server`'s `listen`

  method in the version of Node.js you are running).


  ```js

  var server = app.listen(port);

  ```


  The app itself is really just a function with three arguments, so it can also
  be handed

  to `.createServer()` in Node.js.


  ```js

  var server = http.createServer(app);

  ```


  ## Middleware


  These middleware and libraries are officially supported by the Connect/Express
  team:

    - [body-parser](https://www.npmjs.com/package/body-parser) - previous `bodyParser`, `json`, and `urlencoded`. You may also be interested in:
      - [body](https://www.npmjs.com/package/body)
      - [co-body](https://www.npmjs.com/package/co-body)
      - [raw-body](https://www.npmjs.com/package/raw-body)
    - [compression](https://www.npmjs.com/package/compression) - previously `compress`
    - [connect-timeout](https://www.npmjs.com/package/connect-timeout) - previously `timeout`
    - [cookie-parser](https://www.npmjs.com/package/cookie-parser) - previously `cookieParser`
    - [cookie-session](https://www.npmjs.com/package/cookie-session) - previously `cookieSession`
    - [csurf](https://www.npmjs.com/package/csurf) - previously `csrf`
    - [errorhandler](https://www.npmjs.com/package/errorhandler) - previously `error-handler`
    - [express-session](https://www.npmjs.com/package/express-session) - previously `session`
    - [method-override](https://www.npmjs.com/package/method-override) - previously `method-override`
    - [morgan](https://www.npmjs.com/package/morgan) - previously `logger`
    - [response-time](https://www.npmjs.com/package/response-time) - previously `response-time`
    - [serve-favicon](https://www.npmjs.com/package/serve-favicon) - previously `favicon`
    - [serve-index](https://www.npmjs.com/package/serve-index) - previously `directory`
    - [serve-static](https://www.npmjs.com/package/serve-static) - previously `static`
    - [vhost](https://www.npmjs.com/package/vhost) - previously `vhost`

  Most of these are exact ports of their Connect 2.x equivalents. The primary
  exception is `cookie-session`.


  Some middleware previously included with Connect are no longer supported by
  the Connect/Express team, are replaced by an alternative module, or should be
  superseded by a better module. Use one of these alternatives instead:

    - `cookieParser`
      - [cookies](https://www.npmjs.com/package/cookies) and [keygrip](https://www.npmjs.com/package/keygrip)
    - `limit`
      - [raw-body](https://www.npmjs.com/package/raw-body)
    - `multipart`
      - [connect-multiparty](https://www.npmjs.com/package/connect-multiparty)
      - [connect-busboy](https://www.npmjs.com/package/connect-busboy)
    - `query`
      - [qs](https://www.npmjs.com/package/qs)
    - `staticCache`
      - [st](https://www.npmjs.com/package/st)
      - [connect-static](https://www.npmjs.com/package/connect-static)

  Checkout
  [http-framework](https://github.com/Raynos/http-framework/wiki/Modules) for
  many other compatible middleware!


  ## API


  The Connect API is very minimalist, enough to create an app and add a chain

  of middleware.


  When the `connect` module is required, a function is returned that will
  construct

  a new app when called.


  ```js

  // require module

  var connect = require('connect')


  // create app

  var app = connect()

  ```


  ### app(req, res[, next])


  The `app` itself is a function. This is just an alias to `app.handle`.


  ### app.handle(req, res[, out])


  Calling the function will run the middleware stack against the given Node.js

  http request (`req`) and response (`res`) objects. An optional function `out`

  can be provided that will be called if the request (or error) was not handled

  by the middleware stack.


  ### app.listen([...])


  Start the app listening for requests. This method will internally create a
  Node.js

  HTTP server and call `.listen()` on it.


  This is an alias to the `server.listen()` method in the version of Node.js
  running,

  so consult the Node.js documentation for all the different variations. The
  most

  common signature is
  [`app.listen(port)`](https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_server_listen_port_hostname_backlog_callback).


  ### app.use(fn)


  Use a function on the app, where the function represents a middleware. The
  function

  will be invoked for every request in the order that `app.use` is called. The
  function

  is called with three arguments:


  ```js

  app.use(function (req, res, next) {
    // req is the Node.js http request object
    // res is the Node.js http response object
    // next is a function to call to invoke the next middleware
  })

  ```


  In addition to a plan function, the `fn` argument can also be a Node.js HTTP
  server

  instance or another Connect app instance.


  ### app.use(route, fn)


  Use a function on the app, where the function represents a middleware. The
  function

  will be invoked for every request in which the URL (`req.url` property) starts
  with

  the given `route` string in the order that `app.use` is called. The function
  is

  called with three arguments:


  ```js

  app.use('/foo', function (req, res, next) {
    // req is the Node.js http request object
    // res is the Node.js http response object
    // next is a function to call to invoke the next middleware
  })

  ```


  In addition to a plan function, the `fn` argument can also be a Node.js HTTP
  server

  instance or another Connect app instance.


  The `route` is always terminated at a path separator (`/`) or a dot (`.`)
  character.

  This means the given routes `/foo/` and `/foo` are the same and both will
  match requests

  with the URLs `/foo`, `/foo/`, `/foo/bar`, and `/foo.bar`, but not match a
  request with

  the URL `/foobar`.


  The `route` is matched in a case-insensitive manor.


  In order to make middleware easier to write to be agnostic of the `route`,
  when the

  `fn` is invoked, the `req.url` will be altered to remove the `route` part (and
  the

  original will be available as `req.originalUrl`). For example, if `fn` is used
  at the

  route `/foo`, the request for `/foo/bar` will invoke `fn` with `req.url ===
  '/bar'`

  and `req.originalUrl === '/foo/bar'`.


  ## Running Tests


  ```bash

  npm install

  npm test

  ```


  ## People


  The Connect project would not be the same without all the people involved.


  The original author of Connect is [TJ Holowaychuk](https://github.com/tj)


  The current lead maintainer is [Douglas Christopher
  Wilson](https://github.com/dougwilson)


  [List of all
  contributors](https://github.com/senchalabs/connect/graphs/contributors)


  ## Node Compatibility

    - Connect `< 1.x` - node `0.2`
    - Connect `1.x` - node `0.4`
    - Connect `< 2.8` - node `0.6`
    - Connect `>= 2.8 < 3` - node `0.8`
    - Connect `>= 3` - node `0.10`, `0.12`, `4.x`, `5.x`, `6.x`, `7.x`, `8.x`, `9.x`, `10.x`; io.js `1.x`, `2.x`, `3.x`

  ## License


  [MIT](LICENSE)


  [npm-image]: https://img.shields.io/npm/v/connect.svg

  [npm-url]: https://npmjs.org/package/connect

  [travis-image]: https://img.shields.io/travis/senchalabs/connect/master.svg

  [travis-url]: https://travis-ci.org/senchalabs/connect

  [coveralls-image]:
  https://img.shields.io/coveralls/senchalabs/connect/master.svg

  [coveralls-url]: https://coveralls.io/r/senchalabs/connect

  [downloads-image]: https://img.shields.io/npm/dm/connect.svg

  [downloads-url]: https://npmjs.org/package/connect
Yelp/bravado: >
  .. image:: https://img.shields.io/travis/Yelp/bravado.svg
    :target: https://travis-ci.org/Yelp/bravado?branch=master

  .. image:: https://img.shields.io/coveralls/Yelp/bravado.svg
    :target: https://coveralls.io/r/Yelp/bravado

  .. image:: https://img.shields.io/pypi/v/bravado.svg
      :target: https://pypi.python.org/pypi/bravado/
      :alt: PyPi version

  .. image:: https://img.shields.io/pypi/pyversions/bravado.svg
      :target: https://pypi.python.org/pypi/bravado/
      :alt: Supported Python versions

  Bravado

  ==========


  About

  -----


  Bravado is a Yelp maintained fork of `digium/swagger-py
  <https://github.com/digium/swagger-py/>`__

  for use with `OpenAPI Specification version 2.0
  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md>`__
  (previously

  known as Swagger).


  From the OpenAPI Specification project:

      The goal of The OpenAPI Specification is to define a standard,
      language-agnostic interface to REST APIs which allows both humans and
      computers to discover and understand the capabilities of the service
      without access to source code, documentation, or through network traffic
      inspection.

  Client libraries can automatically be generated from the OpenAPI
  specification,

  however Bravado aims to be a complete replacement for code generation

  (`swagger-codegen <https://github.com/wordnik/swagger-codegen>`__).


  Example Usage

  -------------


  .. code-block:: Python

      from bravado.client import SwaggerClient
      client = SwaggerClient.from_url('http://petstore.swagger.io/v2/swagger.json')
      pet = client.pet.getPetById(petId=42).response().result

  Example with Basic Authentication

  ---------------------------------


  .. code-block:: python

      from bravado.requests_client import RequestsClient
      from bravado.client import SwaggerClient

      http_client = RequestsClient()
      http_client.set_basic_auth(
          'api.yourhost.com',
          'username', 'password'
      )
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=42).response().result

  Example with Header Authentication

  ----------------------------------


  .. code-block:: python

      from bravado.requests_client import RequestsClient
      from bravado.client import SwaggerClient

      http_client = RequestsClient()
      http_client.set_api_key(
          'api.yourhost.com', 'token',
          param_name='api_key', param_in='header'
      )
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=42).response().result

  Example with Fido Client (Async Http Client)

  --------------------------------------------


  .. code-block:: python

      # Install bravado with fido extra (``pip install bravado[fido]``)
      from bravado.fido_client import FidoClient
      from bravado.client import SwaggerClient

      http_client = FidoClient()
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=42).response().result

  Documentation

  -------------


  More documentation is available at http://bravado.readthedocs.org


  Installation

  ------------


  .. code-block:: bash

      # To install bravado with Synchronous Http Client only.
      $ pip install bravado

      # To install bravado with Synchronous and Asynchronous Http Client (RequestsClient and FidoClient).
      $ pip install bravado[fido]

  Development

  ===========


  Code is documented using `Sphinx <http://sphinx-doc.org/>`__.


  `virtualenv <http://virtualenv.readthedocs.org/en/latest/virtualenv.html>`__.
  is

  recommended to keep dependencies and libraries isolated.


  Setup

  -----


  .. code-block:: bash

      # Run tests
      tox

      # Install git pre-commit hooks
      tox -e pre-commit install

  Contributing

  ------------


  1. Fork it ( http://github.com/Yelp/bravado/fork )

  2. Create your feature branch (``git checkout -b my-new-feature``)

  3. Add your modifications

  4. Add short summary of your modifications on ``CHANGELOG-MASTER.rst``

  5. Commit your changes (``git commit -m "Add some feature"``)

  6. Push to the branch (``git push origin my-new-feature``)

  7. Create new Pull Request


  License

  -------


  Copyright (c) 2013, Digium, Inc. All rights reserved.

  Copyright (c) 2014-2015, Yelp, Inc. All rights reserved.


  Bravado is licensed with a `BSD 3-Clause

  License <http://opensource.org/licenses/BSD-3-Clause>`__.
stackia/test2doc.js: >
  # test2doc.js - Build API docs from your tests


  [![npm](https://img.shields.io/npm/l/test2doc.svg)](https://www.npmjs.com/package/test2doc)
  [![npm](https://img.shields.io/npm/v/test2doc.svg)](https://www.npmjs.com/package/test2doc)
  [![Travis
  CI](https://travis-ci.org/stackia/test2doc.js.svg?branch=master)](https://travis-ci.org/stackia/test2doc.js)
  [![David](https://david-dm.org/stackia/test2doc.js/status.svg)](https://david-dm.org/stackia/test2doc.js)
  [![David](https://david-dm.org/stackia/test2doc.js/dev-status.svg)](https://david-dm.org/stackia/test2doc.js?type=dev)
  [![Gitter](https://img.shields.io/gitter/room/test2doc-js/Lobby.svg)](https://gitter.im/test2doc-js/Lobby)


  test2doc.js helps you seamlessly integrate API documentation generation to
  your test flow.


  You write something like this:


  ```javascript

  const doc = require('test2doc')

  const request = require('supertest') // We use supertest as the HTTP request
  library

  require('should') // and use should as the assertion library


  // For Koa, you should exports app.listen() or app.callback() in your app
  entry

  const app = require('./my-express-app.js')


  after(function () {
    doc.emit('api-documentation.apib') // Or doc.emit('api-documentation.yaml', 'swagger') if you like Swagger
  })


  doc.group('Products').is(doc => {
    describe('#Products', function () {
      doc.action('Get all products').is(doc => {
        it('should get all products', function () {
          // Write specs towards your API endpoint as you would normally do
          // Just decorate with some utility methods
          return request(app)
            .get(doc.get('/products'))
            .query(doc.query({
              minPrice: doc.val(10, 'Only products of which price >= this value should be returned').required()
            }))
            .expect(200)
            .then(res => {
              doc.resHeaders(res.headers)
              body = doc.resBody(res.body)
              body.desc('List of all products')
                .should.not.be.empty()
              body[0].should.have.properties('id', 'name', 'price')
              body[0].price.desc('Price of this product').should.be.a.Number()
            })
        })
      })
    })
  })

  ```


  And then test2doc.js will capture all the info provided by you via `doc.get` /
  `doc.query` / `doc.resBody` / `myVar.desc`. You can choose a generator to
  generate the final documents based on these collected information. Since we
  capture every thing we need from tests, you will always get up-to-date
  documents.


  Currently we provide [**API Blueprint**](https://apiblueprint.org/) generator
  and [**Swagger**](http://swagger.io/) generator.


  test2doc.js is not designed to run on a specified test framework, which means
  you can use this in conjunction with any test frameworks and assertion
  libraries.


  We provide an extension for supertest called
  [supertest-test2doc](https://github.com/stackia/supertest-test2doc), which
  makes it much easier to integrate test2doc.js with
  [supertest](https://github.com/visionmedia/supertest).


  ## Installation


  Install test2doc.js as an npm module and save it to your package.json file as
  a development dependency:


  ```

  npm install test2doc --save-dev

  ```


  Once installed it can now be referenced by simply calling
  `require('test2doc')`.


  *The npm package name is `test2doc` without `.js` suffix.*


  ## Getting Started


  First require this library, for convenience we use `doc` as the imported
  variable name:


  ```javascript

  const doc = require('test2doc')

  ```


  test2doc.js has two core concepts: `group` and `action`. A `group` is a
  collection of `action`s and child `group`s, and an `action` describes a real
  API endpoint (HTTP method / url / queries / request body / response body /
  headers). Like a tree, `action`s are leaf nodes and `group`s are non-leaf
  nodes.


  The `doc` variable imported here is the root `group`. When you call
  `doc.group('Name of this subgroup')`, it returns a new object represents the
  sub `group`, which has exactly the same interfaces as the root `group`.


  When you call `doc.action('Name of this action')`, it returns a new object
  represents the `action`, which has different interfaces compared to `group`.


  For convenience, we usually use the variable name `doc` all the way to make it
  easy to write clean codes.


  Some methods of `group` object are:


  - `doc.title(title)` - set title of this group

  - `doc.desc(...descriptions)` - give descriptions for this group

  - `doc.basePath(basePath)` - set base path for this group

  - `doc.group(childGroupTitle)` - create a child group, returns the child group


  Some methods of `action` object are:


  - `doc.get(url, parameters)` - Capture a string as the url, returns this url
  so you call pass to your HTTP request library

  - `doc.resBody(body)` - Capture an object as the response body, returns an
  proxy of this object


  *Full list can be found at [API references](#api-references) section.*


  Methods like `doc.resBody(body)` / `doc.val(value, ...descriptions)` and so on
  returns an [ES6
  Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)
  of the object passed in. So we can add custom methods to these objects like
  `desc(...descriptions)`, `required()`, etc. However because JS doesn't allow
  proxying non-object value (number / null / undefined etc.), we will create
  wrapper objects around these values. If these wrapper objects don't work well
  with your assertion / request library, you can use `doc.uncapture(object)` to
  get the original value.


  Once you have collected all the info needed to build the documentations, call
  `emit` on the root group to emit the actual documentation file. Generally you
  will do this in a global `after` hook.


  ## API references


  ### Group


  #### Methods


  - `title (title)` - set title of this group
      - return: this group
  - `desc (...descriptions)` - give descriptions for this group
      - A group can have multiple descriptions. Generally each description will be rendered as a paragraph.
      - return: this group
  - `scheme (...schemes)` - set supported schemes on this group
      - e.g. `scheme('http', 'https', 'ws', 'wss')`
      - return: this group
  - `host (host)` - set hostname for this group
      - Only hostname, without 'http://' or trailing slash.
      - return: this group
  - `version (version)` - set API version for this group
      - return: this group
  - `basePath (basePath, parameters)` - set base path for this group
      - e.g. `basePath('/v0/product/:id', { id: doc.val(123, 'Product ID') )`
      - return: this group
  - `val (value, ...descriptions)` - capture an value and give it descriptions
      - return: a proxy of `value`
  - `params (parameters)` - describe parameters for the base path
      - Same as the second parameter in `basePath(basePath, parameters)`
      - return: this group
  - `query (queries)` - describe queries for the base path
      - return: this group
  - `reqHeaders (headers)` - describe common request headers for all actions in
  this group
      - e.g. `doc.reqHeaders({ 'x-my-header': 'foobar', 'x-my-array-header': ['value1', 'value2'] })`
      - return: this group
  - `group (title)` - create a child group titled `title`
      - return: the newly created child group
  - `action (title)` - create an action titled `title` belonging to this group
      - return: the newly created action
  - `is (collectFn)` - call `collectFn` with this group as the first argument
      - Usually used in chaining call.
      - e.g. `doc.group('a child group').is(doc => { ... })`, first `doc` refers to the parent group, second `doc` refers to the child group
      - return: this group, or a promise if `collectFn` returns a promise, which will be resolved with this group when the promise returned by `collectFn` finishes.
  - `uncapture (object, shouldSliceArray = false)` - uncapture an object (strip
  the proxy)
      - If `shouldSliceArray` is true, then any array in `object` will be subsetted according to offset() and limit() set on it.
      - return: an uncaptured object, with all its children and nested children uncaptured
  - `emit (file, generator = 'apib', options = {})` - generate the actual
  documentation file
      - `file` can be a filename or a file descriptor. It's the same object passed into `fs.writeFileSync`.
      - If `file` is omitted, the generated text will be the return value.
      - Available generators: `apib` / `swagger`
      - return: void

  ### Action


  #### Methods


  - `get/post/put/delete/...(url, parameters)` - shortcut of
  `method(method).url(url, parameters)`
      - Supports all methods provided by npm package [methods](https://www.npmjs.com/package/methods).
      - return: the url with parameters filled in
  - `method (method)` - set request method of this action
      - return: this action
  - `title (title)` - set title of this action
      - return: this action
  - `desc (...descriptions)` - give descriptions for this action
      - return: this action
  - `url (url, parameters)` - describe url and url parameters for this action
      - `url` can be [an express-route-style path](https://expressjs.com/en/guide/routing.html#route-paths), which can include parameters
      - use `parameters` to describe parameters in the url
      - return: the url with parameters filled in
  - `val (value, ...descriptions)` - Same as `group`.`val`

  - `anotherExample ()` - as a seperator between different exapmles
      - an example = params + query + reqBody + resBody
      - return: this action
      - e.g.
  ```

  doc.params ...blahblah... doc.query ...blahblah... doc.reqBody ...blahblah...
  doc.resBody

  doc.anotherExample() // Divide into two examples in a same code block

  doc.params ...blahblah... doc.query ...blahblah... doc.reqBody ...blahblah...
  doc.resBody

  ```

  - `params (parameters, returnProxy = false)` - Same as `group`.`params`,
  except this is for action

  - `query (queries, returnProxy = false)` - Same as `group`.`query`, except
  this is for action

  - `reqHeader (name, value, returnProxy = false)` - describe a single header
  for this action
      - e.g. `doc.reqHeader('authorization', 'Bearer 123456')` returns `['authorization', 'Bearer 123456']`
      - return: an array with two items, `name` and `value`
  - `reqHeaders (headers, returnProxy = false)` - describe request headers for
  this action
      - e.g. `doc.reqHeaders({ 'x-my-header': 'foobar', 'x-my-array-header': ['value1', 'value2'] })`
      - return: the `headers` object passed in, or a proxy of `headers` if `returnProxy` is true
  - `reqBody (body, description, returnProxy = false)` - Capture an object as
  the request body and give it a description
      - return: the `body` object passed in, or a proxy of `body` if `returnProxy` is true
  - `resHeaders (headers)` - describe response headers for this action
      - e.g. `doc.resHeaders({ 'content-type': 'application-json', 'x-total-page': '16' })`
      - return: a proxy of `headers`
  - `status (statusCode)` - describe the response HTTP status code for this
  action
      - return: the `statusCode` passed in
  - `resBody (body)` - Capture an object as the response body
      - return: a proxy of `body`
  - `is (collectFn)` - Same as `group`.`is`, except the parameter passed to
  `collectFn` is this action

  - `uncapture (object)` - Same as `group`.`uncapture`


  ### Captured Objects


  #### Methods


  - `desc (...descriptions)` - give descriptions for this object
      - return: this captured object
  - `required ()` - mark this as required
      - return: this captured object
  - `optional ()` - mark this as optional (opposite to `required()`)
      - return: this captured object
  - `nullable (nullable = true)` - mark this as nullable or non-nullable
      - return: this captured object
  - `fixed (fixed = true)` - mark this as
  [fixed](https://apiblueprint.org/documentation/mson/specification.html#353-type-attribute)
      - return: this captured object
  - `fixedType (fixedType = true)` - mark this as
  [fixed-type](https://apiblueprint.org/documentation/mson/specification.html#353-type-attribute)
      - return: this captured object
  - `enum (...possibleValues)` - mark this should be a member of
  `possibleValues`
      - return: this captured object
  - `default (defaultValue)` - mark the default value for this
      - return: this captured object
  - `sample (...sampleValues)` - give a sample value for this
      - return: this captured object
  - `offset (offset)` - specify the offset in the array to be included in the
  documents
      - Only makes sense if this is an array
      - Useful if you only want to include a subset of this array in the documents
      - return: this captured object
  - `limit (limit)` - specify the number of items from the offset in the array
  to be included in the documents
      - Only makes sense if this is an array
      - Useful if you only want to include a subset of this array in the documents
      - return: this captured object
  - `uncapture (shouldSliceArray = false)` - uncapture this
      - If `shouldSliceArray` is true, then any array in this object will be subsetted according to offset() and limit() set on it.
      - return: the uncaptured original object for this

  ## Roadmap


  - [x] Add tests and integrate with Travis CI

  - [x] Swagger support

  - [x] Write [an extension for
  supertest](https://github.com/stackia/supertest-test2doc) to simplify grammer

  - [ ] Incremental document generation

  - [ ] CONTRIBUTION guide

  - [ ] An official website


  ## License


  The project is released under [MIT
  License](https://github.com/stackia/test2doc.js/blob/master/LICENSE).
RobWin/assertj-swagger: >
  = assertj-swagger

  :author: Robert Winkler

  :version: 0.9.0

  :hardbreaks:


  image:https://travis-ci.org/RobWin/assertj-swagger.svg["Build Status",
  link="https://travis-ci.org/RobWin/assertj-swagger"]
  image:https://coveralls.io/repos/RobWin/assertj-swagger/badge.svg?branch=master["Coverage
  Status", link="https://coveralls.io/r/RobWin/assertj-swagger"]
  image:https://api.bintray.com/packages/robwin/maven/assertj-swagger/images/download.svg[link="https://bintray.com/robwin/maven/assertj-swagger/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]


  == Overview


  assertj-swagger is a https://github.com/joel-costigliola/assertj-core[assertj]
  library which compares a contract-first
  https://github.com/swagger-api/swagger-spec[Swagger] YAML/JSON file with a
  code-first Swagger JSON output (e.g. from
  https://github.com/springfox/springfox[springfox] or
  https://github.com/swagger-api/swagger-core/wiki/Java-JAXRS-Quickstart[JAX-RS
  Swagger]). assertj-swagger allows to validate that the API implementation is
  in compliance with a contract specification for two test patterns:
  Documentation Driven Contracts and Consumer Driven Contracts.


  The Documentation Driven Contracts test pattern, useful for public APIs,
  validates using `#isEqualTo` and will validate that the design first
  documentation contract matches the implementation in its entirety.


  The Consumer Driven Contracts test pattern, useful for internal microservice
  APIs, validates using `#satisfiesContract` and will validate that the
  implementation provides, at minimum, the requirements of the design first
  consumer contract.  This pattern allows for extension points in the API
  resources, resource methods, and models.


  The library supports the Swagger v2.0 specification. assertj-swagger compares
  Swagger objects like Paths, Parameters and Definitions. It does not compare
  __unimportant__ Swagger objects like info, descriptions or summaries.


  == Usage guide


  === Adding assertj-swagger to your project

  The project is published in JCenter and Maven Central.


  ==== Maven


  [source,xml, subs="specialcharacters,attributes"]

  ----

  <repositories>
      <repository>
          <snapshots>
              <enabled>false</enabled>
          </snapshots>
          <id>central</id>
          <name>bintray</name>
          <url>http://jcenter.bintray.com</url>
      </repository>
  </repositories>


  <dependency>
      <groupId>io.github.robwin</groupId>
      <artifactId>assertj-swagger</artifactId>
      <version>{version}</version>
  </dependency>

  ----


  ==== Gradle


  [source,groovy, subs="attributes"]

  ----

  repositories {
      jcenter()
  }


  compile "io.github.robwin:assertj-swagger:{version}"

  ----


  === Using assertj-swagger in an integration test


  Using assertj-swagger is simple. For example, if you are using
  https://github.com/spring-projects/spring-boot[Spring Boot] and
  https://github.com/springfox/springfox[springfox] or
  https://github.com/swagger-api/swagger-core/wiki/Java-JAXRS-Quickstart[JAX-RS
  Swagger], you can validate your Swagger JSON in an integration test.


  The following code sample shows how to validate an API using the Documentation
  Driven Contract test pattern:


  [source, java]

  ----

  @RunWith(SpringJUnit4ClassRunner.class)

  @SpringApplicationConfiguration(classes = Application.class)

  @IntegrationTest

  @WebAppConfiguration

  public class AssertjSwaggerDocumentationDrivenTest {
      @Test
      public void validateThatImplementationMatchesDocumentationSpecification(){
          String designFirstSwagger = SwaggerAssertTest.class.getResource("/swagger.yaml").getPath();
          SwaggerAssertions.assertThat("http://localhost:8080/v2/api-docs")
              .isEqualTo(designFirstSwagger);
      }
  }

  ----


  The following code sample shows how to validate an API using the Consumer
  Driven Contract test pattern:


  [source, java]

  ----

  @RunWith(SpringJUnit4ClassRunner.class)

  @SpringApplicationConfiguration(classes = Application.class)

  @IntegrationTest

  @WebAppConfiguration

  public class AssertjSwaggerConsumerDrivenTest {
      @Test
      public void validateThatImplementationSatisfiesConsumerSpecification(){
          String designFirstSwagger = SwaggerAssertTest.class.getResource("/swagger-consumer1.yaml").getPath();
          SwaggerAssertions.assertThat("http://localhost:8080/v2/api-docs")
              .satisfiesContract(designFirstSwagger);
      }
  }

  ----


  ==== Example output


  For Documentation Driven Contract tests, Assertj-swagger fails a test if it
  finds differences between the implementation and the specification.


  [source]

  ----

  The following 4 assertions failed:

  1) [Checking Paths]

  Expecting:
    <["/api/pet", "/api/pet/findByStatus", "/api/pet/findByTags", "/api/pet/{petId}", "/api/store/order", "/api/store/order/{orderId}", "/api/user", "/api/user/createWithArray", "/api/user/createWithList", "/api/user/login", "/api/user/logout", "/api/user/{username}"]>
  to contain only:
    <["/pets", "/pets/findByStatus", "/pets/findByTags", "/pets/{petId}", "/stores/order", "/stores/order/{orderId}", "/users", "/users/createWithArray", "/users/createWithList", "/users/login", "/users/logout", "/users/{username}"]>
  elements not found:
    <["/pets/findByTags", "/users/logout", "/users", "/stores/order", "/users/createWithArray", "/pets", "/users/createWithList", "/pets/findByStatus", "/pets/{petId}", "/users/{username}", "/stores/order/{orderId}", "/users/login"]>
  and elements not expected:
    <["/api/store/order", "/api/user", "/api/user/createWithList", "/api/pet", "/api/pet/findByTags", "/api/user/createWithArray", "/api/user/login", "/api/pet/{petId}", "/api/store/order/{orderId}", "/api/user/{username}", "/api/pet/findByStatus", "/api/user/logout"]>

  2) [Checking properties of definition 'Order']

  Expecting:
    <["complete", "id", "identifier", "petId", "quantity", "shipDate", "status"]>
  to contain only:
    <["id", "petId", "quantity", "shipDate", "status", "complete"]>
  elements not found:
    <[]>
  and elements not expected:
    <["identifier"]>

  3) [Checking properties of definition 'User']

  Expecting:
    <["email", "firstName", "id", "identifier", "lastName", "password", "phone", "userStatus", "username"]>
  to contain only:
    <["id", "username", "firstName", "lastName", "email", "password", "phone", "userStatus"]>
  elements not found:
    <[]>
  and elements not expected:
    <["identifier"]>

  4) [Checking properties of definition 'Pet']

  Expecting:
    <["category", "id", "identifier", "name", "photoUrls", "status", "tags"]>
  to contain only:
    <["id", "category", "name", "photoUrls", "tags", "status"]>
  elements not found:
    <[]>
  and elements not expected:
    <["identifier"]>
  ----


  For Consumer Driven Contract tests,  Assertj-swagger fails a test if it finds
  missing resources, methods, models, or properties in the implementation which
  are required by the consumer specification.


  [source]

  ----

  The following 4 assertions failed:

  1) [Checking Paths]

  Expecting:
   <["/pets", "/pets/findByStatus", "/pets/findByTags", "/pets/{petId}", "/stores/order", "/stores/order/{orderId}", "/users", "/users/createWithArray", "/users/createWithList", "/users/login", "/users/logout", "/users/{username}"]>
  to contain:
   <["/animals/{animalId}", "/pets", "/pets/findByStatus", "/pets/{petId}"]>
  but could not find:
   <["/animals/{animalId}"]>

  2) [Checking Definitions]

  Expecting:
   <["User", "Category", "Pet", "Tag", "Order"]>
  to contain:
   <["Category", "Pet", "Animal", "Tag"]>
  but could not find:
   <["Animal"]>

  3) [Checking properties of definition 'Pet']

  Expecting:
   <["id", "category", "name", "photoUrls", "tags", "status"]>
  to contain:
   <["photoUrls", "extraProperty", "name", "id", "category", "tags", "status"]>
  but could not find:
   <["extraProperty"]>

  4) [Checking property 'extraProperty' of definition 'Pet']

  Expecting actual not to be null

  ----


  === Using assertj-swagger in a unit test


  If you are using the
  https://github.com/spring-projects/spring-framework[spring-framework] and
  https://github.com/springfox/springfox[springfox], Spring's MVC Test framework
  can also be used to validate the Swagger JSON output against your
  contract-first Swagger specification.

  That way you can make sure that the implementation is in compliance with the
  design specification.


  The following code sample shows how to write a unit test using the
  Documentation Driven Contract test pattern:


  [source, java]

  ----

  @Test

  public void validateThatImplementationFitsDesignSpecification() throws
  Exception {
      String designFirstDocumentationSwaggerLocation = Swagger2MarkupTest.class.getResource("/swagger.yaml").getPath();

      MvcResult mvcResult = this.mockMvc.perform(get("/v2/api-docs")
              .accept(MediaType.APPLICATION_JSON))
              .andExpect(status().isOk())
              .andReturn();

      String springfoxSwaggerJson = mvcResult.getResponse().getContentAsString();
      SwaggerAssertions.assertThat(new SwaggerParser().parse(springfoxSwaggerJson)).isEqualTo(designFirstDocumentationSwaggerLocation);
  }

  ----


  The following code sample shows how to write a unit test using the Consumer
  Driven Contract test pattern:


  [source, java]

  ----

  @Test

  public void validateThatImplementationFitsDesignSpecification() throws
  Exception {
      String designFirstConsumerSwaggerLocation = Swagger2MarkupTest.class.getResource("/swagger-consumer1.yaml").getPath();

      MvcResult mvcResult = this.mockMvc.perform(get("/v2/api-docs")
              .accept(MediaType.APPLICATION_JSON))
              .andExpect(status().isOk())
              .andReturn();

      String springfoxSwaggerJson = mvcResult.getResponse().getContentAsString();
      SwaggerAssertions.assertThat(new SwaggerParser().parse(springfoxSwaggerJson)).satisfiesContract(designFirstConsumerSwaggerLocation);
  }

  ----


  === Customizing assertj-swagger's behaviour


  For most use cases, the default behaviour will be sufficient.  However, you
  can override the default behaviour in various ways by placing a Java property
  file, `/assertj-swagger.properties`, at the root of your classpath.  It is
  also possible to override the configuration in your tests; construct an
  instance of the `SwaggerAssert` class with a custom configuration if this is
  required.


  The following overrides are available:


  ==== Disable various types of checks which are enabled by default


  * `assertj.swagger.validateDefinitions=false`: disable all validation of
  definitions

  ** `assertj.swagger.validateProperties=false`: disable validation of
  properties of definitions

  *** `assertj.swagger.validateRefProperties=false`: disable validation of
  reference (`$ref`) properties of definitions

  *** `assertj.swagger.validateArrayProperties=false`: disable validation of
  array properties of definitions

  *** `assertj.swagger.validateByteArrayProperties=false`: disable validation of
  byte-array properties of definitions

  *** `assertj.swagger.validateStringProperties=false`: disable validation of
  string properties of definitions

  ** `assertj.swagger.validateModels=false`: disable validation of models

  * `assertj.swagger.validatePaths=false`: disable all validation of endpoint
  definitions

  * `assertj.swagger.validateResponseWithStrictlyMatch=false`: allow actual
  contract return extra return code


  ==== Enable various types of checks which are disabled by default


  The following settings are disabled by default, as they will cause schema
  comparisions to be too brittle for many users. They can be enabled if
  required.


  * `assertj.swagger.validateInfo=true`: enable comparison of the info section

  * `assertj.swagger.validateVersion=true`: enable comparison of the schema
  version numbers


  ==== Disable checks for certain paths or definitions in 'actual' schema


  This feature is useful in development situations, where you have written a
  contract-first schema by hand, and are validating a contract-last schema
  generated by a partially-implemented API.


  To ignore unimplemented endpoints, try something like:


  [source]

  ----

  assertj.swagger.pathsToIgnoreInExpected=\
     /v1/friends/{id},\
     /v1/groups/{groupId}
  ----


  To ignore unimplemented definitions, use something like:


  [source]

  ----

  assertj.swagger.definitionsToIgnoreInExpected=\
     Foo,\
     Bar
  ----


  To ignore unimplemented properties, use something like:


  [source]

  ----

  assertj.swagger.propertiesToIgnoreInExpected=\
     Foo.prop1,\
     Bar.prop2
  ----



  ==== Comparing expected and actual paths in schemas


  It is occasionally useful to be able to compare schemas, where due to
  limitations in tools and libraries, endpoint

  paths don't align. Specifying a `basePath` setting in your design-first schema
  here won't work -- it's only used by

  Swagger tooling to generate paths at runtime, and does *not* form part of the
  logical pathname of your endpoints.

  For instance, in your design-first schema, you may specify a set of endpoints
  and a `basePath`, while your generated

  schema (generated from, say, Springfox) has a common prefix prepended on the
  endpoint paths; e.g.:


  [source]

  ----

  /pets/findByStatus       ! design-first schema

  ----


  and


  [source]

  ----

  /v2/pets/findByStatus    ! actual schema

  ----


  To ensure that assertj-swagger is comparing like-with-like in this situation,
  you could use the following in your

  configuration file:


  [source]

  ----

  assertj.swagger.pathsPrependExpected=/v2

  ----



  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
mobilcom-debitel/got-swag: >
  # Got Swag?


  A tool to test Swagger-powered APIs automatically through monkey testing.

  Also allows for custom tests written directly in Swagger files

  or in separate test suites.

  Includes command-line and programmatic interfaces.

  Install via `npm install got-swag -g`.


  ## Usage


  ```

  got-swag <url> ... [-m] [-t <ms>] [-T] [-v] [-w]
    Test a Swagger URL or file (YAML). Additional files are merged.

  Options:
    -m, --monkey        Run monkey tests on GET endpoints
    -l, --monkey-limit  Maximum number of parameter combinations for each
                        monkey GET, default is 50
    -t, --timeout <ms>  Set a timeout (in milliseconds) for test step execution,
                        default is 2000 ms
    -T, --trace         Trace: Log requests and responses
    -V, --version       Show version
    -w, --watch         Watch the Swagger files and rerun tests on changes
  ```


  Most Mocha options are valid. See https://mochajs.org/#usage for details.



  ## Monkey Testing


  The most basic usage of `got-swag` is monkey testing:

  Each GET endpoint of a service is validated using minimal variable

  input, if any, and the definitions from the services' Swagger file.

  The endpoints are requested with random authentication/variable combinations

  until one combination leads to a response status code less than 400.


  Just invoke got-swag on a URL with the `-m` switch:


  ```

  got-swag http://petstore.swagger.io/v2/swagger.json -m

  ```


  See [monkeystore.yaml](examples/monkeystore.yaml) for an example of input
  variables.



  ## Custom Tests


  Additionally, `got-swag` allows to embed custom tests in Swagger files

  or separate test suites.

  The test steps are written in JS using a small domain-specific language.

  Every step is evaluated, even if a previous step failed.


  For example, see [petstore.yaml](examples/petstore.yaml) (embedded) and

  [yoda.yaml](examples/yoda.yaml) (separate).



  ## Test Syntax Reference


  ### [Assertions](https://nodejs.org/api/assert.html)


  - `ok( actual )`

  - `equal( actual, expected )`

  - `notEqual( actual, expected )`

  - `deepEqual( actual, expected )`

  - `notDeepEqual( actual, expected )`

  - `strictEqual( actual, expected )`

  - `notStrictEqual( actual, expected )`

  - `deepStrictEqual( actual, expected )`

  - `notDeepStrictEqual( actual, expected )`

  - `match( actualString, expectedPattern )`


  ### Validation


  - `validate( data, schema )`
    - Validate JSON data against a [JSON schema](http://json-schema.org/)
    - If `data` or `schema` are omitted (strictly equal to `undefined`),
      the last response is validated against the current operation's response schema

  ### Requests


  - `request( options )`
    - Requests the current endpoint
    - `options` is optional, see [http](https://nodejs.org/api/http.html)
    - `options.data` sets the request body
  - Shortcuts:
    - `get( url, headers )`
    - `post( url, data, headers )`
    - `put( url, data, headers )`
    - `delete( url, headers )`
    - `options( url, headers )`
    - `head( url, headers )`
    - Use `null` for `url` to request the current endpoint
    - `headers` are optional

  ### Authentication


  - `auth( securityDefinitionId, credentials, scopes )`
    - Authenticates against a security definition
    - `scopes` are optional and inferred from the API if possible

  ### Utility


  - `encodeURIComponent( s )` encodes a string for URI transmission

  - `log( value )` logs a value

  - `stringify( value )` alias of JSON.stringify

  - `parse( string )` alias of JSON.parse

  - `byteLength( string )` alias of Buffer.byteLength for computing
  'Content-Length' header manually 

  - `monkeyAuth()` tries to authenticate using known method/credentials

  - `monkeyGet()` tries to GET using known parameters


  ### Variables


  - `vars`: Variables reusable for all tests
    - You can write to `vars` in test steps, see example
  - `req`: Last request data

  - `res`: Last response data
    - `res.statusCode`: Integer response status code
    - `res.headers`: Response headers
    - `res.body`: String response body
    - `res.json`: Parsed JSON response, if any
  - `api`: Complete Swagger API


  ### Extension Syntax


  You can define extension Swagger files on top of existing Swagger files

  using the `'#/path': value` syntax.

  For reference, see [extended-petstore.yaml](examples/extended-petstore.yaml).



  ## Programmatic Usage


  ```js

  var gotSwag = require( 'got-swag' );


  // test api and report as JSON

  gotSwag.test( 'swag.yaml', 'vars.yaml' ).then( function ( report ) {
    console.log( report );
  } );


  // describe mocha tests in current suite

  describe( 'My test suite', function () {
    gotSwag.describe( 'swag.yaml', 'vars.yaml', { parent: this } );
  } );

  ```



  ## Notes


  - Currently, `got-swag` only supports JSON

  - The DSL is sandboxed using [vm](https://nodejs.org/api/vm.html)

  - If you see something like
    `.../node_modules/got-swag/lib/validate.js:24 throw new Error( result.errors );`
    in your console, it's a [Node.js Bug](https://github.com/nodejs/node/issues/7397)
metosin/ring-swagger: >
  # Ring-Swagger [![Build
  Status](https://travis-ci.org/metosin/ring-swagger.svg?branch=master)](https://travis-ci.org/metosin/ring-swagger)
  [![Downloads](https://versions.deps.co/metosin/ring-swagger/downloads.svg)](https://versions.deps.co/metosin/ring-swagger)


  [Swagger](http://swagger.io/) 2.0 implementation for Clojure/Ring using
  [Plumatic Schema](https://github.com/Plumatic/schema) (support for
  [clojure.spec](http://clojure.org/about/spec) via
  [spec-tools](https://github.com/metosin/spec-tools).


  - Transforms deeply nested Schemas into Swagger JSON Schema definitions

  - Extended & symmetric JSON & String serialization & coercion

  - Middleware for handling Schemas Validation Errors & Publishing swagger-data

  - Local api validator

  - Swagger artifact generation
    - [swagger.json](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#specification) via `ring.swagger.swagger2/swagger-json`
    - [Swagger UI](https://github.com/swagger-api/swagger-ui) bindings. (get the UI separately as [jar](https://github.com/metosin/ring-swagger-ui) or from [NPM](https://www.npmjs.com/package/swagger-ui))

  ## Latest version


  [![Clojars
  Project](http://clojars.org/metosin/ring-swagger/latest-version.svg)](http://clojars.org/metosin/ring-swagger)


  The
  [CHANGELOG](https://github.com/metosin/ring-swagger/blob/master/CHANGELOG.md).


  Requires Java 1.8+


  ## Web libs using Ring-Swagger


  - [Compojure-Api](https://github.com/metosin/compojure-api) for Compojure

  - [fnhouse-swagger](https://github.com/metosin/fnhouse-swagger) for fnhouse

  - [route-swagger](https://github.com/frankiesardo/route-swagger) for Pedestal

  - [yada](https://github.com/juxt/yada)

  - [kekkonen](https://github.com/metosin/kekkonen)


  ## Getting help


  [Clojurians slack](https://clojurians.slack.com/)
  ([join](http://clojurians.net/)) has a channel
  [#ring-swagger](https://clojurians.slack.com/messages/ring-swagger/) for
  Ring-swagger related issues. You can also ask questions about Ring-swagger on
  other channels at Clojurians Slack or at #clojure on Freenode IRC (mention or
  `ring-swagger` to highlight us).


  ## Info


  Route definitions are expected as a clojure Map defined by the Schema
  [Contract](https://github.com/metosin/ring-swagger/blob/master/src/ring/swagger/swagger2_schema.clj).

  The Schema allows mostly any extra keys as ring-swagger tries not to be on
  your way - one can pass any  valid Swagger spec data in.


  [API Docs](http://metosin.github.io/ring-swagger/doc/).


  ### Simplest possible example


  ```clojure

  (require '[ring.swagger.swagger2 :as rs])


  (rs/swagger-json {})


  ; {:swagger "2.0",

  ;  :info {:title "Swagger API", :version "0.0.1"},

  ;  :produces ["application/json"],

  ;  :consumes ["application/json"],

  ;  :paths {},

  ;  :definitions {}}

  ```


  ### More complete example


  Info, tags, routes and anonymous nested schemas.


  ```clojure

  (require '[schema.core :as s])


  (s/defschema User {:id s/Str,
                     :name s/Str
                     :address {:street s/Str
                               :city (s/enum :tre :hki)}})

  (s/with-fn-validation
    (rs/swagger-json
      {:info {:version "1.0.0"
              :title "Sausages"
              :description "Sausage description"
              :termsOfService "http://helloreverb.com/terms/"
              :contact {:name "My API Team"
                        :email "foo@example.com"
                        :url "http://www.metosin.fi"}
              :license {:name "Eclipse Public License"
                        :url "http://www.eclipse.org/legal/epl-v10.html"}}
       :tags [{:name "user"
               :description "User stuff"}]
       :paths {"/api/ping" {:get {}}
               "/user/:id" {:post {:summary "User Api"
                                    :description "User Api description"
                                    :tags ["user"]
                                    :parameters {:path {:id s/Str}
                                                 :body User}
                                    :responses {200 {:schema User
                                                     :description "Found it!"}
                                                404 {:description "Ohnoes."}}}}}}))

  ; {:swagger "2.0",

  ;  :info {:title "Sausages",

  ;         :version "1.0.0",

  ;         :description "Sausage description",

  ;         :termsOfService "http://helloreverb.com/terms/",

  ;         :contact {:name "My API Team",

  ;                   :email "foo@example.com",

  ;                   :url "http://www.metosin.fi"},

  ;         :license {:name "Eclipse Public License",

  ;                   :url "http://www.eclipse.org/legal/epl-v10.html"}},

  ;  :produces ["application/json"],

  ;  :consumes ["application/json"],

  ;  :tags [{:name "user", :description "User stuff"}],

  ;  :paths {"/api/ping" {:get {:responses {:default {:description ""}}}},

  ;          "/user/{id}" {:post {:summary "User Api",

  ;                               :description "User Api description",

  ;                               :tags ["user"],

  ;                               :parameters [{:in "path",

  ;                                             :name "id",

  ;                                             :description "",

  ;                                             :required true,

  ;                                             :type "string"}

  ;                                            {:in "body",

  ;                                             :name "User",

  ;                                             :description "",

  ;                                             :required true,

  ;                                             :schema {:$ref
  "#/definitions/User"}}],

  ;                               :responses {200 {:schema {:$ref
  "#/definitions/User"},

  ;                                                         :description "Found
  it!"},

  ;                                           404 {:description "Ohnoes."}}}}},

  ;  :definitions {"User" {:type "object",

  ;                        :properties {:id {:type "string"},

  ;                                     :name {:type "string"},

  ;                                     :address {:$ref
  "#/definitions/UserAddress"}},

  ;                        :additionalProperties false,

  ;                        :required (:id :name :address)},

  ;                "UserAddress" {:type "object",

  ;                               :properties {:street {:type "string"},

  ;                                                     :city {:type "string",

  ;                                                            :enum (:tre
  :hki)}},

  ;                               :additionalProperties false,

  ;                               :required (:street :city)}}}

  ```


  producing the following ui:


  ![ring-swagger](https://raw.githubusercontent.com/wiki/metosin/ring-swagger/ring-swagger.png)


  ## Customizing Swagger Spec output


  One can pass extra options-map as a third parameter to `swagger-json`. The
  following options are available:


  ```clojure
   :ignore-missing-mappings?        - (false) boolean whether to silently ignore
                                      missing schema to JSON Schema mappings. if
                                      set to false, IllegalArgumentException is
                                      thrown if a Schema can't be presented as
                                      JSON Schema.

   :default-response-description-fn - ((constantly "")) - a fn to generate default
                                      response descriptions from http status code.
                                      Takes a status code (Int) and returns a String.

   :handle-duplicate-schemas-fn     - (ring.swagger.core/ignore-duplicate-schemas),
                                      a function to handle possible duplicate schema
                                      definitions. Takes schema-name and set of found
                                      attached schema values as parameters. Returns
                                      sequence of schema-name and selected schema value.

   :collection-format               - Sets the collectionFormat for query and formData
                                      parameters.
                                      Possible values: multi, ssv, csv, tsv, pipes."
  ```


  For example, to get default response descriptions from the [HTTP
  Spec](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes),

  you can do the following:


  ```clojure

  (require '[ring.util.http-status :as status])


  (rs/swagger-json
    {:paths {"/hello" {:post {:responses {200 nil
                                          425 nil
                                          500 {:description "FAIL"}}}}}}
    {:default-response-description-fn status/get-description})

  ; {:swagger "2.0"

  ;  :info {:title "Swagger API" :version "0.0.1"}

  ;  :consumes ["application/json"]

  ;  :produces ["application/json"]

  ;  :definitions {}

  ;  :paths {"/hello" {:post {:responses {200 {:description "OK"}

  ;                                       425 {:description "The collection is
  unordered."}

  ;                                       500 {:description "FAIL"}}}}}}

  ```


  ## Validating the Swagger Spec


  The generated full spec can be validated against the [Swagger JSON
  Schema](https://raw.githubusercontent.com/reverb/swagger-spec/master/schemas/v2.0/schema.json)

  with the help of [scjsv](https://github.com/metosin/scjsv).


  ```clojure

  (require '[ring.swagger.validator :as v])


  (v/validate (rs/swagger-json {:paths {"/api/ping" {:get nil}}}))

  ; nil


  (v/validate (rs/swagger-json {:pathz {"/api/ping" {:get nil}}}))

  ; ({:level "error"

  ;   :schema {:loadingURI "#", :pointer ""}

  ;   :instance {:pointer ""}

  ;   :domain "validation"

  ;   :keyword "additionalProperties"

  ;   :message "object instance has properties which are not allowed by the
  schema: [\"pathz\"]", :unwanted ["pathz"]})

  ```


  For more information about creating your own adapter, see [Collecting API
  Documentation](https://github.com/metosin/ring-swagger/wiki/Collecting-API-Documentation).


  ## Transforming the Swagger Spec


  There are the following utility functions for transforming the spec (on the
  client side):


  `ring.swagger.swagger2/transform-operations` - transforms the operations under
  the :paths of a ring-swagger spec

  by applying `(f operation)` to all operations. If the function returns nil,
  the given operation is removed.


  As an example, one can filter away all operations with `:x-no-doc` set to
  `true`:


  ```clojure

  (defn remove-x-no-doc [endpoint]
    (if-not (some-> endpoint :x-no-doc true?)
      endpoint))

  (transform-operations remove-x-no-doc {:paths {"/a" {:get {:x-no-doc true},
  :post {}}
                                                 "/b" {:put {:x-no-doc true}}}}))
  ; {:paths {"/a" {:post {}}}}

  ```


  ## Web Schemas


  [Prismatic Schema](https://github.com/Prismatic/schema) is used to describe
  both the input & output schemas for routes.


  As Swagger 2.0 Spec Schema is a deterministic subset of JSON Schema, so not
  all Clojure Schema elements can be used.


  ### Schema to Swagger JSON Schema conversion


  There are two possible methods to do this:


  1. class-based dispatch via `ring.swagger.json-schema/convert-class`.

  2. protocol-based dispatch via `ring.swagger.json-schema/JsonSchema` - the
  `convert` fn.


  Both take the Schema and swagger options map as arguments. Options contain
  also `:in` to denote the possible location

  of the schema (`nil`, `:query`, `:header`, `:path`, `:formData` and `:body`).


  To support truly symmetric web schemas, one needs also to ensure both JSON
  Serialization and

  deserialization/coercion from JSON.


  ### Class-based dispatch


  ```clojure

  (require '[ring.swagger.json-schema :as json-schema])


  (defmethod json-schema/convert-class java.sql.Date [_ _] {:type "string"
  :format "date"})

  ```


  #### Protocol-based dispatch


  ```clojure

  (require '[ring.swagger.json-schema :as json-schema])


  (extend-type java.util.regex.Pattern
    json-schema/JsonSchema
    (json-schema/convert [e _]
      {:type "string" :pattern (str e)}))
  ```


  One can also use the options to create more accurate specs (via the `:in`
  option).


  ```clojure

  (extend-type schema.core.Maybe
    json-schema/JsonSchema
    (convert [e {:keys [in]}]
      (let [schema (->swagger (:schema e))]
        (if (#{:query :formData} in)
          (assoc schema :allowEmptyValue true)
          schema))))
  ```


  ### Out-of-the-box supported Schema elements


  | Clojure Schema                              | JSON Schema              |
  Sample JSON |

  |
  --------------------------------------------|--------------------------|:-----------:|

  | `Integer`                                   | integer, int32           | `1`

  | `Long`, `s/Int`                             | integer, int64           | `1`

  | `Double`, `Number`, `s/Num`                 | number, double           |
  `1.2`

  | `String`, `s/Str`, `Keyword`, `s/Keyword`, `Symbol`, `s/Symbol`, `s/Any`
  non-body-parameter | string                   | `"kikka"`

  | `Boolean`                                   | boolean                  |
  `true`

  | `nil`, `s/Any` body-parameter            | void                     |

  | `java.util.regex.Pattern`,                  | string, regex            |
  `[a-z0-9]`

  | `#"[a-z0-9]+"`                              | string, pattern          |
  `"a6"`

  | `s/Uuid`, `java.util.UUID`                  | string, uuid             |
  `"77e70512-1337-dead-beef-0123456789ab"`

  | `java.util.Date`, `org.joda.time.DateTime`, `s/Inst`, `java.time.Instant` |
  string, date-time        | `"2014-02-18T18:25:37.456Z"`, also without millis:
  `"2014-02-18T18:25:37Z"`

  | `org.joda.time.LocalDate`, `java.time.LocalDate` | string, date            
  | `"2014-02-19"`

  | `org.joda.time.LocalTime`, `java.time.LocalTime` | string, time            
  | `"16:22"`

  | `(s/enum X Y Z)`                            | *type of X*, enum(X,Y,Z)

  | `(s/maybe X)`                               | *type of X*

  | `(s/both X Y Z)`                            | *type of X*

  | `(s/constrained X pred)`                    | *type of X*

  | `(s/conditional p1 X p2 Y p3 Z)`            | *one of type X, Y, Z*

  | `(s/cond-pre X Y Z)`                        | *one of type X, Y, Z*

  | `(s/either X Y Z)`                          | *type of X*

  | `(s/named X name)`                          | *type of X*

  | `(s/one X name)`                            | *type of X*

  | `(s/recursive Var)`                         | *Ref to (model) Var*

  | `(s/eq X)`                                  | *type of class of X*, enum(X)

  | `(s/optional-key X)`                        | *optional key*

  | `(s/required-key X)`                        | *required key*

  | `s/Keyword` (as a key)                      | *ignored*


  - All supported types have symmetric JSON serialization (Cheshire encoders) &
  deserialization (Schema coercions)

  - Vectors, Sets and Maps can be used as containers

  - Maps are presented as Complex Types and References. Model references are
  resolved automatically.
    - Nested maps are transformed automatically into flat maps with generated child references
    - Maps can be within valid containers (as only element - heterogeneous schema sequences not supported by the spec)

  ### Missing Schema elements


  If Ring-swagger can't transform the Schemas into JSON Schemas, by default a
  `IllegalArgumentException` will be thrown.

  Setting the `:ignore-missing-mappings?` to `true` causes the errors to be
  ignored - missing schema elements will be

  ignored from the generated Swagger schema.


  ### Body and Response model names


  Standard Prismatic Schema names are used. Nested schemas are traversed and all
  found sub-schemas are named

  automatically - so that they can be referenced in the generated Swagger spec.


  Swagger 2.0 squashes all api models into a single global namespace, so schema
  name collisions can happen.

  When this happens, the function defined by `:handle-duplicate-schemas-fn`
  option is called to resolve the collision.

  By default, the collisions are ignored.


  One accidental reason for schema name collisions is the use of normal
  `clojure.core` functions to create transformed

  copies of the schemas. The normal core functions retain the original schema
  meta-data and by so the schema name.


  ```clojure

  (s/defschema User {:id s/Str, :name s/Str})

  (def NewUser (dissoc User :id)) ; dissoc does not remove the schema meta-data


  (meta User)

  ; {:name User :ns user}



  (meta NewUser)

  ; {:name User :ns user} <--- fail, now there are two User-schemas around.

  ```


  There are better schema transformers functions available at
  [schema-tools](https://github.com/metosin/schema-tools).

  It's an implicit dependency of ring-swagger.


  ### Extra Schema elements supported by `ring.swagger.json-schema-dirty`


  Some Schema elements are impossible to accurately describe within boundaries
  of JSON-Schema or Swagger spec.

  You can require `ring.swagger.json-schema-dirty` namespace to get JSON Schema
  dispatching for the following:


  **WARNING** Swagger-UI might not display these correctly and the code
  generated by swagger-codegen will be inaccurate.


  | Clojure | JSON Schema | Sample  |

  | --------|-------|:------------:|

  | `(s/conditional pred X pred Y pred Z)` | x-oneOf: *type of X*, *type of Y*,
  *type of Z*

  | `(s/if pred X Y)` | x-oneOf: *type of X*, *type of Y*


  ### Schema coercion


  Ring-swagger uses [Schema
  coercions](http://plumatic.github.io/schema-0-2-0-back-with-clojurescript-data-coercion)

  for transforming the input data into vanilla Clojure and back.


  There are two coercers in `ring.swagger.coerce`, the
  `json-schema-coercion-matcher` and `query-schema-coercion-matcher`.

  These are enchanced versions of the original Schema coercers, adding support
  for all the supported Schema elements,

  including Dates & Regexps.


  #### Custom Coercions


  In order to allow for custom input coercion, ring-swagger includes a
  multimethod 'custom-matcher' that can be implemented for custom input types.
  For example, to coerce currency strings into joda.money.Money objects, you can
  implement the following:


  ```clojure

  (require '[ring.swagger.coerce :as coerce])

  (import org.joda.money.Money)


  (defmethod coerce/custom-matcher org.joda.money.Money  [_] 
  #(org.joda.money.Money/parse %))

  ```


  This will allow org.joda.money.Money objects in your Schema definitions to be
  coerced correctly. However, this is only for coercing input, see [Schema to
  Swagger JSON Schema conversion](#schema-to-swagger-json-schema-conversion) for
  examples on transforming output.


  #### Coerce!


  Ring-swagger provides a convenience function for coercion,
  `ring.swagger.schema/coerce!`. It returns either a valid

  coerced value of slingshots an Map with type
  `:ring.swagger.schema/validation`. One can catch these exceptions via

  `ring.swagger.middleware/wrap-validation-errors` and return a JSON-friendly
  map of the contents.


  ```clojure

  (require '[schema.core :as s])

  (require '[ring.swagger.schema :refer [coerce!]])


  (s/defschema Bone {:size Long, :animal (s/enum :cow :tyrannosaurus)})


  (coerce! Bone {:size 12, :animal "cow"})

  ; {:animal :cow, :size 12}


  (coerce! Bone {:animal :sheep})

  ; ExceptionInfo throw+: #schema.utils.ErrorContainer{:error {:animal (not
  (#{:tyrannosaurus :cow} :sheep)), :size missing-required-key}, :type
  :ring.swagger.schema/validation}  ring.swagger.schema/coerce! (schema.clj:57)

  ```


  ## Adding description to Schemas


  One can add extra meta-data, including descriptions to schema elements using
  `ring.swagger.json-schema/field` and `ring.swagger.json-schema/describe`
  functions. These work by adding meta-data to schema under `:json-schema`-key.
  Objects which don't natively support meta-data, like Java classes, are wrapped
  automatically into `ring.swagger.json-schema/FieldSchema` to enable the
  meta-data.


  ### Example


  ```clojure

  (require '[schema.core :as s])

  (require '[ring.swagger.schema :as rs])

  (require '[ring.swagger.json-schema :as rjs])


  (s/defschema Required
    (rjs/field
      {(s/optional-key :name) s/Str
       (s/optional-key :title) s/Str
       :address (rjs/field
                  {:street (rsjs/field s/Str {:description "description here"})}
                  {:description "Streename"
                   :example "Ankkalinna 1"})}
      {:minProperties 1
       :description "I'm required"
       :example {:name "Iines"
                 :title "Ankka"}}))

  ; produces the following JSON Schema models =>

  ;

  ; {"Required" {:type "object"

  ;              :description "I'm required"

  ;              :example {:name "Iines"

  ;                        :title "Ankka"}

  ;              :minProperties 1

  ;              :required [:address]

  ;              :properties {:name {:type "string"}

  ;                           :title {:type "string"}

  ;                           :address {:$ref "#/definitions/RequiredAddress"}}

  ;              :additionalProperties false}

  ;  "RequiredAddress" {:type "object"

  ;                     :description "Streename"

  ;                     :example "Ankkalinna 1"

  ;                     :properties {:street {:type "string"

  ;                                           :description "description here"}}

  ;                     :required [:street]

  ;                     :additionalProperties false}}

  ```


  ## License


  Copyright © 2014-2018 [Metosin Oy](http://www.metosin.fi)


  Distributed under the Eclipse Public License, the same as Clojure.
byjg/php-swagger-test: >+
  # PHP Swagger Test

  [![Build
  Status](https://travis-ci.org/byjg/php-swagger-test.svg?branch=master)](https://travis-ci.org/byjg/php-swagger-test)

  [![Maintainable
  Rate](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=sqale_rating)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Reliability
  Rate](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Security
  Rate](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=security_rating)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Quality
  Gate](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=alert_status)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Code
  Coverage](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=coverage)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Bugs](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=bugs)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Code
  Smells](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=code_smells)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Techinical
  Debt](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=sqale_index)](https://sonarcloud.io/dashboard?id=php-swagger-test)

  [![Vulnerabilities](https://sonarcloud.io/api/project_badges/measure?project=php-swagger-test&metric=vulnerabilities)](https://sonarcloud.io/dashboard?id=php-swagger-test)


  [![Scrutinizer Code
  Quality](https://scrutinizer-ci.com/g/byjg/php-swagger-test/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/byjg/php-swagger-test/?branch=master)


  A set of tools for test your REST calls based on the swagger documentation
  using PHPUnit.


  PHP Swagger Test can help you to test your REST Api. You can use this tool
  both for Unit Tests or Functional Tests.


  This tool reads a previously Swagger JSON file (not YAML) and enable you to
  test the request and response. 

  You can use the tool "https://github.com/zircote/swagger-php" for create the
  JSON file when you are developing your

  rest API. 


  The SwaggerTest's assertion process is based on throwing exceptions if some
  validation or test failed.


  You can use the Swagger Test as:


  - Functional test sases

  - Unit test cases

  - Runtime parameters validator


  # Using it as Functional Test cases


  Swagger Test provide the class `SwaggerTestCase` for you extend and create a
  PHPUnit test case. The code will try to 

  make a request to your API Method and check if the request parameters, status
  and object returned are OK. 


  ```php

  <?php

  /**
   * Create a TestCase inherited from SwaggerTestCase
   */
  class MyTestCase extends \ByJG\Swagger\SwaggerTestCase

  {
      protected $filePath = '/path/to/json/definition';
      
      /**
       * Test if the REST address /path/for/get/ID with the method GET returns what is
       * documented on the "swagger.json"
       */
      public function testGet()
      {
          $request = new \ByJG\Swagger\SwaggerRequester();
          $request
              ->withMethod('GET')
              ->withPath("/path/for/get/1");

          $this->assertRequest($request);
      }

      /**
       * Test if the REST address /path/for/get/NOTFOUND returns a status code 404.
       */
      public function testGetNotFound()
      {
          $request = new \ByJG\Swagger\SwaggerRequester();
          $request
              ->withMethod('GET')
              ->withPath("/path/for/get/NOTFOUND")
              ->assertResponseCode(404);

          $this->assertRequest($request);
      }

      /**
       * Test if the REST address /path/for/post/ID with the method POST  
       * and the request object ['name'=>'new name', 'field' => 'value'] will return an object
       * as is documented in the "swagger.json" file
       */
      public function testPost()
      {
          $request = new \ByJG\Swagger\SwaggerRequester();
          $request
              ->withMethod('POST')
              ->withPath("/path/for/post/2")
              ->withRequestBody(['name'=>'new name', 'field' => 'value']);

          $this->assertRequest($request);
      }

      /**
       * Test if the REST address /another/path/for/post/{id} with the method POST  
       * and the request object ['name'=>'new name', 'field' => 'value'] will return an object
       * as is documented in the "swagger.json" file
       */
      public function testPost2()
      {
          $request = new \ByJG\Swagger\SwaggerRequester();
          $request
              ->withMethod('POST')
              ->withPath("/path/for/post/3")
              ->withQuery(['id'=>10])
              ->withRequestBody(['name'=>'new name', 'field' => 'value']);

          $this->assertRequest($request);
      }

  }

  ```


  # Using it as Unit Test cases


  If you want mock the request API and just test the expected parameters you are
  sending and 

  receiving you have to:


  **1. Create the Swagger Test Schema**


  ```php

  <?php

  $swaggerSchema = new \ByJG\Swagger\SwaggerSchema($contentsOfSwaggerJson);

  ```


  **2. Get the definitions for your path**


  ```php

  <?php

  $path = '/path/to/method';

  $statusExpected = 200;

  $method = 'POST';


  // Returns a SwaggerRequestBody instance

  $bodyRequestDef = $swaggerSchema->getRequestParameters($path, $method);


  // Returns a SwaggerResponseBody instance

  $bodyResponseDef = $swaggerSchema->getResponseParameters($path, $method,
  $statusExpected);

  ```


  **3. Match the result**


  ```php

  <?php

  if (!empty($requestBody)) {
      $bodyRequestDef->match($requestBody);
  }

  $bodyResponseDef->match($responseBody);

  ```


  If the request or response body does not match with the definition an
  exception NotMatchException will

  be throwed. 


  ## Using it as Runtime parameters validator


  This tool was not developed only for unit and functional tests. You can use to
  validate if the required body

  parameters is the expected. 


  So, before your API Code you can validate the request body using:


  ```php

  <?php

  $swaggerSchema = new \ByJG\Swagger\SwaggerSchema($contentsOfSwaggerJson);

  $bodyRequestDef = $swaggerSchema->getRequestParameters($path, $method);

  $bodyRequestDef->match($requestBody);

  ```


  # Install


  ```

  composer require "byjg/swagger-test=1.2.*"

  ```


  # Questions?


  Use the Github issue.

alekseyl/mini-apivore: >
  # MiniApivore


  MiniApivore is an adaptation of apivore gem for mini-test instead of rspec. 


  Original project: https://github.com/westfieldlabs/apivore


  So base credits are for the apivore authors, this is 60% copy/paste of
  original project. 

  Rem: didn't forked cause didn't expect it to be a relatively small changes.


  Code-Test-Document, the idea of how things are need to be done:
  https://medium.com/@leshchuk/code-test-document-9b79921307a5


  ## What's new/different

  * Swagger schema can be loaded from a file or directly. There can be one
  schema per MiniTestClass. 

  * Removed all dependencies of active support and rails. See tests as an
  example on how 
    to use a mini-apivore outside a rails 
  * Didn't implement a custom schema validator ( but I keeped an original schema
  and code from apivore in case of a future need )

  * Test for untested routes now added by default at the end of all
  runnable_methods

  * Much simplified tests against original project, rspec is replaced with
  minitest

  * Removed all rspec dependencies and usage.


  ## Installation


  Add this line to your application's Gemfile:


  ```ruby

  gem 'mini-apivore'

  ```


  And then execute:

      $ bundle

  Or install it yourself as:

      $ gem install mini-apivore

  ## Usage


  To start testing routes with mini_apivore you need: 


  * ```require 'mini_apivore' ``` in you MiniTest class file

  * ```include MiniApivore``` in you MiniTest class 

  * ```init_swagger('/apidocs.json')``` init swagger-schema against which
  yourtest are gonna run

  * Run ```check_route( :get, '/cards.json', OK )``` against all routes in your
  swagger schema


  You can see example in test/mini_apivore/mini_apivore/api_schemas_test.rb


  Here another complete example of testing simple internal REST api for Card
  model 

  with devise integration as authentication framework


  ```ruby

  #mini_apivore_helper.rb

  require 'mini_apivore'


  # this is simple intermediate class for apivore tes classes

  class MiniApivoreTest < ActionDispatch::IntegrationTest
    include Devise::Test::IntegrationHelpers
    include MiniApivore

    # swagger checker initialized once per class, but since we using one definition
    # for all we can just redefine original swagger_checker
    def swagger_checker;
      SWAGGER_CHECKERS[MiniApivoreTest]
    end
    
  end

  ```


  ```ruby

  #cards_api_test.rb

  require 'test_helper'

  require 'mini_apivore_helper'


  class CardsApiTest < MiniApivoreTest

    test 'cards unauthorized' do
      card = cards(:valid_card_1)
      check_route( :get, '/cards.json', NOT_AUTHORIZED )
      # check_route using to_param inside
      check_route( :get, '/cards/{id}.json', NOT_AUTHORIZED, id: card )
      check_route( :patch, '/cards/{id}.json', NOT_AUTHORIZED, id: card,
                   _data: { card: { title: '1' } } )
      check_route( :post, '/cards.json', NOT_AUTHORIZED,  _data: { card: { title: '1' } } )
      check_route( :delete, '/cards/{id}.json', NOT_AUTHORIZED, id: card )
    end

    test 'cards forbidden' do
      sign_in( users(:first_user) )
      # card with restricted privileges 
      card = cards(:restricted_card)

      check_route( :get, '/cards/{id}.json', FORBIDDEN, id: card )
      check_route( :patch, '/cards/{id}.json', FORBIDDEN, id: card,
                   _data: { card: { title: '1' } } )

      # this may be added if not all users can create cards 
      # check_route( :post, '/cards.json', FORBIDDEN,  _data: { card: { title: '1' } } )

      check_route( :delete, '/cards/{id}.json', FORBIDDEN, id: card )
    end


    test 'cards not_found' do
      sign_in( users(:first_user) )
      check_route( :get, '/cards/{id}.json', NOT_FOUND, id: -1 )
      check_route( :patch, '/cards/{id}.json', NOT_FOUND, id: -1 )
      check_route( :delete, '/cards/{id}.json', NOT_FOUND, id: -1 )
    end


    test 'cards REST authorized' do
      sign_in( users(:first_user) )
      check_route( :get, '/cards.json', OK )
      check_route( :get, '/cards/{id}.json', OK, id: cards(:valid_card_1) )
      

      assert_difference( -> { Card.count } ) do
        check_route( :post, '/cards.json', OK,
                     _data: {
                       card: { title: 'test card creation', 
                       card_preview_img_attributes: {
                                  upload: fixture_file_upload( Rails.root.join('test', 'fixtures', 'files', 'test.png') ,'image/png')
                                }
                       } } )
      end
      assert( 'test card creation' == Card.last.title )

      check_route( :patch, '/cards/{id}.json', OK,
                   _data: { card: { title: 'Nothing' } }, id: Card.last )

      assert(Card.last.title == 'Nothing' )

      assert_difference( -> { Card.count }, -1 ) do
        check_route( :delete, '/cards/{id}.json', OK, id:  Card.last )
      end

    end
  end

  ```


  ## Development


  After checking out the repo, run `bin/setup` to install dependencies. Then,
  run `rake test` to run the tests. You can also run `bin/console` for an
  interactive prompt that will allow you to experiment.


  To install this gem onto your local machine, run `bundle exec rake install`.
  To release a new version, update the version number in `version.rb`, and then
  run `bundle exec rake release`, which will create a git tag for the version,
  push git commits and tags, and push the `.gem` file to
  [rubygems.org](https://rubygems.org).


  ## Contributing


  Bug reports and pull requests are welcome on GitHub at
  https://github.com/[USERNAME]/mini-apivore. This project is intended to be a
  safe, welcoming space for collaboration, and contributors are expected to
  adhere to the [Contributor Covenant](http://contributor-covenant.org) code of
  conduct.


  ## License


  The gem is available as open source under the terms of the [MIT
  License](http://opensource.org/licenses/MIT).
Surnet/swagger-jsdoc: >
  # swagger-jsdoc


  Document your code and keep a live and reusable OpenAPI (Swagger)
  specification. This specification can be the core of your API-driven project:
  generate

  documentation, servers, clients, tests and much more based on the rich
  [OpenAPI ecosystem of tools](http://swagger.io/).


  [![npm
  Version](https://img.shields.io/npm/v/swagger-jsdoc.svg)](https://www.npmjs.com/package/swagger-jsdoc)

  [![npm
  Downloads](https://img.shields.io/npm/dm/swagger-jsdoc.svg)](https://www.npmjs.com/package/swagger-jsdoc)

  [![CircleCI](https://circleci.com/gh/Surnet/swagger-jsdoc.svg?style=svg)](https://circleci.com/gh/Surnet/swagger-jsdoc)

  [![Known
  Vulnerabilities](https://snyk.io/test/github/Surnet/swagger-jsdoc/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Surnet/swagger-jsdoc?targetFile=package.json)


  ## Goals


  **swagger-jsdoc** enables you to integrate [Swagger](http://swagger.io)

  using [`JSDoc`](http://usejsdoc.org/) comments in your code. Just add
  `@swagger` on top of your DocBlock and declare the meaning of your code in
  YAML complying to the OpenAPI specification. If you prefer to keep some parts
  of your specification aside your code in order to keep it lighter/cleaner, you
  can also pass these parts as separate input YAML files.


  `swagger-jsdoc` will parse the above-mentioned and output an OpenAPI
  specification. You can use it to integrate any server and client technology as
  long as both sides comply with the specification.


  Thus, the `swagger-jsdoc` project assumes that you want document your
  existing/living/working code in a way to "give life" to it, generating a
  specification which can then be fed into other Swagger tools, and not the
  vice-versa.


  If you prefer to write the OpenAPI specification first and separately, you
  might check other projects facilitating this, such as


  - [swagger-editor](http://swagger.io/swagger-editor/)

  - [swagger-node](https://github.com/swagger-api/swagger-node)


  ## Supported versions


  - OpenAPI 3.x

  - Swagger 2.0


  To make sure your end specification is valid, do read the most up-to date
  official [OpenAPI
  specification](https://github.com/OAI/OpenAPI-Specification).


  ## Installation


  ```bash

  $ npm install swagger-jsdoc --save

  ```


  Or using [`yarn`](https://yarnpkg.com/en/)


  ```bash

  $ yarn add swagger-jsdoc

  ```


  ### Fundamental concepts


  Before you start writing your specification and/or documentation, please keep
  in mind that there are two fundamental concepts you need to wrap you head
  around when working with `swagger-jsdoc` - definition object and input APIs.


  Definition object maps to [OpenAPI
  object](https://swagger.io/specification/#oasObject). This is where you would
  add information about your API and any root-level properties. Definition
  object is a required parameter.


  Input APIs are any files which you pass as arguments to the program in order
  to extract information about your API. For instance, these could be `.js`
  files with JSDoc comments or `.yaml` files directly. This parameter is also
  required.


  There are a few ways by which you can pass these 2 required arguments:


  When using the CLI:


  - Through `apis` property in your definition object.

  - Through arguments


  When using the Node API:


  - Through `apis` in your `options` object.


  For example, given the following module export for a definition object:


  ```javascript

  // Taken from example/v2/swaggerDef.js


  module.exports = {
    info: {
      // API informations (required)
      title: 'Hello World', // Title (required)
      version: '1.0.0', // Version (required)
      description: 'A sample API', // Description (optional)
    },
    host, // Host (optional)
    basePath: '/', // Base path (optional)
  };

  ```


  One way you can make use of this definition is by using the CLI as following:


  ```sh

  $ swagger-jsdoc -d example/v2/swaggerDef.js example/v2/route*.js

  ```


  If you, however, want to skip the arguments and still use the CLI, you will
  need to update the definition object as following:


  ```javascript

  // Taken from example/v2/swaggerDef.js


  module.exports = {
    ...
    apis: ['example/v2/route*.js'] // <-- We add this property:
    basePath: '/', // Base path (optional)
  };

  ```


  And then you will be able to use the CLI as following:


  ```sh

  $ swagger-jsdoc -d example/v2/swaggerDef.js

  ```


  When using the Node API, input APIs come in in the following way:


  ```javascript

  const swaggerJSDoc = require('swagger-jsdoc');


  const swaggerDefinition = {
    ...
    basePath: '/', // Base path (optional)
  };


  const options = {
    swaggerDefinition,
    apis: ['./example/v2/routes*.js'], // <-- not in the definition, but in the options
  };


  const swaggerSpec = swaggerJSDoc(options);

  ```


  ### Quick Start


  [Get started](./docs/GETTING-STARTED.md) by documenting your code.


  Note that `swagger-jsdoc` uses [node
  glob](https://github.com/isaacs/node-glob) module in the background when
  taking your files. This means that you can use patterns such as `*.js` to
  select all javascript files or `**/*.js` to select all javascript files in
  sub-folders recursively.


  Paths provided are relative to the current directory from which you execute
  the program.


  ### Examples


  There are plenty of examples you can use to start off:


  - `example`: contains an example app with version 2 of the specification. It
  will give you an idea how to annotate your comments in order to include them
  in the output specification.

  - `test/cli`: CLI tests you can read to get ideas about the available
  functionalities of the CLI. (apart from the obvious help menu)

  - `test/example`: various assets for tests you can also re-use for starting
  definitions, routes, etc.


  ### CLI


  On top of the Node API, there is also a [command line
  interface](./docs/CLI.md).


  ### Reporting issues


  Before submitting new issues, please make sure you first search for existing
  such. It is quite possible that the topic you would like to bring up has been
  discussed already.


  In case of an issue which hasn't been considered yet, please include as much
  information as possible about the issue. This will help maintainers and other
  users relate to your problem at hand.


  For instance:


  - Describe what you were doing when the issue appeared.

  - Add a set of steps to reproduce your issue.

  - Include screenshots.

  - Give examples on expected vs actual behavior.


  ### Contributing


  - Fork the project and clone it locally.

  - Create branches for each separate topic. Any standard you are used to follow
  for [semantic commit
  messages](https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716)
  will be highly appreciated.

  - Comment your code as if you are going to maintain it in the future.

  - Use the rich set of unit tests as an example and add your unit tests as
  well. This will not only enable you to programatically reproduce your fix
  faster than setting up an application, but it will also make you super cool!
  :)

  - Push to your changes to the origin of your repository and create a new pull
  request towards the upstream master.


  Thank you!
domaindrivendev/Swashbuckle: >
  | :mega: Calling for Maintainers |

  |--------------|

  | With the introduction of [ASP.NET Core](https://www.asp.net/core), I've now
  shifted my focus to the Core-specific project -
  [Swashbuckle.AspNetCore](https://github.com/domaindrivendev/Swashbuckle.AspNetCore).
  That will be receiving most of my (already limited) personal time, and so I
  won't have the capacity to maintain this one at a sufficient rate. Still, I'd
  love to see it live on and am seeking one or two "core" contributors /
  maintainers to help out. Ideally, these would be people who have already
  contributed through PRs and understand the inner workings and overall design.
  Once signed-up, we can agree on an approach that works - ultimately, I want to
  remove myself as the bottleneck to merging PRs and getting fresh Nugets
  published. If you're interested, please let me know by adding a comment
  [here](https://github.com/domaindrivendev/Swashbuckle/issues/1053) |


  Swashbuckle

  =========


  [![Build
  status](https://ci.appveyor.com/api/projects/status/qoesh4nm6tb6diuk?svg=true)](https://ci.appveyor.com/project/domaindrivendev/swashbuckle)


  Seamlessly adds a [Swagger](http://swagger.io/) to WebApi projects! Combines
  ApiExplorer and Swagger/swagger-ui to provide a rich discovery, documentation
  and playground experience to your API consumers.


  In addition to its Swagger generator, Swashbuckle also contains an embedded
  version of [swagger-ui](https://github.com/swagger-api/swagger-ui) which it
  will automatically serve up once Swashbuckle is installed. This means you can
  complement your API with a slick discovery UI to assist consumers with their
  integration efforts. Best of all, it requires minimal coding and maintenance,
  allowing you to focus on building an awesome API!


  And that's not all ...


  Once you have a Web API that can describe itself in Swagger, you've opened the
  treasure chest of Swagger-based tools including a client generator that can be
  targeted to a wide range of popular platforms. See
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more
  details.


  **Swashbuckle Core Features:**


  * Auto-generated [Swagger
  2.0](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)

  * Seamless integration of swagger-ui

  * Reflection-based Schema generation for describing API types

  * Extensibility hooks for customizing the generated Swagger doc

  * Extensibility hooks for customizing the swagger-ui

  * Out-of-the-box support for leveraging Xml comments

  * Support for describing ApiKey, Basic Auth and OAuth2 schemes ... including
  UI support for the Implicit OAuth2 flow


  **Swashbuckle 5.0**


  Swashbuckle 5.0 makes the transition to Swagger 2.0. The 2.0 schema is
  significantly different to its predecessor (1.2) and, as a result, the
  Swashbuckle config interface has undergone yet another overhaul. Checkout the
  [transition guide](#transitioning-to-swashbuckle-50) if you're upgrading from
  a prior version.


  ## Getting Started ##


  There are currently two Nuget packages - the Core library (Swashbuckle.Core)
  and a convenience package (Swashbuckle)  - that provides automatic
  bootstrapping. The latter is only applicable to regular IIS hosted Web APIs.
  For all other hosting environments, you should only install the Core library
  and then follow the instructions below to manually enable the Swagger routes.


  Once installed and enabled, you should be able to browse the following Swagger
  docs and UI endpoints respectively:


  ***\<your-root-url\>/swagger/docs/v1***


  ***\<your-root-url\>/swagger***


  ### IIS Hosted ###


  If your service is hosted in IIS, you can start exposing Swagger docs and a
  corresponding swagger-ui by simply installing the following Nuget package:

      Install-Package Swashbuckle

  This will add a reference to Swashbuckle.Core and also install a bootstrapper
  (App_Start/SwaggerConfig.cs) that enables the Swagger routes on app start-up
  using [WebActivatorEx](https://github.com/davidebbo/WebActivator).


  ### Self-hosted ###


  If your service is self-hosted, just install the Core library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and, optionally, the swagger-ui by
  invoking the following extension methods (in namespace
  Swashbuckle.Application) on an instance of HttpConfiguration (e.g. in
  Program.cs)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi();
  ```


  ### OWIN  ###


  If your service is hosted using OWIN middleware, just install the Core
  library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and swagger-ui by invoking the extension
  methods (in namespace Swashbuckle.Application) on an instance of
  HttpConfiguration (e.g. in Startup.cs)


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi();    
  ```


  ## Troubleshooting ##


  Troubleshooting??? I thought this was all supposed to be "seamless"? OK you've
  called me out! Things shouldn't go wrong, but if they do, take a look at the
  [FAQs](#troubleshooting-and-faqs) for inspiration.


  ## Customizing the Generated Swagger Docs ##


  The following snippet demonstrates the minimum configuration required to get
  the Swagger docs and swagger-ui up and running:

  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
        .EnableSwaggerUi();
  ```


  These methods expose a range of configuration and extensibility options that
  you can pick and choose from, combining the convenience of sensible defaults
  with the flexibility to customize where you see fit. Read on to learn more.


  ### Custom Routes ###


  The default route templates for the Swagger docs and swagger-ui are
  "swagger/docs/{apiVersion}" and "swagger/ui/{\*assetPath}" respectively.
  You're free to change these so long as the provided templates include the
  relevant route parameters - {apiVersion} and {\*assetPath}.


  ```csharp

  httpConfiguration
      .EnableSwagger("docs/{apiVersion}/swagger", c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi("sandbox/{*assetPath}");
  ```


  In this case the URL to swagger-ui will be `sandbox/index`.


  ### Pretty Print ###


  If you want the output Swagger docs to be indented properly, enable the
  __PrettyPrint__ option as following:


  ```cs

  httpConfiguration
      .EnableSwagger(c => c.PrettyPrint())
      .EnableSwaggerUi();
  ```


  ### Additional Service Metadata ###


  In addition to operation descriptions, Swagger 2.0 includes several properties
  to describe the service itself. These can all be provided through the
  configuration API:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.RootUrl(req => GetRootUrlFromAppConfig());

              c.Schemes(new[] { "http", "https" });

              c.SingleApiVersion("v1", "Swashbuckle.Dummy")
                  .Description("A sample API for testing and prototyping Swashbuckle features")
                  .TermsOfService("Some terms")
                  .Contact(cc => cc
                      .Name("Some contact")
                      .Url("http://tempuri.org/contact")
                      .Email("some.contact@tempuri.org"))
                  .License(lc => lc
                      .Name("Some License")
                      .Url("http://tempuri.org/license"));
          });
  ```

  #### RootUrl ####


  By default, the service root url is inferred from the request used to access
  the docs. However, there may be situations (e.g. proxy and load-balanced
  environments) where this does not resolve correctly. You can workaround this
  by providing your own code to determine the root URL.


  #### Schemes ####


  If schemes are not explicitly provided in a Swagger 2.0 document, then the
  scheme used to access the docs is taken as the default. If your API supports
  multiple schemes and you want to be explicit about them, you can use the
  __Schemes__ option.


  #### SingleApiVersion ####


  Use this to describe a single version API. Swagger 2.0 includes an "Info"
  object to hold additional metadata for an API. Version and title are required
  but you may also provide additional fields as shown above.


  __NOTE__: If your Web API is hosted in IIS, you should avoid using full-stops
  in the version name (e.g. "1.0"). The full-stop at the tail of the URL will
  cause IIS to treat it as a static file (i.e. with an extension) and bypass the
  URL Routing Module and therefore, Web API. 


  ### Describing Multiple API Versions ###


  If your API has multiple versions, use __MultipleApiVersions__ instead of
  __SingleApiVersion__. In this case, you provide a lambda that tells
  Swashbuckle which actions should be included in the docs for a given API
  version. Like __SingleApiVersion__, __Version__ also returns an "Info" builder
  so you can provide additional metadata per API version.


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.MultipleApiVersions(
                  (apiDesc, targetApiVersion) => ResolveVersionSupportByRouteConstraint(apiDesc, targetApiVersion),
                  (vc) =>
                  {
                      vc.Version("v2", "Swashbuckle Dummy API V2");
                      vc.Version("v1", "Swashbuckle Dummy API V1");
                  });
          });
      .EnableSwaggerUi(c =>
          {
              c.EnableDiscoveryUrlSelector();
          });
  ```


  \* You can also enable a select box in the swagger-ui (as shown above) that
  displays a discovery URL for each version. This provides a convenient way for
  users to browse documentation for different API versions.


  ### Describing Security/Authorization Schemes ###


  You can use BasicAuth, __ApiKey__ or __OAuth2__ options to describe security
  schemes for the API. See
  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md for
  more details.


  ```csharp

  httpConfiguration
       .EnableSwagger(c =>
           {
               //c.BasicAuth("basic")
               //    .Description("Basic HTTP Authentication");

               //c.ApiKey("apiKey")
               //    .Description("API Key Authentication")
               //    .Name("apiKey")
               //    .In("header");

               c.OAuth2("oauth2")
                   .Description("OAuth2 Implicit Grant")
                   .Flow("implicit")
                   .AuthorizationUrl("http://petstore.swagger.wordnik.com/api/oauth/dialog")
                   //.TokenUrl("https://tempuri.org/token")
                   .Scopes(scopes =>
                   {
                       scopes.Add("read", "Read access to protected resources");
                       scopes.Add("write", "Write access to protected resources");
                   });

               c.OperationFilter<AssignOAuth2SecurityRequirements>();
           });
       .EnableSwaggerUi(c =>
           {
               c.EnableOAuth2Support("test-client-id", "test-realm", "Swagger UI");
           });
  ```

  __NOTE:__ These only define the schemes and need to be coupled with a
  corresponding "security" property at the document or operation level to
  indicate which schemes are required for each operation.  To do this, you'll
  need to implement a custom IDocumentFilter and/or IOperationFilter to set
  these properties according to your specific authorization implementation


  \* If your API supports the OAuth2 Implicit flow, and you've described it
  correctly, according to the Swagger 2.0 specification, you can enable UI
  support as shown above.


  ### Customize the Operation Listing ###


  If necessary, you can ignore obsolete actions and provide custom
  grouping/sorting strategies for the list of Operations in a Swagger document:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.IgnoreObsoleteActions();

              c.GroupActionsBy(apiDesc => apiDesc.HttpMethod.ToString());

              c.OrderActionGroupsBy(new DescendingAlphabeticComparer());
          });
  ```

  #### IgnoreObsoleteActions ####


  Set this flag to omit operation descriptions for any actions decorated with
  the Obsolete attribute


  __NOTE__: If you want to omit specific operations but without using the
  Obsolete attribute, you can create an IDocumentFilter or make use of the built
  in ApiExplorerSettingsAttribute


  #### GroupActionsBy ####


  Each operation can be assigned one or more tags which are then used by
  consumers for various reasons. For example, the swagger-ui groups operations
  according to the first tag of each operation. By default, this will be the
  controller name but you can use this method to override with any value.


  #### OrderActionGroupsBy ####


  You can also specify a custom sort order for groups (as defined by
  __GroupActionsBy__) to dictate the order in which operations are listed. For
  example, if the default grouping is in place (controller name) and you specify
  a descending alphabetic sort order, then actions from a ProductsController
  will be listed before those from a CustomersController. This is typically used
  to customize the order of groupings in the swagger-ui.


  ### Modifying Generated Schemas ###


  Swashbuckle makes a best attempt at generating Swagger compliant JSON schemas
  for the various types exposed in your API. However, there may be occasions
  when more control of the output is needed.  This is supported through the
  following options:


  ```csharp

  httpConfiguration
        .EnableSwagger(c =>
            {
                c.MapType<ProductType>(() => new Schema { type = "integer", format = "int32" });

                c.SchemaFilter<ApplySchemaVendorExtensions>();

                //c.UseFullTypeNameInSchemaIds();

                c.SchemaId(t => t.FullName.Contains('`') ? t.FullName.Substring(0, t.FullName.IndexOf('`')) : t.FullName);
                
                c.IgnoreObsoleteProperties();

                c.DescribeAllEnumsAsStrings();
            });
  ```


  #### MapType ####


  Use this option to override the Schema generation for a specific type.


  It should be noted that the resulting Schema will be placed "inline" for any
  applicable Operations. While Swagger 2.0 supports inline definitions for "all"
  Schema types, the swagger-ui tool does not. It expects "complex" Schemas to be
  defined separately and referenced. For this reason, you should only use the
  __MapType__ option when the resulting Schema is a primitive or array type.


  If you need to alter a complex Schema, use a Schema filter.


  #### SchemaFilter ####


  If you want to post-modify "complex" Schemas once they've been generated,
  across the board or for a specific type, you can wire up one or more Schema
  filters.


  ISchemaFilter has the following interface:


  ```csharp

  void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type);

  ```


  A typical implementation will inspect the system Type and modify the Schema
  accordingly. If necessary, the schemaRegistry can be used to obtain or
  register Schemas for other Types


  #### UseFullTypeNamesInSchemaIds ####


  In a Swagger 2.0 document, complex types are typically declared globally and
  referenced by unique Schema Id. By default, Swashbuckle does NOT use the full
  type name in Schema Ids. In most cases, this works well because it prevents
  the "implementation detail" of type namespaces from leaking into your Swagger
  docs and UI. However, if you have multiple types in your API with the same
  class name, you'll need to opt out of this behavior to avoid Schema Id
  conflicts.  


  #### SchemaId ####


  Use this option to provide your own custom strategy for inferring SchemaId's
  for describing "complex" types in your API.


  #### IgnoreObsoleteProperties ####


  Set this flag to omit schema property descriptions for any type properties
  decorated with the Obsolete attribute 


  #### DescribeAllEnumsAsStrings ####


  In accordance with the built in JsonSerializer, Swashbuckle will, by default,
  describe enums as integers. You can change the serializer behavior by
  configuring the StringEnumConverter globally or for a given enum type.
  Swashbuckle will honor this change out-of-the-box. However, if you use a
  different approach to serialize enums as strings, you can also force
  Swashbuckle to describe them as strings.


  ### Modifying Generated Operations ###


  Similar to Schema filters, Swashbuckle also supports Operation and Document
  filters:


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
           {
               c.OperationFilter<AddDefaultResponse>();

               c.DocumentFilter<ApplyDocumentVendorExtensions>();
           });
  ```

  #### OperationFilter ####


  Post-modify Operation descriptions once they've been generated by wiring up
  one or more Operation filters.


  IOperationFilter has the following interface:


  ```csharp

  void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription
  apiDescription);

  ```


  A typical implementation will inspect the ApiDescription and modify the
  Operation accordingly. If necessary, the schemaRegistry can be used to obtain
  or register Schemas for Types that are used in the Operation.


  #### DocumentFilter ####


  Post-modify the entire Swagger document by wiring up one or more Document
  filters.


  IDocumentFilter has the following interface:


  ```csharp

  void Apply(SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry,
  IApiExplorer apiExplorer);

  ```


  This gives full control to modify the final SwaggerDocument. You can gain
  additional context from the provided SwaggerDocument (e.g. version) and
  IApiExplorer. You should have a good understanding of the [Swagger 2.0
  spec.](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)
  before using this option.


  ### Wrapping the SwaggerGenerator with Additional Behavior ###


  The default implementation of ISwaggerProvider, the interface used to obtain
  Swagger metadata for a given API, is the SwaggerGenerator. If neccessary, you
  can inject your own implementation or wrap the existing one with additional
  behavior. For example, you could use this option to inject a "Caching Proxy"
  that attempts to retrieve the SwaggerDocument from a cache before delegating
  to the built-in generator:


  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
            {
          c.CustomProvider((defaultProvider) => new CachingSwaggerProvider(defaultProvider));
            });
  ```


  ### Including XML Comments ###


  If you annotate Controllers and API Types with [Xml
  Comments](http://msdn.microsoft.com/en-us/library/b2s063f7(v=vs.110).aspx),
  you can incorporate those comments into the generated docs and UI. The Xml
  tags are mapped to Swagger properties as follows:


  * **Action summary** -> Operation.summary

  * **Action remarks** -> Operation.description

  * **Parameter summary** -> Parameter.description

  * **Type summary** -> Schema.descripton

  * **Property summary** -> Schema.description (i.e. on a property Schema)


  You can enable this by providing the path to one or more XML comments files:

  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(GetXmlCommentsPathForControllers());
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```


  NOTE: You will need to enable output of the XML documentation file. This is
  enabled by going to project properties -> Build -> Output. The "XML
  documentation file" needs to be checked and a path assigned, such as
  "bin\Debug\MyProj.XML". You will also want to verify this across each build
  configuration. Here's an example of reading the file, but it may need to be
  modified according to your specific project settings:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
              var commentsFileName = Assembly.GetExecutingAssembly().GetName().Name + ".XML";
              var commentsFile = Path.Combine(baseDirectory, commentsFileName);

              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(commentsFile);
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```

  #### Response Codes ####


  Swashbuckle will automatically create a "success" response for each operation
  based on the action's return type. If it's a void, the status code will be 204
  (No content), otherwise 200 (Ok). This mirrors WebApi's default behavior. If
  you need to change this and/or list additional response codes, you can use the
  non-standard "response" tag:


  ```csharp

  /// <response code="201">Account created</response>

  /// <response code="400">Username already in use</response>

  public int Create(Account account)

  ```

  ### Working Around Swagger 2.0 Constraints ###


  In contrast to Web API, Swagger 2.0 does not include the query string
  component when mapping a URL to an action. As a result, Swashbuckle will raise
  an exception if it encounters multiple actions with the same path (sans query
  string) and HTTP method. You can workaround this by providing a custom
  strategy to pick a winner or merge the descriptions for the purposes of the
  Swagger docs 


  ```csharp

  httpConfiguration
      .EnableSwagger((c) =>
          {
              c.SingleApiVersion("v1", "A title for your API"));
              c.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
          });
  ```

  See the following discussion for more details:


  <https://github.com/domaindrivendev/Swashbuckle/issues/142>


  ## Customizing the swagger-ui ##


  The swagger-ui is a JavaScript application hosted in a single HTML page
  (index.html), and it exposes several customization settings. Swashbuckle ships
  with an embedded version and includes corresponding configuration methods for
  each of the UI settings. If you require further customization, you can also
  inject your own version of "index.html". Read on to learn more.


  ### Customizations via the configuration API ###


  If you're happy with the basic look and feel but want to make some minor
  tweaks, the following options may be sufficient:


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi(c =>
          {
              c.InjectStylesheet(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testStyles1.css");
              c.InjectJavaScript(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testScript1.js");
              c.SetValidatorUrl("http://localhost/validator");
              c.DisableValidator();
              c.DocExpansion(DocExpansion.List);
              c.SupportedSubmitMethods("GET", "HEAD")
          });
  ```


  #### InjectStylesheet ####


  Use this to enrich the UI with one or more additional CSS stylesheets. The
  file(s) must be included in your project as an "Embedded Resource", and then
  the resource's "Logical Name" is passed to the method as shown above. See
  [Injecting Custom Content](#injecting-custom-content) for step by step
  instructions.


  #### InjectJavaScript ####


  Use this to invoke one or more custom JavaScripts after the swagger-ui has
  loaded. The file(s) must be included in your project as an "Embedded
  Resource", and then the resource's "Logical Name" is passed to the method as
  shown above. See [Injecting Custom Content](#injecting-custom-content) for
  step by step instructions.


  #### SetValidatorUrl/DisableValidator ####


  By default, swagger-ui will validate specs against swagger.io's online
  validator and display the result in a badge at the bottom of the page. Use
  these options to set a different validator URL or to disable the feature
  entirely.


  #### DocExpansion ####


  Use this option to control how the Operation listing is displayed. It can be
  set to "None" (default), "List" (shows operations for each resource), or
  "Full" (fully expanded: shows operations and their details).


  #### SupportedSubmitMethods ####


  Specify which HTTP operations will have the 'Try it out!' option. An empty
  parameter list disables it for all operations.


  ### Provide your own "index" file ###


  As an alternative, you can inject your own version of "index.html" and
  customize the markup and swagger-ui directly. Use the __CustomAsset__ option
  to instruct Swashbuckle to return your version instead of the default when a
  request is made for "index". As with all custom content, the file must be
  included in your project as an "Embedded Resource", and then the resource's
  "Logical Name" is passed to the method as shown below. See [Injecting Custom
  Content](#injecting-custom-content) for step by step instructions.


  For compatibility, you should base your custom "index.html" off [this
  version](https://github.com/domaindrivendev/Swashbuckle/blob/v5.5.3/Swashbuckle.Core/SwaggerUi/CustomAssets/index.html)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi(c =>
           {
               c.CustomAsset("index", yourAssembly, "YourWebApiProject.SwaggerExtensions.index.html");
           });
  ```


  ### Injecting Custom Content ###


  The __InjectStylesheet__, __InjectJavaScript__ and __CustomAsset__ options all
  share the same mechanism for providing custom content. In each case, the file
  must be included in your project as an "Embedded Resource". The steps to do
  this are described below:


  1. Add a new file to your Web API project.

  2. In Solution Explorer, right click the file and open its properties window.
  Change the "Build Action" to "Embedded Resource".


  This will embed the file in your assembly and register it with a "Logical
  Name". This can then be passed to the relevant configuration method. It's
  based on the Project's default namespace, file location and file extension.
  For example, given a default namespace of "YourWebApiProject" and a file
  located at "/SwaggerExtensions/index.html", then the resource will be assigned
  the name - "YourWebApiProject.SwaggerExtensions.index.html". If you use
  "Swagger" as the root folder name for your custom assets, this will collide
  with the default route templates and the page will not be loaded correctly.


  ## Transitioning to Swashbuckle 5.0 ##


  This version of Swashbuckle makes the transition to Swagger 2.0. The 2.0
  specification is significantly different to its predecessor (1.2) and forces
  several breaking changes to Swashbuckle's configuration API. If you're using
  Swashbuckle without any customizations, i.e. App_Start/SwaggerConfig.cs has
  never been modified, then you can overwrite it with the new version. The
  defaults are the same and so the swagger-ui should behave as before.


  \* If you have consumers of the raw Swagger document, you should ensure they
  can accept Swagger 2.0 before making the upgrade.


  If you're using the existing configuration API to customize the final Swagger
  document and/or swagger-ui, you will need to port the code manually. The
  static __Customize__ methods on SwaggerSpecConfig and SwaggerUiConfig have
  been replaced with extension methods on HttpConfiguration - __EnableSwagger__
  and __EnableSwaggerUi__. All options from version 4.0 are made available
  through these methods, albeit with slightly different naming and syntax. Refer
  to the tables below for a summary of changes:



  | 4.0 | 5.0 Equivalent | Additional Notes |

  | --------------- | --------------- | ---------------- |

  | ResolveBasePathUsing | RootUrl | |

  | ResolveTargetVersionUsing | N/A | version is now implicit in the docs URL
  e.g. "swagger/docs/{apiVersion}" |

  | ApiVersion | SingleApiVersion| now supports additional metadata for the
  version | 

  | SupportMultipleApiVersions | MultipleApiVersions | now supports additional
  metadata for each version |

  | Authorization | BasicAuth/ApiKey/OAuth2 | | 

  | GroupDeclarationsBy | GroupActionsBy | |

  | SortDeclarationsBy | OrderActionGroupsBy | |

  | MapType | MapType | now accepts Func&lt;Schema&gt; instead of
  Func&lt;DataType&gt; |

  | ModelFilter | SchemaFilter | IModelFilter is now ISchemaFilter,
  DataTypeRegistry is now SchemaRegistry |

  | OperationFilter | OperationFilter | DataTypeRegistry is now SchemaRegistry |

  | PolymorphicType | N/A | not currently supported |

  | SupportHeaderParams | N/A | header params are implicitly supported |

  | SupportedSubmitMethods | N/A | all HTTP verbs are implicitly supported |

  | CustomRoute | CustomAsset | &nbsp; |


  ## Troubleshooting and FAQ's ##


  1. [Swagger-ui showing "Can't read swagger JSON from
  ..."](#swagger-ui-showing-cant-read-swagger-json-from)

  2. [Page not found when accessing the
  UI](#page-not-found-when-accessing-the-ui)

  3. [Swagger-ui broken by Visual Studio
  2013](#swagger-ui-broken-by-visual-studio-2013)

  4. [OWIN Hosted in IIS - Incorrect VirtualPathRoot
  Handling](#owin-hosted-in-iis---incorrect-virtualpathroot-handling)

  5. [How to add vendor extensions](#how-to-add-vendor-extensions)

  6. [FromUri Query string DataMember names are
  incorrect](#fromuri-query-string-datamember-names-are-incorrect)

  7. [Remove Duplicate Path Parameters](#remove-duplicate-path-parameters)

  8. [Deploying behind Load Balancer / Reverse
  Proxies](#deploying-behind-load-balancer--reverse-proxies)

  9. [500 : {"Message":"An error has
  occurred."}](#500--messagean-error-has-occurred)


  ### Swagger-ui showing "Can't read swagger JSON from ..."


  If you see this message, it means the swagger-ui received an unexpected
  response when requesting the Swagger document. You can troubleshoot further by
  navigating directly to the discovery URL included in the error message. This
  should provide more details.


  If the discovery URL returns a 404 Not Found response, it may be due to a
  full-stop in the version name (e.g. "1.0"). This will cause IIS to treat it as
  a static file (i.e. with an extension) and bypass the URL Routing Module and
  therefore, Web API. 


  To workaround, you can update the version name specified in SwaggerConfig.cs.
  For example, to "v1", "1-0" etc. Alternatively, you can change the route
  template being used for the swagger docs (as shown [here](#custom-routes)) so
  that the version parameter is not at the end of the route.


  ### Page not found when accessing the UI ###


  Swashbuckle serves an embedded version of the swagger-ui through the Web API
  pipeline. But, most of the URLs contain extensions (.html, .js, .css) and many
  IIS environments are configured to bypass the managed pipeline for paths
  containing extensions.


  In previous versions of Swashbuckle, this was resolved by adding the following
  setting to your Web.config:


  ```xml

  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
  </system.webServer>

  ```


  This is no longer neccessary in Swashbuckle 5.0 because it serves the
  swagger-ui through extensionless URL's.


  However, if you're using the SingleApiVersion, MultipleApiVersions or
  CustomAsset configuration settings you could still get this error. Check to
  ensure you're not specifying a value that causes a URL with an extension to be
  referenced in the UI. For example a full-stop in a version number ...


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("1.0", "A title for your API"))
      .EnableSwaggerUi();
  ```

  will result in a discovery URL like this "/swagger/docs/1.0" where the
  full-stop is treated as a file extension.


  ### Swagger-ui broken by Visual Studio 2013 ###


  VS 2013 ships with a new feature - Browser Link - that improves the web
  development workflow by setting up a channel between the IDE and pages being
  previewed in a local browser. It does this by dynamically injecting JavaScript
  into your files.


  Although this JavaScript SHOULD have no affect on your production code, it
  appears to be breaking the swagger-ui.


  I hope to find a permanent fix, but in the meantime, you'll need to workaround
  this issue by disabling the feature in your web.config:


  ```xml

  <appSettings>
      <add key="vs:EnableBrowserLink" value="false"/>
  </appSettings>

  ```

  ### OWIN Hosted in IIS - Incorrect VirtualPathRoot Handling


  When you host Web API 2 on top of OWIN/SystemWeb, Swashbuckle cannot correctly
  resolve VirtualPathRoot by default.


  You must either explicitly set VirtualPathRoot in your HttpConfiguration at
  startup, or perform customization like this to fix automatic discovery:


  ```csharp

  httpConfiguration.EnableSwagger(c => 

  {
      c.RootUrl(req =>
          req.RequestUri.GetLeftPart(UriPartial.Authority) +
          req.GetRequestContext().VirtualPathRoot.TrimEnd('/'));
  }

  ```


  ### How to add vendor extensions


  Swagger 2.0 allows additional meta-data (aka vendor extensions) to be added at
  various points in the Swagger document. Swashbuckle supports this by including
  a "vendorExtensions" dictionary with each of the extensible Swagger types.
  Meta-data can be added to these dictionaries from custom Schema, Operation or
  Document filters. For example:


  ```csharp

  public class ApplySchemaVendorExtensions : ISchemaFilter

  {
      public void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type)
      {
          schema.vendorExtensions.Add("x-foo", "bar");
      }
  }

  ```


  As per the specification, all extension properties should be prefixed by "x-"


  ### FromUri Query string DataMember names are incorrect


  When using `FromUri` Model Binding, it is possible to override the querystring
  parameter name's using `DataMember`s. In this case you can add a custom
  operation filter to override the name. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
          if (operation.parameters == null)
              return;

          var parameters = apiDescription.ActionDescriptor.GetParameters();
          foreach (var parameter in parameters)
          {
              foreach (var property in parameter.ParameterType.GetProperties())
              {
                  var param = operation.parameters.FirstOrDefault(o => o.name.ToLowerInvariant().Contains(property.Name.ToLowerInvariant()));

                  if (param == null) continue;

                  var name = GetNameFromAttribute(property);

                  if (string.IsNullOrEmpty(name))
                  {
                      operation.parameters.Remove(param);
                  }
                  param.name = GetNameFromAttribute(property);
              }
          }
      }
      
      private static string GetNameFromAttribute(PropertyInfo property)
      {
          var customAttributes = property.GetCustomAttributes(typeof(DataMemberAttribute), true);
          if (customAttributes.Length > 0)
          {
              var attribute = customAttributes[0] as DataMemberAttribute;
              if (attribute != null) return attribute.Name;
          }
          return string.Empty;
      }
  }

  ```


  ### Remove Duplicate Path Parameters


  When using `FromUri` Model Binding, duplicate items can appear as items can be
  passed as URI parameters, or querystrings. In this case you can add a custom
  operation filter to remove the duplicates. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
         if (operation.parameters == null)
             return;
         var complexParameters = operation.parameters.Where(x => x.@in == "query" && !string.IsNullOrWhiteSpace(x.name)).ToArray();

         foreach (var parameter in complexParameters)
         {
             if (!parameter.name.Contains('.')) continue;
             var name = parameter.name.Split('.')[1];

             var opParams = operation.parameters.Where(x => x.name == name);
             var parameters = opParams as Parameter[] ?? opParams.ToArray();

             if (parameters.Length > 0)
             {
                 operation.parameters.Remove(parameter);
             }
         }
      }
  }

  ```


  ### Deploying behind Load Balancer / Reverse Proxies


  Swashbuckle attempts to populate the [Swagger
  "host"](http://swagger.io/specification/#swaggerObject) property from HTTP
  headers that are sent with the request for Swagger JSON. This may cause issues
  in load balancer / reverse proxy environments, particularly if non-standard
  headers are used to pass on the outer most host name. You can workaround this
  by providing your own function for determining your API's root URL based on
  vendor-specific headers. Checkout [issue
  705](https://github.com/domaindrivendev/Swashbuckle/issues/705) for some
  potential implementations.


  ### 500 : {"Message":"An error has occurred."}


  If, on loading the Swagger UI page, you get an error: `500 : {"Message":"An
  error has occurred."} http://<url>/swagger/docs/v1` ensure that the XML
  documentation output settings have been set in the project file in the
  solution, for both Debug and Release configurations.
gossi/swagger: "# swagger\n\n[![License](https://poser.pugx.org/gossi/swagger/license)](https://packagist.org/packages/gossi/swagger)\n[![Latest Stable Version](https://poser.pugx.org/gossi/swagger/v/stable)](https://packagist.org/packages/gossi/swagger)\n[![Total Downloads](https://poser.pugx.org/gossi/swagger/downloads)](https://packagist.org/packages/gossi/swagger)<br>\n[![HHVM Status](http://hhvm.h4cc.de/badge/gossi/swagger.svg?style=flat)](http://hhvm.h4cc.de/package/gossi/swagger)\n[![Build Status](https://travis-ci.org/gossi/swagger.svg?branch=master)](https://travis-ci.org/gossi/swagger)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/gossi/swagger/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)\n[![Code Coverage](https://scrutinizer-ci.com/g/gossi/swagger/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)\n\n\nA php library to manipulate [swagger](http://swagger.io)/[Open API](https://openapis.org) specifications.\n\n## Installation\n\n```\ncomposer require gossi/swagger\n```\n\n## Usage\n\nRead an `api.json` file:\n\n```php\n$swagger = Swagger::fromFile('api.json');\n\n// or\n\n$swagger = new Swagger($array);\n```\n\n### Collections\n\nThere are two major collections: `Paths` and `Definitions`. The API is similar for both:\n\n```php\n$paths = $swagger->getPaths();\n$p = new Path('/user');\n\n// adding\n$paths->add($p);\n\n// retrieving\nif ($paths->has('/user') ||\_$paths->contains($p)) {\n\t$path = $paths->get('/user');\n}\n\n// removing\n$paths->remove('/user');\n\n// iterating\nforeach ($paths as $path) {\n\t// do sth with $path\n}\n```\n\nOther collections are: `Headers`, `Parameters`, `Responses` and `SecurityDefinitions`.\n\n### Models\n\nThere are a lot of models, e.g. the mentioned `Path` above. The API is well written, so it works with the auto-completion of your IDE. It is straight forward and uses the same naming scheme as the OpenAPI specification.\n\n\n## Contributing\n\nFeel free to fork and submit a pull request (don't forget the tests) and I am happy to merge.\n\n\n"
Maks3w/SwaggerAssertions: >
  # Swagger Assertions


  Test any API requests and responses match with the models described in the
  documentation.


  This project is compatible with [Swagger 2](http://swagger.io/) spec
  definitions.


  ## Installing via Composer


  You can use [Composer](https://getcomposer.org) .


  ```bash

  composer require fr3d/swagger-assertions

  ```


  ## Usage in PHPUnit


  There are two traits for provide predefined helper functions for different
  assertions.


  - [AssertsTrait](src/PhpUnit/AssertsTrait.php) For assert different parts of
  the response

  - [Psr7AssertsTrait](src/PhpUnit/Psr7AssertsTrait.php) For assert [PSR-7
  compatible](http://www.php-fig.org/psr/psr-7/) responses.

  - [SymfonyAssertsTrait](src/PhpUnit/SymfonyAssertsTrait.php) For assert
  [Symfony HTTP
  Foundation](http://symfony.com/doc/current/components/http_foundation/index.html)
  responses.


  See examples at [examples/PhpUnit](examples/PhpUnit)


  ## FAQ


  <dl>
    <dt>Q: Can this library validate my Swagger definition?</dt>
    <dd>A: No. This library validate your API requests and responses match your Swagger definition.</dd>
  </dl>


  ## License

    Code licensed under BSD 2 clauses terms & conditions.

    See [LICENSE.txt](LICENSE.txt) for more information.
metosin/compojure-api: >
  # Compojure-api [![Build
  Status](https://api.travis-ci.org/metosin/compojure-api.svg?branch=master)](https://travis-ci.org/metosin/compojure-api)


  Stuff on top of [Compojure](https://github.com/weavejester/compojure) for
  making sweet web apis.


  - [Schema](https://github.com/Prismatic/schema) &
  [clojure.spec](https://clojure.org/about/spec) (2.0.0) for input & output data
  coercion

  - [Swagger](http://swagger.io/) for api documentation, via
  [ring-swagger](https://github.com/metosin/ring-swagger) &
  [spec-tools](https://github.com/metosin/spec-tools)

  - [Async](https://github.com/metosin/compojure-api/wiki/Async) with
  async-ring, [manifold](https://github.com/ztellman/manifold) and
  [core.async](https://github.com/clojure/core.async) (2.0.0)

  - Client negotiable formats: [JSON](http://www.json.org/),
  [EDN](https://github.com/edn-format/edn) &
  [Transit](https://github.com/cognitect/transit-format), optionally
  [YAML](http://yaml.org/) and [MessagePack](http://msgpack.org/)

  - Data-driven
  [resources](https://github.com/metosin/compojure-api/wiki/Resources-and-Liberator)

  -
  [Bi-directional](https://github.com/metosin/compojure-api/wiki/Routing#bi-directional-routing)
  routing

  - Bundled middleware for common api behavior ([exception
  handling](https://github.com/metosin/compojure-api/wiki/Exception-handling),
  parameters & formats)

  - Extendable route DSL via [metadata
  handlers](https://github.com/metosin/compojure-api/wiki/Creating-your-own-metadata-handlers)

  - Route functions & macros for putting things together, including the
  [Swagger-UI](https://github.com/wordnik/swagger-ui) via
  [ring-swagger-ui](https://github.com/metosin/ring-swagger-ui)

  - Requires Clojure 1.9.0 & Java 1.8


  [API Docs](http://metosin.github.io/compojure-api/doc/) &
  [Wiki](https://github.com/metosin/compojure-api/wiki)


  ## Latest version


  [![Clojars
  Project](http://clojars.org/metosin/compojure-api/latest-version.svg)](http://clojars.org/metosin/compojure-api)


  Latest non-alpha: `[metosin/compojure-api "1.1.11"]`.


  See
  [CHANGELOG](https://github.com/metosin/compojure-api/blob/master/CHANGELOG.md)
  for details.


  ## For information and help


  ### [Read the Version 1.0 Blog
  Post](http://www.metosin.fi/blog/compojure-api-100/)


  ### [Schema & Spec Coercion with
  2.0.0](https://github.com/metosin/compojure-api/wiki/Coercion)


  ### [Check wiki for
  documentation](https://github.com/metosin/compojure-api/wiki)


  [Clojurians slack](https://clojurians.slack.com/)
  ([join](http://clojurians.net/)) has a channel
  [#ring-swagger](https://clojurians.slack.com/messages/ring-swagger/) for talk
  about any libraries using Ring-swagger. You can also ask questions about
  Compojure-api and Ring-swagger on other channels at Clojurians Slack or at
  #clojure on Freenode IRC (mention `compojure-api` or `ring-swagger` to
  highlight us).


  ## Examples


  ### Hello World Api


  ```clj

  (require '[compojure.api.sweet :refer :all])

  (require '[ring.util.http-response :refer :all])


  (def app
    (api
      (GET "/hello" []
        :query-params [name :- String]
        (ok {:message (str "Hello, " name)}))))
  ```


  ### Hello World, async


  ```clj

  (require '[compojure.api.sweet :refer :all])

  (require '[clojure.core.async :as a])


  (GET "/hello-async" []
    :query-params [name :- String]
    (a/go
      (a/<! (a/timeout 500))
      (ok {:message (str "Hello, " name)})))
  ```


  <sub>* requires server to be run in [async
  mode](https://github.com/metosin/compojure-api/wiki/Async)</sub>


  ### Hello World, async & data-driven


  ```clj

  (require '[compojure.api.sweet :refer :all])

  (require '[clojure.core.async :as a])

  (require '[schema.core :as s])


  (context "/hello-async" []
    (resource
      {:get
       {:parameters {:query-params {:name String}}
        :responses {200 {:schema {:message String}}
                    404 {}
                    500 {:schema s/Any}}
        :handler (fn [{{:keys [name]} :query-params}]
                   (a/go
                     (a/<! (a/timeout 500))
                     (ok {:message (str "Hello, " name)})))}}))
  ```


  <sub>* Note that empty body responses can be specified with `{}` or `{:schema
  s/Any}`


  ### Hello World, async, data-driven & clojure.spec


  ```clj

  (require '[compojure.api.sweet :refer :all])

  (require '[clojure.core.async :as a])

  (require '[clojure.spec.alpha :as s])


  (s/def ::name string?)

  (s/def ::message string?)


  (context "/hello-async" []
    (resource
      {:coercion :spec
       :get {:parameters {:query-params (s/keys :req-un [::name])}
             :responses {200 {:schema (s/keys :req-un [::message])}}
             :handler (fn [{{:keys [name]} :query-params}]
                        (a/go
                          (a/<! (a/timeout 500))
                          (ok {:message (str "Hello, " name)})))}}))
  ```


  ### Api with Schema & Swagger-docs


  ```clj

  (require '[compojure.api.sweet :refer :all])

  (require '[schema.core :as s])


  (s/defschema Pizza
    {:name s/Str
     (s/optional-key :description) s/Str
     :size (s/enum :L :M :S)
     :origin {:country (s/enum :FI :PO)
              :city s/Str}})

  (def app
    (api
      {:swagger
       {:ui "/api-docs"
        :spec "/swagger.json"
        :data {:info {:title "Sample API"
                      :description "Compojure Api example"}
               :tags [{:name "api", :description "some apis"}]
               :consumes ["application/json"]
               :produces ["application/json"]}}}

      (context "/api" []
        :tags ["api"]

        (GET "/plus" []
          :return {:result Long}
          :query-params [x :- Long, y :- Long]
          :summary "adds two numbers together"
          (ok {:result (+ x y)}))

        (POST "/echo" []
          :return Pizza
          :body [pizza Pizza]
          :summary "echoes a Pizza"
          (ok pizza)))))
  ```


  ![swagger-api](https://raw.githubusercontent.com/wiki/metosin/compojure-api/swagger-api.png)


  ## More samples


  * official samples:
  https://github.com/metosin/compojure-api/tree/master/examples

  * great full app: https://github.com/yogthos/memory-hole

  * 2.0.0 sample: https://github.com/metosin/c2

  * RESTful CRUD APIs Using Compojure-API and Toucan:
  https://www.demystifyfp.com/clojure/blog/restful-crud-apis-using-compojure-api-and-toucan-part-1/

  * clojurice, An opinionated starter app for full-stack web applications in
  Clojure: https://github.com/jarcane/clojurice

  * Web Development with Clojure, Second Edition:
  https://pragprog.com/book/dswdcloj2/web-development-with-clojure-second-edition


  To try it yourself, clone this repository and do either:


  1. `lein run`

  2. `lein repl` & `(go)`


  ## Quick start for a new project


  Use a Leiningen template, with or without tests:


  ```

  lein new compojure-api my-api

  lein new compojure-api my-api +midje

  lein new compojure-api my-api +clojure-test

  ```


  ## License


  Copyright © 2014-2018 [Metosin Oy](http://www.metosin.fi)


  Distributed under the Eclipse Public License, the same as Clojure.
Azure/AutoRest: >+
  # <img align="center" src="./docs/images/logo.png">  AutoRest



  The **AutoRest** tool generates client libraries for accessing RESTful web
  services. Input to *AutoRest* is a spec that describes the REST API using the
  [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format.


  <!-- 1) returns SVGs now which aren't rendered by GitHub 2) seems to be
  awfully unresponsive and unreliable lately

  [![PR
  Stats](http://issuestats.com/github/Azure/autorest/badge/pr?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  [![Issue
  Stats](http://issuestats.com/github/Azure/autorest/badge/issue?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  -->


  ## Support Policy

  AutoRest is an open source tool -- if you need assistance, first check the
  documentation. If you find a bug or need some help, feel free to submit an
  [issue](https://github.com/Azure/autorest/issues)



  **AutoRest will release a stable version on the second Wednesday of the
  month.**


  Using `npm` you can upgrade to the latest stable version of AutoRest:


  ---


  # Installing AutoRest 


  Installing AutoRest on Windows, MacOS or Linux involves two steps:


  1. __Install [Node.js](https://nodejs.org/en/)__ (10.15.x LTS HIGHLY
  RECOMENDED)

  > for more help, check out [Installing Node.JS on different
  platforms](./docs/developer/workstation.md#nodejs)


  2. __Install AutoRest__ using `npm`

    ``` powershell
    # Depending on your configuration you may need to be elevated or root to run this. (on OSX/Linux use 'sudo' )
    npm install -g autorest
    ```

  ### Updating AutoRest
    To update AutoRest if you have previous versions installed, please run:
      
    ``` powershell
    autorest --latest
    ``` 
  or 
    ```powershell
    # Removes all other versions and installs the latest
    autorest --reset
    ```
    For more information, run  `autorest --help`


  ### Supported Platforms


  While AutoRest itself runs on NodeJS, some generators use the .NET Core 2.0
  runtime, which is the most limiting factor.

  See
  [dotnet/core/release-notes/2.0/2.0-supported-os.md](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0-supported-os.md)
  for a list of supported platforms.


  # Getting Started using AutoRest ![image](./docs/images/normal.png)


  Start by reading the documentation for using AutoRest:

  - [Managing AutoRest](./docs/managing-autorest.md) - shows how to get new
  updates to AutoRest and choose which version to use for code generation

  - [Generating a Client using AutoRest](./docs/examples/generating-a-client.md)
  - shows simple command line usage for generating a client library.

  - [Command Line Interface
  Documentation](./docs/user/command-line-interface.md) - explains common
  command line arguments

  - [Examples](./Samples) - full, walkthrough-style scenarios for using AutoRest


  # Developers ![image](./docs/images/glasses.png)


  Get yourself up and coding in AutoRest


  - [Developer Workstation Requirements](./docs/developer/workstation.md) - what
  do you need to install to start working with the AutoRest code

  - [AutoRest
  Extensibility](./docs/developer/architecture/AutoRest-extension.md) and
  [protocol](./docs/developer/architecture/AutoRest-extension-protocol.md)
  documentation

  - [Working on AutoRest core](./docs/developer/autorest-core.md) -
  compiling/testing AutoRest core using the build scripts

  - [Working on an AutoRest extension](./docs/developer/autorest-extension.md) -
  creating and testing AutoRest extensions

  - [AutoRest repositories and packages](./docs/trampoline.md) - all maintained
  repositories and packages on one page


  Some related information:

  - [Validation Rules &
  Linting](https://github.com/Azure/azure-openapi-validator/blob/master/docs/readme.md)
  - about the validation rules in AutoRest

  - [Client
  Runtimes](./docs/developer/architecture/Autorest-and-Clientruntimes.md) -
  information about the client runtimes required for using code generated by
  AutoRest

  <!-- - [Developer Guide](./docs/developer/guide/) - Notes on developing with
  AutoRest -->


  ---


  ### Code of Conduct 

  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/). For more
  information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact
  [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional
  questions or comments.

subeeshcbabu/swagmock: >
  # swagmock

  Mock data generator for swagger api


  *Note: Swagmock version `1.0.0` onwards requires `Node.js v6+` (`"engines":
  {"node": ">=6.x"}`). Please use `v0.0.x` (say `0.0.5`), if you want to run
  this module on any previous node.js versions.*


  ## Install


  ```

  npm install swagmock

  ```


  ## Usage


  ```javascript
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(api, options);
      // api Can be one of the following.
      // 1) A relative or absolute path to the Swagger api document.
      // 2) A swagger api Object.
      // 3) A promise (or a `thenable`) that resolves to the swagger api Object.
      // Set the `validated` : `true`  in `options`, if the api Object is already validated
      // and dereferenced ($ref are resolved ).
  ```


  Promise response:


  ```javascript
      let responseMock = Mockgen.responses({}); //returns a promise that resolves to response mock
      responseMock.then(mock => {
          //Use mock here
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Callback style:


  ```javascript

      Mockgen.responses({ path: '/somepath'}, (error, mock) => {
          Assert.ifError(error);
          //Use mock here
      });
  ```


  Check the [API](README.md#api) for more details.


  ## Example


  Initialize the mock generator


  ```javascript
      const apiPath = 'http://petstore.swagger.io/v2/swagger.json';
      let Assert = require('assert');
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(apiPath);
  ```


  Response mock generation:


  ```javascript
      mockgen.responses({
          path: '/pet/findByStatus',
          operation: 'get',
          response: 200
      }).then(mock => {
          console.log(mock); // This would print:
          // {
          //     "responses": [{
          //         "id": 2530624032210944,
          //         "category": {
          //             "id": 8200505595527168,
          //             "name": "r($vA&"
          //         },
          //         "name": "doggie",
          //         "photoUrls": ["p0x1", "6O)3*kO"],
          //         "tags": [{
          //             "id": 4590764340281344,
          //             "name": "WCTA6f!"
          //         }, {
          //             "id": -4614156653166592,
          //             "name": "e"
          //         }],
          //         "status": "pending"
          //     }]
          // }
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Parameters mock generation:


  ```javascript

      mockgen.parameters({
          path: '/pet/findByStatus',
          operation: 'get'
      }).then(mock => {
          console.log(mock);//This would print:
          // {
          //     "parameters": {
          //         "query": [{
          //             "name": "status",
          //             "value": [ 'available', 'pending' ],
          //             "separator": "multi"
          //         }]
          //     }
          // }
      }).catch(error => {
          Assert.ifError(error);
      })

  ```


  Check [Examples](docs/EXAMPLES.md) for more details on mock generators.


  ## API


  `Swagmock(api, [options])`


  * `api` - (*Object*) or (*String*) or (*Promise*) - (required) - api can be
  one of the following.
      - A relative or absolute path to the Swagger api document.
      - A URL of the Swagger api document.
      - The swagger api Object
      - A promise (or a `thenable`) that resolves to the swagger api Object

  * `options` - (*Object*) - (optional) - Additional options to create the mock
  generator.
      - `validated` -  Set this property to `true` if the api is already validated against swagger schema and already dereferenced all the `$ref`. This is really useful to generate mocks for parsed api specs. Default value for this is `false` and the api will be validated using [swagger-parser validate](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#validateapi-options-callback).

  ## responses


  `mockgen.responses(options, [callback])`


  This generates the mock response objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the response mock need
  to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path` is
  not specified, mock response will be generated for all the paths defined by
  the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the response
  mock need to be generated. For example `get`, `post` etc. If `operation` is
  not specified, mock response will be generated for all the operations defined
  by the swagger api.


  * `response` - (*String*) - (optional) - The response for which the response
  mock need to be generated. For example `200`, `400`, `default` etc. If
  `response` is not specified, mock response will be generated for all the
  responses defined by the swagger api.


  * `useExamples` - (*Boolean*)- (optional) - Should the generated mock make use
  of example values defined in your swagger.json. Note: invalid example values
  will create invalid mockdata!


  ## parameters


  `mockgen.parameters(options, [callback])`


  This generates the mock parameters objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock
  need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path`
  is not specified, mock parameters will be generated for all the paths defined
  by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the
  parameters mock need to be generated. For example `get`, `post` etc. If
  `operation` is not specified, mock parameters will be generated for all the
  operations defined by the swagger api.



  ## requests


  `mockgen.requests(options, [callback])`


  This generates the mock request object based on the `options`. `requests` API
  resolves the `parameters` mock data to generate the `request` mock object
  useful for unit tests.


  * `options` - (*Object*) - (required) - Options to control the mock
  generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a
  callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock
  need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path`
  is not specified, mock parameters will be generated for all the paths defined
  by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the
  parameters mock need to be generated. For example `get`, `post` etc. If
  `operation` is not specified, mock parameters will be generated for all the
  operations defined by the swagger api.


  ### data


  `request` Object will have following possible properties `query`, `header`,
  `pathname`, `path`, `formData` or `body` based on the `parameters` defined for
  the path and operation.


  Mock request [Path templates](http://swagger.io/specification/#pathTemplating)
  are resolved using path parameters.


  ```javascript
      mockgen.requests({
          path: '/pet/findByStatus',
          operation: 'get'
      }, function (error, mock) {
          assert.ifError(error);

          console.log(mock);
          //This would print:
          // {
          //     "request": {
          //         "query": "status=available&status=pending"
          //     }
          // }
      });
  ```

  ## Examples


  ### API

  [Usage](docs/EXAMPLES.md)


  ### Unit test request mocks


  [github api express
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/github-express/tests)


  [slack api hapi
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/slack/tests)


  ### Mock response data providers


  [spotify api hapi
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/spotify/data)


  [glugbot api express
  app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/glugbot-express/tests/api)
zalando/friboo: "# friboo\n\n![Maven Central](https://img.shields.io/maven-central/v/org.zalando.stups/friboo.svg)\n[![Build Status](https://travis-ci.org/zalando/friboo.svg?branch=master)](https://travis-ci.org/zalando/friboo)\n[![codecov](https://codecov.io/gh/zalando/friboo/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando/friboo)\n\n**Friboo** is a lightweight utility library for writing microservices in Clojure. It provides several components that you can use with Stuart Sierra's [Component lifecycle framework](https://github.com/stuartsierra/component).\n\nFriboo encourages an \"API First\" approach based on the [Swagger specification](http://swagger.io/). As such, the REST API is defined as YAML.\n\n## Leiningen dependency\n\n    [org.zalando.stups/friboo 2.0.0]\n\n## Why Friboo?\n\n- Friboo allows you to first define your API in a portable, language-agnostic format, and then implement it (with the help of [swagger1st](https://github.com/sarnowski/swagger1st)).\n- It contains ready-made components/building blocks for your applications: An HTTP server, DB access layer, metrics registry, Hystrix dashboard (in case you have compliance requirements to follow), and more. See [Components](#components).\n- Pluggable support for all authentication mechanisms (basic, OAuth 2.0, API keys). \n- It contains the \"glue code\" for you, and there is already a recommended way of doing things.\n\n## Development Status\n\nIn our production we use an extension library that is based on Friboo: [friboo-ext-zalando](https://github.com/zalando-incubator/friboo-ext-zalando).\nSee the list at the end of this page.\nHowever, there is always room for improvement, so we're very much open to contributions. For more details, see our [contribution guidelines](CONTRIBUTING.md) and check the Issues Tracker for ways you can help.\n\n## Getting Started\n\n### Requirements\n\n* [Leiningen](http://leiningen.org/)\n\n### Starting a New Project\n\nTo start a new project based on Friboo, use the Leiningen template:\n\n    $ lein new friboo com.example/friboo-is-awesome\n\nThis will generate a sample project containing some \"foobar\" logic that can serve as a starting point in your experiments.\n\nA new directory with name `friboo-is-awesome` will be created in the current directory, containing the following files:\n\n```\nfriboo-is-awesome\n├── README.md\n├── dev\n│\_\_ └── user.clj\n├── dev-config.edn\n├── project.clj\n├── resources\n│\_\_ └── api\n│\_\_     └── api.yaml\n├── src\n│\_\_ └── com\n│\_\_     └── example\n│\_\_         └── friboo_is_awesome\n│\_\_             ├── api.clj\n│\_\_             └── core.clj\n└── test\n    └── com\n        └── example\n            └── friboo_is_awesome\n                ├── api_test.clj\n                └── core_test.clj\n```\n\n* `README.md` contains some pregenerated development tips for the new project.\n* `dev/user.clj` contains functions for [Reloaded Workflow](http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded).\n* `dev-config.edn` contains environment variables that will be used during reloaded workflow (instead of putting them into `profiles.clj`).\n* `project.clj` contains the project definition with all dependencies and some additional plugins.\n* `resources/api.yaml` contains the [Swagger API definition](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) in .yaml format.\n* `src` directory contains these files:\n\t* `core.clj` is the [system](https://github.com/stuartsierra/component#systems) definition.\n\t* `api.clj` contains API endpoint handlers.\n* the `test` directory contains unit test examples using both `clojure.test` and [Midje](https://github.com/marick/Midje).\n\n## How Friboo works\n\nThere are two core parts in any Friboo application:\n\n- loading configuration by aggregating many sources\n- starting the [system](https://github.com/stuartsierra/component#systems)\n\nBoth these parts are taken care of in `core.clj` in `run` function. The name \"run\" is not fixed, it can be anything.\n\nLet's put configuration aside for now. A minimal `run` function might look like this:\n\n```clojure\n(require '[com.stuartsierra.component :as component]\n         '[org.zalando.stups.friboo.system.http :as http]\n         '[org.zalando.stups.friboo.system :as system])\n\n(defn run []\n  (let [system (component/map->SystemMap\n                 {:http (http/make-http \"api.yaml\" {})})]\n    (system/run {} system)))\n```\n\nHere we declare a system that has just one component created by `make-http` function. When started, this component will expose a RESTful API\nwhere requests are routed according to the Swagger definition in `api.yaml`, which is taken from the classpath (usually `resources/api.yaml`).\n\nThen we call `run` from `-main`:\n\n```clojure\n(defn -main [& args]\n  (try\n    (run)\n    (catch Exception e\n      (println \"Could not start the system because of\" (str e))\n      (System/exit 1))))\n```\n\n`run` function does not block, it immediately returns the started system that can later be stopped (as reloaded workflow suggests). \n\nThis already works, but it's not too flexible.\n\n### Parsing configuration options\n\nAccording to https://12factor.net/config, configuration should be provided via environment variables.\nHowever, with REPL-driven [reloaded workflow](http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded) you would have to restart the JVM\nevery time you need to change a configuration value. That's less than perfect.\n\nFriboo supports several sources of configuration:\n\n- environment variables: `HTTP_PORT=8081`\n- JVM properties: `http.port=8081`\n- development configuration from `dev-config.edn`: `{:http-port 8081}`\n- default configurations per component (hardcoded)\n\nAnother challenge is — how to give components only the configuration they need? What if more than one component would like to use `PORT` variable?\nFriboo solves this with namespacing of configuration parameters. Namespace in this case is just a known prefix: `HTTP_`, `API_`, `ENGINE_` etc.\n\nConfiguration is in loaded inside `run` by `load-config` function before defining the system:\n\n```clojure\n(defn run [args-config]\n  (let [config (config/load-config\n                 (merge default-http-config\n                        args-config)\n                 [:http])\n        system (component/map->SystemMap\n                 {:http (http/make-http \"api.yaml\" (:http config))})]\n    (system/run config system)))\n```\n\nHere we make `run` accept a configuration map as an argument, it acts as an additional source of configuration (and it is used by Reloaded Workflow to inject reloadable configuration, see `dev/user.clj`).\n\n`load-config` takes 2 arguments:\n\n- map of default configuration that looks like this:\n\n```clojure\n{:http-port   8081\n :db-password \"1q2w3e4r5t\"\n :foo-bar     \"foobar\"\n```\n\n- list of namespaces, which are known prefixes configuration variables that we expect:\n\n```clojure\n[:http :db]\n```\n\nConfiguration parameters' names are normalized in the following way (this is actually done by [environ](https://github.com/weavejester/environ)):\n\n- `HTTP_PORT` becomes `:http-port`\n- `http.port` becomes `:http-port`\n\n`load-config` normalizes names in all configuration sources, merges them (real environment overrules the default config), filters the parameters by known prefixes and returns a nested map:\n\n```clojure\n{:http {:port 8081}\n :db   {:password \"1q2w3e4r5t\"}}\n```\n\nNote that `:foo-bar` parameter did not make it into the output, because it does not start with `:http-` nor `:db-`.\n\nAfter we have this configuration loaded, it's very straightforward to give each component its part:\n\n```clojure\n{:http (http/make-http \"api.yaml\" (:http config))\n :db   (db/make-db (:db config))}\n```\n\n`system/run` also takes the entire configuration as the first argument and uses the `:system` part of it.\n\n## Components\n\n### HTTP Component\n\nHTTP component starts a HTTP server and routes the requests based on the Swagger API definition. It lives in `org.zalando.stups.friboo.system.http` namespace.\n\nIt has an optional dependency `:controller` that is given to all\nAPI handlers as first argument. The use case is to make it contain some configuration\nand dependencies that the handlers should have access to.\n\n```yaml\npaths:\n  '/hello/{name}':\n    get:\n      operationId: \"com.example.myapp.api/get-hello\"\n      responses: {}\n```\n\nPart of system map (we make `:api` component to be a simple map, it's not necessary \nfor every component to implement `com.stuartsierra.component/Lifecycle` protocol):\n\n```clojure\n:http      (component/using\n             (http/make-http \"api.yaml\" (:http config))\n             {:controller :api})\n:api       {:configuration (:api config)}\n```\n\n`{:controller :api}` means that `:api` component will be available to `:http` under the name `:controller`, that's what it expects.\n\nIn `com.example.myapp.api` namespace:\n\n```clojure\n(defn get-hello [{:keys [configuration]} {:keys [name]} request]\n  (response {:message (str \"Hello \" name)}))\n```\n\n`get-hello` (and every other API handler function) is called with 3 arguments:\n\n- `:controller` (`:api` component in our example)\n- merged parameters map from path, query and body parameters\n- raw request map\n\nEvery handler function is expected to return a map representing a HTTP response:\n\n```clojure\n{:body    {:message \"Hello Michael\"}\n :headers {}\n :status  200\n```\n\nIn our example we use `ring.util.response/response` to create a HTTP 200.\n\n#### Configuration Options\n\n* There are all the [configuration options](https://ring-clojure.github.io/ring/ring.adapter.jetty.html) that Jetty supports, for example:\n\n```clojure\n{:port        8081\n :cors-origin \"*.zalando.de\"}\n```\n\n### DB Component\n\nDB component encapsulates JDBC connection pool and provides [Flyway](https://flywaydb.org/) to support schema migrations.\n\nWhen the component starts, it will have additional `:datasource` key that contains an implementation of `javax.sql.DataSource`. You can use it as you like.\n\nOne of the examples is in friboo-ext-zalando:\n\n    $ lein new friboo-ext-zalando db-example\n\nTake a look at the following files:\n\n```\nexample\n├── resources\n│\_\_ └── db\n│\_\_     ├── migration\n│\_\_     │\_\_ └── V1__initial_schema.sql\n│\_\_     └── queries.sql\n└── src\n \_\_ └── db_example\n \_\_     ├── api.clj\n \_\_     ├── core.clj\n \_\_     └── sql.clj\n```\n\n#### Configuration Options\n\nFor available options please refer to `org.zalando.stups.friboo.system.db/start-component`\n\n### Metrics Component\n\nThe metrics component initializes a [Dropwizard MetricsRegistry](http://metrics.dropwizard.io) to measure\nfrequency and performance of the Swagger API endpoints; see [HTTP component](#http-component).\n\n### Management HTTP component\n\nThis component starts another embedded Jetty at a different port (default 7979) and exposes endpoints used to monitor and manage the application:\n\n* `/metrics`: A JSON document containing all metrics, gathered by the metrics component\n* `/hystrix.stream`: The [Hystrix](https://github.com/Netflix/Hystrix) stream (can be aggregated by [Turbine](https://github.com/Netflix/Turbine))\n* `/monitor/monitor.html`: The Hystrix dashboard\n\n#### Configuration Options\n\nAll [Jetty configuration options](https://ring-clojure.github.io/ring/ring.adapter.jetty.html). \n\n## Real-World Usage\n\nThere are multiple examples of real-world usages of Friboo, including among Zalando's STUPS components:\n\n* [Pier One Docker registry](https://github.com/zalando-stups/pierone) (REST service with DB and S3 backend)\n* [Kio application registry](https://github.com/zalando-stups/kio) (REST service with DB)\n* [Even SSH access granting service](https://github.com/zalando-stups/even) (REST service with DB)\n* [Essentials](https://github.com/zalando-stups/essentials) (REST service with DB)\n\nTODO HINT: set java.util.logging.manager= org.apache.logging.log4j.jul.LogManager to have proper JUL logging.\n\n## License\n\nCopyright © 2016 Zalando SE\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
krakenjs/generator-swaggerize: >
  # generator-swaggerize


  [![Build
  Status](https://travis-ci.org/krakenjs/generator-swaggerize.svg?branch=master)](https://travis-ci.org/krakenjs/generator-swaggerize)  

  [![NPM
  version](https://badge.fury.io/js/generator-swaggerize.png)](http://badge.fury.io/js/generator-swaggerize)  



  Yeoman generator for swagger application with `swaggerize` tools.


  Generates projects for:

  - Express

  - Hapi

  - Restify


  See also:

  - [swaggerize-express](https://github.com/krakenjs/swaggerize-express)

  - [hapi-openapi](https://github.com/krakenjs/hapi-openapi) (formerly
  `swaggerize-hapi`)


  ### Usage


  Install yeoman's `yo` if you haven't already:


  ```

  $ npm install -g yo

  ```


  Install `generator-swaggerize`:


  ```

  $ npm install -g generator-swaggerize

  ```


  Create a project:


  ```

  $ yo swaggerize

  ```


  ### Generators


  - `yo swaggerize`


  Generates a new swaggerize application


  ```

      $ yo swaggerize

      Swaggerize Generator
      Tell us a bit about your application
      ? Path (or URL) to swagger document: http://petstore.swagger.io/v2/swagger.json
      ? Framework: express
      ? What would you like to call this project: myapp
      ? Your name: Lorem Ipsum
      ? Your github user name: loremipsum
      ? Your email: loremipsum@awesome.com
         create .eslintrc
         create .gitignore
         create .npmignore
         create package.json
         create README.md
         .
         .
         .
  ```


  If you want to generate (or regenerate) only a specific component, you can use
  `swaggerize` sub generators.


  - `yo swaggerize:data`


  Generates `data` providers based on `paths` and `responses` in swagger api
  document.

  This also generates the `config/swagger.json` (A copy of the swagger api
  document file input) and `security` authorize handlers based on
  `securityDefinitions`.


  - `yo swaggerize:handler`


  Generates `handlers` based on `paths` in swagger api document. (`data`
  providers are also generated as a pre step)


  - `yo swaggerize:test`


  Generates unit `tests` based on `paths`, `parameters` and `responses` in
  swagger api document. (`handlers` and `data` providers are also generated as a
  pre step)


  #### Project structure


  - `/config` - A copy of the swagger api document file input, will be generated
  at `/config/swagger.json`.

  - `/data` - Data providers for paths(routes).

  - `/security` - Authorize handlers for security schemes declared by
  `securityDefinitions`.

  - `/handlers` - Application paths (routes) based on swagger api `paths`.

  - `/tests` - Unit tests for paths(routes).


  Example:


  ```
      ├── README.md
      ├── .eslintrc
      ├── .gitignore
      ├── .npmignore
      ├── config
      │   └── swagger.json
      ├── data
      │   ├── mockgen.js
      │   └── hellopath
      │       └── {id}.js
      ├── handlers
      │   └── hellopath
      │       └── {id}.js
      ├── package.json
      ├── security
      │   ├── hello_Oauth2.js
      │   └── hello_api_key.js
      ├── server.js
      └── tests
          └── hellopath
              └── {id}.js
  ```


  ##### Handlers


  A handler file will be generated corresponding to every a `path` definition of
  the swagger api (`paths`).


  More details or handlers and routing:


  [swaggerize-express
  handlers](https://github.com/krakenjs/swaggerize-express#handlers-directory)


  [swaggerize-hapi
  handlers](https://github.com/krakenjs/swaggerize-hapi#handlers-directory)


  ##### Data providers


  A data file will be generated corresponding to every a `path` definition of
  the swagger api (`paths`).


  By default [Response Mock
  generator](https://github.com/subeeshcbabu/swagmock#responses) is used to
  provide the data based on the `responses` definition of swagger api.

  Developers should replace these default mock data generators with actual data
  feeds, based on the functionality.


  ##### Security authorize handlers


  A security authorize handler file will be generated corresponding to the
  declaration of the security schemes `securityDefinitions`.


  ##### Unit tests


  A unit test file will be generated corresponding to every a `path` definition
  of the swagger api (`paths`).


  By default [Request Mock
  generator](https://github.com/subeeshcbabu/swagmock#requests) is used to
  generator api requests based on the `parameters` definition of swagger api.


  #### CLI Options


  - `--framework` - specify the framework (`hapi`, `express`, or `restify`).

  - `--apiPath` - specify the path to the swagger document.

  - `--handlerPath` - specify the path to generate the handler files. By default
  `handlers` directory.

  - `--dataPath` - specify the path to generate the data files. By default
  `data` directory.

  - `--securityPath` - specify the path to generate the security authorize
  files. By default `security` directory.

  - `--testPath` - specify the path to generate the unit test files. By default
  `tests` directory.

  - `--skip-npm-install` - To skip the default `npm install` on the generated
  project.


  #### Prompts


  - `apiPath` - Path (or URL) to swagger document


  The path to the swagger api document. This path could be a local or remote
  URL.


  If there is no CLI option `--apiPath` specified, the generator will prompt for
  `apiPath`. The swagger api will be validated against the swagger schema and
  spec before proceeding with scaffolding process.


  - `framework` - The choice of framework to generate the application.


  There are three options - `express`, `hapi` and `restify`. If there is no CLI
  option `--framework` specified, the generator will prompt for `framework`.


  Also, generator checks the working directory for `package.json` dependencies,
  to find out whether the application already depends on, one of the framework
  options. If a match is found, that framework will be used as an option without
  prompting for the value.


  - `appName` - The name of the application


  By default the yeoman project root will be used as the name of the
  application, however, the prompt lets developers change this default.


  - `creatorName`, `githubUser` and `email` - Creator details to build the
  `package.json`.
ninenines/cowboy: |
  = Cowboy

  Cowboy is a small, fast and modern HTTP server for Erlang/OTP.

  == Goals

  Cowboy aims to provide a *complete* HTTP stack in a *small* code base.
  It is optimized for *low latency* and *low memory usage*, in part
  because it uses *binary strings*.

  Cowboy provides *routing* capabilities, selectively dispatching requests
  to handlers written in Erlang.

  Because it uses Ranch for managing connections, Cowboy can easily be
  *embedded* in any other application.

  Cowboy is *clean* and *well tested* Erlang code.

  == Online documentation

  * https://ninenines.eu/docs/en/cowboy/2.6/guide[User guide]
  * https://ninenines.eu/docs/en/cowboy/2.6/manual[Function reference]

  == Offline documentation

  * While still online, run `make docs`
  * User guide available in `doc/` in PDF and HTML formats
  * Function reference man pages available in `doc/man3/` and `doc/man7/`
  * Run `make install-docs` to install man pages on your system
  * Full documentation in Asciidoc available in `doc/src/`
  * Examples available in `examples/`

  == Getting help

  * Official IRC Channel: #ninenines on irc.freenode.net
  * https://github.com/ninenines/cowboy/issues[Issues tracker]
  * https://ninenines.eu/services[Commercial Support]
BlueOakJS/blueoak-server: >
  ![BlueOak
  Logo](https://github.com/BlueOakJS/blueoak-server/wiki/images/blueoak.png)

  ======


  BlueOak Server is a NodeJS framework for building RESTful APIs.


  [![Build
  Status](https://travis-ci.org/BlueOakJS/blueoak-server.svg?branch=master)](https://travis-ci.org/BlueOakJS/blueoak-server)

  [![npm
  version](https://img.shields.io/npm/v/blueoak-server.svg)](https://www.npmjs.com/package/blueoak-server)


  BlueOak Server is _swagger-matic_, that is, it maximizes the value of your
  Swagger API by using it to drive runtime behavior.  

  BlueOak Server loads your Swagger API, connects the paths it defines to your
  implementation code, exposes that API to the network, and validates that every
  request is well-formed per that API.


  Check out the documentation on our wiki:
  <https://github.com/BlueOakJS/blueoak-server/wiki>


  Why'd we do it? (and tell me more about it) - check out the [announcement
  blog][blog1].  

  How can it benefit me and my projects? - check out this [experience
  report][blog2].


  ### Overview


  BlueOak Server combines some of the best Node libraries into a single tool for
  building RESTful APIs.  It uses Express under the covers, but adds many
  additional features:


  - Swagger integration

  - Easy configuration

  - Clustering

  - Logging

  - Dependency injection


  Projects use the following directory structure.


  ```

  ├── [your_project_name]/

  │   ├── index.js <-- optional Main script

  │   ├── package.json

  |   ├── config/

  |   |     └── default.json

  │   ├── handlers/

  │   ├── services/

  │   ├── middleware/

  │   ├── swagger/

  ```


  #### Handlers

  [Handlers](https://github.com/BlueOakJS/blueoak-server/wiki/Handlers) contain
  Express route-handling functions.  They can either be directly wired to routes
  on the Express _app_, or defined using Swagger.


  To use the _app_ directly, simply create a js file in the handlers directory
  that exports an `init` function.

  The `init` function is called during server startup and injected with the the
  _app_ automatically.


  ```js

  exports.init = function(app) {
    app.get('/', function(req, res) {
      res.json({});
    });
  }


  ```


  #### Services

  [Services](https://github.com/BlueOakJS/blueoak-server/wiki/Services) do most
  of the heavy lifting.  Like handlers, services contain init functions that are
  called during server startup.  However, services can export other functions,
  and those functions can be invoked from handlers.


  Here's an example of a fizzbuzz service (services/fizzbuzz.js).  You'll notice
  it has an init method with two parameters, _logger_ and _callback_.  The
  _logger_ is a [built-in
  service](https://github.com/BlueOakJS/blueoak-server/wiki/Logging-Service) for
  logging.  The _callback_ is an optional parameter used for cases where
  services need to perform asynchronous operations during startup.  The service
  also exports a _getResult_ function.  Any service or handler with a dependency
  on _fizzbuzz_ can invoke `fizzbuzz.getResult`.


  ```js

  exports.init = function(logger, callback) {
    logger.info("Starting FizzBuzz service");
    callback();
  }


  exports.getResult = function(num) {
      if (num % 15 === 0) {
          return "FizzBuzz";
      } else if (num % 3 === 0) {
          return "Fizz";
      } else if (num % 5 === 0) {
          return "Buzz";
      } else {
          return num;
      }
  };
    
  ```


  We want to use that service from our handler, so we include `fizzbuzz` as a
  parameter of the `init` function.

  The server will ensure that the fizzbuzz service is initialized during server
  startup and passed to the handler.


  ```js

  exports.init = function(app, fizzbuzz) {

    app.get('/fizzbuzz/:num', function(req, res) {
      var num = req.params.num;
      res.json({
          result: fizzbuzz.getResult(num)
       });
    });
    
  }

  ```

  #### Third-party Services

  Services can be published as npm modules and pulled into projects through the
  `npm install` command.


  For example, the bos-couchdb service adds the ability to connect to a CouchDB
  database.

  It can be installed to a blueoak-server project using


  ```bash

  $ npm install bos-couchdb --save

  ```


  Once installed, it can be used in any service or handler through the
  dependency-injected `bosCouchdb` parameter.


  ```js

  exports.init = function(config, logger, bosCouchdb) {
    var myDb = bosCouchdb.get('mydb');
  }


  ```


  * [bos-couchdb](https://github.com/BlueOakJS/bos-couchdb) - service for
  connecting to CouchDB databases


  #### Config

  [Configuration](https://github.com/BlueOakJS/blueoak-server/wiki/Services#config)
  is stored in json files in the _config_ directory.  Values can be accessed
  through the `config` service in handers and services.  Configuration also
  supports layering on environment-specific config as well as encrypted values.


  ```js

  exports.init = function(config) {
    var myServiceConfig = config.get('myService');
  }

  ```


  #### Middleware

  [Middleware](https://github.com/BlueOakJS/blueoak-server/wiki/Middleware) are
  similar to services but used to wire up Express middleware.  The _express_
  section of the config determines which middleware is loaded and in which
  order.


  ```json

  {
    "express": {
      "middleware": ["csrf", "cors", "session", "body-parser"]
    }
  }

  ```


  #### Swagger (OpenAPI)


  [Swagger](https://github.com/BlueOakJS/blueoak-server/wiki/Handlers#swagger)
  files in the _swagger_ directory are read during server startup and
  automatically wired up to handlers. Swagger files can be in either json or
  yaml formats.


  We've really focused on making API development with Swagger and BlueOak Server
  to be excellent.  

  [Checkout our ideas on best practices][blog3].


  At a high-level, BlueOak Server's Swagger support provides the following:

  * Automatic app routing from the API method to the function as defined in the
  Swagger

  * Request parameter validation, including the body model, based on your method
  definion

  * Reponse model validation based on your method definitions during development

  * JSON `$ref`s to external Swagger documents on the file system

  * Multiple top-level Swagger API definitions supporting delivery of multiple
  API base paths

  * Publishing of the fully compiled Swagger spec for input to by tools such as
  [`Swagger-UI`](http://swagger.io/swagger-ui/) and
  [`swagger-commander`](https://www.npmjs.com/package/swagger-commander)


  ### Installation


  ```bash

  $ npm install -g blueoak-server

  ```


  -or-


  ```bash

  $ npm install --save blueoak-server

  ```


  ### Usage


  If installed globally, run _blueoak-server_ from within your project's
  directory.

  e.g.:

  ```bash

  $ blueoak-server

  ```


  If installed at a package level, call _blueoak-server_ in the `npm start`
  script.

  e.g.:

  ```json
    "scripts": {
      "start": "blueoak-server"
    }
  ```


  Alternatively, it can be launched programmatically from your own js script.



  ```js

  var server = require('blueoak-server');


  server.init(function(err) {
      if (err) {
          console.warn(err);
      } else {
          console.log('started');
      }
  });

  ```


  The programmatic approach works well during development with tools like
  nodemon,

  which monitor for file changes and automatically restart the server.


  ### Next steps


  Read through the [docs](https://github.com/BlueOakJS/blueoak-server/wiki) and
  look at the our [examples](/examples).


  When you're ready to try it out, start from the
  [template](https://github.com/BlueOakJS/blueoak-server-template).


  <!-- links -->

  [blog1]:
  http://www.pointsource.com/blog/blueoak-server-released-to-open-source-to-accelerate-nodejs-development?utm_campaign=blueoak&utm_medium=social&utm_source=github&utm_content=PointSource

  [blog2]:
  http://www.pointsource.com/blog/nodejs-experience-report-building-a-custom-mobile-backend-with-blueoak-server?utm_campaign=blueoak&utm_medium=social&utm_source=github&utm_content=PointSource

  [blog3]:
  http://www.pointsource.com/blog/3-best-practices-for-api-development-with-swagger?utm_campaign=blueoak&utm_medium=social&utm_source=github&utm_content=PointSource
Trax-air/swagger-aggregator: >
  .. image:: https://travis-ci.org/Trax-air/swagger-aggregator.svg?branch=master
     :alt: Travis status
  .. image:: https://badges.gitter.im/Trax-air/swagger-aggregator.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-aggregator
    :target: https://gitter.im/Trax-air/swagger-aggregator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-aggregator.svg
      :target: https://pypi.python.org/pypi/swagger-aggregator/

  swagger-aggregator

  ==================


  Swagger-aggregator allow you to create a swagger REST API from several other
  swagger REST APIs.


  This can be really useful if you want to make an API Gateway accessing some of
  your internal APIs.

  You can also filter which path you want to deliver, and which properties of
  your definitions you don't want to show.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in
  your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-stub: A stub you can use in your
  client's unit tests. All the HTTP calls to your swagger API are mocked by
  default. You can also add your own mocked_calls in your test functions.

  * https://github.com/Trax-air/swagger-parser: A helper that parses swagger
  specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  Here is an example of an aggregate configuration.


  .. code:: yaml

    args: pet_url

    info:
      version: "0.1"
      title: "API Gateway"

    basePath: /v2

    apis:
        pet: http://pet_url/v2

    exclude_paths:
      - DELETE /pets/{petId}

    exclude_fields:
      petPet:
        - id

  This is not the most useful aggregation, as it only aggregate one API.

  The first part, `args`, define that the first parameter we will send to the
  aggregate will be pet_url. Then pet_url will be replaced by the given value
  everywhere in the config.

  The two next part, `info` and `basePath`, are the same as the ones you can
  find in every swagger API.

  `apis`, define the different APIs you want to aggregate. A name is associated
  with it URL.

  Then `exclude_paths` allow you to not deliver some path. In this case we don't
  want the user to delete a pet.


  Finally, `exclude_fields` define the attributes of the definitions we do not
  want to show.

  The value of the keys is the name of the API followed by the name of the
  definition. The value of each key will be a list of all properties to exclude.


  Then use this command to generate the aggregated swagger file:


  .. code:: python

    from traxit_aggregator import SwaggerAggregator

    SwaggerAggregator('config.yaml', 'pet.com')

  Documentation

  -------------


  More documentation is available at
  https://swagger-aggregator.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-aggregator`


  License

  -------


  swagger-aggregator is licensed under http://opensource.org/licenses/MIT.
Reckon-Limited/serverless_swagger: >
  # Serverless Swagger #


  Maps swagger configuration to serverless handlers.


  ## Installation ##


  If you don't have a serverless project, create one now:


  ```

  sls create -t aws-nodejs --path MyService

  cd MyService


  ```

  then

  ```

  yarn init 

  ```

  or

  ```

  npm init

  ```


  Inside your serverless project directory:


  ```

  yarn add serverless_swagger

  ```

  or

  ```

  npm install serverless_swagger

  ```


  Add the following to serverless.yml:


  ```

  plugins:
    - serverless_swagger
  ```


  ## Configuration ##


  The plugin looks for a `swagger.yml` in your serverless project.

  You can provide a different name by specifying a custom variable:


  ```

  custom:
    swagger_file: swagger.yml
  ```


  ## Generation ##


  A complete set of JS handlers and the appropriate serverless.yml configuration
  can be generated


  ```

  sls swagger

  ```

  Existing files should not be overwritten, meaning that the swagger can be
  updated and new functions generated without losing customisations.


  Generated files can be output to a specified directory using the `--output`
  flag and a destination directory (which must exist).


  ```

  sls swagger --output output

  ```


  ## Mapping ##


  At deploy, each function will be mapped to API Gateway events based on the
  swagger specification.


  Functions are mapped by parsing the path and method in the swagger spec to a
  function name in serverless.yml.


  For example, given the following `serverless.yml` and `swagger.yml`
  definitions

  ```

  functions:
    getClientById:
      handler: getClientById/handler.main
    getClientByName:
      handler: getClientByName/handler.main
  ```


  ```
    paths:
      /client/{id}:
        get:
          summary: "Get client  id"      
      /blah
        get:
          summary: "Get blah"      
  ```


  The *getClientById* function will be mapped to an API gateway event in the
  form:


  ```

  events:
    - http:
        method: get
        path: /client/{id}
  ```


  The *getClientByName* does not match any summary information and will not have
  an event
capitalone/oas-nodegen: "<!--\n  [![NPM Version][npm-image]][npm-url]\n  [![NPM Downloads][downloads-image]][downloads-url]\n  [![Linux Build][travis-image]][travis-url]\n  [![Windows Build][appveyor-image]][appveyor-url]\n  [![Test Coverage][coveralls-image]][coveralls-url]\n-->\n\n# oas-nodegen\n\nA library for generating completely customizable code from the [Open API Specification](https://openapis.org/specification \"Link to OAS\") (FKA Swagger) RESTful API documentation using the scripting power of Node.js.\n\n## Installation\n\n  Install oas-nodegen through npm\n\n```bash\n$ npm install oas-nodegen\n```\n\n## Overview\n\nThis library is used to compose scripts that produce customizable output using the simple components depicted below.  Most of the customization occurs in the various callbacks that the library exposes.  **Phase callbacks** are used to modify the specification data prior to being sent to templates.  The **Write callbacks** are used to route processed portions of the specification to their target template and location in the filesystem.\n\n![Components of oas-nodegen](https://raw.githubusercontent.com/capitalone/oas-nodegen/master/docs/oas-nodegen-components.png)\n\n### Features:\n\n- 100% scriptable and customizable code generation.\n- `Loader` handles loading the API specification as well as any referenced external specification.\n- `Modules` registers and loads out of the box or custom code generation modules.\n- `Templates` registers new template engines and compiles template source into functions.\n\t- The included engines are:\n\t\t- [Handlebars.js](http://handlebarsjs.com/)\n\t\t- [Hogan.js](http://twitter.github.io/hogan.js/)\n\t\t- [Jade / Pug](http://jade-lang.com/)\n\t\t- [Underscore.js](http://underscorejs.org/)\n\t- Template files can be overridden by adding a template directory with overlapping template file names.\n- `Generator` takes a \"composition over inheritance\" approach that allows you to register any number of modules for model decoration.\n- `Writer` handles cleaning the target directory, recursively creating directories, and writing files with content that is usually generated by templates.\n\n## Usage\n\n  Require the module before using\n\n```js\nvar nodgen = require('oas-nodegen');\n\nvar loader = nodegen.createLoader();\nvar modules = nodegen.createModules();\nvar templates = nodegen.createTemplates();\nvar writer = nodegen.createWriter(baseDir);\nvar generator = nodegen.createGenerator(config);\nvar utils = nodegen.Utilities;\n```\n\n## Roadmap\n\nCurrently, this library contains several modules for generating Java-based producers and consumers.  We'll likely add modules for other popular and emerging languages (e.g. Scala and Golang).  That doesn't stop you from creating a module for your favorite language or framework now! The Java module is a good starting point for understanding the handling type translation and language features such as annotations, etc.  If you think it would help the community, please contribute it back!\n\n## API\n\n### Loader\n\n> [View the JSDoc](docs/loader.md)\n\n- load( pathOrUri ).then( function onSuccess ).fail( function onFailure );\n\n### Modules\n\n> [View the JSDoc](docs/modules.md)\n\n- registerLibrary( library );\n- registerModuleDirectory( [ path ] );\n- registerModule( path );\n- get( [ names ] );\n\n### Templates\n\n> [View the JSDoc](docs/templates.md)\n\n- setDefaultOptions( defaultOptions );\n- registerLibrary( library );\n- registerEngineDirectory( path );\n- registerEngine( pathOrObject );\n- registerTemplateDirectory( path )\n- compileFromSource( engineName, source, options );\n- compileFromFile( templateFile, options );\n\n### Writer\n\n> [View the JSDoc](docs/writer.md)\n\n- setLeadingFileComments( comments );\n- setTrailingFileComments( comments );\n- preventDeletionOf( pathNames... );\n- clean();\n- write( [ path ], filename, content );\n\n### Generator\n\n> [View the JSDoc](docs/generator.md)\n\n- configure( config );\n- addIgnoredOperations( operationNames );\n- addIgnoredParameters( parameterNames );\n- setModules( parameters );\n- use( moduleNamesOrObjects );\n- emit( phase, event, data );\n- on( phase, event, data );\n- onPrepare( event, listener );\n- onDecorate( event, listener );\n- onFinalize( event, listener );\n- write( event, data );\n- onWrite( event, listener );\n- process( spec, references );\n- groupOperation( operation );\n- groupSort( group );\n- operationSort( operation );\n\n### Utilities\n\n> [View the JSDoc](docs/utilities.md)\n\n- getSuccessResponse( operation );\n- translate( obj, spec, references );\n- resolveReference( obj, spec, references );\n- getReferenceName( $ref );\n- extractModelName( $ref );\n- getMimeType( array );\n- sortKeys( object );\n- capitalize( string );\n- uncapitalize( string );\n- random( low, high );\n\n## Modules\n\nThe modules below are designed to enrich the API specification with information to be used by templates.  The best approach is to try to keep templates as generic and simple as possible and let the addition of modules change the generated output.  For example, most of the Java-based modules below deal with annotations.  The provided templates simply render the list of annotations and the modules handle the heavy lifting.\n\n### Helpers\n\n- Operations:\n\t- `fullPath` - Concatenated base path and operation path\n\t- `accepts` - Most preferred mime type for the Accepts header\n\t- `contentType` - Most preferred mime type for the ContentType header\n\t- `operationId` - If null, set based on HTTP method and path (however, its recommended to explicitly specify operationId in the specification)\n\t- `resolvedConsumes` - Resolved consumes mimetypes for this operation or base specification\n\t- `resolvedProduces` - Resolved produces mimetypes for this operation or base specification\n\t- Response helpers:\n\t\t- `successResponse` - Property that reflects the 200 or 201 response\n\t\t- `hasReturn` - Boolean flag that denotes of a response body is returned\n\t- `parameters` - Updates the parameters array for filter out ignored parameters\n\t- `isQuery` - Boolean flag that denotes if the query string parameters comprise are all optional (e.g. collection query)\n\t- Parameter grouping by type:\n\t\t- `bodyParam` - The body parameter, if applicable\n\t\t- `pathParams` - List of path parameters\n\t\t- `queryParams` - List of query parameters\n\t\t- `headerParams` - List of header parameters\n\t\t- `formParams` - List of form parameters\n\t\t- `requiredParams` - List of all required parameters\n\n- Models:\n\t- `name` - The model name pulled from the definitions map key\n\t- `references` - The list of models that this model references\n\t- `referencedBy` - The list of models this model is referenced by\n\t- `recursiveReferencedBy` - The recursive list of models this model is referenced by\n\t- `required` - Updated with a materialized list from other entities refereced by $allOf\n\t- `properties` - Updated with a materialized map from other entities refereced by $allOf\n\t- `vars` - The model's properties represented as a list instead of a map\n\t- Materialized information from other models that reference this model\n\t\t- `allReferences` - A recursive list of models referenced by this model\n\t\t- `allProperties` - All `properties` from this model and models that reference this model\n\t\t- `allRequired` - All `required` property names from this model and models that reference this model\n\t\t- `allVars` - All `vars` from this model and models that reference this model\n\n- Properties:\n\t- `name` - The property name pull from the properties map key\n\t- `required` - Boolean flag indicated if the property is required - pulled from the model's required list\n\n### Java\n\n- General:\n\t- `annotations`:\n\t\t- List of annotations for operations, parameters, models, and properties\n\t\t- Added by `generator.addAnnotation(annotation, operation|parameter|model|property);`\n\t- `imports`\n\t\t- List of imports for resources and models\n\t\t- Added by `generator.addImport(className, resource|model);`\n\t\t- Generator utility methods:\n\t\t\t- `addKnownImports(imports...)` - Adds a known import that can be added via a simple class name\n\t\t\t- `findImport(simpleName)` - Finds an import using its simple name\n\t- `classname` - Java-friendly class name for resources and models\n\t- Type translation methods:\n\t\t- `translateType(schema, resource|model, spec, references)` - Converts a schema into a Java type\n\t\t- `addTypeTranslator(function(schema, resource|model))` - Adds a hook used by `translateType` to allow for custom types\n\t\t- `overrideModelPackage($ref, model)` - Hook method that can be replaced in order to override model package name (returning `null` defaults to `config.modelPackage`)\n\t\t- `variableName(value)` - Produces a Java-friendly variable name from a string value\n\t- Other utility / helper methods:\n\t\t- `escapeJavaString(value)` - Converts a value into a Java string literal\n\t\t- `joinStrings(values)` - Escapes and joins a set of values - useful for declaring arrays\n- Operations:\n\t- `methodName` - Java-friendle method name\n\t- `returnType` - The class name of the return type\n\t- `returnDescription` - The description from the success response\n- Parameters:\n\t- `varname` - Java-friendly variable name\n\t- `dataType` - The data type of the parameter - can be a generic collection\n\t- `itemType` - The item type if the data type is a collection\n\t- `method` - The method to use to set the parameter from a client's perspective\n- Models:\n\t- `allImports` - Materialized list of imports from the model and property scopes\n\t- `parent` - The class name of the parent which is based on the first reference under $allOf\n\t- `serialVersionUID` - The long value to use for serialVersionUID for implementing Serializable\n- Properties:\n\t- `varname` - Java-friendly variable name\n\t- `dataType` - The data type of the property - can be a generic collection\n\t- `getter` - The getter accessor method name\n\t- `setter` - The setter accessor method name\n\t- `defaultValue` - The property's default value expression\n\n### Java8\n\n- Properties:\n\t- `dataType`\n\t\t- Uses java.util.Optional* types when fields are not required\n\t\t- Replaces Integer, Long, and Double with OptionalInt, OptionalLong, and OptionalDouble respectively\n\t\t- Wraps other classes with Optional<T>\n\t- `empty` - The expression to create an empty optional instance\n\t- `assign` - The expression to convert and assign a value to an optional instance\n\n### JavaBeanValidation\n\n- Parameters & Properties:\n\t- Adds @Min/DecimalMin, @Max/DecimalMax, @Size, @Pattern, @Valid and @NotNull\n\n### JaxB\n\n- Models:\n\t- Adds @XmlRootElement, @XmlType, @XmlAccessorType, @XmlSeeAlso\n- Properties:\n\t- Adds @XmlElementWrapper, @XmlElement based on defined `xml` objects\n\n### JaxRS\n\n- Resources:\n\t- Adds @Path, @Consumes, @Produces\n- Operations:\n\t- Adds @Path, @Consumes, @Produces\n\t- Adds @GET, @POST, @PUT, @DELETE, @HttpMethod(\"PATCH\")\n- Parameters:\n\t- Adds @PathParam, @QueryParam, @HeaderParam, @FormParam, @DefaultValue\n\n## Example\n\n  To try an example, use the commands below to build and run a Java/Spring Boot API (assumes MongoDB is running and listening on 27017 - authentication disabled):\n\n```bash\n$ git clone https://github.com/capitalone/oas-nodegen-example.git\n$ cd oas-nodegen-example\n$ gradle bootRun\n```\n\n## Tests\n\n  To run the test suite, first install the dependencies, then run `npm test`:\n\n```bash\n$ npm install\n$ npm test\n```\n\n## Contributors\n\nWe welcome your interest in Capital One’s Open Source Projects (the “Project”). Any Contributor to the project must accept and sign a CLA indicating agreement to the license terms. Except for the license granted in this CLA to Capital One and to recipients of software distributed by Capital One, you reserve all right, title, and interest in and to your contributions; this CLA does not impact your rights to use your own contributions for any other purpose.\n\n[Link to CLA](https://docs.google.com/forms/d/19LpBBjykHPox18vrZvBbZUcK6gQTj7qv1O5hCduAZFU/viewform \"Capital One Individual and Corporate Contributor License Agreement\")\n\nThis project adheres to the [Open Source Code of Conduct](http://www.capitalone.io/codeofconduct/ \"Code of Conduct\"). By participating, you are expected to honor this code."
calcinai/strut: >
  # Strut

  Yet another OpenAPI/Swagger manipulation library!


  This library is almost 100% generated code by
  [Gendarme](https://github.com/calcinai/gendarme). The reasoning behind this is
  that all the information required to manipulate a schema outlined in the
  specification.


  ## Installation

  via composer

  ```

  composer require calcinai/strut

  ```


  ## Usage

  The test case for this is the OpenAPI petstore.


  The library will deserialize an OpenAPI specification into native PHP objects,
  then serialize it back into its original form, with the only differences
  (sometimes) being the order of properties in objects (which is of no
  consequence).


  ### Loading documents


  ```php

  $schema =
  json_decode(file_get_contents('http://petstore.swagger.io/v2/swagger.json'));

  $openapi = \Calcinai\Strut\OpenAPI::create($schema);

  print_r($swagger);

  ```


  This will produce (snipped):


  ```

  Calcinai\Strut\OpenAPI Object

  (
   [data:protected] => Array
    (
     [openapi] => 3.0
     [info] => Calcinai\Strut\Definitions\Info Object
      (
       [data:protected] => Array
        (
         [version] => 1.0.0
         [title] => OpenAPI Petstore
         [license] => Calcinai\Strut\Definitions\License Object
          (
           [data:protected] => Array
            (
             [name] => MIT
            )

          )

        )

      )

     [servers] => Array
      (
       [0] => Calcinai\Strut\Definitions\Server Object
        (
         [data:protected] => Array
          (
           [url] => https://petstore.openapis.org/v1
           [description] => Development server
          )

        )

      )

     [paths] => Calcinai\Strut\Definitions\Paths Object
      (
       [data:protected] => Array
        (
         [/pets] => Calcinai\Strut\Definitions\PathItem Object
          (
           [data:protected] => Array
            (
             [get] => Calcinai\Strut\Definitions\Operation Object
              (
               [data:protected] => Array
                (
                 [summary] => List all pets
                 [operationId] => listPets
                 [tags] => Array
                  (
                   [0] => pets
                  )

                 [parameters] => Array
                  (
                   [0] => Calcinai\Strut\Definitions\Parameter Object
                    (
                     [data:protected] => Array
                      (
                       [name] => limit
                       [in] => query
                       [description] => How many items to return at one time (max 100)
                       [required] =>
                       [schema] => Calcinai\Strut\Definitions\Schema Object
                        (
                         [data:protected] => Array
                          (
                           [type] => integer
                           [format] => int32
                          )

                        )

                      )

                    )

                  )

                 [responses] => Calcinai\Strut\Definitions\Responses Object
                  (
                   [data:protected] => Array
                    (
                     [200] => Calcinai\Strut\Definitions\Response Object
                      (
                       [data:protected] => Array
                        (
                         [description] => An paged array of pets
                         [headers] => Calcinai\Strut\Definitions\HeadersOrReferences Object
                          (
                           [data:protected] => Array
                            (
                             [x-next] => Calcinai\Strut\Definitions\Header Object
                              (
                               [data:protected] => Array
                                (
                                 [schema] => Calcinai\Strut\Definitions\Schema Object
                                  (
                                   [data:protected] => Array
                                    (
                                     [type] => string
                                    )

                                  )

                                 [description] => A link to the next page of responses
                                )

                              )

                            )

                          )

                         [content] => Calcinai\Strut\Definitions\MediaTypes Object
                          (
                           [data:protected] => Array
                            (
                             [application/json] => Calcinai\Strut\Definitions\MediaType Object
                              (
                               [data:protected] => Array
                                (
                                 [schema] => Calcinai\Strut\Definitions\Reference Object
                                  (
                                   [data:protected] => Array
                                    (
                                     [$ref] => #/components/schemas/Pets
                                    )

                                  )

                                )

                              )

                            )

                          )

                        )

                      )

  ...

  ```



  ### Creating and modifying documents


  The following is an example of how that schema would be programatically
  generated:


  ```php

  $pet = Schema::create()
      ->addRequired('id')
      ->addRequired('name')
      ->setProperties(Properties::create()
          ->set('id', Schema::create()
              ->setType('integer')
              ->setFormat('int64')
          )
          ->set('name', Schema::create()
              ->setType('string')
          )
          ->set('tag', Schema::create()
              ->setType('string')
          )
      );

  $pets = Schema::create()
      ->setType('array')
      ->setItems($pet);


  $error = Schema::create()
      ->addRequired('code')
      ->addRequired('message')
      ->setProperties(Properties::create()
          ->set('code', Schema::create()
              ->setType('integer')
              ->setFormat('int32')
          )
          ->set('error', Schema::create()
              ->setType('string')
          )
      );


  $schema = OpenAPI::create()
      ->setInfo(
          Info::create()
              ->setTitle('Swagger Petstore')
              ->setVersion('1.0.0')
              ->setLicense(
                  License::create()
                      ->setName('MIT')
              )
      )
      ->addServer(\Calcinai\Strut\Definitions\Server::create()->setUrl('petstore.swagger.io'))
      ->setPaths(Paths::create()
          ->set('/pets', PathItem::create()
              ->setGet(Operation::create()
                  ->setSummary('List all pets')
                  ->setOperationId('listPets')
                  ->addTag('pets')
                  ->setResponses(Responses::create()
                      ->set('200', Response::create()
                          ->setDescription('A paged array of pets')
                      )
                      ->set('default', Response::create()
                          ->setDescription('Unexpected error')
                      )
                  )
              )
          )
      )
      ->setComponents(\Calcinai\Strut\Definitions\Components::create()
          ->setSchemas(\Calcinai\Strut\Definitions\SchemasOrReferences::create()
              ->set('Pet', $pet)
              ->set('Pets', $pets)
              ->set('Error', $error)
          )
      );

  echo json_encode($schema, JSON_PRETTY_PRINT);

  ```


  This will output:


  ```json

  {
      "info": {
          "title": "Swagger Petstore",
          "version": "1.0.0",
          "license": {
              "name": "MIT"
          }
      },
      "servers": [
          {
              "url": "petstore.swagger.io"
          }
      ],
      "paths": {
          "\/pets": {
              "get": {
                  "summary": "List all pets",
                  "operationId": "listPets",
                  "tags": [
                      "pets"
                  ],
                  "responses": {
                      "200": {
                          "description": "A paged array of pets"
                      },
                      "default": {
                          "description": "Unexpected error"
                      }
                  }
              }
          }
      },
      "components": {
          "schemas": {
              "Pet": {
                  "required": [
                      "id",
                      "name"
                  ],
                  "properties": {
                      "id": {
                          "type": "integer",
                          "format": "int64"
                      },
                      "name": {
                          "type": "string"
                      },
                      "tag": {
                          "type": "string"
                      }
                  }
              },
              "Pets": {
                  "type": "array",
                  "items": {
                      "required": [
                          "id",
                          "name"
                      ],
                      "properties": {
                          "id": {
                              "type": "integer",
                              "format": "int64"
                          },
                          "name": {
                              "type": "string"
                          },
                          "tag": {
                              "type": "string"
                          }
                      }
                  }
              },
              "Error": {
                  "required": [
                      "code",
                      "message"
                  ],
                  "properties": {
                      "code": {
                          "type": "integer",
                          "format": "int32"
                      },
                      "error": {
                          "type": "string"
                      }
                  }
              }
          }
      }
  }

  ```


  This isn't the full example, but it gives an idea of the structure.


  ## Contributing

  I'd love feedback and/or contributions, but they will probably need to target
  the generation library.  Head to
  [Gendarme](https://github.com/calcinai/gendarme) if this sounds like you. 
  Basic command for generating this library is 


  ```

  ./bin/gendarme generate --namespace "Calcinai\Strut" --root-class Swagger 
  ../strut/lib/schema.json ../strut/src/

  ```
pingf/falsy: |
  # falsy

  FAL.S.Y

  ### description

      it's an api framework.
      using falcon, swagger, yaml together!
    
  ### license

      MIT and Apache v2
    
  ### showtime

  ![ScreenShot](https://raw.githubusercontent.com/pingf/falsy/master/demo.gif)


  ### how to install it

  `pip install falsy`
    
  ### how to use it

  0. create the dir for static

      `mkdir static`

  1. writting the server code(main.py)

      ```python
      from falsy.falsy import FALSY

      f = FALSY()   #you need create the dir called static before you run
      f.swagger('test.yml', ui=True, theme='impress') #impress theme is the responsive swagger ui, or you can use 'normal' here
      api = f.api
      ```

  2. writting the yml file

      ```
      swagger: '2.0'
      info:
      title: FALSY SIMPLE DEMO API
      version: "0.1"
      consumes:
      - application/json
      produces:
      - application/json
      basePath: "/v1"
      paths:
        '/hello':
          get:
            tags: [Method]
            operationId: demo.get_it
            summary: testing
            parameters:
              - name: name
                in: query
                type: string
                default: 'john'
            responses:
              200:
                description: Return response
      ```
    
  3. writting the operation handler(demo.py)

      ```python
      def get_it(name):
          return {
              'get': name
          }
      ```
    
  4. run it

      `gunicorn -b 0.0.0.0:8001 main:api --reload -w 1 --threads 1`
    
  5. visit the ui page

      `http://0.0.0.0:8001/v1/ui/`
      make sure it ends with '/'
    
  ### video demo

  ![ScreenShot](https://raw.githubusercontent.com/pingf/falsy/master/falsy.gif)
    
  ### extensions
      
      there some improvements compare to standard swagger, 
      you can define `operationId` for handler, 'beforeId' and 'afterId' for aop hooks,
      and 'validationId' for validator, see the files in demo dir for details.
gangverk/flask-swagger: >
  # flask-swagger

  A Swagger 2.0 spec extractor for Flask


  Install:


  ```shell

  pip install flask-swagger

  ```

  Flask-swagger provides a method (swagger) that inspects the Flask app for
  endpoints that contain YAML docstrings with Swagger 2.0
  [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object)
  objects.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user
          ---
          tags:
            - users
          definitions:
            - schema:
                id: Group
                properties:
                  name:
                   type: string
                   description: the group's name
          parameters:
            - in: body
              name: body
              schema:
                id: User
                required:
                  - email
                  - name
                properties:
                  email:
                    type: string
                    description: email for user
                  name:
                    type: string
                    description: name for user
                  address:
                    description: address for user
                    schema:
                      id: Address
                      properties:
                        street:
                          type: string
                        state:
                          type: string
                        country:
                          type: string
                        postalcode:
                          type: string
                  groups:
                    type: array
                    description: list of groups
                    items:
                      $ref: "#/definitions/Group"
          responses:
            201:
              description: User created
          """
          return {}
  ```

  Flask-swagger supports docstrings in methods of MethodView classes (ala
  [Flask-RESTful](https://github.com/flask-restful/flask-restful)) and regular
  Flask view functions.


  Following YAML conventions, flask-swagger searches for `---`, everything
  preceding is provided as `summary` (first line) and `description` (following
  lines) for the endpoint while everything after is parsed as a swagger
  [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object)
  object.


  In order to support inline definition of [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects in
  [Parameter](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject) 
  and
  [Response](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#responsesObject)
  objects, flask-swagger veers a little off from the standard. We require an
  `id` field for the inline Schema which is then used to correctly place the
  [Schema](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  object in the
  [Definitions](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject)
  object.



  [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects can be defined in a definitions section within the docstrings (see
  group object above) or within responses or parameters (see user object above).
  We also support schema objects nested within the properties of other [Schema
  ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject)
  objects. An example is shown above with the address property of User.


  If you don't like to put YAML on docstrings you can put the same content in an
  external file.


  #### file.yml

  ```yaml

  Create a new user

  ---

  tags:
    - users
  definitions:
    - schema:
        id: Group
        properties:
          name:
           type: string
           description: the group's name
  parameters:
    - in: body
      name: body
      schema:
        id: User
        required:
          - email
          - name
        properties:
          email:
            type: string
            description: email for user
          name:
            type: string
            description: name for user
          address:
            description: address for user
            schema:
              id: Address
              properties:
                street:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalcode:
                  type: string
          groups:
            type: array
            description: list of groups
            items:
              $ref: "#/definitions/Group"
  responses:
    201:
      description: User created
  ```


  and point to it in your docstring.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user

          blah blah

          swagger_from_file: path/to/file.yml

          blah blah
          """
          return {}
  ```


  Note that you can replace `swagger_from_file` by another keyword. Supply your
  chosen keyword as an argument to swagger. 



  To expose your Swagger specification to the world you provide a Flask route
  that does something along these lines


  ```python

  from flask import Flask, jsonify

  from flask_swagger import swagger


  app = Flask(__name__)


  @app.route("/spec")

  def spec():
      return jsonify(swagger(app))
  ```


  Note that the Swagger specification returned by `swagger(app)` is as minimal
  as it can be. It's your job to override and add to the specification as you
  see fit.


  ```python

  @app.route("/spec")

  def spec():
      swag = swagger(app)
      swag['info']['version'] = "1.0"
      swag['info']['title'] = "My API"
      return jsonify(swag)
  ```



  [Swagger-UI](https://github.com/swagger-api/swagger-ui)


  Swagger-UI is the reason we embarked on this mission to begin with,
  flask-swagger does not however include Swagger-UI. Simply follow the awesome
  documentation over at https://github.com/swagger-api/swagger-ui and point your
  [swaggerUi.url](https://github.com/swagger-api/swagger-ui#swaggerui) to your
  new flask-swagger endpoint and enjoy.


  ## flaskswagger Command

  This package now comes with a very simple command line interface:
  flaskswagger. This command can be used to build and update swagger specs for
  your flask apps from the command line or at build time.


  ```shell

  flaskswagger -h

  ```


  ```

  usage: flaskswagger [-h] [--template TEMPLATE] [--out-dir OUT_DIR]
                      [--definitions DEFINITIONS] [--host HOST]
                      [--base-path BASE_PATH] [--version VERSION]
                      app

  positional arguments:
    app                   the flask app to swaggerify

  optional arguments:
    -h, --help            show this help message and exit
    --template TEMPLATE   template spec to start with, before any other options
                          or processing
    --out-dir OUT_DIR     the directory to output to
    --definitions DEFINITIONS
                          json definitions file
    --host HOST
    --base-path BASE_PATH
    --version VERSION     Specify a spec version

  ```


  For example, this can be used to build a swagger spec which can be served from
  your static directory. In the example below, we use the manually created
  swagger.json.manual as a template, and output to the `static/` directory.


  ```shell

  flaskswagger server:app --template static/swagger.json.manual --out-dir
  static/

  ```

  Also, you can ask flaskswagger to add host and basePath to your swagger
  spec:  


  ```shell

  flaskswagger server:app --host localhost:5000 --base-path /v1

  ```


  Acknowledgements


  Flask-swagger builds on ideas and code from
  [flask-sillywalk](https://github.com/hobbeswalsh/flask-sillywalk) and
  [flask-restful-swagger](https://github.com/rantav/flask-restful-swagger)


  Notable forks


  [Flasgger](https://github.com/rochacbruno/flasgger)
Yelp/swagger_spec_validator: >
  # swagger_spec_validator

  [![Build
  Status](https://travis-ci.org/Yelp/swagger_spec_validator.svg?branch=master)](https://travis-ci.org/Yelp/swagger_spec_validator)

  [![Coverage
  Status](https://coveralls.io/repos/Yelp/swagger_spec_validator/badge.svg)](https://coveralls.io/r/Yelp/swagger_spec_validator)

  [![Latest
  Version](https://img.shields.io/pypi/v/swagger_spec_validator.svg)](https://pypi.python.org/pypi/swagger_spec_validator/)


  ## About


  Swagger Spec Validator is a Python library that validates Swagger Specs
  against the [Swagger
  1.2](https://github.com/swagger-api/swagger-spec/blob/master/versions/1.2.md)
  or [Swagger
  2.0](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)
  specification.  The validator aims to check for full compliance with the
  Specification.


  ## Example Usage


  Validate a spec from a url:


  ```python


  from swagger_spec_validator import validate_spec_url


  # example for swagger spec v1.2

  validate_spec_url('http://petstore.swagger.io/api/api-docs')


  # example for swagger spec v2.0

  validate_spec_url('http://petstore.swagger.io/v2/swagger.json')

  ```


  ## Documentation


  More documentation is available at
  http://swagger_spec_validator.readthedocs.org


  ## Installation

      $ pip install swagger_spec_validator

  ## Contributing


  1. Fork it ( http://github.com/Yelp/swagger_spec_validator/fork )

  2. Create your feature branch (`git checkout -b my-new-feature`)

  3. Commit your changes (`git commit -am 'Add some feature'`)

  4. Push to the branch (`git push origin my-new-feature`)

  5. Create new Pull Request


  ## License


  Copyright (c) 2015, Yelp, Inc. All rights reserved.

  Apache v2
tminglei/binder-swagger-java: >
  # binder-swagger-java


  [![Build
  Status](https://travis-ci.org/tminglei/binder-swagger-java.svg?branch=master)](https://travis-ci.org/tminglei/binder-swagger-java)


  `binder-swagger-java` is a simple api management solution, which let api
  maintainence and dev based on api easily.



  ## Features

  - lightweight, less than 3000 line codes (framework + built-in route/fake data
  generating)

  - based on `form-binder-java`, allowing dynamic objects in operation's
  parameter/response definitions

  - directly integrate with `swagger-models`, allowing to operate swagger object
  when necessary

  - can generate mock response w/ fake data on demand for unimplemented api
  operations

  - high customizable, you can replace almost all of the core components



  ## How it works

  You define the api meta data in classes' static code blocks, then it was
  collected to a static global swagger object when class scan/loading, so when
  requested, the program can serve it right now.  

  _With swagger.json, the swagger-ui can render the API menu in the browser.
  Then you can browse, fill parameters and send to/receive from service impls
  (p.s. the service urls were included in swagger.json)._


  ![binder-swagger
  description](https://raw.githubusercontent.com/tminglei/binder-swagger-java/master/binder-swagger-java.png)


  > _p.s. based on
  [`form-binder-java`](https://github.com/tminglei/form-binder-java) and
  [`swagger-models`](https://github.com/swagger-api/swagger-core),
  `binder-swagger-java` enable you to define dynamic data structures and operate
  the swagger object directly when necessary, so it's more expressive in
  theory._



  ## How to use it

  #### 0) add the dependency to your project:

  ```xml

  <dependency>
      <groupId>com.github.tminglei</groupId>
      <artifactId>binder-swagger-java</artifactId>
      <version>0.8.0</version>
  </dependency>

  ```

  #### 1) define and register your api operations:

  ```java

  // in `PetResource.java`

  static Mapping<?> petStatus = $(text(oneOf(Arrays.asList("available",
  "pending", "sold"))))
      .desc("pet status in the store").example("available").$$;
  static Mapping<?> pet = $(mapping(
      field("id", $(vLong()).desc("pet id").example(gen("petId").or(gen(() -> faker.number().randomNumber()))).$$),
      field("name", $(text(required())).desc("pet name").$$),
      field("category", attach(required()).to($(mapping(
            field("id", vLong(required())),
            field("name", text(required()))
      )).refName("category").desc("category belonged to").$$)),
      field("photoUrls", $(list(text())).desc("pet's photo urls").example(Arrays.asList("http://example.com/photo1")).$$),
      field("tags", $(list(text())).desc("tags for the pet").example(Arrays.asList("tag1", "tag2")).$$),
      field("status", petStatus)
  )).refName("pet").desc("pet info").$$;


  static SharingHolder sharing = sharing().pathPrefix("/pet").tag("pet");


  static {
      sharing.operation(GET, "/{petId}")
          .summary("get pet by id")
          .parameter(param(longv()).in("path").name("petId").example(1l))
          .response(200, response(pet))
          .response(404, response().description("pet not found"))
          .notImplemented() // MARK IT `notImplemented`, THEN `binder-swagger-java` WILL GENERATE MOCK RESPONSE FOR YOU
      ;
  }

  @GET

  @Path("/{petId}")

  public Response getPetById(@PathParam("petId") String petId) throws
  NotFoundException, SQLException {

  ...

  ```

  #### 2) supplement your other swagger info:

  ```java

  // in `Bootstrap.java`

  static {  // for swagger
      swagger().info(info()
          .title("Swagger Sample App")
          .description("This is a sample server Petstore server.  You can find out more about Swagger " +
                "at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, " +
                "you can use the api key `special-key` to test the authorization filters.")
          .termsOfService("http://swagger.io/terms/")
          .contact(contact().email("apiteam@swagger.io"))
          .license(license().name("Apache 2.0")
                .url("http://www.apache.org/licenses/LICENSE-2.0.html")
          )
      ).host("localhost:8002")
      .basePath("/api")
      .consumes("application/json")
      .produces("application/json")
      .securityDefinition("api_key", apiKeyAuth("api_key", In.HEADER))
      .securityDefinition("petstore_auth", oAuth2()
            .implicit("http://petstore.swagger.io/api/oauth/dialog")
            .scope("read:pets", "read your pets")
            .scope("write:pets", "modify pets in your account")
      ).tag(tag("pet").description("Everything about your Pets")
            .externalDocs(externalDocs().description("Find out more").url("http://swagger.io"))
      ).tag(tag("store").description("Access to Petstore orders")
      ).tag(tag("user").description("Operations about user")
            .externalDocs(externalDocs().description("Find out more about our store").url("http://swagger.io"))
      );
  }

  ```

  #### 3) configure the filter, which will serv the `swagger.json`:

  ```xml

  // in `web.xml`

  <filter>
      <filter-name>SwaggerFilter</filter-name>
      <filter-class>com.github.tminglei.swagger.SwaggerFilter</filter-class>

      <!-- enable/disable swagger, default value: true
      <init-param>
          <param-name>enabled</param-name>
          <param-value>false</param-value>
      </init-param>
      -->

      <init-param>
          <param-name>scan-packages-and-classes</param-name>
          <param-value>com.example.resource; com.example.Bootstrap</param-value>
      </init-param>

      <!-- specify the requestURI relative to base path, to fetch your swagger json, default '/swagger.json'
      <init-param>
          <param-name>swagger-uri</param-name>
          <param-value>/swagger.json</param-value>
      </init-param>
      -->

      <!-- configure your custom mapping converter
      <init-param>
          <param-name>mapping-converter</param-name>
          <param-value>com.company.pkg.MyMappingConverter</param-value>
      </init-param>
      -->

      <!-- enable/disable mock data generation, default value: true
      <init-param>
          <param-name>fake-enabled</param-name>
          <param-value>false</param-value>
      </init-param>
      -->

      <!-- configure your custom url router used by `binder-swagger-java`
      <init-param>
          <param-name>url-router</param-name>
          <param-value>com.company.pkg.MyRouter</param-value>
      </init-param>
      -->

      <!-- configure your custom data writer used by `binder-swagger-java`
      <init-param>
          <param-name>data-writer</param-name>
          <param-value>com.company.pkg.MyDataWriter</param-value>
      </init-param>
      -->
  </filter>

  <filter-mapping>
      <filter-name>SwaggerFilter</filter-name>
      <url-pattern>/api/*</url-pattern>
  </filter-mapping>

  ...

  ```



  ##### That's all. Enjoy it!



  > For more usage details, pls check the example project
  [here](https://github.com/tminglei/binder-swagger-java/tree/master/example/java-jaxrs).



  ## Q & A

  **Q:** Why use static code blocks to associate/register operation meta info
  instead of annotations?  

  **A:** Well, because we can't use annotations here. Annotation requires static
  defined data types, but we didn't define java beans in our project.  

  _(p.s. because of this, we can't also use existing frameworks, like
  `springfox`.)_



  ## License

  The BSD License, Minglei Tu &lt;tmlneu@gmail.com&gt;
thebignet/swagger-codegen-gradle-plugin: >
  swagger-codegen-gradle-plugin

  ============================


  [![Build
  Status](https://travis-ci.org/thebignet/swagger-codegen-gradle-plugin.svg?branch=master)](https://travis-ci.org/thebignet/swagger-codegen-gradle-plugin)


  A Gradle plugin to support the [swagger](http://swagger.io) code generation
  project



  [DEPRECATED] !!!

  ------------


  see the
  [swagger-codegen-gradle-plugin-example](https://github.com/thebignet/swagger-codegen-gradle-plugin-example)
  for creating a Gradle task to generate code with Swagger Codegen.



  Usage

  ============================


  see the
  [swagger-codegen-gradle-plugin-example](https://github.com/thebignet/swagger-codegen-gradle-plugin-example),
  or:


  Here is an example of how to use the plugin in a `build.gradle` file

  ```groovy

  plugins {
      id 'org.detoeuf.swagger-codegen' version '1.7.4'
      id 'java'
  }


  apply plugin: 'org.detoeuf.swagger-codegen'


  repositories {
      mavenCentral()
      jcenter()
  }


  swagger {
      inputSpec = 'http://petstore.swagger.io/v2/swagger.json'
      outputDir = file('build/swagger')
      lang = 'java'

      additionalProperties = [
              'invokerPackage'   : 'io.swagger.petstore.client',
              'modelPackage'     : 'io.swagger.petstore.client.model',
              'apiPackage'       : 'io.swagger.petstore.client.api',
              'dateLibrary'      : 'java8'
      ]
      importMappings = [
              'Dog': 'io.swagger.petstore.client.model.Dog'
      ]
  }


  sourceSets {
      swagger {
          java {
              srcDir file("${project.buildDir.path}/swagger/src/main/java")
          }
      }
  }


  classes.dependsOn('swagger')


  ext {
      spring_boot_version = '1.5.6.RELEASE'
      jackson_version = '2.4.2'
      jersey_version = '1.18'
      jodatime_version = '2.3'
      junit_version = '4.8.1'
  }


  dependencies {
      swaggerCompile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
      swaggerCompile 'io.swagger:swagger-annotations:1.5.16'
      swaggerCompile 'com.squareup.okhttp:okhttp:2.7.5'
      swaggerCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
      swaggerCompile 'com.google.code.gson:gson:2.8.1'

      compile sourceSets.swagger.output

      compile "com.sun.jersey:jersey-client:$jersey_version"
      compile "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
      compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
      compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
      compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
      compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.1.5"
      compile "joda-time:joda-time:$jodatime_version"
      compile 'io.swagger:swagger-codegen:2.2.3'

      testCompile "junit:junit:$junit_version"

      runtime 'com.squareup.okhttp:okhttp:2.7.5'
      runtime 'com.squareup.okhttp:logging-interceptor:2.7.5'
      runtime 'com.google.code.gson:gson:2.8.1'
  }

  ```


  Launch with:


  ```

  gradle swagger

  ```


  ### Configuration parameters

  the `swagger {}` configuration is passed to
  [CodegenConfigurator.java](https://github.com/swagger-api/swagger-codegen/blob/v2.2.1/modules/swagger-codegen/src/main/java/io/swagger/codegen/config/CodegenConfigurator.java)


  #### Dynamic properties

  Some Swagger codegen configurations will contain extra properties that are not
  part of the io.swagger.codegen.CodegenConfig interface. For example there is
  the `sourceFolder` property that is only applicable if using jaxrs-spec as the
  value of the `lang` property. In order to set such properties, we should use
  the `dynamicProperty` method inside the `swagger {}` configuration as shown
  below.


  ```

  swagger {
      lang = 'jaxrs-spec'

      addDynamicProperty 'sourceFolder', 'src/swagger/java'

      additionalProperties = [
          ...
      ]
      systemProperties = [
          ...
      ]
  }

  ```


  … to be documented …


  ### deprecation warning

  the old behaviour had a custom plugin for this swagger config as seen below

  - `inputSpec` - :check:

  - `outputDir` - was: `output`

  - `lang` - was: `language`

  - `additionalProperties` - sets additional properties that can be referenced
  by the mustache templates in the format of name=value,name=value.  See
  [Customizing the
  generator](https://github.com/swagger-api/swagger-codegen/#customizing-the-generator)
  for list of parameters


  #### new settings possible

  - `systemProperties` - see [selective
  generation](https://github.com/swagger-api/swagger-codegen/#selective-generation)


  #### no longer included

  - `models` - have a look at the systemProperties section

  - `apis` - [selective
  generation](https://github.com/swagger-api/swagger-codegen/#selective-generation)
  of apis.  Leave blank to generate apis only

  - `supportingFiles` - [selective
  generation](https://github.com/swagger-api/swagger-codegen/#selective-generation)
  of supporting files.  Leave blank to generate supporting files only


  no substituion for:

  - `cleanOutputDir` - now, configured by configuring the task directly:
      ```groovy
      tasks.getByName("swagger") {
          cleanOutputDir = false
      }
      ```
striglia/pyramid_swagger: >
  :PyPI: https://pypi.python.org/pypi/pyramid_swagger

  :Documentation: http://pyramid-swagger.readthedocs.org/en/latest/

  :Source: https://github.com/striglia/pyramid_swagger

  :License: Copyright © 2014 Scott Triglia under the `BSD 3-clause
  <http://opensource.org/licenses/BSD-3-Clause>`_

  :Build status:
      .. image:: https://travis-ci.org/striglia/pyramid_swagger.png?branch=master
          :target: https://travis-ci.org/striglia/pyramid_swagger?branch=master
          :alt: Travis CI
      .. image:: https://ci.appveyor.com/api/projects/status/ufmlmpwy1vj3yjgk/branch/master?svg=true
          :target: https://ci.appveyor.com/project/striglia/pyramid-swagger
          :alt: Appveyor (Windows CI)
  :Current coverage on master:
      .. image:: https://coveralls.io/repos/striglia/pyramid_swagger/badge.png
          :target: https://coveralls.io/r/striglia/pyramid_swagger
  :Persistent chat for questions: 
      .. image:: https://badges.gitter.im/Join%20Chat.svg
          :alt: Join the chat at https://gitter.im/striglia/pyramid_swagger
          :target: https://gitter.im/striglia/pyramid_swagger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge


  pyramid_swagger

  ===============


  This project offers convenient tools for using Swagger to define and validate

  your interfaces in a Pyramid webapp.


  Full documentation is available at http://pyramid-swagger.readthedocs.org/.



  How to contribute

  -----------------


  #. Fork this repository on Github:
  https://help.github.com/articles/fork-a-repo/

  #. Clone your forked repository:
  https://help.github.com/articles/cloning-a-repository/

  #. Make a feature branch for your changes:

      ::

          git remote add upstream https://github.com/striglia/pyramid_swagger.git
          git fetch upstream
          git checkout upstream/master -b my-feature-branch

  #. Create and activate the virtual environment, this will provide you with all
  the
     libraries and tools necessary for pyramid_swagger development:

      ::

          make
          source .activate.sh

  #. Make sure the test suite works before you start:

      ::

          tox -e py27    # Note: use py35 for Python 3.5, see tox.ini for possible values

  #. Commit patches: http://gitref.org/basic/

  #. Push to github: ``git pull && git push origin``

  #. Send a pull request:
  https://help.github.com/articles/creating-a-pull-request/



  Running a single test

  *********************


  Make sure you have activated the virtual environment (see above).


  ::

      py.test -vvv tests/tween_test.py::test_response_properties
kaizhu256/node-swagger-mongodb: >
  swagger-mongodb

  ===============

  lightweight swagger-ui crud-middleware backed by mongodb


  [![NPM](https://img.shields.io/npm/v/swagger-mongodb.svg?style=flat-square)](https://www.npmjs.org/package/swagger-mongodb)




  # live test-server

  [![heroku.com
  test-server](https://kaizhu256.github.io/node-swagger-mongodb/build/screen-capture.herokuDeploy.slimerjs..png)](https://hrku01-swagger-mongodb-beta.herokuapp.com)




  # build-status [![travis-ci.org
  build-status](https://api.travis-ci.org/kaizhu256/node-swagger-mongodb.svg)](https://travis-ci.org/kaizhu256/node-swagger-mongodb)

  [![build commit
  status](https://kaizhu256.github.io/node-swagger-mongodb/build/build.badge.svg)](https://travis-ci.org/kaizhu256/node-swagger-mongodb)


  | git-branch : |
  [master](https://github.com/kaizhu256/node-swagger-mongodb/tree/master) |
  [beta](https://github.com/kaizhu256/node-swagger-mongodb/tree/beta) |
  [alpha](https://github.com/kaizhu256/node-swagger-mongodb/tree/alpha)|

  |--:|:--|:--|:--|

  | test-server : | [![heroku.com
  test-server](https://kaizhu256.github.io/node-swagger-mongodb/heroku-logo.75x25.png)](https://hrku01-swagger-mongodb-master.herokuapp.com)
  | [![heroku.com
  test-server](https://kaizhu256.github.io/node-swagger-mongodb/heroku-logo.75x25.png)](https://hrku01-swagger-mongodb-beta.herokuapp.com)
  | [![heroku.com
  test-server](https://kaizhu256.github.io/node-swagger-mongodb/heroku-logo.75x25.png)](https://hrku01-swagger-mongodb-alpha.herokuapp.com)|

  | test-report : |
  [![test-report](https://kaizhu256.github.io/node-swagger-mongodb/build..master..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-swagger-mongodb/build..master..travis-ci.org/test-report.html)
  |
  [![test-report](https://kaizhu256.github.io/node-swagger-mongodb/build..beta..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-swagger-mongodb/build..beta..travis-ci.org/test-report.html)
  |
  [![test-report](https://kaizhu256.github.io/node-swagger-mongodb/build..alpha..travis-ci.org/test-report.badge.svg)](https://kaizhu256.github.io/node-swagger-mongodb/build..alpha..travis-ci.org/test-report.html)|

  | coverage : | [![istanbul-lite
  coverage](https://kaizhu256.github.io/node-swagger-mongodb/build..master..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-swagger-mongodb/build..master..travis-ci.org/coverage.html/index.html)
  | [![istanbul-lite
  coverage](https://kaizhu256.github.io/node-swagger-mongodb/build..beta..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-swagger-mongodb/build..beta..travis-ci.org/coverage.html/index.html)
  | [![istanbul-lite
  coverage](https://kaizhu256.github.io/node-swagger-mongodb/build..alpha..travis-ci.org/coverage.badge.svg)](https://kaizhu256.github.io/node-swagger-mongodb/build..alpha..travis-ci.org/coverage.html/index.html)|

  | build-artifacts : |
  [![build-artifacts](https://kaizhu256.github.io/node-swagger-mongodb/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-swagger-mongodb/tree/gh-pages/build..master..travis-ci.org)
  |
  [![build-artifacts](https://kaizhu256.github.io/node-swagger-mongodb/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-swagger-mongodb/tree/gh-pages/build..beta..travis-ci.org)
  |
  [![build-artifacts](https://kaizhu256.github.io/node-swagger-mongodb/glyphicons_144_folder_open.png)](https://github.com/kaizhu256/node-swagger-mongodb/tree/gh-pages/build..alpha..travis-ci.org)|


  #### master branch

  - stable branch

  - HEAD should be tagged, npm-published package


  #### beta branch

  - semi-stable branch

  - HEAD should be latest, npm-published package


  #### alpha branch

  - unstable branch

  - HEAD is arbitrary

  - commit history may be rewritten




  # documentation

  #### this package requires

  - darwin or linux os

  - mongodb 2.6 or higher


  ####
  [api-doc](https://kaizhu256.github.io/node-swagger-mongodb/build/doc.api.html)

  [![api-doc](https://kaizhu256.github.io/node-swagger-mongodb/build/screen-capture.docApiCreate.slimerjs._2Fhome_2Ftravis_2Fbuild_2Fkaizhu256_2Fnode-swagger-mongodb_2Ftmp_2Fbuild_2Fdoc.api.html.png)](https://kaizhu256.github.io/node-swagger-mongodb/build/doc.api.html)




  # quickstart web example

  #### to run this example, follow the instruction in the script below

  - example.js


  ```javascript

  /*

  example.js


  this node script will serve a lightweight swagger-ui crud-api backed by
  mongodb


  instruction
      1. save this script as example.js
      2. run the shell command:
            $ npm install swagger-mongodb && npm_config_server_port=1337 node example.js
      3. open a browser to http://localhost:1337
      4. interact with the swagger-ui crud-api
  */


  /*jslint
      browser: true,
      maxerr: 8,
      maxlen: 96,
      node: true,
      nomen: true,
      regexp: true,
      stupid: true
  */


  (function (local) {
      'use strict';
      switch (local.modeJs) {



      // run node js-env code
      case 'node':
          // export local
          module.exports = local;
          // init assets
          local.utility2.cacheDict.assets['/'] = '<!DOCTYPE html>\n' +
  /* jslint-ignore-begin */

  '<html>\n' +

  '<head>\n' +

  '    <meta charset="UTF-8">\n' +

  '    <title>\n' +

  '    {{envDict.npm_package_name}} [{{envDict.npm_package_version}}]\n' +

  '    </title>\n' +

  '    <link rel="stylesheet" href="/assets/utility2.css">\n' +

  '    <style>\n' +

  '    * {\n' +

  '        box-sizing: border-box;\n' +

  '    }\n' +

  '    body {\n' +

  '        background-color: #fff;\n' +

  '        font-family: Helvetical Neue, Helvetica, Arial, sans-serif;\n' +

  '    }\n' +

  '    body > div {\n' +

  '        margin: 20px 0 20px 0;\n' +

  '    }\n' +

  '    .testReportDiv {\n' +

  '        display: none;\n' +

  '    }\n' +

  '    </style>\n' +

  '    {{envDict.npm_config_html_head_extra}}\n' +

  '</head>\n' +

  '<body>\n' +

  '    <div class="ajaxProgressDiv" style="display: none;">\n' +

  '    <div class="ajaxProgressBarDiv
  ajaxProgressBarDivLoading">loading</div>\n' +

  '    </div>\n' +

  '    <h1>{{envDict.npm_package_name}}
  [{{envDict.npm_package_version}}]</h1>\n' +

  '    <h3>{{envDict.npm_package_description}}</h3>\n' +

  '    <div class="testReportDiv"></div>\n' +

  '    <div id="swagger-ui-container" style="display: none;"></div>\n' +

  '    <iframe height="512" src="/assets/swagger-ui.html"
  width="100%"></iframe>\n' +

  '    <script src="/assets/utility2.js"></script>\n' +

  '    <script src="/assets/swagger-ui.rollup.js"></script>\n' +

  '    <script src="/assets/swagger-mongodb.js"></script>\n' +

  '    <script src="/assets/example.js"></script>\n' +

  '    <script src="/test/test.js"></script>\n' +

  '    <script>\n' +

  '    window.utility2 = window.utility2 || {};\n' +

  '    window.utility2.envDict = {\n' +

  '        npm_package_description: "{{envDict.npm_package_description}}",\n' +

  '        npm_package_name: "{{envDict.npm_package_name}}",\n' +

  '        npm_package_version: "{{envDict.npm_package_version}}"\n' +

  '    };\n' +

  '    document.querySelector("iframe").onload = function () {\n' +

  '        var self;\n' +

  '        self = this;\n' +

  '        self.height = innerHeight - self.offsetTop - 20;\n' +

  '        self.contentWindow.location.hash = location.hash;\n' +

  '        self.contentWindow.onclick = function () {\n' +

  '            setTimeout(function () {\n' +

  '                location.hash = self.contentWindow.location.hash;\n' +

  '            });\n' +

  '        };\n' +

  '    };\n' +

  '    </script>\n' +

  '    {{envDict.npm_config_html_body_extra}}\n' +

  '</body>\n' +

  /* jslint-ignore-end */
              '</html>\n';
          local.utility2.cacheDict.assets['/'] = local.utility2.stringFormat(
              local.utility2.cacheDict.assets['/'],
              { envDict: local.utility2.envDict },
              ''
          );
          local.utility2.cacheDict.assets['/assets/example.js'] =
              local.utility2.istanbul_lite.instrumentSync(
                  local.fs.readFileSync(__dirname + '/example.js', 'utf8'),
                  __dirname + '/example.js'
              );
          local.utility2.cacheDict.assets['/test/test.js'] =
              local.utility2.istanbul_lite.instrumentInPackage(
                  local.fs.readFileSync(local.swmg.__dirname + '/test.js', 'utf8'),
                  local.swmg.__dirname + '/test.js',
                  'swagger-mongodb'
              );
          // init mongodb-client
          local.utility2.onReady.counter += 1;
          local.utility2.taskRunOrSubscribe({
              key: 'swagger-mongodb.mongodbConnect',
              onTask: function (onError) {
                  local.mongodb.MongoClient.connect(
                      local.utility2.envDict.npm_config_mongodb_url ||
                          'mongodb://localhost:27017/test',
                      function (error, db) {
                              // validate no error occurred
                              local.utility2.assert(!error, error);
                              local.swmg.db = db;
                              onError();
                              local.utility2.onReady();
                          }
                  );
              }
          });
          // init middleware
          local.middleware = local.utility2.middlewareGroupCreate([
              // init pre-middleware
              local.utility2.middlewareInit,
              // init cached-assets middleware
              local.utility2.middlewareAssetsCached,
              // init http-body-get middleware
              local.utility2.middlewareBodyGet,
              // init http-body-parse-upload middleware
              function (request, response, nextMiddleware) {
                  var boundary, bodyText;
                  // jslint-hack
                  local.utility2.nop(response);
                  local.utility2.testTryCatch(function () {
                      if ((request.headers['content-type'] || '')
                              .indexOf('multipart/form-data') !== 0) {
                          nextMiddleware();
                          return;
                      }
                      boundary =
                          '--' + (/boundary=(.*)/).exec(request.headers['content-type'])[1];
                      request.swmgBodyParsed = {};
                      bodyText = String(request.bodyRaw);
                      bodyText.split(boundary).slice(1, -1).forEach(function (part) {
                          request.swmgBodyParsed[
                              (/\bname="([^"]*)/).exec(part)[1]
                          ] = part.split('\r\n\r\n').slice(1).join('\r\n\r\n').slice(0, -2);
                      });
                      // set file
                      bodyText.replace('\r\n\r\n', function (match0, ii) {
                          // jslint-hack
                          local.utility2.nop(match0);
                          request.swmgBodyParsed.file = request.bodyRaw
                              .slice(ii + 4, -(boundary.length + 6))
                              .toString('base64');
                      });
                      request.swmgBodyParsed.file = request.bodyRaw
                          .slice(bodyText.lastIndexOf('\r\n\r\n') + 4, -(boundary.length + 6))
                          .toString('base64');
                      // set filename
                      request.swmgBodyParsed.filename = (/\bfilename="([^"]+)/).exec(bodyText);
                      request.swmgBodyParsed.filename =
                          request.swmgBodyParsed.filename &&
                          request.swmgBodyParsed.filename[1];
                      nextMiddleware();
                  }, nextMiddleware);
              },
              // init http-body-parse middleware
              local.swmg.middlewareBodyParse,
              // init swagger pre-middleware
              function (request, response, nextMiddleware) {
                  // jslint-hack
                  local.utility2.nop(request);
                  // enable cors
                  // http://en.wikipedia.org/wiki/Cross-origin_resource_sharing
                  response.setHeader(
                      'Access-Control-Allow-Methods',
                      'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'
                  );
                  response.setHeader('Access-Control-Allow-Origin', '*');
                  // init content-type
                  response.setHeader('Content-Type', 'application/json; charset=UTF-8');
                  nextMiddleware();
              },
              // init swagger middleware
              local.swmg.middlewareSwagger
          ]);
          // init error-middleware
          local.middlewareError = local.swmg.middlewareError;
          // init petstore-api
          (function () {
              var methodPath, options, schema;
              options = local.utility2.jsonCopy(require(local.swmg.local
                  .swagger_ui_lite.__dirname + '/swagger.json'));
              options = {
                  definitions: options.definitions,
                  paths: options.paths,
                  tags: options.tags
              };
              // remove unused properties
              delete options.definitions.ApiResponse;
              // init schema
              Object.keys(options.definitions).forEach(function (schemaName) {
                  schema = options.definitions[schemaName];
                  // init id
                  schema.properties.id = { type: 'string' };
                  schema['x-inheritList'] = [{ $ref: '#/definitions/JsonapiResource' }];
              });
              local.utility2.objectSetOverride(options, {
                  definitions: {
                      // init Pet schema
                      Pet: {
                          // drop collection on init
                          _collectionDrop: true,
                          // upsert fixtures
                          _collectionFixtureList: [{
                              id: 'pet0',
                              name: 'birdie',
                              photoUrls: [],
                              status: 'available',
                              tags: [{ name: 'bird'}]
                          }, {
                              id: 'pet1',
                              name: 'kittie',
                              status: 'pending',
                              photoUrls: [],
                              tags: [{ name: 'cat'}]
                          }, {
                              id: 'pet2',
                              name: 'doggie',
                              photoUrls: [],
                              status: 'sold',
                              tags: [{ name: 'dog'}]
                          }],
                          _collectionName: 'SwmgPet'
                      },
                      // init Order schema
                      Order: {
                          // create index
                          _collectionCreateIndexList: [{
                              key: { status: 1 },
                              name: 'status_1'
                          }],
                          // drop collection on init
                          _collectionDrop: true,
                          // upsert fixtures
                          _collectionFixtureList: [{
                              id: 'order0',
                              status: 'available'
                          }, {
                              id: 'order1',
                              status: 'pending'
                          }, {
                              id: 'order2',
                              status: 'sold'
                          }],
                          _collectionName: 'SwmgOrder',
                          properties: {
                              petId: { type: 'string' }
                          }
                      },
                      // init User schema
                      User: {
                          // create index
                          _collectionCreateIndexList: [{
                              key: { username: 1 },
                              name: 'username_1',
                              unique: true
                          }],
                          // drop collection on init
                          _collectionDrop: true,
                          // upsert fixtures
                          _collectionFixtureList: [{
                              email: 'john@doe.com',
                              firstName: 'john',
                              id: 'user0',
                              lastName: 'doe',
                              password: 'hello',
                              phone: '1234-5678',
                              username: 'john.doe'
                          }, {
                              email: 'jane@doe.com',
                              firstName: 'jane',
                              id: 'user1',
                              lastName: 'doe',
                              password: 'bye',
                              phone: '8765-4321',
                              username: 'jane.doe'
                          }],
                          _collectionName: 'SwmgUser'
                      }
                  },
                  // init crud-api
                  paths: {
                      '/pet/crudGetByQueryMany': { get: {
                          _collectionName: 'SwmgPet',
                          _crudApi: 'pet',
                          _schemaName: 'Pet',
                          operationId: 'crudGetByQueryMany',
                          tags: ['pet']
                      } },
                      '/store/crudGetByQueryMany': { get: {
                          _collectionName: 'SwmgOrder',
                          _crudApi: 'store',
                          _schemaName: 'Order',
                          operationId: 'crudGetByQueryMany',
                          tags: ['store']
                      } },
                      '/user/crudGetByQueryMany': { get: {
                          _collectionName: 'SwmgUser',
                          _crudApi: 'user',
                          _schemaName: 'User',
                          operationId: 'crudGetByQueryMany',
                          tags: ['user']
                      } }
                  }
              }, 4);
              // transform petstore-api to swagger-mongodb's crud-api
              Object.keys(options.paths).forEach(function (path) {
                  Object.keys(options.paths[path]).forEach(function (method) {
                      methodPath = options.paths[path][method];
                      // init methodPath._schemaName
                      switch (path.split('/')[1]) {
                      case 'pet':
                          methodPath._schemaName = 'Pet';
                          break;
                      case 'store':
                          methodPath._schemaName = 'Order';
                          break;
                      case 'user':
                          methodPath._schemaName = 'User';
                          break;
                      }
                      methodPath._collectionName = 'Swmg' + methodPath._schemaName;
                      delete methodPath.produces;
                      delete methodPath.responses;
                      delete methodPath.security;
                      // init jsonapi response
                      local.utility2.objectSetDefault(methodPath, { responses: {
                          200: {
                              description: '200 ok - http://jsonapi.org/format' +
                                  '/#document-structure-top-level',
                              schema: { $ref: '#/definitions/JsonapiResponse{{_schemaName}}' }
                          }
                      } }, 2);
                      // init crudCreateMany / crudCreateOne / crudDeleteByIdOne / crudGetByIdOne
                      switch (methodPath.operationId) {
                      case 'addPet':
                      case 'createUser':
                      case 'placeOrder':
                          methodPath.operationId = 'crudCreateOne';
                          break;
                      case 'createUsersWithArrayInput':
                      case 'createUsersWithListInput':
                          methodPath.operationId = 'crudCreateMany';
                          break;
                      case 'deleteOrder':
                      case 'deletePet':
                      case 'deleteUser':
                          methodPath.operationId = 'crudDeleteByIdOne';
                          break;
                      case 'getOrderById':
                      case 'getPetById':
                      case 'getUserByName':
                          methodPath.operationId = 'crudGetByIdOne';
                          break;
                      }
                      // init id
                      (methodPath.parameters || []).forEach(function (paramDef) {
                          switch (paramDef.name) {
                          case 'orderId':
                          case 'petId':
                              delete paramDef.format;
                              paramDef.type = 'string';
                              break;
                          }
                      });
                  });
              });
              local.swmg.apiUpdate(options);
          }());
          // init petstore-middleware
          local.middleware.middlewareList.push(function (request, response, nextMiddleware) {
              var modeNext, onNext, options;
              modeNext = 0;
              onNext = function (error, data) {
                  local.utility2.testTryCatch(function () {
                      modeNext = error
                          ? Infinity
                          : modeNext + 1;
                      switch (modeNext) {
                      case 1:
                          // init id
                          ((request.swmgMethodPath && request.swmgMethodPath.parameters) || [
                          ]).forEach(function (paramDef) {
                              switch (paramDef.name) {
                              case 'orderId':
                              case 'petId':
                                  request.swmgParamDict.id = request.swmgParamDict[paramDef.name];
                                  break;
                              }
                          });
                          // init options
                          if (request.swmgMethodPath) {
                              options = {
                                  collectionName: request.swmgMethodPath._collectionName,
                                  data: request.swmgParamDict,
                                  operationId: request.swmgMethodPath.operationId,
                                  paramDefList: request.swmgMethodPath.parameters,
                                  schemaName: request.swmgMethodPath._schemaName
                              };
                          }
                          switch (request.swmgPathname) {
                          // handle pet request
                          case 'DELETE /pet/':
                          case 'GET /pet/':
                          case 'POST /pet':
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'GET /pet/findByStatus':
                              options.operationId = 'crudGetByQueryMany';
                              options.data.fields = '{}';
                              options.data.hint = '{}';
                              options.data.limit = 100;
                              options.data.query = '{"status":{"$in":' +
                                  JSON.stringify(options.data.status) + '}}';
                              options.data.skip = 0;
                              options.data.sort = '{"_timeModified":-1}';
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'GET /pet/findByTags':
                              options.operationId = 'crudGetByQueryMany';
                              options.data.fields = '{}';
                              options.data.hint = '{}';
                              options.data.limit = 100;
                              options.data.query = '{"status":{"$in":' +
                                  JSON.stringify(options.data.tags) + '}}';
                              options.data.skip = 0;
                              options.data.sort = '{"_timeModified":-1}';
                              options.paramDefList[0].default = 'bird,cat,dog';
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'POST /pet/':
                              options.data.upsert = true;
                              options.data.body = {
                                  id: options.data.id,
                                  name: options.data.name,
                                  status: options.data.status
                              };
                              options.operationId = 'crudUpdateOne';
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'POST /pet//':
                              options.data.body = {
                                  additionalMetadata: options.data.additionalMetadata,
                                  file: options.data.file,
                                  filename:
                                      request.swmgBodyParsed && request.swmgBodyParsed.filename,
                                  id: options.id
                              };
                              options.data.upsert = true;
                              options.operationId = 'crudUpdateOne';
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'PUT /pet':
                              options.data.upsert = true;
                              options.operationId = 'crudReplaceOne';
                              local.swmg._crudApi(options, onNext);
                              break;
                          // handle store request
                          case 'DELETE /store/order/':
                          case 'GET /store/order/':
                          case 'POST /store/order':
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'GET /store/inventory':
                              options.data = { body: [{
                                  $group: { _id: '$status', total: { $sum: 1} }
                              }, {
                                  $project: { _id: 0, status: '$_id', total: '$total' }
                              }]};
                              options.operationId = 'crudAggregateMany';
                              local.swmg._crudApi(options, onNext);
                              break;
                          // handle user request
                          case 'DELETE /user/':
                          case 'GET /user/':
                          case 'POST /user/createWithArray':
                          case 'POST /user/createWithList':
                              options.optionsId = { username: request.swmgParamDict.username};
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'POST /user':
                              options.data.username = options.data.body.username;
                              options.optionsId = { username: request.swmgParamDict.username};
                              local.swmg._crudApi(options, onNext);
                              break;
                          case 'PUT /user/':
                              options.data.body.username = options.data.username;
                              options.data.upsert = true;
                              options.operationId = 'crudReplaceOne';
                              options.optionsId = { username: request.swmgParamDict.username};
                              local.swmg._crudApi(options, onNext);
                              break;
                          default:
                              nextMiddleware();
                          }
                          break;
                      default:
                          // validate no error occurred
                          local.utility2.assert(!error, error);
                          // respond with json-object
                          response.end(JSON.stringify(data));
                      }
                  }, nextMiddleware);
              };
              onNext();
          });
          // run server-test
          local.utility2.testRunServer(local);
          break;
      }
  }((function () {
      'use strict';
      var local;



      // run shared js-env code
      (function () {
          // init local
          local = {};
          // init js-env
          local.modeJs = (function () {
              try {
                  return module.exports &&
                      typeof process.versions.node === 'string' &&
                      typeof require('http').createServer === 'function' &&
                      'node';
              } catch (errorCaughtNode) {
                  return typeof navigator.userAgent === 'string' &&
                      typeof document.querySelector('body') === 'object' &&
                      'browser';
              }
          }());
          // init global
          local.global = local.modeJs === 'browser'
              ? window
              : global;
          // export local
          local.global.local = local;
          // init swagger-mongodb
          local.swmg = local.modeJs === 'browser'
              ? window.swmg
              : require('swagger-mongodb');
          // import swmg.local
          Object.keys(local.swmg.local).forEach(function (key) {
              local[key] = local[key] || local.swmg.local[key];
          });
          // init utility2
          local.utility2 = local.swmg.local.utility2;
          // init onReady
          local.utility2.onReadyInit();
      }());
      return local;
  }())));

  ```


  #### output from shell

  [![screen-capture](https://kaizhu256.github.io/node-swagger-mongodb/build/screen-capture.testExampleJs.svg)](https://travis-ci.org/kaizhu256/node-swagger-mongodb)


  #### output from phantomjs-lite

  [![screen-capture](https://kaizhu256.github.io/node-swagger-mongodb/build/screen-capture.testExampleJs.slimerjs..png)](https://hrku01-swagger-mongodb-beta.herokuapp.com)




  # npm-dependencies

  - [mongodb-minimal](https://www.npmjs.com/package/mongodb-minimal)

  - [swagger-ui-lite](https://www.npmjs.com/package/swagger-ui-lite)

  - [utility2](https://www.npmjs.com/package/utility2)




  # package-listing

  [![screen-capture](https://kaizhu256.github.io/node-swagger-mongodb/build/screen-capture.gitLsTree.svg)](https://github.com/kaizhu256/node-swagger-mongodb)




  # package.json

  ```json

  {
      "author": "kai zhu <kaizhu256@gmail.com>",
      "bin": { "swagger-mongodb": "index.js" },
      "dependencies": {
          "mongodb-minimal": "2015.8.1",
          "swagger-ui-lite": "2015.6.2",
          "utility2": "~2015.8.5"
      },
      "description": "lightweight swagger-ui crud-middleware backed by mongodb",
      "devDependencies": {
          "phantomjs-lite": "2015.7.1"
      },
      "engines": { "node": ">=0.10 <=0.12" },
      "keywords": [
          "api",
          "browser",
          "cms", "crud",
          "mongo", "mongodb",
          "swagger", "swagger-ui",
          "web"
      ],
      "license": "MIT",
      "name": "swagger-mongodb",
      "os": ["darwin", "linux"],
      "repository" : {
          "type" : "git",
          "url" : "https://github.com/kaizhu256/node-swagger-mongodb.git"
      },
      "scripts": {
          "build-ci": "node_modules/.bin/utility2 shRun shReadmeBuild",
          "build-doc": "node_modules/.bin/utility2 shRun shReadmeExportPackageJson && \
  node_modules/.bin/utility2 shRun shDocApiCreate \"{ \

  exampleFileList:['example.js','test.js','index.js'], \

  moduleDict:{'swagger-mongodb':{aliasList:['swmg'],exports:require('./index.js')}}
  \

  }\"",
          "start": "npm_config_mode_auto_restart=1 node_modules/.bin/utility2 shRun node test.js",
          "test": "node_modules/.bin/utility2 shRun shReadmeExportPackageJson && \
  node_modules/.bin/utility2 test test.js"
      },
      "version": "2015.8.3"
  }

  ```




  # todo

  - add logging feature

  - rename delete to remove for naming consistency

  - migrate to travis-ci docker container build

  - add cached param for crudGetByQueryMany

  - add SwmgUserLoginTokenCapped

  - re-enable user login/logout

  - test /user/login and /user/logout

  - add max / min validation

  - none




  # change since af87c5b9

  - npm publish 2015.8.3

  - lockdown npm dependencies

  - none




  # changelog of last 50 commits

  [![screen-capture](https://kaizhu256.github.io/node-swagger-mongodb/build/screen-capture.gitLog.svg)](https://github.com/kaizhu256/node-swagger-mongodb/commits)




  # internal build-script

  - build.sh


  ```shell

  # build.sh


  # this shell script will run the build for this package


  shBuild() {
      # this function will run the main build
      local TEST_URL || return $?

      # init env
      export npm_config_mode_slimerjs=1 || return $?
      . node_modules/.bin/utility2 && shInit || return $?

      # run npm-test on published package
      shRun shNpmTestPublished || return $?

      # test example js script
      export npm_config_timeout_exit=10000 || return $?
      MODE_BUILD=testExampleJs shRunScreenCapture shReadmeTestJs example.js || return $?
      unset npm_config_timeout_exit || return $?

      # run npm-test
      MODE_BUILD=npmTest shRunScreenCapture npm test || return $?

      # create api-doc
      npm run-script build-doc || return $?

      # if running legacy-node, then do not continue
      [ "$(node --version)" \< "v0.12" ] && return

      # deploy app to heroku
      shRun shHerokuDeploy hrku01-$npm_package_name-$CI_BRANCH || return $?

      # test deployed app to heroku
      if [ "$CI_BRANCH" = alpha ] ||
          [ "$CI_BRANCH" = beta ] ||
          [ "$CI_BRANCH" = master ]
      then
          TEST_URL="https://hrku01-$npm_package_name-$CI_BRANCH.herokuapp.com" || return $?
          TEST_URL="$TEST_URL?modeTest=phantom&timeExit={{timeExit}}" || return $?
          MODE_BUILD=herokuTest shPhantomTest "$TEST_URL" || return $?
      fi
  }

  shBuild


  # save exit-code

  EXIT_CODE=$?

  # create package-listing

  MODE_BUILD=gitLsTree shRunScreenCapture shGitLsTree || exit $?

  # create recent changelog of last 50 commits

  MODE_BUILD=gitLog shRunScreenCapture git log -50 --pretty="%ai\u000a%B" ||
  exit $?

  # if running legacy-node, then do not continue

  [ "$(node --version)" \< "v0.12" ] && exit $EXIT_CODE

  # upload build-artifacts to github, and if number of commits > 16, then squash
  older commits

  COMMIT_LIMIT=16 shBuildGithubUpload || exit $?

  exit $EXIT_CODE

  ```
krakenjs/swaggerize-express: >
  # swaggerize-express


  [![Build
  Status](https://travis-ci.org/krakenjs/swaggerize-express.svg?branch=master)](https://travis-ci.org/krakenjs/swaggerize-express)  

  [![NPM
  version](https://badge.fury.io/js/swaggerize-express.png)](http://badge.fury.io/js/swaggerize-express)  


  `swaggerize-express` is a design-driven approach to building RESTful apis with
  [Swagger](http://swagger.io) and [Express](http://expressjs.com).


  `swaggerize-express` provides the following features:


  - API schema validation.

  - Routes based on the Swagger document.

  - API documentation route.

  - Input validation.


  See also:

  - [swaggerize-routes](https://github.com/krakenjs/swaggerize-routes)

  - [swaggerize-hapi](https://github.com/krakenjs/swaggerize-hapi)

  - [generator-swaggerize](https://www.npmjs.org/package/generator-swaggerize)


  ### Why "Design Driven"


  There are already a number of modules that help build RESTful APIs for node
  with swagger. However,

  these modules tend to focus on building the documentation or specification as
  a side effect of writing

  the application business logic.


  `swaggerize-express` begins with the swagger document first. This facilitates
  writing APIs that are easier to design, review, and test.


  ### Quick Start with a Generator


  This guide will let you go from an `api.json` to a service project in no time
  flat.


  First install `generator-swaggerize` (and `yo` if you haven't already):


  ```bash

  $ npm install -g yo

  $ npm install -g generator-swaggerize

  ```


  Now run the generator.


  ```bash

  $ mkdir petstore && cd $_

  $ yo swaggerize

  ```


  Follow the prompts (note: make sure to choose `express` as your framework
  choice).


  When asked for a swagger document, you can try this one:


  ```

  https://raw.githubusercontent.com/wordnik/swagger-spec/master/examples/v2.0/json/petstore.json

  ```


  You now have a working api and can use something like [Swagger
  UI](https://github.com/wordnik/swagger-ui) to explore it.


  ### Manual Usage


  ```javascript

  var swaggerize = require('swaggerize-express');


  app.use(swaggerize({
      api: require('./api.json'),
      docspath: '/api-docs',
      handlers: './handlers'
  }));

  ```


  Options:


  - `api` - a valid Swagger 2.0 document.

  - `docspath` - the path to expose api docs for swagger-ui, etc. Defaults to
  `/`.

  - `handlers` - either a directory structure for route handlers or a premade
  object (see *Handlers Object* below).

  - `express` - express settings overrides.


  After using this middleware, a new property will be available on the `app`
  called `swagger`, containing the following properties:


  - `api` - the api document.

  - `routes` - the route definitions based on the api document.


  Example:


  ```javascript

  var http = require('http');

  var express = require('express');

  var swaggerize = require('swaggerize-express');


  app = express();


  var server = http.createServer(app);


  app.use(swaggerize({
      api: require('./api.json'),
      docspath: '/api-docs',
      handlers: './handlers'
  }));


  server.listen(port, 'localhost', function () {
      app.swagger.api.host = server.address().address + ':' + server.address().port;
  });

  ```


  ### Mount Path


  Api `path` values will be prefixed with the swagger document's `basePath`
  value.


  ### Handlers Directory


  The `options.handlers` option specifies a directory to scan for handlers.
  These handlers are bound to the api `paths` defined in the swagger document.


  ```

  handlers
    |--foo
    |    |--bar.js
    |--foo.js
    |--baz.js
  ```


  Will route as:


  ```

  foo.js => /foo

  foo/bar.js => /foo/bar

  baz.js => /baz

  ```


  ### Path Parameters


  The file and directory names in the handlers directory can also represent path
  parameters.


  For example, to represent the path `/users/{id}`:


  ```shell

  handlers
    |--users
    |    |--{id}.js
  ```


  This works with directory names as well:


  ```shell

  handlers
    |--users
    |    |--{id}.js
    |    |--{id}
    |        |--foo.js
  ```


  To represent `/users/{id}/foo`.


  ### Handlers File


  Each provided javascript file should export an object containing functions
  with HTTP verbs as keys.


  Example:


  ```javascript

  module.exports = {
      get: function (req, res) { ... },
      put: function (req, res) { ... },
      ...
  }

  ```


  ### Handler Middleware


  Handlers can also specify middleware chains by providing an array of handler
  functions under the verb:


  ```javascript

  module.exports = {
      get: [
          function m1(req, res, next) { ... },
          function m2(req, res, next) { ... },
          function handler(req, res)  { ... }
      ],
      ...
  }

  ```


  ### Handlers Object


  The directory generation will yield this object, but it can be provided
  directly as `options.handlers`.


  Note that if you are programatically constructing a handlers obj this way, you
  must namespace HTTP verbs with `$` to

  avoid conflicts with path names. These keys should also be *lowercase*.


  Example:


  ```javascript

  {
      'foo': {
          '$get': function (req, res) { ... },
          'bar': {
              '$get': function (req, res) { ... },
              '$post': function (req, res) { ... }
          }
      }
      ...
  }

  ```


  Handler keys in files do *not* have to be namespaced in this way.


  ### Security Middleware


  If a security definition exists for a path in the swagger API definition, and
  an appropriate authorize function exists (defined using

  `x-authorize` in the `securityDefinitions` as per
  [swaggerize-routes](https://github.com/krakenjs/swaggerize-routes#security-object)),

  then it will be used as middleware for that path.


  In addition, a `requiredScopes` property will be injected onto the `request`
  object to check against.


  For example:


  Swagger API definition:


  ```json
      .
      .
      .

      //A route with security object.
      "security": [
          {
              "petstore_auth": [
                  "write_pets",
                  "read_pets"
              ]
          }
      ]
      .
      .
      .
      //securityDefinitions
      "securityDefinitions": {
          "petstore_auth": {
              "x-authorize": "lib/auth_oauth.js", // This path has to be relative to the project root.
              "scopes": {
                  "write_pets": "modify pets in your account",
                  "read_pets": "read your pets"
              }
          }
      },
  ```


  Sample `x-authorize` code -  lib/auth_oauth.js :


  ```javascript

  //x-authorize: auth_oauth.js

  function authorize(req, res, next) {
      validate(req, function (error, availablescopes) {
          /*
           * `req.requiredScopes` is set by the `swaggerize-express` module to help
           * with the scope and security validation.
           *
           */
          if (!error) {
              for (var i = 0; i < req.requiredScopes.length; i++) {
                  if (availablescopes.indexOf(req.requiredScopes[i]) > -1) {
                      next();
                      return;
                  }
              }

              error = new Error('Do not have the required scopes.');
              error.status = 403;

              next(error);
              return;
          }

          next(error);
      });
  }

  ```


  The context for `authorize` will be bound to the security definition, such
  that:


  ```javascript

  function authorize(req, res, next) {
      this.authorizationUrl; //from securityDefinition for this route's type.
      //...
  }

  ```
khrt/Raisin: >
  # NAME


  Raisin - A REST API microframework for Perl.


  # SYNOPSIS

      use HTTP::Status qw(:constants);
      use List::Util qw(max);
      use Raisin::API;
      use Types::Standard qw(HashRef Any Int Str);

      my %USERS = (
          1 => {
              first_name => 'Darth',
              last_name => 'Wader',
              password => 'deathstar',
              email => 'darth@deathstar.com',
          },
          2 => {
              first_name => 'Luke',
              last_name => 'Skywalker',
              password => 'qwerty',
              email => 'l.skywalker@jedi.com',
          },
      );

      plugin 'Logger', fallback => 1;
      app->log( debug => 'Starting Raisin...' );

      middleware 'CrossOrigin',
          origins => '*',
          methods => [qw/DELETE GET HEAD OPTIONS PATCH POST PUT/],
          headers => [qw/accept authorization content-type api_key_token/];

      plugin 'Swagger';

      swagger_setup(
          title => 'A POD synopsis API',
          description => 'An example of API documentation.',
          #terms_of_service => '',

          contact => {
              name => 'Artur Khabibullin',
              url => 'http://github.com/khrt',
              email => 'rtkh@cpan.org',
          },

          license => {
              name => 'Perl license',
              url => 'http://dev.perl.org/licenses/',
          },
      );

      desc 'Users API';
      resource users => sub {
          summary 'List users';
          params(
              optional('start', type => Int, default => 0, desc => 'Pager (start)'),
              optional('count', type => Int, default => 10, desc => 'Pager (count)'),
          );
          get sub {
              my $params = shift;

              my @users
                  = map { { id => $_, %{ $USERS{$_} } } }
                    sort { $a <=> $b } keys %USERS;

              my $max_count = scalar(@users) - 1;
              my $start = $params->{start} > $max_count ? $max_count : $params->{start};
              my $count = $params->{count} > $max_count ? $max_count : $params->{count};

              my @slice = @users[$start .. $count];
              { data => \@slice }
          };

          summary 'List all users at once';
          get 'all' => sub {
              my @users
                  = map { { id => $_, %{ $USERS{$_} } } }
                    sort { $a <=> $b } keys %USERS;
              { data => \@users }
          };

          summary 'Create new user';
          params(
              requires('user', type => HashRef, desc => 'User object', group {
                  requires('first_name', type => Str, desc => 'First name'),
                  requires('last_name', type => Str, desc => 'Last name'),
                  requires('password', type => Str, desc => 'User password'),
                  optional('email', type => Str, default => undef, regex => qr/.+\@.+/, desc => 'User email'),
              }),
          );
          post sub {
              my $params = shift;

              my $id = max(keys %USERS) + 1;
              $USERS{$id} = $params->{user};

              res->status(HTTP_CREATED);
              { success => 1 }
          };

          desc 'Actions on the user';
          params requires('id', type => Int, desc => 'User ID');
          route_param 'id' => sub {
              summary 'Show user';
              get sub {
                  my $params = shift;
                  $USERS{ $params->{id} };
              };

              summary 'Delete user';
              del sub {
                  my $params = shift;
                  delete $USERS{ $params->{id} };
                  res->status(HTTP_NO_CONTENT);
                  undef;
              };
          };
      };

      run;

  # DESCRIPTION


  Raisin is a REST API microframework for Perl.

  It's designed to run on Plack, providing a simple DSL to develop RESTful APIs
  easily.

  It was inspired by [Grape](https://github.com/intridea/grape).


  # FUNCTIONS


  ## API DESCRIPTION


  ### resource


  Adds a route to an application.

      resource user => sub { ... };

  ### route\_param


  Defines a route parameter as a resource `id` which can be anything if type

  isn't specified for it.

      route_param id => sub { ... };

  ### del, get, patch, post, put


  Shortcuts to add a `route` restricted to the corresponding HTTP method.

      get sub { 'GET' };

      del 'all' => sub { 'OK' };

      params(
          requires('id', type => Int),
          optional('key', type => Str),
      );
      get sub { 'GET' };

      desc 'Put data';
      params(
          required('id', type => Int),
          optional('name', type => Str),
      );
      put 'all' => sub {
          'PUT'
      };

  ### desc


  Adds a description to `resource` or any of the HTTP methods.

  Useful for OpenAPI as it's shown there as a description of an action.

      desc 'Some long explanation about an action';
      put sub { ... };

      desc 'Some exaplanation about a group of actions',
      resource => 'user' => sub { ... }

  ### summary


  Same as ["desc"](#desc) but shorter.

      summary 'Some summary';
      put sub { ... };

  ### tags


  Tags can be used for logical grouping of operations by resources

  or any other qualifier. Using in API description.

      tags 'delete', 'user';
      delete sub { ... };

  By default tags are added automatically based on it's namespace but you always

  can overwrite it using the function.


  ### entity


  Describes response object which will be used to generate OpenAPI description.

      entity 'MusicApp::Entity::Album';
      get {
          my $albums = $schema->resultset('Album');
          present data => $albums, with => 'MusicApp::Entity::Album';
      };

  ### params


  Defines validations and coercion options for your parameters.

  Can be applied to any HTTP method and/or ["route\_param"](#route_param) to
  describe parameters.

      params(
          requires('name', type => Str),
          optional('start', type => Int, default => 0),
          optional('count', type => Int, default => 10),
      );
      get sub { ... };

      params(
          requires('id', type => Int, desc => 'User ID'),
      );
      route_param 'id' => sub { ... };

  For more see ["Validation-and-coercion" in
  Raisin](https://metacpan.org/pod/Raisin#Validation-and-coercion).


  ### api\_default\_format


  Specifies default API format mode when formatter isn't specified by API user.

  E.g. if URI is asked without an extension (`json`, `yaml`) or `Accept` header

  isn't specified the default format will be used.


  Default value: `YAML`.

      api_default_format 'json';

  See also ["API-FORMATS" in
  Raisin](https://metacpan.org/pod/Raisin#API-FORMATS).


  ### api\_format


  Restricts API to use only specified formatter to serialize and deserialize
  data.


  Already exists
  [Raisin::Encoder::JSON](https://metacpan.org/pod/Raisin::Encoder::JSON),
  [Raisin::Encoder::YAML](https://metacpan.org/pod/Raisin::Encoder::YAML),

  and [Raisin::Encoder::Text](https://metacpan.org/pod/Raisin::Encoder::Text),
  but you can always register your own

  using ["register\_encoder"](#register_encoder).

      api_format 'json';

  See also ["API-FORMATS" in
  Raisin](https://metacpan.org/pod/Raisin#API-FORMATS).


  ### api\_version


  Sets up an API version header.

      api_version 1.23;

  ### plugin


  Loads a Raisin module. A module options may be specified after the module
  name.

  Compatible with [Kelp](https://metacpan.org/pod/Kelp) modules.

      plugin 'Swagger';

  ### middleware


  Adds a middleware to your application.

      middleware '+Plack::Middleware::Session' => { store => 'File' };
      middleware '+Plack::Middleware::ContentLength';
      middleware 'Runtime'; # will be loaded Plack::Middleware::Runtime

  ### mount


  Mounts multiple API implementations inside another one.

  These don't have to be different versions, but may be components of the same
  API.


  In `RaisinApp.pm`:

      package RaisinApp;

      use Raisin::API;

      api_format 'json';

      mount 'RaisinApp::User';
      mount 'RaisinApp::Host';

      1;

  ### register\_decoder


  Registers a third-party parser (decoder).

      register_decoder(xml => 'My::Parser::XML');

  See also [Raisin::Decoder](https://metacpan.org/pod/Raisin::Decoder).


  ### register\_encoder


  Registers a third-party formatter (encoder).

      register_encoder(xml => 'My::Formatter::XML');

  See also [Raisin::Encoder](https://metacpan.org/pod/Raisin::Encoder).


  ### run


  Returns the `PSGI` application.


  ## CONTROLLER


  ### req


  Provides quick access to the
  [Raisin::Request](https://metacpan.org/pod/Raisin::Request) object for the
  current route.


  Use `req` to get access to request headers, params, etc.

      use DDP;
      p req->headers;
      p req->params;

      say req->header('X-Header');

  See also [Plack::Request](https://metacpan.org/pod/Plack::Request).


  ### res


  Provides quick access to the
  [Raisin::Response](https://metacpan.org/pod/Raisin::Response) object for the
  current route.


  Use `res` to set up response parameters.

      res->status(403);
      res->headers(['X-Application' => 'Raisin Application']);

  See also [Plack::Response](https://metacpan.org/pod/Plack::Response).


  ### param


  Returns request parameters.

  Without an argument will return an array of all input parameters.

  Otherwise it will return the value of the requested parameter.


  Returns [Hash::MultiValue](https://metacpan.org/pod/Hash::MultiValue) object.

      say param('key'); # -> value
      say param(); # -> { key => 'value', foo => 'bar' }

  ### include\_missing


  Returns all declared parameters even if there is no value for a param.


  See ["Declared-parameters" in
  Raisin](https://metacpan.org/pod/Raisin#Declared-parameters).


  ### session


  Returns `psgix.session` hash. When it exists, you can retrieve and store

  per-session data.

      # store param
      session->{hello} = 'World!';

      # read param
      say session->{name};

  ### present


  Raisin hash a built-in `present` method, which accepts two arguments: an

  object to be presented and an options associated with it. The options hash may

  include `with` key, which is defined the entity to expose. See
  [Raisin::Entity](https://metacpan.org/pod/Raisin::Entity).

      my $artists = $schema->resultset('Artist');

      present data => $artists, with => 'MusicApp::Entity::Artist';
      present count => $artists->count;

  [Raisin::Entity](https://metacpan.org/pod/Raisin::Entity) supports
  [DBIx::Class](https://metacpan.org/pod/DBIx::Class) and
  [Rose::DB::Object](https://metacpan.org/pod/Rose::DB::Object).


  For details see examples in _examples/music-app_ and
  [Raisin::Entity](https://metacpan.org/pod/Raisin::Entity).


  # ALLOWED METHODS


  When you add a route for a resource, a route for the OPTIONS method will also
  be

  added. The response to an OPTIONS request will include an "Allow" header
  listing

  the supported methods.

      get 'count' => sub {
          { count => $count };
      };

      params(
          requires('num', type => Int, desc => 'Value to add to the count.'),
      );
      put 'count' => sub {
          my $params = shift;
          $count += $params->{num};
          { count: $count };
      };


      curl -v -X OPTIONS http://localhost:5000/count

      > OPTIONS /count HTTP/1.1
      > Host: localhost:5000
      >
      * HTTP 1.0, assume close after body
      < HTTP/1.1 204 No Content
      < Allow: GET, OPTIONS, PUT

  If a request for a resource is made with an unsupported HTTP method, an HTTP
  405

  (Method Not Allowed) response will be returned.

      curl -X DELETE -v http://localhost:3000/count

      > DELETE /count HTTP/1.1
      > Host: localhost:5000
      >
      * HTTP 1.0, assume close after body
      < HTTP/1.1 405 Method Not Allowed
      < Allow: OPTIONS, GET, PUT

  # PARAMETERS


  Request parameters are available through the `params` `HASH`. This includes

  GET, POST and PUT parameters, along with any named parameters you specify in

  your route strings.


  Parameters are automatically populated from the request body

  on `POST` and `PUT` for form input, `JSON` and `YAML` content-types.


  The request:

      curl localhost:5000/data -H Content-Type:application/json -d '{"id": "14"}'

  The Raisin endpoint:

      post data => sub { param('id') };

  Multipart `POST`s and `PUT`s are supported as well.


  In the case of conflict between either of:


  - path parameters;

  - GET, POST and PUT parameters;

  - contents of request body on POST and PUT;


  Path parameters have precedence.


  Query string and body parameters will be merged (see ["parameters" in
  Plack::Request](https://metacpan.org/pod/Plack::Request#parameters))


  ## Declared parameters


  Raisin allows you to access only the parameters that have been declared by you
  in

  ["params" in Raisin](https://metacpan.org/pod/Raisin#params) block.


  By default you can get all declared parameter as a first argument passed to
  your

  route subroutine.


  Application:

      api_format 'json';

      post data => sub {
          my $params = shift;
          { data => $params };
      };

  Request:

      curl -X POST -H "Content-Type: application/json" localhost:5000/signup -d '{"id": 42}'

  Response:

      { "data": nil }

  Once we add parameters block, Raisin will start return only the declared
  parameters.


  Application:

      api_format 'json';

      params(
          requires('id', type => Int),
          optional('email', type => Str)
      );
      post data => sub {
          my $params = shift;
          { data => $params };
      };

  Request:

      curl -X POST -H "Content-Type: application/json" localhost:5000/signup -d '{"id": 42, "key": "value"}'

  Response:

      { "data": { "id": 42 } }

  By default declared parameters don't contain parameters which have no value.

  If you want to return all parameters you can use the `include_missing`
  function.


  Application:

      api_format 'json';

      params(
          requires('id', type => Int),
          optional('email', type => Str)
      );
      post data => sub {
          my $params = shift;
          { data => include_missing($params) };
      };

  Request:

      curl -X POST -H "Content-Type: application/json" localhost:5000/signup -d '{"id": 42, "key": "value"}'

  Response:

      { "data": { "id": 42, "email": null } }

  ## Validation and coercion


  You can define validations and coercion options for your parameters using a

  ["params" in Raisin](https://metacpan.org/pod/Raisin#params) block.


  Parameters can `requires` value or can be `optional`.

  `optional` parameters can have default value.

      params(
          requires('name', type => Str),
          optional('count', type => Int, default => 10),
      );
      get sub {
          my $params = shift;
          "$params->{count}: $params->{name}";
      };

  Note that default values will NOT be passed through to any validation options

  specified.


  Available arguments:


  - name

  - type

  - default

  - desc

  - regex

  - in


  ## Nested Parameters


  ### Hash


  Use a keyword `group` to define a group of parameters which is enclosed to

  the parent `HashRef` parameter.

      params(
          requires('name', type => HashRef, group {
              requires('first_name', type => Str),
              requires('last_name', type => Str),
          })
      )

  ### Array


  Use `ArrayRef[*]` types from your compatible type library to define arrays.

      requires('list', type => ArrayRef[Int], desc => 'List of integers')

  ## Types


  Raisin supports Moo(se)-compatible type constraint so you can use any of the

  [Moose](https://metacpan.org/pod/Moose), [Moo](https://metacpan.org/pod/Moo)
  or [Type::Tiny](https://metacpan.org/pod/Type::Tiny) type constraints.


  By default [Raisin](https://metacpan.org/pod/Raisin) depends on
  [Type::Tiny](https://metacpan.org/pod/Type::Tiny) and it's
  [Types::Standard](https://metacpan.org/pod/Types::Standard) type

  contraint library.


  You can create your own types as well.

  See [Type::Tiny::Manual](https://metacpan.org/pod/Type::Tiny::Manual) and
  [Moose::Manual::Types](https://metacpan.org/pod/Moose::Manual::Types).


  # HOOKS


  Those blocks can be executed before or/and after every API call, using

  `before`, `after`, `before_validation` and `after_validation`.


  Callbacks execute in the following order:


  - before

  - before\_validation

  - after\_validation

  - after


  The block applies to every API call

      before sub {
          my $self = shift;
          say $self->req->method . "\t" . $self->req->path;
      };

      after_validation sub {
          my $self = shift;
          say $self->res->body;
      };

  Steps `after_validation` and `after` are executed only if validation succeeds.


  Every callback has only one argument as an input parameter which is
  [Raisin](https://metacpan.org/pod/Raisin)

  object. For more information of available methods see ["CONTROLLER" in
  Raisin](https://metacpan.org/pod/Raisin#CONTROLLER).


  # API FORMATS


  By default, Raisin supports `YAML`, `JSON`, and `TEXT` content types.

  Default format is `YAML`.


  Response format can be determined by `Accept header` or `route extension`.


  Serialization takes place automatically. So, you do not have to call

  `encode_json` in each `JSON` API implementation.


  Your API can declare to support only one serializator by using ["api\_format"
  in Raisin](https://metacpan.org/pod/Raisin#api_format).


  Custom formatters for existing and additional types can be defined with a

  [Raisin::Encoder](https://metacpan.org/pod/Raisin::Encoder)/[Raisin::Decoder](https://metacpan.org/pod/Raisin::Decoder).


  - JSON

      Call `JSON::encode_json` and `JSON::decode_json`.

  - YAML

      Call `YAML::Dump` and `YAML::Load`.

  - Text

      Call `Data::Dumper->Dump` if output data is not a string.

  The order for choosing the format is the following.


  - Use the route extension.

  - Use the value of the `Accept` header.

  - Fallback to default.


  # LOGGING


  Raisin has a built-in logger and supports for `Log::Dispatch`.

  You can enable it by:

      plugin 'Logger', outputs => [['Screen', min_level => 'debug']];

  Or use [Raisin::Logger](https://metacpan.org/pod/Raisin::Logger) with a
  `fallback` option:

      plugin 'Logger', fallback => 1;

  The plugin registers a `log` subroutine to
  [Raisin](https://metacpan.org/pod/Raisin). Below are examples of

  how to use it.

      app->log(debug => 'Debug!');
      app->log(warn => 'Warn!');
      app->log(error => 'Error!');

  `app` is a [Raisin](https://metacpan.org/pod/Raisin) instance, so you can use
  `$self` instead of `app` where

  it is possible.


  See [Raisin::Plugin::Logger](https://metacpan.org/pod/Raisin::Plugin::Logger).


  # API DOCUMENTATION


  ## Raisin script


  You can see application routes with the following command:

      $ raisin examples/pod-synopsis-app/darth.pl
      GET     /user
      GET     /user/all
      POST    /user
      GET     /user/:id
      DELETE  /user/:id
      PUT     /user/:id
      GET     /echo

  Including parameters:

      $ raisin --params examples/pod-synopsis-app/darth.pl
      GET     /user
         start Int{0}
         count Int{10}
      GET     /user/all
      POST    /user
        *name     Str
        *password Str
      email    Str
      GET     /user/:id
        *id Int
      DELETE  /user/:id
        *id Int
      PUT     /user/:id
        *id Int
      GET     /echo
        *data Any{ёй}

  ## OpenAPI/Swagger


  [Swagger](http://swagger.io) compatible API documentations.

      plugin 'Swagger';

  Documentation will be available on `http://<url>/swagger.json` URL.

  So you can use this URL in Swagger UI.


  See
  [Raisin::Plugin::Swagger](https://metacpan.org/pod/Raisin::Plugin::Swagger).


  # MIDDLEWARE


  You can easily add any [Plack](https://metacpan.org/pod/Plack) middleware to
  your application using

  `middleware` keyword. See ["middleware" in
  Raisin](https://metacpan.org/pod/Raisin#middleware).


  # PLUGINS


  Raisin can be extended using custom _modules_. Each new module must be a
  subclass

  of the `Raisin::Plugin` namespace. Modules' job is to initialize and register
  new

  methods into the web application class.


  For more see ["plugin" in Raisin](https://metacpan.org/pod/Raisin#plugin) and
  [Raisin::Plugin](https://metacpan.org/pod/Raisin::Plugin).


  # TESTING


  See [Plack::Test](https://metacpan.org/pod/Plack::Test),
  [Test::More](https://metacpan.org/pod/Test::More) and etc.

      my $app = Plack::Util::load_psgi("$Bin/../script/raisinapp.pl");

      test_psgi $app, sub {
          my $cb  = shift;
          my $res = $cb->(GET '/user');

          subtest 'GET /user' => sub {
              if (!is $res->code, 200) {
                  diag $res->content;
                  BAIL_OUT 'FAILED!';
              }
              my $got = Load($res->content);
              isdeeply $got, $expected, 'Data!';
          };
      };

  # DEPLOYING


  Deploying a Raisin application is done the same way any other Plack

  application is deployed:

      $ plackup -E deployment -s Starman app.psgi

  ## Kelp

      use Plack::Builder;
      use RaisinApp;
      use KelpApp;

      builder {
          mount '/' => KelpApp->new->run;
          mount '/api/rest' => RaisinApp->new;
      };

  ## Dancer

      use Plack::Builder;
      use Dancer ':syntax';
      use Dancer::Handler;
      use RaisinApp;

      my $dancer = sub {
          setting appdir => '/home/dotcloud/current';
          load_app 'My::App';
          Dancer::App->set_running_app('My::App');
          my $env = shift;
          Dancer::Handler->init_request_headers($env);
          my $req = Dancer::Request->new(env => $env);
          Dancer->dance($req);
      };

      builder {
          mount '/' => $dancer;
          mount '/api/rest' => RaisinApp->new;
      };

  ## Mojolicious::Lite

      use Plack::Builder;
      use RaisinApp;

      builder {
          mount '/' => builder {
              enable 'Deflater';
              require 'my_mojolicious-lite_app.pl';
          };

          mount '/api/rest' => RaisinApp->new;
      };

  See also [Plack::Builder](https://metacpan.org/pod/Plack::Builder),
  [Plack::App::URLMap](https://metacpan.org/pod/Plack::App::URLMap).


  # EXAMPLES


  Raisin comes with three instance in _example_ directory:


  - pod-synopsis-app

      Basic example.

  - music-app

      Shows the possibility of using ["present" in Raisin](https://metacpan.org/pod/Raisin#present) with [DBIx::Class](https://metacpan.org/pod/DBIx::Class)
      and [Rose::DB::Object](https://metacpan.org/pod/Rose::DB::Object).

  - sample-app

      Shows an example of complex application.

  # ROADMAP


  - Versioning support;

  - Mount API's in any place of `resource` block;


  # GITHUB


  [https://github.com/khrt/Raisin](https://github.com/khrt/Raisin)


  # ACKNOWLEDGEMENTS


  This module was inspired both by Grape and
  [Kelp](https://metacpan.org/pod/Kelp),

  which was inspired by [Dancer](https://metacpan.org/pod/Dancer), which in its
  turn was inspired by Sinatra.


  # AUTHOR


  Artur Khabibullin - rtkh@cpan.org


  # LICENSE


  This module and all the modules in this package are governed by the same
  license

  as Perl itself.
mobilcom-debitel/pokemock: "# Pokemock\r\n\r\nA mock server generated from one or more arbitrary Swagger files.\r\nSupports seeding, timeouts, response picking,\r\nentity memory, semantic action inference, etc.\r\n\r\n\r\n## Usage\r\n\r\n```\r\nSyntax:\r\n  pokemock <swagger-urls-or-files> ... [-h] [-v] [-w] [-p <port>]\r\n\r\nOptions:\r\n  -h, --help        Show help\r\n  -v, --version     Show version\r\n  -p, --port <port> Set server port, default is 8000\r\n  -w, --watch       Watch mode: Restart on Swagger changes\r\n  -k, --killable    Publish /kill endpoint to stop the service\r\n      --memory      Enable memory module (experimental)\r\n```\r\n\r\n\r\n## Server\r\n\r\nThe mock server listens to the specified port and\r\nmocks endpoints defined in the provided Swagger document.\r\nAdditionally, it publishes a Swagger UI under `/ui`,\r\nthe Swagger API under `/api-docs` and a `/kill` endpoint for shutdown.\r\n\r\n\r\n## Request Headers\r\n\r\nUsing optional headers, clients can control the server's behavior:\r\n\r\n- __X-Mock-Status__\r\n  - Specifies the response status code\r\n  - The correct response is inferred from the API if possible\r\n  - Defaults to the first response code specified in the API\r\n- __X-Mock-Seed__\r\n  - Specifies a seed for data generation\r\n  - If omitted, a random seed is generated\r\n  - The current seed is always returned in a X-Mock-Seed response header\r\n- __X-Mock-Time__\r\n  - Specifies the minimum response time (milliseconds)\r\n- __X-Mock-Size__\r\n  - Specifies array size(s) in the response\r\n  - Must be a valid JSON object of\r\n    `<definitionName|attributeName>: <size>` pairs\r\n  - If omitted, array sizes are randomly between 1 and 5\r\n- __X-Mock-Depth__\r\n  - Specifies the maximum JSON data depth\r\n  - Defaults to 5\r\n- __X-Mock-Override__\r\n  - Specifies response data via [JSON Path](https://github.com/dchester/jsonpath)\r\n  - Must be a valid JSON object of `<jsonPath>: <data>` pairs\r\n  - `<data>` is arbitrary JSON\r\n- __X-Mock-Replay__\r\n  - Specifies the number of times the current X-Mock-* headers should be replayed\r\n  - The next N requests to the requested URL will replay the current X-Mock-* headers\r\n- __X-Mock-Replay-Pattern__\r\n  - Specifies a regular expression to match for X-Mock-Replay\r\n  - If omitted, the exact path is used for replaying\r\n\r\n\r\n## Memory (experimental)\r\n\r\nUse the `--memory` switch to enable the memory module.\r\nWhen enabled, entities containing an ID are remembered by the server.\r\nIf the entity is requested again, the remembered data is returned.\r\nThis also applies to sub-entities across endpoints.\r\n\r\nAdditionally, the server tries to infer semantic actions from requests,\r\nsuch as:\r\n\r\n- Get by id\r\n- Delete by id\r\n- Update by id\r\n- Create new entity\r\n\r\nThese actions are applied to known entities in memory.\r\nFor example, requesting a deleted entity will result in a 404 response.\r\n\r\n\r\n## Customization\r\n\r\nPokemock provides a set of [Express](http://expressjs.com/de/) middlewares\r\nwhich you can use independently.\r\nThe default app defined in `createDefaultApp.js` is an opinionated stack of\r\nmiddlewares which you're encouraged to hack on.\r\nBy re-arranging and adding middlewares (especially generators)\r\nyou can tailor Pokemock to fit your APIs.\r\n"
fleekjs/fleek-validator: >
  # Fleek Validator - [DEPRECATED]


  [![Build
  Status](https://travis-ci.org/fleekjs/fleek-validator.svg?branch=master)](https://travis-ci.org/fleekjs/fleek-validator)


  Middleware and utilities for validating data against
  [swagger](http://swagger.io/specification/) schema's.


  Requirements:

  - Node >= 6.0.0

  - [fleek-context](https://github.com/fleekjs/fleek-context)


  # Usage


  This package is to be used as middleware for
  [Koa2](https://github.com/koajs/koa/tree/v2.x) to validate swagger
  documentation using `ctx.fleek.context` defined by
  [fleek-context](https://github.com/fleekjs/fleek-context) or an equivalent
  custom middleware. Results of the validation are mapped to
  `ctx.fleek.validation`, including `passed`, `failed`, and `errors`.


  ```

  npm install --save fleek-validator

  ```


  # Examples


  For a swagger example, refer to the test [swagger
  json](https://github.com/fleekjs/fleek-validator/blob/master/tests/swagger.json)


  ```javascript

  const Koa = require('koa');

  const fleekCtx = require('fleek-context');

  const fleekValidator = require('fleek-validator');


  const SWAGGER = require('./swagger.json');


  let app = new Koa();


  app.use(fleekCtx(SWAGGER));


  app.use(fleekValidator()); // Reject promise for validation failure


  // OR


  app.use(fleekValidator().catch((ctx, next) => {
    console.log(ctx.fleek.validation); // =>{
    //   passed: [Boolean],
    //   failed: [Boolean],
    //   errors: [Array({ - github.com/fleekjs/fleek-validator/blob/lib/error/index.js
    //    name: [String] - github.com/fleekjs/fleek-validator/blob/lib/error/codes.json
    //    code: [Integer] - github.com/fleekjs/fleek-validator/blob/lib/error/codes.json,
    //    message: [String] - github.com/fleekjs/fleek-validator/blob/lib/error/codes.json,
    //    parameter : { [rejected param definition from swagger doc] }
    //  })]
    // }
    return next();
  }));


  app.listen(3000);

  ```


  # Documentation


  ## Middleware


  - Accepts
    - Object - options
      - `throw`: Boolean - if false, do not reject the middleware promise on validation failure
      - `catch`: Function - must act as [Koa2](https://github.com/koajs/koa/tree/v2.x) middleware. this will be call if validation fails, with `next` referring to the next middleware in the chain. prioritized over `throw`
  - Returns
    - Function - returns a promise when called
      - Accepts
        - Object - context of the request. must have `ctx.fleek.context` to perform validation
        - Function - returns promise when called
  - Binds
    - `ctx.fleek.validation`

  ```javascript

  {
    passed: [Boolean],
    failed: [Boolean],
    errors: [Array({ - github.com/fleekjs/fleek-validator/blob/lib/error/index.js
     name: [String] - github.com/fleekjs/fleek-validator/blob/lib/error/codes.json
     code: [Integer] - github.com/fleekjs/fleek-validator/blob/lib/error/codes.json,
     message: [String] - github.com/fleekjs/fleek-validator/blob/lib/error/codes.json,
     parameter : { [rejected param definition from swagger doc] }
   })]
  }

  ```


  ### Example


  ```javascript

  app.use(validator()); // reject middleware promise on failure


  app.use(validator({ throw: false })); // continue down middleware on failure


  app.use(validator({ catch: (ctx, next) => { return next(); } })); // continue
  down middleware on failure

  app.use(validator().catch((ctx, next) => { return next(); })); // continue
  down middleware on failure

  ```


  ## Ctx


  - Accepts
    - Object - context of a request definted by [Koa2](https://github.com/koajs/koa/tree/v2.x), and containing `ctx.fleek.context` to define the validations
    - Object - swagger definition to validate, matches `ctx.fleek.context` set by [fleek-context](https://github.com/fleekjs/fleek-context)
    - Boolean - if true, the ctx will be cloned and returned. defaults to false, and updates in place
  - Returns
    - Object - updated context

  ### Example


  ```javascript

  ctx.request.body = { name: 'foo' };


  validator.ctx(ctx);

  validator.ctx(ctx, {
    parameters: [{
      name: "user",
      in: "body",
      schema: {
        type: "object",
        required: ["name"],
        properties: {
          name: { type: "string", uppercase: true }
        }
      }
    }]
  });


  let newCtx = validator.ctx(ctx, null, true);


  console.log(newCtx); // => {

  //   passed: false,

  //   failed: true,

  //   errors: [{

  //     name: 'VALUE.UPPERCASE'

  //     code: 207,

  //     message: 'Must be uppercase',

  //     parameter : { name: 'user.name' type: 'string', uppercase: true }

  //   }]

  // }

  // }

  ```


  ## Object


  - Accepts
    - Mixed - value to be validated
    - Object - swagger object definition
  - Returns
    - Either
      - Mixed - normalized result of the validations
      - Error - error containing `.errors` list of validation errors

  ### Example


  ```javascript

  let result = validator.object({ name: 'FOO' }, { name: { type: 'string',
  uppercase: true } });

  console.log(result); // => { name: 'FOO' }

  let result = validator.object({ name: 'foo' }, { name: { type: 'string',
  toUpperCase: true } });

  console.log(result); // => { name: 'FOO' }

  let result = validator.object({ name: 'foo' }, { name: { type: 'string',
  uppercase: true } });

  console.log(result); // => {

  //   message 'Validation failed',

  //   errors: [{

  //     name: 'VALUE.UPPERCASE'

  //     code: 207,

  //     message: 'Must be uppercase',

  //     parameter : { type: 'string', uppercase: true }

  //   }]

  // }

  ```


  ## One


  - Accepts
    - Mixed - value to be validated
    - Object - swagger parameter definition
  - Returns
    - Either
      - Mixed - normalized result of the validations
      - ValidationError - validation error

  ### Example


  ```javascript

  let result = validator.one('FOO', { type: 'string', uppercase: true });

  console.log(result); // => 'FOO'

  let result = validator.one('foo', { type: 'string', toUpperCase: true });

  console.log(result); // => 'FOO'

  let result = validator.one('foo', { type: 'string', uppercase: true });

  console.log(result); // => {

  //   name: 'VALUE.UPPERCASE'

  //   code: 207,

  //   message: 'Must be uppercase',

  //   parameter : { type: 'string', uppercase: true }

  // }

  ```


  # Normalizations


  #### `default`
    - Expect: [Boolean]
    - Type: [Mixed]
    - Action: if the value is not defined, set it to the default
    - Note: First action taken in order of operations

  #### `trim`
    - Expect: [Boolean]
    - Type: [String]
    - Action: trim whitespace

  #### `toUpperCase`
    - Expect: [Boolean]
    - Type: [String]
    - Action: convert to uppercase

  #### `toLowerCase`
    - Expect: [Boolean]
    - Type: [String]
    - Action: convert to uppercase

  # Validations


  #### `required`
    - Expect: [Boolean]
    - Type: [String]
    - Action: reject undefined
    - Note: Second action taken in order of operations, after default

  #### `type`
    - Expect: [String]
    - Type: [Mixed]
    - Action: reject the value if it does not match the expected type

  #### `maxItems`
    - Expect: [Integer]
    - Type: [Array]
    - Action: rejects an array with more than the expected max

  #### `minItems`
    - Expect: [Integer]
    - Type: [Array]
    - Action: rejects an array with fewer than the expected min

  #### `uniqueItems`
    - Expect: [Boolean]
    - Type: [Array]
    - Action: reject an array with duplicate items

  #### `multipleOf`
    - Expect: [Integer]
    - Type: [Number]
    - Action: reject a number thats not a multiple of the expected integer

  #### `maximum`
    - Expect: [Integer]
    - Type: [Number]
    - Action: reject a number thats above the expected max

  #### `exclusiveMaximum`
    - Expect: [Integer]
    - Type: [Number]
    - Action: reject a number thats above or equal to the expected max

  #### `minimum`
    - Expect: [Integer]
    - Type: [Number]
    - Action: reject a number thats below the expected min

  #### `exclusiveMinimum`
    - Expect: [Integer]
    - Type: [Number]
    - Action: reject a number thats below or equal to the expected min

  #### `maxProperties`
    - Expect: [Integer]
    - Type: [Object]
    - Action: reject an object with more than the expected max number of properties

  #### `minProperties`
    - Expect: [Integer]
    - Type: [Object]
    - Action: reject an object with fewer than the expected min number of properties

  #### `email`
    - Expect: [Boolean]
    - Type: [String]
    - Action: reject a string that is not a valid email

  #### `alphanumeric`
    - Expect: [Boolean]
    - Type: [String]
    - Action: reject a non-alphanumeric string

  #### `lowercase`
    - Expect: [Boolean]
    - Type: [String]
    - Action: reject a string containing uppercase characters

  #### `uppercase`
    - Expect: [Boolean]
    - Type: [String]
    - Action: reject a string containing lowercase characters

  #### `minLength`
    - Expect: [Integer]
    - Type: [String]
    - Action: reject a string of length below the expected length

  #### `maxLength`
    - Expect: [Integer]
    - Type: [String]
    - Action: reject a string of length above the expected length

  #### `pattern`
    - Expect: [RegExp String]
    - Type: [String]
    - Action: reject a string that doesnt pass the rejex

  #### `enum`
    - Expect: [Array]
    - Type: [Mixed]
    - Action: reject any value not listed in the enumeration

  ## Authors


  - [John Hofrichter](https://github.com/johnhof)


  _Built and maintained with [<img width="15px"
  src="http://hart.com/wp-content/themes/hart/img/hart_logo.svg">](http://hart.com/)
  by the [Hart](http://hart.com/) team._
oatpp/oatpp-swagger: >
  # oatpp-swagger [![oatpp build
  status](https://dev.azure.com/lganzzzo/lganzzzo/_apis/build/status/oatpp.oatpp-swagger)](https://dev.azure.com/lganzzzo/lganzzzo/_build?definitionId=2)

  Swagger UI for oatpp services


  More about oatpp see [https://oatpp.io/](https://oatpp.io/)  

  More about Swagger UI see
  [https://swagger.io/tools/swagger-ui/](https://swagger.io/tools/swagger-ui/)


  ## Example


  For full example project see: [Example CRUD-API project with Swagger
  UI](https://github.com/oatpp/example-crud)


  ## Brief


  - Use ```oatpp::swagger::Controller``` with
  ```oatpp::web::server::HttpConnectionHandler```

  - Use ```oatpp::swagger::AsyncController``` with
  ```oatpp::web::server::AsyncHttpConnectionHandler```


  - Swagger UI location - ```http://localhost:<PORT>/swagger/ui```

  - OpenApi 3.0.0 specification location -
  ```http://localhost:<PORT>/api-docs/oas-3.0.0.json```


  If you are using ```oatpp::web::server::api::ApiController``` most parts of
  your endpoints are documented automatically like:


  - Endpoint name

  - Parameters

  - Request Body


  You may add more information to your endpoint like follows:


  ```c++

  ENDPOINT_INFO(createUser) {
    info->summary = "Create new User";
    info->addConsumes<UserDto::ObjectWrapper>("application/json");
    info->addResponse<UserDto::ObjectWrapper>(Status::CODE_200, "application/json");
  }

  ENDPOINT("POST", "demo/api/users", createUser,
           BODY_DTO(UserDto::ObjectWrapper, userDto)) {
    return createDtoResponse(Status::CODE_200, m_database->createUser(userDto));
  }

  ```


  ### How to add Swagger UI to your project


  1) Add ```oatpp::swagger::DocumentInfo``` and ```oatpp::swagger::Resources```
  components to your AppComponents:


  ```c++

  /**
   *  General API docs info
   */
  OATPP_CREATE_COMPONENT(std::shared_ptr<oatpp::swagger::DocumentInfo>,
  swaggerDocumentInfo)([] {

    oatpp::swagger::DocumentInfo::Builder builder;

    builder
    .setTitle("User entity service")
    .setDescription("CRUD API Example project with swagger docs")
    .setVersion("1.0")
    .setContactName("Ivan Ovsyanochka")
    .setContactUrl("https://oatpp.io/")

    .setLicenseName("Apache License, Version 2.0")
    .setLicenseUrl("http://www.apache.org/licenses/LICENSE-2.0")

    .addServer("http://localhost:8000", "server on localhost");

    return builder.build();

  }());



  /**
   *  Swagger-Ui Resources (<oatpp-examples>/lib/oatpp-swagger/res)
   */
  OATPP_CREATE_COMPONENT(std::shared_ptr<oatpp::swagger::Resources>,
  swaggerResources)([] {
    // Make sure to specify correct full path to oatpp-swagger/res folder !!!
    return oatpp::swagger::Resources::loadResources("<YOUR-PATH-TO-REPO>/lib/oatpp-swagger/res");
  }());


  ```


  2) Create ```oatpp::swagger::Controller``` with list of endpoints you whant to
  document and add it to router:


  ```c++

  auto swaggerController =
  oatpp::swagger::Controller::createShared(<list-of-endpoints-to-document>);

  swaggerController->addEndpointsToRouter(router);

  ```


  **Done!**
zaaack/koa-joi-swagger: >
  # koa-joi-swagger


  * Using joi schema to validate request & response, and generate swagger
  document to create beautiful API documents.



  [![Build
  Status](https://travis-ci.org/zaaack/koa-joi-swagger.svg?branch=master)](https://travis-ci.org/zaaack/koa-joi-swagger)
  [![npm](https://img.shields.io/npm/v/koa-joi-swagger.svg)](https://www.npmjs.com/package/koa-joi-swagger)
  [![npm](https://img.shields.io/npm/dm/koa-joi-swagger.svg)](https://www.npmjs.com/package/koa-joi-swagger)


  ## Feature


  * Router agnostic.

  * Using your favorite library for validation, and generate swagger document
  for develop.

  * Serving Swagger UI in your koa project.

  * ...


  ## Install


  ```sh

  npm i koa-joi-swagger


  ```


  or


  ```sh

  yarn add koa-joi-swagger

  ```


  for v3, install optional dependencies

  ```sh

  npm i swagger-ui-dist # or yarn add swagger-ui-dist

  ```



  ## Example


  ```sh

  git clone https://github.com/zaaack/koa-joi-swagger.git

  cd koa-joi-swagger

  yarn # or npm i

  SERVE=1 npx babel-node ./test/fixtures/server.js

  ```


  Now open <http://127.0.0.1:3456/swagger>!


  ## Demo


  app.js

  ```js

  import { toSwaggerDoc, ui, mixedValidate } from '../../src'

  import mixedDoc from './mixed-doc'

  import Koa from 'koa'

  import DecRouter from 'koa-dec-router'

  import bodyparser from 'koa-bodyparser'


  const app = new Koa()


  const decRouter = DecRouter({
    controllersDir: `${__dirname}/controllers`,
  })


  app.use(bodyparser())


  const swaggerDoc = toSwaggerDoc(mixedDoc)

  // mount swagger ui in `/swagger`

  app.use(ui(swaggerDoc, {pathRoot: '/swagger'}))


  // handle validation errors

  app.use(async (ctx, next) => {
    try {
      await next()
    } catch (e) {
      if (e.name === 'RequestValidationError') {
        ctx.status = 400
        ctx.body = {
          code: 1,
          message: e.message,
          data: e.data,
        }
      } else if (e.name === 'ResponseValidationError') {
        ctx.status = 500
        ctx.body = {
          code: 1,
          message: e.message,
          data: e.data,
        }
      }
    }
  })


  // validate request and response by mixedDoc

  app.use(mixedValidate(mixedDoc, {
    onError: e => console.log(e.details, e._object),
  }))


  // koa-dec-router

  app.use(decRouter.router.routes())

  app.use(decRouter.router.allowedMethods())


  app.listen(3456)

  ```


  > "I see the api is simple, but how to write the joi schema and the swagger
  document?"


  That's the point, you don't need to write a joi schema to validation and a
  swagger document to create API documents.


  > "Oh, no, Should I learn a new schema?"


  Of cause not, I hate new schemas, too, especially those made by someone or
  some company without long support, it's just a waste of time and my brain
  cell.


  Therefore, to make this library simple and reliable, I just mixed joi and
  swagger document, and using
  [joi-to-json-schema](https://github.com/lightsofapollo/joi-to-json-schema/) to
  transform joi schema to swagger schema. You don't have to learn a new schema,
  just replace the JSON schema in your swagger document to joi schema, then let
  this library to do the rest.


  I call it mixed document, here is an example.


  ```js

  export default {
    swagger: '2.0',
    info: {
      title: 'Test API',
      description: 'Test API',
      version: '1.0.0',
    },
    //  the domain of the service
    //  host: 127.0.0.1:3457
    //  array of all schemes that your API supports
    schemes: ['https', 'http'],
    //  will be prefixed to all paths
    basePath: '/api/v1',
    consumes: ['application/x-www-form-urlencoded'],
    produces: ['application/json'],
    paths: {
      '/posts': {
        get: {
          summary: 'Some posts',
          tags: ['Post'],
          parameters: {
            query: Joi.object().keys({
              type: Joi.string().valid(['news', 'article']),
            }),
          },
          responses: {
            '200': {
              x: 'Post list',
              schema: Joi.object().keys({
                lists: Joi.array().items(Joi.object().keys({
                  title: Joi.string().description('Post title'),
                  content: Joi.string().required().description('Post content'),
                }))
              }),
            },
            'default': {
              description: 'Error happened',
              schema: Joi.object().json().keys({
                code: Joi.number().integer(),
                message: Joi.string(),
                data: Joi.object(),
              }),
            },
          }
        }
      },
    },
  }

  ```


  You can see the differences between this and the real swagger document, just
  replace `parameters` and `responses` to joi schema instead of JSON schema,


  [Here is the swagger document that generate from mixed document
  above](docs/swagger-doc-from-mixed-doc.json).


  ## API


  ```js

  import JoiSwagger, {
    toSwaggerDoc, mixedValidate, joiValidate, ui
  } from 'koa-joi-swagger'

  import Koa from 'koa'


  const app = new Koa()

  /*


  JoiSwagger = {
    toSwaggerDoc,
    mixedValidate,
    joiValidate,
    ui,
    Joi,
  }
   */

  const mixedDoc = require('./mixed-doc')


  const swaggerDoc = toSwaggerDoc(mixedDoc) // parse mixed document to swagger
  document for swagger-ui



  //

  // const defaultResJoiOpts = {

  //   stripUnknown: true,

  //   convert: true,

  // }

  app.use(mixedValidate(mixedDoc, {
    reqOpts: {
      stripUnknown: false,
      convert: true,
    }, // optional, ctx.request joi validation options, here is default
    resOpts: { // optional, ctx.response joi validation options, here is default
      stripUnknown: true, // this would remove additional properties
      convert: true, // this would convert field types
    },
    onError: err => console.error(err), // Do something with the error, the error would throw anyway.
  }))


  app.use(ui(swaggerDoc, {
    pathRoot: '/swagger', // optional, swagger path
    skipPaths: [], // optional, skip paths
    UIHtml: defaultUIHtml, // optional, get ui html
    swaggerConfig: '', // optional, a json5 string, e.g. `{ <field>: <value>, .... }` to display in html for overriding swagger ui options.
    sendConfig: { maxage: 3600 * 1000 * 24 * 30 }, // optional, config for koa-send, default maxage is 1 month.
    v3: false, // optional, default is v2, you need to install optional dependencies `swagger-ui-dist` first.

  }))


  // joiValidate // the internal joi validation function used by mixedValidate,
  in case you need one.

  // JoiSwagger.Joi // The joi used to validate, with some opinionated
  extension, you can override it or using it.


  ```


  ## Q & A


  #### 1. Why not using [ajv](https://github.com/epoberezkin/ajv) to validate by
  swagger document directly?


  I have think it before, but hit some problems like validating javascript date
  object, remove additionalProperties, etc. And writing JSON schema is too
  verbose. Joi is the best validation library in NodeJS, we should take the
  advantage.


  #### 2. Why not using YAML?


  YAML is not easy to reuse, although JSON schema can reuse model, and how to
  reuse shared properties between models? I can't find a way. Pure javascrip can
  easily reuse or wrap model schema, and you can wrap each final schema with a
  function, don't feel pain when adding properties for each request schema in
  the future.


  #### 3. You extended Joi, why?


  Sorry, joi's philosophy is too strict for me, I really don't need to explicit
  declare the string could be empty, so I override the original `Joi.string()`
  to make `Joi.string().empty('')` is a default behavior.


  Also, add a `.force()` method for string/number type, to coerce the field to
  string/number regardless of the original type, it's really useful when
  validating some bson type like Long, Deciaml or Custom object.



  Added a `Joi.object().json()` to coerce object with `toJSON` method to a plain
  JSON object. This would useful when validation some ORM/ODM's model object
  (like mongorito).


  [See the code](src/joi.js)


  And I highly recommend using this extended joi to write your schemas, and
  adding your extension if you need.


  You can also using other version of Joi to validate.


  ```js

  import JoiSwagger from 'koa-joi-swagger'

  import myJoi from './myJoi'


  // using

  export const Joi = JoiSwagger.Joi


  // override

  JoiSwagger.Joi = myJoi


  ```
ruby-grape/grape-swagger: "[![Gem Version](https://badge.fury.io/rb/grape-swagger.svg)](http://badge.fury.io/rb/grape-swagger)\n[![Build Status](https://travis-ci.org/ruby-grape/grape-swagger.svg?branch=master)](https://travis-ci.org/ruby-grape/grape-swagger)\n[![Coverage Status](https://coveralls.io/repos/github/ruby-grape/grape-swagger/badge.svg?branch=master)](https://coveralls.io/github/ruby-grape/grape-swagger?branch=master)\n[![Code Climate](https://codeclimate.com/github/ruby-grape/grape-swagger.svg)](https://codeclimate.com/github/ruby-grape/grape-swagger)\n\n##### Table of Contents\n\n* [What is grape-swagger?](#what)\n* [Related Projects](#related)\n* [Compatibility](#version)\n* [Swagger-Spec](#swagger-spec)\n* [Installation](#install)\n* [Usage](#usage)\n* [Model Parsers](#model_parsers)\n* [Configure](#configure)\n* [Routes Configuration](#routes)\n* [Using Grape Entities](#grape-entity)\n* [Securing the Swagger UI](#oauth)\n* [Example](#example)\n* [Rake Tasks](#rake)\n\n\n## What is grape-swagger? <a name=\"what\"></a>\n\nThe grape-swagger gem provides an autogenerated documentation for your [Grape](https://github.com/ruby-grape/grape) API. The generated documentation is Swagger-compliant, meaning it can easily be discovered in [Swagger UI](https://github.com/wordnik/swagger-ui). You should be able to point [the petstore demo](http://petstore.swagger.io/) to your API.\n\n![Demo Screenshot](example/swagger-example.png)\n\nThis screenshot is based on the [Hussars](https://github.com/LeFnord/hussars) sample app.\n\n\n## Related Projects <a name=\"related\"></a>\n\n* [Grape](https://github.com/ruby-grape/grape)\n* [Grape Swagger Entity](https://github.com/ruby-grape/grape-swagger-entity)\n  * [Grape Entity](https://github.com/ruby-grape/grape-entity)\n* [Grape Swagger Representable](https://github.com/ruby-grape/grape-swagger-representable)\n* [Swagger UI](https://github.com/wordnik/swagger-ui)\n\n\n\n## Compatibility <a name=\"version\"></a>\n\nThe following versions of grape, grape-entity and grape-swagger can currently be used together.\n\ngrape-swagger | swagger spec | grape                   | grape-entity | representable |\n--------------|--------------|-------------------------|--------------|---------------|\n0.10.5        |     1.2      | >= 0.10.0 ... <= 0.14.0 |  < 0.5.0     | n/a           |\n0.11.0        |     1.2      |               >= 0.16.2 |  < 0.5.0     | n/a           |\n0.25.2        |     2.0      | >= 0.14.0 ... <= 0.18.0 | <= 0.6.0     | >= 2.4.1      |\n0.26.0        |     2.0      | >= 0.16.2     <= 1.1.0  | <= 0.6.1     | >= 2.4.1      |\n0.27.0        |     2.0      | >= 0.16.2 ... <= 1.1.0  | >= 0.5.0     | >= 2.4.1      |\n0.32.0        |     2.0      | >= 0.16.2               | >= 0.5.0     | >= 2.4.1      |\n\n\n## Swagger-Spec <a name=\"swagger-spec\"></a>\n\nGrape-swagger generates documentation per [Swagger / OpenAPI Spec 2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).\n\n<!-- validating it with: http://bigstickcarpet.com/swagger-parser/www/index.html -->\n\n\n## Installation <a name=\"install\"></a>\n\nAdd to your Gemfile:\n\n```ruby\ngem 'grape-swagger'\n```\n\n## Upgrade\n\nPlease see [UPGRADING](UPGRADING.md) when upgrading from a previous version.\n\n\n\n## Usage <a name=\"usage\"></a>\n\nMount all your different APIs (with `Grape::API` superclass) on a root node. In the root class definition, include `add_swagger_documentation`, this sets up the system and registers the documentation on '/swagger_doc'. See [example/config.ru](example/config.ru) for a simple demo.\n\n\n```ruby\nrequire 'grape-swagger'\n\nmodule API\n  class Root < Grape::API\n    format :json\n    mount API::Cats\n    mount API::Dogs\n    mount API::Pirates\n    add_swagger_documentation\n  end\nend\n```\n\nTo explore your API, either download [Swagger UI](https://github.com/wordnik/swagger-ui) and set it up yourself or go to the [online swagger demo](http://petstore.swagger.wordnik.com/) and enter your localhost url documentation root in the url field (probably something in the line of http://localhost:3000/swagger_doc).\n\n\n\n## Model Parsers <a name=\"model_parsers\"></a>\n\nSince 0.21.0, `Grape::Entity` is not a part of grape-swagger, you need to add `grape-swagger-entity` manually to your Gemfile.\nAlso added support for [representable](https://github.com/apotonick/representable) via `grape-swagger-representable`.\n\n```ruby\n# For Grape::Entity ( https://github.com/ruby-grape/grape-entity )\ngem 'grape-swagger-entity'\n# For representable ( https://github.com/apotonick/representable )\ngem 'grape-swagger-representable'\n```\n\nIf you are not using Rails, make sure to load the parser inside your application initialization logic, e.g., via `require 'grape-swagger/entity'` or `require 'grape-swagger/representable'`.\n\n### Custom Model Parsers\n\nYou can create your own model parser, for example for [roar](https://github.com/apotonick/roar).\n\n```ruby\nmodule GrapeSwagger\n  module Roar\n    class Parser\n      attr_reader :model\n      attr_reader :endpoint\n\n      def initialize(model, endpoint)\n        @model = model\n        @endpoint = endpoint\n      end\n\n      def call\n        # Parse your model and return hash with model schema for swagger\n      end\n    end\n  end\nend\n```\n\nThen you should register your custom parser.\n\n```ruby\nGrapeSwagger.model_parsers.register(GrapeSwagger::Roar::Parser, Roar::Decorator)\n```\n\nTo control model parsers sequence, you can insert your parser before or after another parser.\n\n#### insert_before\n\n```ruby\nGrapeSwagger.model_parsers.insert_before(GrapeSwagger::Representable::Parser, GrapeSwagger::Roar::Parser, Roar::Decorator)\n```\n\n#### insert_after\n\n```ruby\nGrapeSwagger.model_parsers.insert_after(GrapeSwagger::Roar::Parser, GrapeSwagger::Representable::Parser, Representable::Decorator)\n```\n\nAs we know, `Roar::Decorator` uses `Representable::Decorator` as a superclass, this allows to avoid a problem when Roar objects are processed by `GrapeSwagger::Representable::Parser` instead of `GrapeSwagger::Roar::Parser`.\n\n\n### CORS\n\nIf you use the online demo, make sure your API supports foreign requests by enabling CORS in Grape, otherwise you'll see the API description, but requests on the API won't return. Use [rack-cors](https://github.com/cyu/rack-cors) to enable CORS.\n\n```ruby\nrequire 'rack/cors'\nuse Rack::Cors do\n  allow do\n    origins '*'\n    resource '*', headers: :any, methods: [ :get, :post, :put, :delete, :options ]\n  end\nend\n```\n\nAlternatively you can set CORS headers in a Grape `before` block.\n\n```ruby\nbefore do\n  header['Access-Control-Allow-Origin'] = '*'\n  header['Access-Control-Request-Method'] = '*'\nend\n```\n\n\n\n## Configure <a name=\"configure\"></a>\n\n* [host](#host)\n* [base_path](#base_path)\n* [mount_path](#mount_path)\n* [add_base_path](#add_base_path)\n* [add_version](#add_version)\n* [doc_version](#doc_version)\n* [endpoint_auth_wrapper](#endpoint_auth_wrapper)\n* [swagger_endpoint_guard](#swagger_endpoint_guard)\n* [token_owner](#token_owner)\n* [security_definitions](#security_definitions)\n* [security](#security)\n* [models](#models)\n* [tags](#tags)\n* [hide_documentation_path](#hide_documentation_path)\n* [info](#info)\n* [array_use_braces](#array_use_braces)\n* [api_documentation](#api_documentation)\n* [specific_api_documentation](#specific_api_documentation)\n\nYou can pass a hash with optional configuration settings to ```add_swagger_documentation```.\nThe examples show the default value.\n\n\nThe `host` and `base_path` options also accept a `proc` or a `lambda` to evaluate, which is passed a [request](http://www.rubydoc.info/github/rack/rack/Rack/Request) object:\n\n```ruby\nadd_swagger_documentation \\\n  base_path: proc { |request| request.host =~ /^example/ ? '/api-example' : '/api' }\n```\n\n\n#### host: <a name=\"host\"></a>\nSets explicit the `host`, default would be taken from `request`.\n```ruby\nadd_swagger_documentation \\\n   host: 'www.example.com'\n```\n\n\n#### base_path: <a name=\"base_path\"></a>\nBase path of the API that's being exposed, default would be taken from `request`.\n```ruby\nadd_swagger_documentation \\\n   base_path: nil\n```\n\n`host` and `base_path` are also accepting a `proc` or `lambda`\n\n\n#### mount_path: <a name=\"mount_path\"></a>\nThe path where the API documentation is loaded, default is: `/swagger_doc`.\n```ruby\nadd_swagger_documentation \\\n   mount_path: '/swagger_doc'\n```\n\n#### add_base_path: <a name=\"add_base_path\"></a>\nAdd `basePath` key to the documented path keys, default is: `false`.\n```ruby\nadd_swagger_documentation \\\n   add_base_path: true # only if base_path given\n```\n\n#### add_version: <a name=\"add_version\"></a>\n\nAdd `version` key to the documented path keys, default is: `true`,\nhere the version is the API version, specified by `grape` in [`path`](https://github.com/ruby-grape/grape/#path)\n\n```ruby\nadd_swagger_documentation \\\n   add_version: true\n```\n\n\n#### doc_version: <a name=\"doc_version\"></a>\n\nSpecify the version of the documentation at [info section](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#info-object), default is: `'0.0.1'`\n```ruby\nadd_swagger_documentation \\\n   doc_version: '0.0.1'\n```\n\n\n#### endpoint_auth_wrapper: <a name=\"endpoint_auth_wrapper\"></a>\n\nSpecify the middleware to use for securing endpoints.\n\n```ruby\nadd_swagger_documentation \\\n   endpoint_auth_wrapper: WineBouncer::OAuth2\n```\n\n\n#### swagger_endpoint_guard: <a name=\"swagger_endpoint_guard\"></a>\nSpecify the method and auth scopes, used by the middleware for securing endpoints.\n\n```ruby\nadd_swagger_documentation \\\n   swagger_endpoint_guard: 'oauth2 false'\n```\n\n\n#### token_owner: <a name=\"token_owner\"></a>\nSpecify the token_owner method, provided by the middleware, which is typically named 'resource_owner'.\n\n```ruby\nadd_swagger_documentation \\\n   token_owner: 'resource_owner'\n```\n\n\n#### security_definitions: <a name=\"security_definitions\"></a>\nSpecify the [Security Definitions Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#security-definitions-object)\n\n_NOTE: [Swagger-UI is supporting only implicit flow yet](https://github.com/swagger-api/swagger-ui/issues/2406#issuecomment-248651879)_\n\n```ruby\nadd_swagger_documentation \\\n  security_definitions: {\n    api_key: {\n      type: \"apiKey\",\n      name: \"api_key\",\n      in: \"header\"\n    }\n  }\n```\n\n#### security: <a name=\"security\"></a>\n\nSpecify the [Security Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#securityRequirementObject)\n\n```ruby\nadd_swagger_documentation \\\n  security: [\n    {\n      api_key: []\n    }\n  ]\n```\n\n\n#### models: <a name=\"models\"></a>\nA list of entities to document. Combine with the [grape-entity](https://github.com/ruby-grape/grape-entity) gem.\n\nThese would be added to the definitions section of the swagger file.\n\n```ruby\nadd_swagger_documentation \\\n   models: [\n     TheApi::Entities::UseResponse,\n     TheApi::Entities::ApiError\n   ]\n```\n\n\n#### tags: <a name=\"tags\"></a>\n\nA list of tags to document.  By default tags are automatically generated\nfor endpoints based on route names.\n\n```ruby\nadd_swagger_documentation \\\n  tags: [\n    { name: 'widgets', description: 'A description of widgets' }\n  ]\n```\n\n\n#### hide_documentation_path: (default: `true`) <a name=\"hide_documentation_path\"></a>\n\n```ruby\nadd_swagger_documentation \\\n   hide_documentation_path: true\n```\n\nDon't show the `/swagger_doc` path in the generated swagger documentation.\n\n\n#### info: <a name=\"info\"></a>\n\n```ruby\nadd_swagger_documentation \\\n  info: {\n    title: \"The API title to be displayed on the API homepage.\",\n    description: \"A description of the API.\",\n    contact_name: \"Contact name\",\n    contact_email: \"Contact@email.com\",\n    contact_url: \"Contact URL\",\n    license: \"The name of the license.\",\n    license_url: \"www.The-URL-of-the-license.org\",\n    terms_of_service_url: \"www.The-URL-of-the-terms-and-service.com\",\n  }\n```\n\nA hash merged into the `info` key of the JSON documentation.\n\n#### array_use_braces: <a name=\"array_use_braces\"></a>\n\n```ruby\nadd_swagger_documentation \\\n  array_use_braces: true\n```\n This setting must be `true` in order for params defined as an `Array` type to submit each element properly.\n ```ruby\nparams do\n  optional :metadata, type: Array[String]\nend\n```\n with `array_use_braces: true`:\n```\nmetadata[]: { \"name\": \"Asset ID\", \"value\": \"12345\" }\nmetadata[]: { \"name\": \"Asset Tag\", \"value\": \"654321\"}\n```\n with `array_use_braces: false`:\n```\nmetadata: {\"name\": \"Asset ID\", \"value\": \"123456\"}\nmetadata: {\"name\": \"Asset Tag\", \"value\": \"654321\"}\n```\n\n#### api_documentation\n\nCustomize the Swagger API documentation route, typically contains a `desc` field. The default description is \"Swagger compatible API description\".\n\n```ruby\nadd_swagger_documentation \\\n   api_documentation: { desc: 'Reticulated splines API swagger-compatible documentation.' }\n```\n\n#### specific_api_documentation\n\nCustomize the Swagger API specific documentation route, typically contains a `desc` field. The default description is \"Swagger compatible API description for specific API\".\n\n```ruby\nadd_swagger_documentation \\\n   specific_api_documentation: { desc: 'Reticulated splines API swagger-compatible endpoint documentation.' }\n```\n\n## Routes Configuration <a name=\"routes\"></a>\n\n* [Swagger Header Parameters](#headers)\n* [Hiding an Endpoint](#hiding)\n* [Overriding Auto-Generated Nicknames](#overriding-auto-generated-nicknames)\n* [Specify endpoint details](#details)\n* [Overriding the route summary](#summary)\n* [Overriding the tags](#overriding_the_tags)\n* [Deprecating routes](#deprecating-routes)\n* [Overriding the name of the body parameter](#body-param)\n* [Defining an endpoint as an array](#array)\n* [Using an options hash](#options)\n* [Overriding parameter type](#overriding-param-type)\n* [Overriding data type of the parameter](#overriding-type-of-param)\n* [Multiple types](#multiple-types)\n* [Array of data type](#array-type)\n* [Collection Format](#collection-format)\n* [Hiding parameters](#hiding-parameters)\n* [Setting a Swagger default value](#default-value)\n* [Response documentation](#response)\n* [Changing default status codes](#change-status)\n* [File response](#file-response)\n* [Extensions](#extensions)\n* [Response examples documentation](#response-examples)\n* [Response headers documentation](#response-headers)\n\n#### Swagger Header Parameters  <a name=\"headers\"></a>\n\nSwagger also supports the documentation of parameters passed in the header. Since grape's ```params[]``` doesn't return header parameters we can specify header parameters seperately in a block after the description.\n\n```ruby\ndesc \"Return super-secret information\", {\n  headers: {\n    \"XAuthToken\" => {\n      description: \"Valdates your identity\",\n      required: true\n    },\n    \"XOptionalHeader\" => {\n      description: \"Not really needed\",\n      required: false\n    }\n  }\n}\n```\n\n\n#### Hiding an Endpoint <a name=\"hiding\"></a>\n\nYou can hide an endpoint by adding ```hidden: true``` in the description of the endpoint:\n\n```ruby\ndesc 'Hide this endpoint', hidden: true\n```\n\nOr by adding ```hidden: true``` on the verb method of the endpoint, such as `get`, `post` and `put`:\n\n```ruby\nget '/kittens', hidden: true do\n```\n\nOr by using a route setting:\n\n```ruby\nroute_setting :swagger, { hidden: true }\nget '/kittens' do\n```\n\nEndpoints can be conditionally hidden by providing a callable object such as a lambda which evaluates to the desired\nstate:\n\n```ruby\ndesc 'Conditionally hide this endpoint', hidden: lambda { ENV['EXPERIMENTAL'] != 'true' }\n```\n\n\n#### Overriding Auto-Generated Nicknames <a name=\"overriding-auto-generated-nicknames\"></a>\n\nYou can specify a swagger nickname to use instead of the auto generated name by adding `:nickname 'string'` in the description of the endpoint.\n\n```ruby\ndesc 'Get a full list of pets', nickname: 'getAllPets'\n```\n\n\n#### Specify endpoint details <a name=\"details\"></a>\n\nTo specify further details for an endpoint, use the `detail` option within a block passed to `desc`:\n\n```ruby\ndesc 'Get all kittens!' do\n  detail 'this will expose all the kittens'\nend\nget '/kittens' do\n```\n\n\n#### Overriding the route summary <a name=\"summary\"></a>\n\nTo override the summary, add `summary: '[string]'` after the description.\n\n```ruby\nnamespace 'order' do\n  desc 'This will be your summary',\n    summary: 'Now this is your summary!'\n  get :order_id do\n    ...\n  end\nend\n```\n\n\n#### Overriding the tags <a name=\"overriding_the_tags\"></a>\n\nTags are used for logical grouping of operations by resources or any other qualifier. To override the\ntags array, add `tags: ['tag1', 'tag2']` after the description.\n\n```ruby\nnamespace 'order' do\n  desc 'This will be your summary', tags: ['orders']\n  get :order_id do\n    ...\n  end\nend\n```\n\n\n#### Deprecating routes <a name=\"deprecating-routes\"></a>\n\nTo deprecate a route add `deprecated: true` after the description.\n\n```ruby\nnamespace 'order' do\n  desc 'This is a deprecated route', deprecated: true\n  get :order_id do\n    ...\n  end\nend\n```\n\n\n#### Overriding the name of the body parameter <a name=\"body-param\"></a>\n\nBy default, body parameters have a generated name based on the operation. For\ndeeply nested resources, this name can get very long. To override the name of\nbody parameter add `body_name: 'post_body'` after the description.\n\n```ruby\nnamespace 'order' do\n  desc 'Create an order', body_name: 'post_body'\n  post do\n    ...\n  end\nend\n```\n\n\n#### Defining an endpoint as an array <a name=\"array\"></a>\n\nYou can define an endpoint as an array by adding `is_array` in the description:\n\n```ruby\ndesc 'Get a full list of pets', is_array: true\n```\n\n\n#### Using an options hash <a name=\"options\"></a>\n\nThe Grape DSL supports either an options hash or a restricted block to pass settings. Passing the `nickname`, `hidden` and `is_array` options together with response codes is only possible when passing an options hash.\nSince the syntax differs you'll need to adjust it accordingly:\n\n```ruby\ndesc 'Get all kittens!', {\n  hidden: true,\n  is_array: true,\n  nickname: 'getKittens',\n  success: Entities::Kitten, # or success\n  failure: [[401, 'KittenBitesError', Entities::BadKitten]] # or failure\n  # also explicit as hash: [{ code: 401, message: 'KittenBitesError', model: Entities::BadKitten }]\n  produces: [ \"array\", \"of\", \"mime_types\" ],\n  consumes: [ \"array\", \"of\", \"mime_types\" ]\n  }\nget '/kittens' do\n```\n\n\n#### Overriding parameter type <a name=\"overriding-param-type\"></a>\n\nYou can override paramType, using the documentation hash. See [parameter object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameter-object) for available types.\n\n```ruby\nparams do\n  requires :action, type: Symbol, values: [:PAUSE, :RESUME, :STOP], documentation: { param_type: 'query' }\nend\npost :act do\n  ...\nend\n```\n\n\n#### Overriding data type of the parameter <a name=\"overriding-type-of-param\"></a>\n\nYou can override type, using the documentation hash.\n\n```ruby\nparams do\n  requires :input, type: String, documentation: { type: 'integer' }\nend\npost :act do\n  ...\nend\n```\n\n```json\n{\n  \"in\": \"formData\",\n  \"name\": \"input\",\n  \"type\": \"integer\",\n  \"format\": \"int32\",\n  \"required\": true\n}\n```\n\n\n#### Multiple types <a name=\"multiple-types\"></a>\n\nBy default when you set multiple types, the first type is selected as swagger type\n\n```ruby\nparams do\n  requires :action, types: [String, Integer]\nend\npost :act do\n  ...\nend\n```\n\n```json\n{\n  \"in\": \"formData\",\n  \"name\": \"action\",\n  \"type\": \"string\",\n  \"required\": true\n}\n```\n\n\n#### Array of data type <a name=\"array-type\"></a>\n\nArray types are also supported.\n\n```ruby\nparams do\n  requires :action_ids, type: Array[Integer]\nend\npost :act do\n  ...\nend\n```\n\n```json\n{\n  \"in\": \"formData\",\n  \"name\": \"action_ids\",\n  \"type\": \"array\",\n  \"items\": {\n      \"type\": \"integer\"\n  },\n  \"required\": true\n}\n```\n\n\n#### Collection format of arrays <a name=\"collection-format\"></a>\n\nYou can set the collection format of an array, using the documentation hash.\n\nCollection format determines the format of the array if type array is used. Possible values are:\n*  csv - comma separated values foo,bar.\n*  ssv - space separated values foo bar.\n*  tsv - tab separated values foo\\tbar.\n*  pipes - pipe separated values foo|bar.\n*  multi - corresponds to multiple parameter instances instead of multiple values for a single instance foo=bar&foo=baz. This is valid only for parameters in \"query\" or \"formData\".\n\n```ruby\nparams do\n  requires :statuses, type: Array[String], documentation: { collectionFormat: 'multi' }\nend\npost :act do\n  ...\nend\n```\n\n```json\n{\n  \"in\": \"formData\",\n  \"name\": \"statuses\",\n  \"type\": \"array\",\n  \"items\": {\n      \"type\": \"string\"\n  },\n  \"collectionFormat\": \"multi\",\n  \"required\": true\n}\n```\n\n\n#### Hiding parameters <a name=\"hiding-parameters\"></a>\n\nExclude single optional parameter from the documentation\n\n```ruby\nparams do\n  optional :one, documentation: { hidden: true }\n  optional :two, documentation: { hidden: -> { true } }\nend\npost :act do\n  ...\nend\n```\n\n\n#### Setting a Swagger default value <a name=\"default-value\"></a>\n\nGrape allows for an additional documentation hash to be passed to a parameter.\n\n```ruby\nparams do\n  requires :id, type: Integer, desc: 'Coffee ID'\n  requires :temperature, type: Integer, desc: 'Temperature of the coffee in celcius', documentation: { default: 72 }\nend\n```\n\nThe example parameter will populate the Swagger UI with the example value, and can be used for optional or required parameters.\n\nGrape uses the option `default` to set a default value for optional parameters. This is different in that Grape will set your parameter to the provided default if the parameter is omitted, whereas the example value above will only set the value in the UI itself. This will set the Swagger `defaultValue` to the provided value. Note that the example value will override the Grape default value.\n\n```ruby\nparams do\n  requires :id, type: Integer, desc: 'Coffee ID'\n  optional :temperature, type: Integer, desc: 'Temperature of the coffee in celcius', default: 72\nend\n```\n\n\n#### Expose nested namespace as standalone route\n\nUse the `nested: false` property in the `swagger` option to make nested namespaces appear as standalone resources.\nThis option can help to structure and keep the swagger schema simple.\n\n```ruby\nnamespace 'store/order', desc: 'Order operations within a store', swagger: { nested: false } do\n  get :order_id do\n  \t...\n  end\nend\n```\n\nAll routes that belong to this namespace (here: the `GET /order_id`) will then be assigned to the `store_order` route instead of the `store` resource route.\n\nIt is also possible to expose a namespace within another already exposed namespace:\n\n```ruby\nnamespace 'store/order', desc: 'Order operations within a store', swagger: { nested: false } do\n  get :order_id do\n  \t...\n  end\n  namespace 'actions', desc: 'Order actions' do, nested: false\n    get 'evaluate' do\n      ...\n    end\n  end\nend\n```\nHere, the `GET /order_id` appears as operation of the `store_order` resource and the `GET /evaluate` as operation of the `store_orders_actions` route.\n\n\n##### With a custom name\n\nAuto generated names for the standalone version of complex nested resource do not have a nice look.\nYou can set a custom name with the `name` property inside the `swagger` option, but only if the namespace gets exposed as standalone route.\nThe name should not contain whitespaces or any other special characters due to further issues within swagger-ui.\n\n```ruby\nnamespace 'store/order', desc: 'Order operations within a store', swagger: { nested: false, name: 'Store-orders' } do\n  get :order_id do\n  \t...\n  end\nend\n```\n\n\n#### Response documentation <a name=\"response\"></a>\n\nYou can also document the HTTP status codes with a description and a specified model, as ref in the schema to the definitions, that your API returns with one of the following syntax.\n\nIn the following cases, the schema ref would be taken from route.\n\n```ruby\ndesc 'thing', failure: [ { code: 400, message: 'Invalid parameter entry' } ]\nget '/thing' do\n  # ...\nend\n```\n\n```ruby\ndesc 'thing' do\n  params Entities::Something.documentation\n  failure [ { code: 400, message: 'Invalid parameter entry' } ]\nend\nget '/thing' do\n  # ...\nend\n```\n\n```ruby\nget '/thing', failure: [\n  { code: 400, message: 'Invalid parameter entry' },\n  { code: 404, message: 'Not authorized' },\n] do\n  # ...\nend\n```\n\nBy adding a `model` key, e.g. this would be taken.\n```ruby\nget '/thing', failure: [\n  { code: 400, message: 'General error' },\n  { code: 422, message: 'Invalid parameter entry', model: Entities::ApiError }\n] do\n  # ...\nend\n```\nIf no status code is defined [defaults](/lib/grape-swagger/endpoint.rb#L210) would be taken.\n\nThe result is then something like following:\n\n```json\n\"responses\": {\n  \"200\": {\n    \"description\": \"get Horses\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/Thing\"\n    }\n  },\n  \"401\": {\n    \"description\": \"HorsesOutError\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/ApiError\"\n    }\n  }\n},\n```\n\n\n#### Changing default status codes <a name=\"change-status\"></a>\n\nThe default status codes, one could be found (-> [status codes](lib/grape-swagger/doc_methods/status_codes.rb)) can be changed to your specific needs, to achive it, you have to change it for grape itself and for the documentation.\n\n```ruby\ndesc 'Get a list of stuff',\n    success: { code: 202, model: Entities::UseResponse, message: 'a changed status code' }\nget do\n  status 202\n  # your code comes here\nend\n```\n\n```json\n\"responses\": {\n  \"202\": {\n    \"description\": \"ok\",\n    \"schema\": {\n      \"$ref\": \"#/definitions/UseResponse\"\n    }\n  }\n},\n```\n\n\n#### File response <a name=\"file-response\"></a>\n\nSetting `success` to `File` sets a default `produces` of `application/octet-stream`.\n\n```ruby\ndesc 'Get a file',\n    success: File\nget do\n  # your file response\nend\n```\n\n```json\n\"produces\": [\n  \"application/octet-stream\"\n],\n\"responses\": {\n  \"200\": {\n    \"description\": \"Get a file\",\n    \"schema\": {\n      \"type\": \"file\"\n    }\n  }\n}\n```\n\n\n#### Extensions <a name=\"extensions\"></a>\n\nSwagger spec2.0 supports extensions on different levels, for the moment,\nthe documentation on the root level object and the `info`, `verb`, `path` and `definition` levels are supported.\n\nThe documented key would be generated from the `x` + `-` + key of the submitted hash,\nfor possibilities refer to the [extensions spec](spec/lib/extensions_spec.rb).\nTo get an overview *how* the extensions would be defined on grape level, see the following examples:\n\n- root object extension, add a `x` key to the root hash when calling ```add_swagger_documentation```:\n```ruby\n  add_swagger_documentation \\\n    x: {\n      some: 'stuff'\n    },\n    info: {\n    }\n```\nthis would generate:\n```json\n{\n  \"x-some\": \"stuff\",\n  \"info\":{\n  }\n}\n```\n\n- `info` extension, add a `x` key to the `info` hash when calling ```add_swagger_documentation```:\n```ruby\n  add_swagger_documentation \\\n    info: {\n      x: { some: 'stuff' }\n    }\n```\nthis would generate:\n```json\n\"info\":{\n  \"x-some\":\"stuff\"\n}\n```\n\n- `verb` extension, add a `x` key to the `desc` hash:\n```ruby\ndesc 'This returns something with extension on verb level',\n  x: { some: 'stuff' }\n```\nthis would generate:\n```json\n\"/path\":{\n  \"get\":{\n    \"…\":\"…\",\n    \"x-some\":\"stuff\"\n  }\n}\n```\n\n- `operation` extension, by setting via route settings::\n```ruby\nroute_setting :x_operation, { some: 'stuff' }\n```\nthis would generate:\n```json\n\"/path\":{\n  \"get\":{\n    \"…\":\"…\",\n    \"x-some\":\"stuff\"\n  }\n}\n```\n\n- `path` extension, by setting via route settings:\n```ruby\nroute_setting :x_path, { some: 'stuff' }\n```\nthis would generate:\n```json\n\"/path\":{\n  \"x-some\":\"stuff\",\n  \"get\":{\n    \"…\":\"…\",\n  }\n}\n```\n\n- `definition` extension, again by setting via route settings,\nhere the status code must be provided, for which definition the extensions should be:\n```ruby\nroute_setting :x_def, { for: 422, other: 'stuff' }\n```\nthis would generate:\n```json\n\"/definitions\":{\n  \"ApiError\":{\n    \"x-other\":\"stuff\",\n    \"…\":\"…\",\n  }\n}\n```\nor, for more definitions:\n```ruby\nroute_setting :x_def, [{ for: 422, other: 'stuff' }, { for: 200, some: 'stuff' }]\n```\n\n\n#### Response examples documentation <a name=\"response-examples\"></a>\n\nYou can also add examples to your responses by using the `desc` DSL with block syntax.\n\nBy specifying examples to `success` and `failure`.\n\n```ruby\ndesc 'This returns examples' do\n  success model: Thing, examples: { 'application/json' => { description: 'Names list', items: [{ id: '123', name: 'John' }] } }\n  failure [[404, 'NotFound', ApiError, { 'application/json' => { code: 404, message: 'Not found' } }]]\nend\nget '/thing' do\n  ...\nend\n```\n\nThe result will look like following:\n\n```json\n  \"responses\": {\n    \"200\": {\n      \"description\": \"This returns examples\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Thing\"\n      },\n      \"examples\": {\n        \"application/json\": {\n          \"description\": \"Names list\",\n          \"items\": [\n            {\n              \"id\": \"123\",\n              \"name\": \"John\"\n            }\n          ]\n        }\n      }\n    },\n    \"404\": {\n      \"description\": \"NotFound\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/ApiError\"\n      },\n      \"examples\": {\n        \"application/json\": {\n          \"code\": 404,\n          \"message\": \"Not found\"\n        }\n      }\n    }\n  }\n```\n\nFailure information can be passed as an array of arrays or an array of hashes.\n\n#### Response headers documentation <a name=\"response-headers\"></a>\n\nYou can also add header information to your responses by using the `desc` DSL with block syntax.\n\nBy specifying headers to `success` and `failure`.\n\n```ruby\ndesc 'This returns headers' do\n  success model: Thing, headers: { 'Location' => { description: 'Location of resource', type: 'string' } }\n  failure [[404, 'NotFound', ApiError, { 'application/json' => { code: 404, message: 'Not found' } }, { 'Date' => { description: 'Date of failure', type: 'string' } }]]\nend\nget '/thing' do\n  ...\nend\n```\n\nThe result will look like following:\n\n```json\n  \"responses\": {\n    \"200\": {\n      \"description\": \"This returns examples\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Thing\"\n      },\n      \"headers\": {\n        \"Location\": {\n          \"description\": \"Location of resource\",\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"404\": {\n      \"description\": \"NotFound\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/ApiError\"\n      },\n      \"examples\": {\n        \"application/json\": {\n          \"code\": 404,\n          \"message\": \"Not found\"\n        }\n      },\n      \"headers\": {\n        \"Date\": {\n          \"description\": \"Date of failure\",\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n```\n\nFailure information can be passed as an array of arrays or an array of hashes.\n\n## Using Grape Entities <a name=\"grape-entity\"></a>\n\nAdd the [grape-entity](https://github.com/ruby-grape/grape-entity) and [grape-swagger-entity](https://github.com/ruby-grape/grape-swagger-entity) gem to your Gemfile.\n\nThe following example exposes statuses. And exposes statuses documentation adding :type, :desc and :required.\nThe documented class/definition name could be set via `#entity_name`.\n\n```ruby\nmodule API\n  module Entities\n    class Status < Grape::Entity\n      expose :text, documentation: { type: 'string', desc: 'Status update text.', required: true }\n      expose :links, using: Link, documentation: { type: 'link', is_array: true }\n      expose :numbers, documentation: { type: 'integer', desc: 'favourite number', values: [1,2,3,4] }\n    end\n\n    class Link < Grape::Entity\n      expose :href, documentation: { type: 'url' }\n      expose :rel, documentation: { type: 'string'}\n\n      def self.entity_name\n        'LinkedStatus'\n      end\n\n    end\n  end\n\n  class Statuses < Grape::API\n    version 'v1'\n\n    desc 'Statuses index',\n      entity: API::Entities::Status\n    get '/statuses' do\n      statuses = Status.all\n      type = current_user.admin? ? :full : :default\n      present statuses, with: API::Entities::Status, type: type\n    end\n\n    desc 'Creates a new status',\n      entity: API::Entities::Status,\n      params: API::Entities::Status.documentation\n    post '/statuses' do\n        ...\n    end\n  end\nend\n```\n\n\n### Relationships\n\nYou may safely omit `type` from relationships, as it can be inferred. However, if you need to specify or override it, use the full name of the class leaving out any modules named `Entities` or `Entity`.\n\n\n#### 1xN\n\n```ruby\nmodule API\n  module Entities\n    class Client < Grape::Entity\n      expose :name, documentation: { type: 'string', desc: 'Name' }\n      expose :addresses, using: Entities::Address,\n        documentation: { type: 'Entities::Address', desc: 'Addresses.', param_type: 'body', is_array: true }\n    end\n\n    class Address < Grape::Entity\n      expose :street, documentation: { type: 'string', desc: 'Street.' }\n    end\n  end\n\n  class Clients < Grape::API\n    version 'v1'\n\n    desc 'Clients index',\n      params: Entities::Client.documentation,\n      success: Entities::Client\n    get '/clients' do\n      ...\n    end\n  end\n\n  add_swagger_documentation\nend\n```\n\n\n#### 1x1\n\nNote: `is_array` is `false` by default.\n\n```ruby\nmodule API\n  module Entities\n    class Client < Grape::Entity\n      expose :name, documentation: { type: 'string', desc: 'Name' }\n      expose :address, using: Entities::Address,\n        documentation: { type: 'Entities::Address', desc: 'Addresses.', param_type: 'body', is_array: false }\n    end\n\n    class Address < Grape::Entity\n      expose :street, documentation: { type: 'string', desc: 'Street' }\n    end\n  end\n\n  class Clients < Grape::API\n    version 'v1'\n\n    desc 'Clients index',\n      params: Entities::Client.documentation,\n      success: Entities::Client\n    get '/clients' do\n      ...\n    end\n  end\n\n  add_swagger_documentation\nend\n```\n\n\n\n## Securing the Swagger UI <a name=\"oauth\"></a>\n\nThe Swagger UI on Grape could be secured from unauthorized access using any middleware, which provides certain methods:\n\n- some guard method, which could receive as argument a string or an array of authorization scopes;\n- a *before* method to be run in the Grape controller for authorization purpose;\n- a set of methods which will process the access token received in the HTTP request headers (usually in the\n'HTTP_AUTHORIZATION' header) and try to return the owner of the token.\n\nBelow are some examples of securing the Swagger UI on Grape installed along with Ruby on Rails:\n\n- The WineBouncer and Doorkeeper gems are used in the examples;\n- 'rails' and 'wine_bouncer' gems should be required prior to 'grape-swagger' in boot.rb;\n- This works with a fresh PR to WineBouncer which is yet unmerged - [WineBouncer PR](https://github.com/antek-drzewiecki/wine_bouncer/pull/64).\n\nThis is how to configure the grape_swagger documentation:\n\n```ruby\n  add_swagger_documentation base_path: '/',\n                            title: 'My API',\n                            doc_version: '0.0.1',\n                            hide_documentation_path: true,\n                            endpoint_auth_wrapper: WineBouncer::OAuth2, # This is the middleware for securing the Swagger UI\n                            swagger_endpoint_guard: 'oauth2 false',     # this is the guard method and scope\n                            token_owner: 'resource_owner'               # This is the method returning the owner of the token\n```\n\nThe guard method should inject the Security Requirement Object into the endpoint's route settings (see Grape::DSL::Settings.route_setting method).\n\nThe 'oauth2 false' added to swagger_documentation is making the main Swagger endpoint protected with OAuth, i.e. the\naccess_token is being retreiving from the HTTP request, but the 'false' scope is for skipping authorization and\nshowing the UI for everyone. If the scope would be set to something else, like 'oauth2 admin', for example, than the UI\n wouldn't be displayed at all to unauthorized users.\n\nFurther on, the guard could be used, where necessary, for endpoint access protection. Put it prior to the endpoint's method:\n\n```ruby\n  resource :users do\n    oauth2 'read, write'\n    get do\n      render_users\n    end\n\n    oauth2 'admin'\n    post do\n      User.create!...\n    end\n  end\n```\n\nAnd, finally, if you want to not only restrict the access, but to completely hide the endpoint from unauthorized\nusers, you could pass a lambda to the :hidden key of a endpoint's description:\n\n```ruby\n  not_admins = lambda { |token_owner = nil| token_owner.nil? || !token_owner.admin? }\n\n  resource :users do\n    desc 'Create user', hidden: not_admins\n    oauth2 'admin'\n    post do\n      User.create!...\n    end\n  end\n```\n\nThe lambda is checking whether the user is authenticated (if not, the token_owner is nil by default), and has the admin\nrole - only admins can see this endpoint.\n\n\n\n## Example <a name=\"example\"></a>\n\nGo into example directory and run it: `$ bundle exec rackup`\ngo to: `http://localhost:9292/swagger_doc` to get it\n\nFor request examples load the [postman file]()\n\n#### Grouping the API list using Namespace\n\nUse namespace for grouping APIs\n\n![grape-swagger-v2-new-corrected](https://cloud.githubusercontent.com/assets/1027590/13516020/979cfefa-e1f9-11e5-9624-f4a6b17a3c8a.png)\n\n#### Example Code\n\n```ruby\nclass NamespaceApi < Grape::API\n  namespace :hudson do\n    desc 'Document root'\n    get '/' do\n    end\n\n    desc 'This gets something.',\n      detail: '_test_'\n\n    get '/simple' do\n      { bla: 'something' }\n    end\n  end\n\n  namespace :download do\n    desc 'download files',\n         success: File,\n         produces: ['text/csv']\n    get ':id' do\n      # file response\n    end\n  end\nend\n  …\n\n```\n\n\n\n## Rake Tasks <a name=\"rake\"></a>\n\nAdd these lines to your Rakefile, and initialize the Task class with your Api class – be sure your Api class is available.\n\n```ruby\nrequire 'grape-swagger/rake/oapi_tasks'\nGrapeSwagger::Rake::OapiTasks.new(::Api::Base)\n```\n\n#### OpenApi/Swagger Documentation\n\n```\nrake oapi:fetch\nparams:\n- store={ true | file_name } – save as JSON (optional)\n- resource=resource_name     – get only for this one (optional)\n```\n\n#### OpenApi/Swagger Validation\n\n**requires**: `npm` and `swagger-cli` to be installed\n\n\n```\nrake oapi:validate\nparams:\n- resource=resource_name – get only for this one (optional)\n```\n\n\n## Contributing to grape-swagger\n\nSee [CONTRIBUTING](CONTRIBUTING.md).\n\n## Copyright and License\n\nCopyright (c) 2012-2016 Tim Vandecasteele, ruby-grape and contributors. See [LICENSE.txt](LICENSE.txt) for details.\n"
apigee-127/swagger-tools: >
  The project provides various tools for integrating and interacting with
  Swagger.  This project is in its infancy but

  what is within the repository should be fully tested and reusable.  Please
  visit the [issue tracker][project-issues] to

  see what issues we are aware of and what features/enhancements we are working
  on.  Otherwise, feel free to review the

  [Release Notes][release-notes] to see what is new and improved.


  ## Project Badges


  [![Join the chat at
  https://gitter.im/apigee-127/swagger-tools](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/apigee-127/swagger-tools?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  * Build status: [![Build
  Status](https://travis-ci.org/apigee-127/swagger-tools.svg)](https://travis-ci.org/apigee-127/swagger-tools)

  * Dependencies:
  [![Dependencies](https://david-dm.org/apigee-127/swagger-tools.svg)](https://david-dm.org/apigee-127/swagger-tools)

  * Developer dependencies: [![Dev
  Dependencies](https://david-dm.org/apigee-127/swagger-tools/dev-status.svg)](https://david-dm.org/apigee-127/swagger-tools#info=devDependencies&view=table)

  * Downloads: [![NPM Downloads Per
  Month](http://img.shields.io/npm/dm/swagger-tools.svg?style=flat)](https://www.npmjs.org/package/swagger-tools)

  * License:
  [![License](http://img.shields.io/npm/l/swagger-tools.svg?style=flat)](https://github.com/apigee-127/swagger-tools/blob/master/LICENSE)

  * Bower Version [![NPM
  Version](https://img.shields.io/bower/v/swagger-tools.svg?style=flat)](http://bower.io/search/?q=swagger-tools)

  * NPM Version: [![NPM
  Version](http://img.shields.io/npm/v/swagger-tools.svg?style=flat)](https://www.npmjs.org/package/swagger-tools)


  ## Supported Swagger Versions


  * [1.2][swagger-docs-v1_2]

  * [2.0][swagger-docs-v2_0]


  ## Features


  * Simple CLI
      * Validate Swagger document(s)
      * Convert Swagger 1.2 documents to Swagger 2.0
  * Schema validation: For the file(s) supported by the Swagger specification,
  ensure they pass structural validation

  based on the [JSON Schema][json-schema] associated with that version of the
  specification _(Browser and Node)_

  * Semantic validation: Validates Swagger files above and beyond the structure
  of the file _(Browser and Node)_

  * Connect middleware for adding pertinent Swagger information to your requests
  _(Node only)_

  * Connect middleware for wiring up security handlers for requests based on
  Swagger documentation _(Node only)_

  * Connect middleware for wiring request handlers to requests based on Swagger
  documentation _(Node only)_

  * Connect middleware for serving your Swagger documents and [Swagger
  UI][swagger-ui] _(Node only)_

  * Connect middleware for using Swagger resource documents for pre-route
  validation _(Node only)_
      * Validate the request/response Content-Type based on the operation's `consumes/produces` value(s)
      * Validate the request parameter types
      * Validate the request parameter values
      * Validate the response values

  ## Installation


  Swagger Tools is available for both Node.js and the browser.  Installation
  instructions for each environment are below.


  ### Browser


  Installation for browser applications can be done via [Bower][bower] or by
  downloading a standalone binary.


  #### Using Bower


  ```

  bower install swagger-tools --save

  ```


  #### Standalone Binaries


  The standalone binaries come in two flavors:


  *
  [swagger-tools-standalone.js](https://raw.github.com/apigee-127/swagger-tools/master/browser/swagger-tools-standalone.js):
  _2,280kb_, full source _(including all dependencies)_ and source maps

  *
  [swagger-tools-standalone-min.js](https://raw.github.com/apigee-127/swagger-tools/master/browser/swagger-tools-standalone-min.js):
  _316kb_, minified, compressed

  and no sourcemap


  ### Node.js


  Installation for Node.js applications can be done via [NPM][npm].


  ```

  npm install swagger-tools --save

  ```


  If you want to use the `swagger-tools` executable for validating Swagger
  documents, you can install swagger-tools

  globally using the following:


  ```

  npm install -g swagger-tools

  ```


  ## Documentation


  swagger-tools is heavily documented so head on over to the project 
  [documentation][documentation] or jump straight to

  the [Quick Start][quick-start].


  ## Contributing


  This project uses [Gulp][gulp] for building so `npm install -g gulp` once you
  clone this project.  Running `gulp` in the

  project root will lint check the source code and run the unit tests.


  [bower]: http://bower.io/

  [documentation]:
  https://github.com/apigee-127/swagger-tools/blob/master/docs/README.md

  [gulp]: http://gulpjs.com/

  [json-schema]: http://json-schema.org/

  [npm]: https://www.npmjs.org/

  [project-issues]: https://github.com/apigee/swagger-tools/issues

  [quick-start]:
  https://github.com/apigee-127/swagger-tools/blob/master/docs/QuickStart.md

  [release-notes]:
  https://github.com/apigee-127/swagger-tools/blob/master/RELEASE_NOTES.md

  [swagger]: http://swagger.io/

  [swagger-docs-v1_2]:
  https://github.com/swagger-api/swagger-spec/blob/master/versions/1.2.md

  [swagger-docs-v2_0]:
  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md

  [swagger-ui]: https://github.com/swagger-api/swagger-ui
metosin/fnhouse-swagger: >
  # fnhouse-swagger


  [![Build
  Status](https://travis-ci.org/metosin/fnhouse-swagger.svg?branch=master)](https://travis-ci.org/metosin/fnhouse-swagger)

  [![Dependencies
  Status](http://jarkeeper.com/metosin/fnhouse-swagger/status.png)](http://jarkeeper.com/metosin/fnhouse-swagger)


  [Swagger](https://helloreverb.com/developers/swagger) implementation

  for [fnhouse](https://github.com/Prismatic/fnhouse) using the

  [Ring-swagger](https://github.com/metosin/ring-swagger). Supports both 1.2 and
  2.0 versions of the spec.


  This is an alpha release, like fnhouse itself.


  ## Latest version


  [![Clojars
  Project](http://clojars.org/metosin/fnhouse-swagger/latest-version.svg)](http://clojars.org/metosin/fnhouse-swagger)


  [Release notes](https://github.com/metosin/fnhouse-swagger/releases)


  ## Usage


  - create proto-handlers also from `fnhouse.swagger` namespace

  - call `collect-routes` to get ring-swagger map of handlers

  - assoc the map to key `:swagger` into the plumbing resource map


  to use the embedded [swagger-ui](https://github.com/wordnik/swagger-ui),

  add a dependency to latest
  [ring-swagger-ui](https://github.com/metosin/ring-swagger-ui)

  and add add a ring-route `swagger-ui` to your app.


  ## Examples


  Guesthouse with fnhouse-swagger is found
  [here](https://github.com/metosin/fnhouse-swagger/tree/master/examples/guesthouse).


  Running the example:


  ```bash

  git clone https://github.com/metosin/fnhouse-swagger.git

  cd fnhouse-swagger/examples/guesthouse/src

  lein repl

  > (use 'guesthouse.core)

  > (start)

  ```



  ## License


  Copyright © 2014-2015 [Metosin Oy](http://www.metosin.fi)


  Distributed under the Eclipse Public License, the same as Clojure.
yonaskolb/SwagGen: "# SwagGen\n\n![Platforms](https://img.shields.io/badge/platforms-Linux%20%7C%20macOS-blue.svg?style=for-the-badge)\n[![SPM](https://img.shields.io/badge/spm-compatible-brightgreen.svg?style=for-the-badge)](https://swift.org/package-manager)\n[![Git Version](https://img.shields.io/github/release/yonaskolb/swaggen.svg?style=for-the-badge)](https://github.com/yonaskolb/SwagGen/releases)\n[![Build Status](https://img.shields.io/circleci/project/github/yonaskolb/SwagGen.svg?style=for-the-badge)](https://circleci.com/gh/yonaskolb/SwagGen)\n[![license](https://img.shields.io/github/license/yonaskolb/SwagGen.svg?style=for-the-badge)](https://github.com/yonaskolb/SwagGen/blob/master/LICENSE)\n\nSwagGen is a library and command line tool for parsing and generating code for [OpenAPI/Swagger 3.0](https://swagger.io/specification) specs, completely written in Swift.\n\n> Swagger 2 support has been removed. For Swagger 2 use version `3.0.2` or the `swagger_2` branch\n\n#### Swagger parser\nIt contains a `Swagger` library that can be used in Swift to load and parse Swagger specs.\n\n#### Swagger code generator\n`SwagGen` is command line tool that generates code from a [OpenAPI/Swagger 3.0](https://swagger.io/specification) spec.\nTemplates for any language can be written that leverage this generator.\n\nIt is an alternative the official [swagger-codegen](https://github.com/swagger-api/swagger-codegen) java code generator, and adds some improvements such as speed, configurability, simplicity, extensibility, and an improved templating language.\n\n#### Swift template\n`SwagGen` includes a bundled template for generating a client side Swift library for interfacing with the Swagger spec. It includes support for model inheritance, shared enums, discrete and mutable request objects, inline schemas, Codable and Equatable models, configurable options, generic networking stack, and many other niceties.\n\n## Installing\nMake sure Xcode 10.2 is installed first.\n\n### [Mint](https://github.com/yonaskolb/mint)\n```sh\n$ mint install yonaskolb/SwagGen\n```\n### Homebrew\n\n```sh\n$ brew tap yonaskolb/SwagGen https://github.com/yonaskolb/SwagGen.git\n$ brew install SwagGen\n```\n\n### Make\n\n```sh\n$ git clone https://github.com/yonaskolb/SwagGen.git\n$ cd SwagGen\n$ make install\n```\n\n### Swift Package Manager\n\n#### Use as CLI\n\n```sh\n$ git clone https://github.com/yonaskolb/SwagGen.git\n$ cd swaggen\n$ swift run\n```\n\n#### Use as dependency\n\nAdd the following to your Package.swift file's dependencies:\n\n```swift\n.package(url: \"https://github.com/yonaskolb/SwagGen.git\", from: \"4.0.0\"),\n```\n\nAnd then import wherever needed:\n\n```swift\nimport SwagGenKit\nimport Swagger\n```\n\n## Usage\n\nUse `--help` to see usage information\n\n```\nswaggen --help\nUsage: swaggen <command> [options]\n\nCommands:\n  generate        Generates a template from a Swagger spec\n  help            Prints this help information\n  version         Prints the current version of this app\n```\n\n### generate\n\n```sh\nswaggen generate path_to_spec\n```\n\nUse `swaggen generate --help` to see the list of generation options.\n\n- **spec**: This is the path to the Swagger spec and is a required parameter. It can either be a file path or a web url to a YAML or JSON file\n- **--language**: The language to generate a template for. This defaults to `swift` for now.\n- **--template**:: This is the path to the template config yaml file. It can either be a direct path to the file, or a path to the parent directory which will by default look for `/template.yml`. If this is not passed, the default template for the language will be used.\n- **--destination**: The directory that the generated files will be added to.\n- **--option**: An option that will be merged with the template config options with those in this argument taking precedence, meaning any existing options of the same name will be overwritten. This argument can be repeated to pass in multiple options. Options must specify the option name and option value seperated by a colon, with any spaces contained in quotes. The following formats are allowed:\n\t- `-- option myOption:myValue`\n\t- `-- option \"myOption: my value\"`\n\t- `-- option myOption:\" my value\"`\n\n- **--clean**: Controls if and how the destination directory is cleaned of non generated files. Options are:\n\t- `none`: no files are removed (default)\n\t- `all`: all other files are removed\n\t- `leave.files`: all files and directories except those that start with `.` in the destination directory are removed. This is useful for keeping configuration files and directories such as `.git` around, while still making sure that items removed from the spec are removed from the generated API.\n- **--verbose**: Show more verbose output\n- **--silent**: Silences any standard output. Errors will still be shown\n\nExample:\n\n```\nswaggen generate http://myapi.com/spec --template Templates/Swift  --destination generated --option name:MyAPI --option \"customProperty: custom value --clean leave.files\"\n```\n\nFor the Swift template, a handy option is `name`, which changes the name of the generated framework from the default of `API`. This can be set in the template or by passing in `--option name:MyCoolAPI`.\n\n\n### Swift Template\n\nList of all available options:\n\nname | action | expected values | default value\n--- | --- | --- | ---\nname | name of the API | `String` | API\nauthors | authors in podspec | `String` | Yonas Kolb\nbaseURL | baseURL in APIClient | `String` | first scheme, host, and base path of spec\nfixedWidthIntegers | whether to use types like Int32 and Int64 | `Bool` | false\nhomepage | homepage in podspec  | `String` | https://github.com/yonaskolb/SwagGen\nmodelPrefix | model by adding a prefix and model file name | `String` | null\nmodelSuffix | model by adding a suffix and model file name | `String` | null\nmutableModels | whether model properties are mutable | `Bool` | true\nmodelType | whether each model is a `struct` or `class` | `String` | class\nmodelInheritance | whether models use inheritance. Must be false for structs | Bool | true\nmodelNames | override model names | `[String: String]` | [:]\nmodelProtocol | customize protocol name that all models conform to | `String` | APIModel\nenumNames | override enum names | `[String: String]` | [:]\nenumUndecodableCase | whether to add undecodable case to enums | `Bool` | false\nsafeArrayDecoding | filter out invalid items in array instead of throwing | `Bool` | false\nsafeOptionalDecoding | set invalid optionals to nil instead of throwing | `Bool` | false\ntagPrefix | prefix for all tags | `String` | null\ntagSuffix | suffix for all tags | `String` | null\n\nIf writing your own Swift template there are a few types that are generated that you will need to provide typealias's for:\n\n- `ID`: The `UUID` format. Usually `UUID` or `String`\n- `File`: The `file` format. Usually `URL`, `Data` or a custom type with a mimeType and fileName\n- `DateTime`: The `date-time` format. Usually `Date`\n- `DateDay`:  The `date` format. Usually `Date` or a custom type.\n\n## Editing\n```\n$ git clone https://github.com/yonaskolb/SwagGen.git\n$ cd SwagGen\n$ swift package generate-xcodeproj\n```\nThis use Swift Project Manager to create an `xcodeproj` file that you can open, edit and run in Xcode, which makes editing any code easier.\n\nIf you want to pass any required arguments when running in XCode, you can edit the scheme to include launch arguments.\n\n## Templates\nTemplates are made up of a template config file, a bunch of **Stencil** files, and other files that will be copied over during generation\n\n### Template config\nThis is the configuration and manifest file for the template in YAML or JSON format. It can contain:\n\n- **formatter**: Optional formatter to use. This affects what properties are available in the templates and how they are formatted e.g. `Swift`\n- **templateFiles**: a list of template files. These can each have their paths, contents and destination directories modified through Stencil tags. One template file can also output to multiple files if they path is changed depending on a list context. Each file contains:\n\t- **path**: relative path to the template config. The extension is usually .stencil or the type it is going to end up as\n\t- **context**: optional context within the spec. This is provided to the generated file, otherwise the full context will be passed. If this is a list then a file will be created for each object and the context within that list is used. (e.g. a file for every model in the spec `definitions` gets it's own definition context). Note that properties in the template `options` field can be used here\n\t- **destination**: optional destination path. This can contain stencil tags whose context is that from the context above. e.g. if context was `definitions` then the path could be `Models/{{ type }}.swift` and the filename would be the type of the definition. If this is left out the destination will be the same as the path, relative to the final destination directory. If it resolves to an empty string it will be skipped and not generated.\n- **copiedFiles**: this is an array of relative paths that will be copied to the destination. They can be files or directories. This is used for files that won't have their contents, filenames or paths changed.\n- **options**: these are the options passed into every stencil file and can be used to customize the template. These options are merged with the `options` argument, with the argument options taking precendance. These options can be references in template file paths and their contents.\n\nAn example template for Swift can be found [here](Templates/Swift/template.yml)\n\n### Template Files\nThese files follow the **Stencil** file format outlined here [https://stencil.fuller.li](https://stencil.fuller.li)\n\n## Formatters\nFormatters change what information is available to the templates and how it's formatted. They can be specified via the `formatter` property in the template config. Usually these would map to a specific target language, but can be customized for different purposes.\n\n## Output Languages\nSwagGen can be used to generate code for any language. At the moment there is only a formatter and template for **Swift**\n\n## Swift API usage\nUsage documentation can be found in the [Readme](Templates/Swift/README.md) that is generated with your template.\n\n---\n\n## Attributions\n\nThis tool is powered by:\n\n- [JSONUtilities](https://github.com/yonaskolb/JSONUtilities)\n- [Stencil](https://github.com/stencilproject/Stencil)\n- [StencilSwiftKit](https://github.com/SwiftGen/StencilSwiftKit)\n- [Spectre](https://github.com/kylef/Spectre)\n- [PathKit](https://github.com/kylef/PathKit)\n- [SwiftCLI](https://github.com/jakeheis/SwiftCLI)\n- [Yams](https://github.com/jpsim/Yams)\n\nThanks also to [Logan Shire](https://github.com/AttilaTheFun) and his initial work on [Swagger Parser](https://github.com/AttilaTheFun/SwaggerParser)\n\n## Contributions\nPull requests and issues are welcome\n\n## License\n\nSwagGen is licensed under the MIT license. See [LICENSE](LICENSE) for more info.\n"
jolie/jester: >
  # Jester (Jolie 1.6.0 Beta or greater required)

  Jester - the Jolie rEST routER (and related tools)


  # tools/jolie2rest (Jolie 1.6.0 Beta or greater required)

  This tool allows for the creation of:

  - a declaration for the REST router in order to automatically publish an
  existing jolie microservice into the router

  - a Swagger interface which reports all the API published in the router


  Usage: jolie jolie2rest.ol router_host [swagger_enable=true|false]
  [easy_interface=true|false]

  Ex:

  ```

  jolie jolie2rest.ol localhost:8080 swagger_enable=true easy_interface=false

  ```


  It is worth noting that the parameter router_host identifies the location
  where the router is listening for, it does not represent the location of the
  target service.

  The tool will get the lits of the service to be analyzed from the file

  ```

  service_list.txt

  ```


  Each line of the file service_list.txt represents a service to be analyzed, in
  particular the line syntax is: path of the ol file of the service , name of
  the input port to be analyzed

  EX:

  ```

  ./demo/demo.ol, DEMO

  ```


  It is important to highlight that a microservice can have more than one
  inputPort with different operations declared in it. If more inputPorts must be
  analyzed, then a line for each of them must be reported into the file
  service_list.txt.


  # REST annotations on the jolie interface

  In order to allow for the publishing of a jolie operation in a REST modality
  it is necessary to annotate each operation of the interfaces to be published
  as it follows:


  ```

  /**! @Rest: method=[post|get|put|delete] [,template=...]; */

  ```


  where:

  * `/**! [...] */`  are the tokens to be used for making the comment to be
  interpreted by the tool


  * `@Rest:`         is the token used for identify that the following operation
  must be imported as a REST method


  * `method=`        it specifies which kind of method must be used for the REST
  importing


  * `template=`      it specifies the template to be used for the given
  resource. It is worth noting that parameters must be specified within curl
  brackets as in the getOrders example in the demo folder.


  Ex:

  ```

  /**! @Rest: method=get, template=/orders/{userId}?maxItems={maxItems}; */

  ```

  In this case the request type of the getOrders operation is like it follows:

  ```

  type GetOrdersRequest: void {
     .userId: string
     .maxItems: int
  }

  ```


  The router automatically joins the parameters defined in the url {userId} and
  {maxItems} with the subnodes of the request message which have the same name.
  As an example the url:


  ```

  http://localhost:8080/DEMO/orders/homer?maxItems=10

  ```


  it will trigger the invocation of the target microservice on the getOrders
  operation with the following request message:

  ```

  .userId = "homer"

  .maxItems = 10

  ```


  # output of the tool

  As output the tool produces a file called router_import.ol which must be
  copied inside the folder router in order to be automatically loaded by the
  router when it is run. Indeed, once copied router_import.ol into the folder
  router, it is sufficient to launch


  ```

  jolie router.ol

  ```


  for enabling the router. It is worth noting that the microservice published as
  a REST service into the router must running too. The router indeed, just
  interprets the REST requests message and forward them to the final
  microservice

  (which is the target microservice of the jolie2rest tool).


  Options:

  - enable_swagger [ default = true ]

  This operation enables the creation of the related json swagger file which can
  be easily imported into Swagger (http://swagger.io/). Thanks to it, it is
  possible to invoke the rest apis from swagger.


  - easy_interface [ default = false ]

  This modality allows for skipping the usage of the router. It is useful when
  the microservice already provides a http port where its operations are
  available. In such a case, the microservice is already able to receive json
  messages and reply with json messages. In these cases, only the swagger json
  file is created where all the operations are automatically converted into POST
  calls. No annotations and templates are required in these cases.

  WARNING: the http protocol of the microservice must define the follwing
  parameters:


  ```

  .response.headers.("Access-Control-Allow-Methods") = "POST,GET,OPTIONS";

  .response.headers.("Access-Control-Allow-Origin") = "*";

  .response.headers.("Access-Control-Allow-Headers") = "Content-Type"

  ```


  # Running the example

  Pre-requisite:

  Prepare a web application for running a local instance of a Swagger UI
  (http://swagger.io/swagger-ui/). If you want to use jolie, you could download
  Leonardo web server (https://github.com/jolie/leonardo) and put the content of
  the SwaggerUI inside the folder www.

  Then launch `jolie leonardo.ol` in a separate shell and get the index.html
  page from your browser.


  The example:

  Go into folder tools and launch the following command:

  ```

  jolie jolie2rest.ol localhost:8080 swagger_enable=true easy_interface=false

  ```

  Copy the file `router_import.ol` into folder router.

  Copy the file swagger_DEMO.json in the folder where your SwaggerUI application
  can retrieve it. If you are using Leonardo just put it inside folder www.

  Go into the folder tools/demo and launch the demo microservice:

  ```

  jolie demo.ol

  ```

  Open a new shell, go into the router folder and launch the router:

  ```

  jolie router.ol

  ```

  Open the SwaggerUI application with your browser and put the URL for
  retrieving the file swagger_DEMO.json inside the explorer text field . If you
  are using Leonardo put `http://localhost:XXXX/swagger_DEMO.json`, where XXXX
  is the port you chose for Leonardo.


  Try to call your REST jolie service using the SwaggerUI.



  # tools/jolie_stubs_from_swagger

  This tool allows for the creation of a jolie client for each path declared in
  a Swagger definition.

  Usage:

  ```

  jolie jolie_stubs_from_swagger.ol url service_name output_folder

  ```


  where:

  - url is the url where the swagger definition can be retrieved

  - service_name is the name of the service represented by the swagger
  definition

  - output_folder is the name of the folder where all the files will be created


  Example:

  ```

  jolie jolie_stubs_from_swagger.ol http://petstore.swagger.io/v2/swagger.json
  petstore petstore

  ```


  Once executed the following files will be created in the output_folder:

  - outputPort.iol

  - list of all the clients (name_of_the_operation).ol


  outputPort.iol contains the interface and the outputPort definition of the
  service described by the swagger definition.

  Such a file must be included in each microservice which aims at invoking the
  service described by the swagger definition.


  In the example described above in the folder petstore it is possible to find
  the getOrderById.ol file.

  Try to open it and set the request message as:

  ```

  with( request ) {

  .orderId = 8

  };

  ```


  Then run the command

  ```

  jolie getOrderById.ol

  ```

  and look at the reply printed out in the console.


  NOTE:

  Only application/json APIs are enabled so far


  #Router Admin

  The router comes with a router admin service which is executed together in
  order to allow for a remote administration of the router. In particular, the
  router admin exposes three operations:

  - getRegisteredResourceCollections: it returns the list of all the registered
  resource collections into the router;

  - addResourceCollection: it adds a resource collection into the router;

  - removeResourceCollection: it removes a resource collection from the router;


  The resource collections are expressed by means of a jolie interface
  declaration where the

  REST api templates are described as in the previous section "REST annotations
  on the jolie interface".

  The fully description of the operations may be consulted in the file
  RouterAdminInterface.iol which is located in the sub-folder
  router_admin/public/interfaces.


  In the sub-folder router_admin/scripts there are three client scripts which
  allows for the interaction with the router admin operations.


  WARNING: every time a resource collection is modified, the router requires to
  be restarted in order to get the modifications.


  #Available API list web application

  A web application which uses some libraries from Swagger UI
  (http://swagger.io/swagger-ui/) is exeecuted together with the router and the
  router admin. It automatically reads the registered resource collections and
  it provides the list into a web application located at port 9082 by default.

  Thus, if you execute the web application on your localhost the URL is:

  ```

  http://localhost:9082

  ```


  #Dockerization of the router

  Jester can be easily dockerized by exploiting the Dockerfile distributed
  together with the source code. In order to achieve it, docker must be
  previously installed in the host machine then just follow these steps:

  - go into folder router;

  - run the command `docker build -t jester .` which locally creates the docker
  image of jester;

  - run the command `docker run --name jester-cnt --net="host" -e
  JDEP_API_ROUTER="socket://127.0.0.1:9080" jester` to run the container
  starting from the image just created;


  The option `--net="host"` will allow the container to directly exploit the
  network of the host machine. If you want to limit the port exposition,
  remember that jester requires three main ports:

  - 9080: it is the http port of the router, all the REST APIs are available on
  it

  - 9081: it is the sodep port of the router admin, if you want to add, remove
  or get the list of the registered resource collections, you need to use it

  - 9082: it is the http port of the API list web application


  The environment variable JDEP_API_ROUTER must be set to the location of the
  router as it is addressed from a final user, thus put the external IP and the
  exposed port number. 
Yelp/bravado-core: >
  .. image:: https://img.shields.io/travis/Yelp/bravado-core.svg
    :target: https://travis-ci.org/Yelp/bravado-core?branch=master

  .. image:: https://img.shields.io/coveralls/Yelp/bravado-core.svg
    :target: https://coveralls.io/r/Yelp/bravado-core

  .. image:: https://img.shields.io/pypi/v/bravado-core.svg
      :target: https://pypi.python.org/pypi/bravado-core/
      :alt: PyPi version

  .. image:: https://img.shields.io/pypi/pyversions/bravado_core.svg
      :target: https://pypi.python.org/pypi/bravado-core/
      :alt: Supported Python versions

  bravado-core

  ============


  About

  -----


  bravado-core is a Python library that adds client-side and server-side support

  for the `OpenAPI Specification v2.0
  <https://github.com/OAI/OpenAPI-Specification>`__.


  Features

  --------

  * OpenAPI Specification schema validation

  * Marshaling, transformation, and validation of requests and responses

  * Models as Python classes or dicts

  * Custom formats for type conversion


  Documentation

  -------------


  Documentation is available at `readthedocs.org
  <http://bravado-core.readthedocs.org>`__



  Installation

  ------------


  ::

      $ pip install bravado-core


  Related Projects

  ----------------

  * `bravado <https://github.com/Yelp/bravado>`__

  * `pyramid-swagger <https://github.com/striglia/pyramid_swagger>`__

  * `swagger-spec-validator <https://github.com/Yelp/swagger_spec_validator>`__


  Development

  ===========


  | Code is documented using `Sphinx <http://sphinx-doc.org/>`__.

  | `virtualenv <http://virtualenv.readthedocs.org/en/latest/virtualenv.html>`__
  is recommended to keep dependencies and libraries isolated.

  | `tox <https://tox.readthedocs.org/en/latest/>`__ is used for standardized
  testing.


  Setup

  -----


  ::

      # Run tests
      tox

      # Install git pre-commit hooks
      .tox/py27/bin/pre-commit install


  Contributing

  ------------


  1. Fork it ( http://github.com/Yelp/bravado-core/fork )

  2. Create your feature branch (``git checkout -b my-new-feature``)

  3. Add your modifications

  4. Add short summary of your modifications on ``CHANGELOG.rst``

  5. Commit your changes (``git commit -m "Add some feature"``)

  6. Push to the branch (``git push origin my-new-feature``)

  7. Create new Pull Request


  License

  -------


  | Copyright (c) 2013, Digium, Inc. All rights reserved.

  | Copyright (c) 2014-2015, Yelp, Inc. All rights reserved.


  Bravado is licensed with a `BSD 3-Clause

  License <http://opensource.org/licenses/BSD-3-Clause>`__.
unicredit/sbt-swagger-codegen: >
  # SBT Swagger Code Generator


  ## Overview


  Like the official
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) this project
  aims to generate Scala source code from [Swagger 2.0
  Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  compliant API descriptions.

  Moreover, you can do it directly within an `sbt` project.


  ## Compatibility


  This code generator is designed specifically for Swagger Spec Version 2.0.
  Moreover, it relies on [Play! Framework](http://www.playframework.com/) 2.6
  for Json marshalling/unmarshalling, server- and client-side code.


  ## Install


  Enable it inside your `project\plugins.sbt` like this:


  `addSbtPlugin("eu.unicredit" % "sbt-swagger-codegen" % "0.0.11")`


  Enable it in your `build.sbt` like this:


  `enablePlugins(SwaggerCodegenPlugin)`


  ## Quick start


  For a *super fast* hands-on tutorial refer to the related examples and check
  out
  [sbt-swagger-codegen-examples](https://github.com/unicredit/sbt-swagger-codegen-examples).


  ## How it works


  By default, the plugin will assume that you have put your `yaml` Swagger
  specification files under `src/main/swagger`.


  If so, then you can just run `swaggerModelCodeGen` task and it will generate
  your *models* as case classes and [Play Framework](www.playframework.com)
  [Formats](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators#Format)
  for them (for json serialization).


  ## Tasks


  All available tasks from the plugin


  - `swaggerModelCodeGen`  -> generated code for model classes

  - `swaggerServerCodeGen` -> generates Play Framework code

  - `swaggerClientCodeGen` -> generates client code using `play-ws`

  - `swaggerRoutesCodeGen` -> generates Play Framework routes

  - `swaggerClean` -> cleans up already generated code


  The `swaggerModelCodeGen`, `swaggerServerCodeGen` and `swaggerClientCodeGen`
  will run automatically when the swagger sources change.


  `swaggerRoutesCodeGen` will _not_ run automatically because it generates code
  inside the "src/main/resources" directory instead of in
  "target/scala-2.12/src_managed".


  Tasks can be chained with other tasks (ex: ```(compile in Compile) <<=
  (compile in Compile) dependsOn swaggerRoutesCodeGen```)


  ## Keys (and defaults)


  These keys influence properties of the generated code itself:


  - `swaggerSourcesDir` -> "/src/main/swagger" (path where to search for swagger
  files)

  - `swaggerCodeGenPackage` -> "swagger.codegen" (package name of the generated
  sources)

  - `swaggerModelFileSplitting` -> "singleFile" (in model generation how to
  group classes in '.scala' files available options are "oneFilePerSource"
  "oneFilePerModel")

  - `swaggerCodeProvidedPackage` -> "com.yourcompany" (where you will provide
  business logic server method implementation)


  These keys determine where generated files will be put:


  - `swaggerModelCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/model" (path where to put
  generated model files)

  - `swaggerClientCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/client" (path where to put
  generated client code files)

  - `swaggerServerCodeTargetDir` ->
  "target/scala-2.1x/src_managed/src/main/swagger/server" (path where to put
  generated server code files)

  - `swaggerServerRoutesFile` -> "src/main/resources/routes" (routes file to be
  generated)


  These keys can be used to determine what kind of code should be generated:


  - `swaggerGenerateModel` -> true (to be disabled if you do not want model
  classes to be generated automatically when swagger source code changes)

  - `swaggerGenerateJsonRW` -> true (if you want to generate json Format for
  your model case classes)

  - `swaggerGenerateClient` -> false (enable this if you want client code to ge
  generated automatically when swagger source code changes)

  - `swaggerGenerateServer` -> false (enable this if you want client code to ge
  generated automatically when swagger source code changes)


  Moreover, you can extend this plugin by providing alternative implementations
  of the generators via:


  - `swaggerModelCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultModelGenerator() (the class used to
  generate the model classes)

  - `swaggerJsonCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultJsonGenerator() (the class used to
  generate the json marshaller/unmarshaller)

  - `swaggerServerCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultServerGenerator() (the class used to
  generate the Server classes)

  - `swaggerClientCodeGenClass` -> new
  eu.unicredit.swagger.generators.DefaultClientGenerator() (the class used to
  generate the client classes)


  ## Dependencies


  - scala version 2.12.X

  - [play-ws-standalone-json
  1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ws-standalone-json)

  - [play-ahc-ws-standalone
  1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ahc-ws-standalone)
  (only if you use client)


  ### Limitations


  At the moment the project is developed to fulfill some internal projects
  needs, so do not expect it to cover all the corner cases of the Swagger Spec
  (i.e. some primitive types in body req or resp).


  ## The road ahead


  We are actively working with and on this project, trying to overcome any
  arising limitations and support all Swagger-spec properties we need.

  PRs are really welcome and please open an Issue if you find that something is
  not working.


  ## Authors


  * Andrea Peruffo ([@andreaTP](https://github.com/andreaTP))

  * Francesco Montecuccoli Degli Erri ([@fralken](https://github.com/fralken))

  * Marco Firrincieli ([@mfirry](https://github.com/mfirry))


  ### Acknowledgements


  Thanks to Daniel Wunsch ([@dwunsch](https://github.com/dwunsch)) and
  [@dvirf](https://github.com/dvirf) for their valuable contributions.


  *** This is a work in progress and we are not done with it! ***
MicroarrayTecnologia/spec-synthase: >
  # Spec-Synthase

  [![Build
  Status](https://travis-ci.org/MicroarrayTecnologia/spec-synthase.svg?branch=master)](https://travis-ci.org/MicroarrayTecnologia/spec-synthase)

  [![Coverage
  Status](https://coveralls.io/repos/github/MicroarrayTecnologia/spec-synthase/badge.svg)](https://coveralls.io/github/MicroarrayTecnologia/spec-synthase)


  Spec-Synthase is a tool to help deal with big swagger files, by building the
  swagger specification file from little yaml files.


  **Documentation:**
      http://spec-synthase.readthedocs.io/en/latest/
      
  # Usage examples with Zalando/Connexion in production:

  [Mozilla/Balrog - Admin
  Api](https://github.com/mozilla/balrog/blob/c6ac05dc2f4245f33628c1c2cb4b5c5de02c21f5/auslib/web/admin/base.py#L20-L30)  

  [Mozilla/Balrog - Public
  Api](https://github.com/mozilla/balrog/blob/c6ac05dc2f4245f33628c1c2cb4b5c5de02c21f5/auslib/web/public/base.py#L30-L37)  

  [National Library of Finland/Finto-suggestions

  ](https://github.com/NatLibFi/Finto-suggestions/blob/master/api/app.py#L89)
fleekjs/fleek-router: >
  # Fleek Router - [DEPRECATED]


  [![Build
  Status](https://travis-ci.org/fleekjs/fleek-router.svg?branch=master)](https://travis-ci.org/fleekjs/fleek-router)


  Middleware for routing to controllers using
  [swagger](http://swagger.io/specification/) schema's.


  Requirements:

  - Node >= 6.0.0

  - [fleek-context](https://github.com/fleekjs/fleek-context)


  # Usage


  This package is to be used as middleware for
  [Koa2](https://github.com/koajs/koa/tree/v2.x) to route paths defined in
  swagger documentation using `ctx.fleek.context` defined by
  [fleek-context](https://github.com/fleekjs/fleek-context) or an equivalent
  custom middleware.


  ```

  npm install --save fleek-router

  ```


  # Examples


  For a swagger example, refer to the test [swagger
  json](https://github.com/fleekjs/fleek-router/blob/master/tests/swagger.json)


  ```javascript

  const Koa = require('koa');

  const fleekCtx = require('fleek-context');

  const fleekRouter = require('fleek-router');


  const SWAGGER = require('./swagger.json');


  let app = new Koa();


  app.use(fleekCtx(SWAGGER));


  let router = fleekRouter({ controllers: `${__dirname}/controllers` });


  ctx.use(router.tag('authenticated', (ctx, next) => {
    if (someAuthFunction(ctx)) {
      ctx.body = 'Not authorized';
      ctx.status = 401;
      return Promise.resolve();
    } else return next();
  }))


  app.use(router.controllers({
    controller: {
      bar: {
        get: (ctx, next) => { /* routes for tags ['bar', ...] and method GET */ },
      },
      foo: {
        biz: {
          post: (ctx, next) => { /* routes for tags ['foo', 'biz' ...] and method POST */ }
        }
      }
    },
    operation: {
      createBar: (ctx, next) => { /* routes for operationId 'createBar' */ }
    }
  }));


  // OR


  app.use(router.controllers(`${__driname}/controllers`));

  // TO MATCH EXAMPLE ABOVE:

  // controllers/

  //  ├── bar.js [exports: get(ctx, next)]

  //  ├── foo

  //  |    └── biz.js [exports: post(ctx, next)]

  //  └── */** [exports: createBar(ctx, next)]


  app.listen(3000);

  ```


  # Documentation


  ## new Router()


  - Accepts
    - Object - options
  - Returns
    - Router - returns a promise when called

  ### Example


  ```javascript

  let myRouter = new fleekRouter.Router();


  ```


  ## Router.tag(name, operation)


  - Accepts
    - String - name of the tag to operate against. if the tag name is present in the request `ctx.fleek.context.tags[]`, the operation will be executed
  - Returns
    - Function - returns a promise when called
      - Accepts
        - Object - `ctx`(context) of the request
        - Function - `next` returns promise when called

  ### Example


  ```javascript

  app.use(router.tag('authenticated', (ctx, next) => {
    console.log(ctx.fleek.context.tags) // => [ ..., 'authenticated', ... ]
    let isAuthenticated = someAuthFunction(ctx);
    if (isAuthenticated) return next();
    else return Promise.reject(Error('401: not authorized'));
  }));


  app.use((ctx, next) => {
    ctx.body = 'passed authentication';
    return Promise.resolve();
  })

  ```



  ## Router.operation(operationId, operation)


  - Accepts
    - String - name of the tag to route to. if the tag name is present in the request `ctx.fleek.context.operationId`, the operation will be executed
  - Returns
    - Function - returns a promise when called
      - Accepts
        - Object - `ctx`(context) of the request
        - Function - `next` returns promise when called

  ### Example


  ```javascript

  app.use(router.tag('getUser', (ctx, next) => {
    console.log(ctx.fleek.context.operationId) // => 'getUser'
    ctx.body = DB.get('user', ctx.params.user_id);
    return Promise.resolve();
  }));

  ```



  ## Router.controllers(options) - Controller Directory


  - Accepts
    - One of
      - String - path to controllers directory. Directory will be recursively read to create an object of controllers and operations
      - Object - options or list object of controllers and operations
        - Contains One of
  - Returns
    - Function - returns a promise when called
      - Accepts
        - Object - context of the request. must have `ctx.fleek.context` to perform validation
        - Function - returns promise when called
  - Functionality
    - The directory tree being parsed must contain flat or sud-directy `.js` files exporting operation functions
    - To execute a operation, the request `ctx.fleek.context` must contain data mapping it to the controller/operation
    - Routing:
      - Controllers:
        - To execute a method(`POST`, `GET`, `PUT`, `DELETE`), the swagger documentation must specify the controller as the first tag(`tags: []`) for the path+method
        - Every sub-directory or file name adds an expected tag to the required `ctx.fleek.context.tags[]` to route to the given operation
          - EG: `controllers/foo/bar.js[get(ctx, next) => { ... }]` will  execute for `ctx.fleek.context = { method: 'get', tags: ['foo', 'bar'] }`
      - Operations:
        - Operations are identified by the name of the exported function(`module.exports[operationId]`), if it does not match a method type (`POST`, `GET`, `PUT`, `DELETE`)
        - To execute an operation, the swagger document must specify the `operationId` in the path+method configuration to match the exported function name
        - Operations are prioritized over controllers when routing
        - Operation ID's are unique accross all controllers and operations, as speficied in the swagger 2.0 standard


  ### Example


  ```javascript

  // Assuming directory structure:

  // controllers/

  //  ├── bar.js [exports: get(ctx, next) => { ... }]

  //  ├── foo

  //  |    └── biz.js [exports: post(ctx, next) => { ... }]

  //  └── */** [exports: createBar(ctx, next) => { ... }]


  app.use(router.controllers(`${__dirname}/controllers`));


  // OR


  app.use(router.controllers({ path: `${__dirname}/controllers` }));

  ```


  ## Router.controllers(controllers) - Controller Object


  - Accepts
    - Object - object of controllers and operations
      - At least one of
        - `controller`: Object - shallow or nested controllers, containg method operations (`post|create`, `get|read`, `put|update`, `delete|destroy`)`
        - `operation`: Object - shallow operations. propery keys expected to map to `operationId`
  - Returns
    - Function - returns a promise when called
      - Accepts
        - Object - context of the request. must have `ctx.fleek.context` to perform validation
        - Function - returns promise when called
  - Functionality
    - NOTE: the expected parameter object is also the compiled format of the directory system listed above
    - To execute a operation, the request `ctx.fleek.context` must contain data mapping it to the controller/operation
    - Routing:
      - Controllers:
        - To execute a method(`POST`, `GET`, `PUT`, `DELETE`), the swagger documentation must specify the controller as the first tag(`tags: []`) for the path+method
        - Every nested property adds an expected tag to the required `ctx.fleek.context.tags[]` to route to the given operation
          - EG: `controller.foo.bar.get: (ctx, next) => { ... }` will  execute for `ctx.fleek.context = { method: 'get', tags: ['foo', 'bar'] }`
      - Operations:
        - Operations are identified by the name of the exported function(`module.exports[operationId]`), if it does not match a method type (`POST`, `GET`, `PUT`, `DELETE`)
        - To execute an operation, the swagger document must specify the `operationId` in the path+method configuration to match the exported function name
        - Operations are prioritized over controllers when routing
        - Operation ID's are unique accross all controllers and operations, as speficied in the swagger 2.0 standard


  ### Example


  ```javascript

  app.use(router.controllers({
    controller: {
      bar: get(ctx, next) => { /* ... */ },
      foo: {
        biz: {
          post: (ctx, next) => { /* ... */ }
        }
      }
    },
    operation: {
      createBar: (ctx, next) => { /* ... */ }
    }
  }));

  ```


  ## Authors


  - [John Hofrichter](https://github.com/johnhof)


  _Built and maintained with [<img width="15px"
  src="http://hart.com/wp-content/themes/hart/img/hart_logo.svg">](http://hart.com/)
  by the [Hart](http://hart.com/) team._
Trax-air/swagger-stub: >
  .. image:: https://travis-ci.org/Trax-air/swagger-stub.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-stub
  .. image:: https://badges.gitter.im/Trax-air/swagger-stub.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-stub
    :target: https://gitter.im/Trax-air/swagger-stub?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-stub.svg
      :target: https://pypi.python.org/pypi/swagger-stub/

  swagger-stub

  ==============


  Swagger-stub create automatically a stub of your swagger REST API. This stub
  can be used anywhere you want like in a pytest fixture for your unit test.


  In addition of mocking your API, you can mock some call, and check every call
  that have been made to the API.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in
  your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger
  specs into one. Useful for your API gateways!

  * https://github.com/Trax-air/swagger-parser: A helper that parses swagger
  specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  .. code:: python

    import pytest
    import requests

    from swagger_stub import swagger_stub

    # This is the fixture of your stub
    # You only need to specify the path of the swagger file and the address
    # where you want to bind your stub.
    @pytest.fixture
    def test_stub():
        return swagger_stub([('swagger.yaml', 'http://foo.com')]).next()

    # Then you can use this fixture anywhere you want like your API is really running.
    def test_swagger_stub(test_stub):
        # Get a definition example
        test_stub.definitions['Foo']

        # Check a simple call
        response = requests.get('http://foo.com/v1/bar/')
        assert response.status_code == 200
        assert response.json() == {
          'foo': 'bar'
        }

        # Check that an invalid body cause an error
        response = requests.post('http://foo.com/v1/bar/', data='invalid data')
        assert response.status_code == 400

        # Mock a call
        test_stub.add_mock_call('get', '/test', {'mock': 'call'})
        response = requests.get('http://foo.com/v1/test')
        assert response.json() == {'mock': 'call'}

        # Set some side_effect like in the mock library
        test_stub.add_mock_side_effect('get', '/iter', [{'test': '1'}, {'test': '2'}, {'test': '3'}])
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '1'}
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '2'}
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '3'}

        # This side effect will raise a custom error
        test_stub.add_mock_side_effect('get', '/error', Exception)

        with pytest.raises(Exception):
            response = requests.get('http://foo.com/v1/error')

  Documentation

  -------------


  More documentation is available at
  https://swagger-stub.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-stub`


  License

  -------


  swagger-stub is licensed under http://opensource.org/licenses/MIT.
Nexmo/oas_parser: >
  # Open API Definition Parser


  A Ruby parser for Open API Spec 3.0+ definitions.


  ### Install


  Install the gem:


  ```

  $ gem install oas_parser

  ```


  Or add it to your Gemfile:


  ```ruby

  gem 'oas_parser'

  ```


  ### Usage


  Here is a basic example of how you can traverse through an Open API Spec 3
  Definition:


  ```ruby

  require 'oas_parser'


  definition = OasParser::Definition.resolve('petstore.yml')

  # => #<OasParser::Definition>


  # Get a specific path

  path = definition.path_by_path('/pets')

  # => #<OasParser::Path>


  # Get all paths.

  definition.paths

  # => [#<OasParser::Path>, ...]


  # Get a specific endpoint by method

  endpoint = path.endpoint_by_method('get')

  # => #<OasParser::Endpoint>


  # Get all endpoints

  path.endpoints

  # => [#<OasParser::Endpoint>, ...]


  # Get endpoint description

  endpoint.description

  # => "Returns all pets from the system that the user has access to"

  ```


  Checkout the tests and `lib` directory for more classes and methods.


  ### Development


  Run tests:


  ```

  $ rspec

  ```


  ### Publishing


  Clone the repo and navigate to its directory:


  ```

  $ cd oas-parser

  ```


  Bump the latest version in `oas_parser/lib/oas_parser/version.rb`:


  ```

  //old

  module OasParser
    VERSION = '1.0.0'.freeze
  end


  //new

  module OasParser
    VERSION = '1.1.0'.freeze
  end

  ```


  Build the gem:


  ```

  $ gem build oas_parser.gemspec

  ```


  _This will create a `oas_parser-1.1.0.gem` file._


  Push the gem to rubygems.org:


  ```

  $ gem push oas_parser-1.1.0.gem

  ```


  Verify the change was made by checking for the [new version on
  rubygems.org](https://rubygems.org/gems/oas_parser)




  ## Contributing


  Contributions are welcome, please follow [GitHub
  Flow](https://guides.github.com/introduction/flow/index.html)
ampedandwired/bottle-swagger: >
  =====================

  Bottle Swagger Plugin

  =====================


  About

  -----

  This project is a Bottle plugin for working with Swagger.

  `Bottle <http://bottlepy.org/>`_ is a Python web framework.

  `Swagger (OpenAPI) <http://swagger.io/>`_ is a standard for defining REST
  APIs.


  So if you are serving a REST API with Bottle,

  and you have a defined a Swagger schema for that API,

  this plugin can:


  * Validate incoming requests and outgoing responses against the swagger schema

  * Return appropriate error responses on validation failures

  * Serve your swagger schema via Bottle (for use in `Swagger UI
  <http://swagger.io/swagger-ui/>`_ for example)


  Requirements

  ------------


  * Python >= 2.7

  * Bottle >= 0.12

  * Swagger specification >= 2.0


  This project relies on `bravado-core <https://github.com/Yelp/bravado-core>`_
  to perform the swagger schema validation,

  so any version of the Swagger spec supported by that project is also supported
  by this plugin.


  Installation

  ------------

  ::

    $ pip install bottle-swagger

  Usage

  -----

  See the "example" directory for a working example of using this plugin.


  The simplest usage is::

    import bottle

    swagger_def = _load_swagger_def()
    bottle.install(SwaggerPlugin(swagger_def))

  Where "_load_swagger_def" returns a dict representing your swagger
  specification

  (loaded from a yaml file, for example).


  There are a number of arguments that you can pass to the plugin constructor:


  * ``validate_requests`` - Boolean (default ``True``) indicating if incoming
  requests should be validated or not

  * ``validate_responses`` - Boolean (default ``True``) indicating if outgoing
  responses should be validated or not

  * ``ignore_undefined_routes`` - Boolean (default ``False``) indicating if
  undefined routes
    (that is, routes not defined in the swagger spec) should be passed on ("True") or return a 404 ("False")
  * ``invalid_request_handler`` - Callback called when request validation has
  failed.
    Default behaviour is to return a "400 Bad Request" response.
  * ``invalid_response_handler`` - Callback called when response validation has
  failed.
    Default behaviour is to return a "500 Server Error" response.
  * ``swagger_op_not_found_handler`` - Callback called when no swagger operation
  matching the request was found in the swagger schema.
    Default behaviour is to return a "404 Not Found" response.
  * ``exception_handler=_server_error_handler`` - Callback called when an
  exception is thrown by downstream handlers (including exceptions thrown by
  your code).
    Default behaviour is to return a "500 Server Error" response.
  * ``serve_swagger_schema`` - Boolean (default ``True``) indicating if the
  Swagger schema JSON should be served

  * ``swagger_schema_url`` - URL (default ``/swagger.json``) on which to serve
  the Swagger schema JSON


  All the callbacks above receive a single parameter representing the
  ``Exception`` that was raised,

  or in the case of ``swagger_op_not_found_handler`` the ``Route`` that was not
  found.

  They should all return a Bottle ``Response`` object.


  Contributing

  ------------

  Development happens in the `bottle-swagger GitHub respository
  <https://github.com/ampedandwired/bottle-swagger>`_.

  Pull requests (with accompanying unit tests), feature suggestions and bug
  reports are welcome.


  Use "tox" to run the unit tests::

    $ tox
vanderlee/PHPSwaggerGen: "# SwaggerGen\nVersion 2.3.19\n\n[![License](https://img.shields.io/github/license/vanderlee/PHPSwaggerGen.svg)]()\n[![Build Status](https://travis-ci.org/vanderlee/PHPSwaggerGen.svg?branch=master)](https://travis-ci.org/vanderlee/PHPSwaggerGen)\n[![Quality](https://scrutinizer-ci.com/g/vanderlee/PHPSwaggerGen/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/vanderlee/PHPSwaggerGen)\n\nCopyright &copy; 2014-2018 Martijn van der Lee [Toyls.com](http://toyls.com).\n\nMIT Open Source license applies.\n\n## Introduction\nSwaggerGen is a PHP library for generating [Swagger](http://swagger.io/) REST\nAPI documentation from PHP source code.\n\nIt reads comments starting with `@rest\\`, containing commands describing the\nAPI as you go.\nWorking with SwaggerGen is intended to be a natural extension to normal\nPHP-documentor style documentation.\nYou can describe a REST API call similar to how you would describe method.\n\nUsing just a few simple commands like `@rest\\endpoint /users` and\n`@rest\\method GET Get a list of all users` gets you a definition of an API.\nBy adding a `@rest\\response 200 array(object(name:string, age:int[0,>, gender:enum(male,female)))`\nstatement, you've just defined exactly what it'll return.\nYou could have also just defined a `User` and do the same with a\n`@rest\\response 200 array(User)` statement or even just `@rest\\response ok [User]`.\n\nSwaggerGen makes it quick and intuitive to write high quality documentation.\n\nUse [Swagger-UI](https://github.com/swagger-api/swagger-ui) to read and test\nyour API, as in this example generated real-time with SwaggerGen:\n[Example](example/docs/) (only available when running on a PHP server).\n\nSwaggerGen is compatible with the latest\n[Swagger 2.0 specification](http://swagger.io/specification/),\nwhich forms the basis of the [Open API Initiative](https://openapis.org/).\n\n## Installation\nRequires PHP 5.4 or greater. PHP 5.3 is supported as long as no more recent\nfeatures are absolutely necessary. There is no guarantee SwaggerGen will\ncontinue to work on PHP 5.3 in the future.\n\nTo install using Composer:\n\n\tcomposer require vanderlee/swaggergen\n\nMake sure you use version 2.x.x or up.\n\nSwaggerGen aims to be PSR-4 compatible, so you should be able to use it in any\npackage manager.\n\n## Using SwaggerGen\nThe easiest part of generating Swagger documentation with SwaggerGen is setting\nit up.\n\n1.\tSet up your (PSR-0, PSR-4 or custom) autoloader to use the SwaggerGen\n\tdirectory.\n\n\tYou can take a look at the autoloader in the example folder if you don't\n\talready have an autoloader.\n\n2.\tCreate an instance of the `/SwaggerGen/SwaggerGen` class.\n\n\tYou can (and are advised to) specify the domainname of your server and the\n\tpath to the API in the constructor.\n\n3.\tCall the `array SwaggerGen->getSwagger(string[] $filenames)` method to\n\tgenerate the documentation.\n\n\tJust provide the files which contain the operation definitions of your API.\n\tIf your API uses other files, just specify an array of directories in the\n\t`SwaggerGen` constructor and these files will be automatically parsed when\n\tneeded.\n\n4.\tYou're done. Your documentation is generated. All that's left to do is\n\toutput it. Store it in a file or return it real-time.\n\nIf you want to use the preprocessor, you'll probably want to call the\n`SwaggerGen->define(string $name, string $value)` method of your `SwaggerGen` instance after\nstep 2 to define preprocessor variable names.\n\nThe following is a typical example:\n\n\t// Assuming you don't already have an autoloader\n\tspl_autoload_register(function ($classname) {\n\t\tinclude_once __DIR__ . $classname . '.php';\n\t});\n\n\t$SwaggerGen = new \\SwaggerGen\\SwaggerGen(\n\t\t$_SERVER['HTTP_HOST'],\n\t\tdirname($_SERVER['REQUEST_URI']),\n\t\t[__DIR__ . '/api']\n\t);\n\t$SwaggerGen->define('admin');\t\t\t\t// admin = 1\n\t$SwaggerGen->define('date', date('Y-m-d'));\t// date = \"2015-12-31\"\n\tif (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n\t\t$SwaggerGen->define('windows');\t// windows = 1 (only if on Windows OS)\n\t}\n\t$swagger = $SwaggerGen->getSwagger(['Example.php']);\n\n\theader('Content-type: application/json');\n\techo json_encode($swagger);\n\n# SwaggerGen class\nThe only class you need to know about is the `SwaggerGen` class in the similarly\nnames `SwaggerGen` namespace.\n\n## `__construct($host = '', $basePath = '', $dirs = array())`\nCreate a new SwaggerGen object with the given `host` and `basePath` and provide\na set of `dirs` to use for scanning for classes that may be referenced\nfrom the sourcecode files you're about to scan.\n*\t`$host` should be the domain name, i.e. `www.example.com`.\n*\t`$basePath` should be the URL path to the root of the API, i.e. `/api/v1`.\n\n## `mixed getSwagger($files, $dirs = array(), $format = self::FORMAT_ARRAY)`\nGenerate Swagger/OpenAPI documentation by scanning the provided list of `files`.\nOptionally you can specify additional `dirs` to scan for class files and\nprovide a `format` to specify how you want to output the documentation.\n\nBy default, the documentation is output as an array, ready for encoding as JSON,\nYAML or for manual post-processing. The following formats are available as\nconstants of the `SwaggerGen` class.\n*\t`FORMAT_ARRAY` output the raw array.\n*\t`FORMAT_JSON` JSON-encoded output (mimetype `application/json`).\n*\t`FORMAT_JSON_PRETTY` JSON-encoded output with a human-friendly layout\n\t(mimetype `application/json`).\n*\t`FORMAT_YAML` YAML (UTF-8 character encoding) output\n\t(mimetype `application/x-yaml` (most common) or `text/yaml`).\n\n## `define($name, $value = 1)`\nDefine a value to be used by the preprocessor commands.\nBy default, it's value will be set to `1`.\n\n## `undefine($name)`\nUndefine a value, so it is no longer recognized by the preprocessor commands.\n\n# Creating documentation\nSwaggerGen takes a number of of source files and scans the comments for\ncommands it understands. The following is a short example of the type of\ncomments SwaggerGen understands:\n\n\t/*\n\t * @rest\\description SwaggerGen 2 Example API\n\t * @rest\\title Example API\n\t * @rest\\contact http://example.com Arthur D. Author\n\t * @rest\\license MIT\n\t * @rest\\security api_key apikey X-Api-Authentication header Authenticate using this fancy header\n\t * @rest\\require api_key\n\t */\n\n## Comments\nAll comments are parsed, this includes both doc-comments (`/** ... */`) and\nnormal comments, both single line (`// ...`) and multi-line (`/* ... */`).\n\nComments that are attached to functions, methods and classes. Any doc-comment\nimmediately preceeding a function, method or class will be attached to that\nfunction, method or class. Other comments will be attached to the function,\nmethod or class containing them. For instance, SwaggerGen comments within a\nfunction will be attached to that function.\n\n## Commands\n\nAll commands must be prefixed with `@rest\\` to distinguish between SwaggerGen\nstatements and normal comment statements and statements from other tools such\nas PHP-Documentor.\n\nAll commands are multi-line by default; any line(s) after the command that do\nnot start with an at-sign (`@`) are automatically appended to the command on the\nprevious line.\n\nYou can reference SwaggerGen documentation for other functions, methods or\nclasses by using the `uses` command. This command lets you specify an other\nfunction, method or class whose documentation to include.\n\nCommands are processed in the order in which they appear. This includes any\ndocumentation referenced with the `uses` command.\n\n## Contexts\nSwaggerGen uses a stack of contexts. Each context represents a certain part of\nthe Swagger documentation that will be generated. Each context supports a few\ncommands which hold meaning within that context.\n\nYou initially start at the Swagger context.\n\nYou can switch contexts using some of the commands available within the current\ncontext. In this manual, whenever a command switches the context, it is\nmarked using '&rArr; Context name' at the end of the command syntax description.\n\nIf a command is not recognized in the current context, the context is removed\nfrom the top of the stack and the previous context tries to handle the command.\nIf no context is able to handle the command, SwaggerGen will report this as an\nerror.\n\n# Preprocessor commands\nSwaggerGen has a limited set of preprocessor statements to remove or change\nparts of the generated documentation at run-time.\n\nThe preprocessor statements are loosely based on the C/C++ preprocessors.\n\nThe work by defining values for variable names and checking whether or not a\nvariable name is defined or checking if a variables name has a specific value.\n\nSwaggerGen currently has no predefined variables, but you can define variables\nyourself by assigning them to the SwaggerGen parser before scanning starts.\n\nPreprocessor statments may be nested and are available for PHP and text.\n\n### `define` *`name [value]`*\nDefine a variable name and optionally assign a value to it.\n\n### `undef` *`name`*\nRemove the definition a variable name.\n\n### `if` *`name [value]`*\nIf the variable name is defined *and*, if provided, it's value is equal to\nthe specified value, then process all following SwaggerGen commands upto\nthe next preprocessor command.\nOtherwise, do not process those commands.\n\n### `ifdef` *`name`*\nIf the variable name is defined, then process all following SwaggerGen\ncommands upto the next preprocessor\tcommand.\nOtherwise, do not process those commands.\n\n### `ifndef` *`name`*\nIf the variable name is *not* defined, then process all following SwaggerGen\ncommands upto the next preprocessor\tcommand.\nOtherwise, do not process those commands.\n\n### `else`\nIf the previous `if...` or `elif` preprocessor command did *not* match,\nthen process all following SwaggerGen commands upto the next preprocessor\ncommand.\nOtherwise, do not process those commands.\n\n### `elif` *`name [value]`*\nIf the previous `if...` or `elif` preprocessor command did *not* match\n*and* if the variable name is defined *and*, if provided, it's value is\nequal to the specified value, then process all following SwaggerGen\ncommands upto the next preprocessor command.\nOtherwise, do not process those commands.\n\n### `endif`\nEnd the previous `if...`, `elif` or `else` preprocessor command's block of\nSwaggerGen commands.\n\n# SwaggerGen context and commands\nOrdered alphabetically for reference\n\nThe following commands can be used from within any context.\n\n### `uses` *`reference`*\nInclude a reference to another function, method or class.\n\nFor example:\n*\t`uses functionName`\n*\t`uses self::staticMethodName`\n*\t`uses $this->methodName`\n*\t`uses ClassName::staticMethodName`\n*\t`uses ClassName->methodName`\n\nSwaggerGen makes no distinction between the `self` and `this` or between\nthe static and dynamic `::` and `->`. These can be interchanged without\nany impact. Though it is advised to stick to the proper terms.\n\nClass inheritance is used if a method cannot be found within the indicated\nclass.\n\nalias: `see`\n\n### `x-[...]` *`data`*\nAdd a custom extension (starting with `x-`) to the current context.\n\nExtensions have no additional functionality and are treated as raw blobs of \ntext data.\n\n## BodyParameter\nRepresents a body parameter.\n\nFor a list of commands, read the chapter on  **Parameter definitions**.\nThe available command depend on the particular type.\n\n## Contact\nContains the contact information for the API.\n\n### `email` *`email`*\nSet the email address of the contact person.\n\n### `name` *`text ...`*\nSet the name of the contact person.\n\n### `url` *`email`*\nSet the URL where users can contact the maintainer(s).\n\n## Error\nRepresents a response with an error statuscode.\n\nSee the Response context for commands.\n\n## ExternalDocumentation\nContains an URL reference to additional documentation of the context which\ncreated this context.\n\n### `description` *`text ...`*\nSet the description text for this external documentation.\n\n### `url` *`url`*\nSet the URL to the external documentation.\n\n## Header\nRepresents a response header.\n\n### `description` *`text ...`*\nSet the description text of this response header.\n\n## Info\nContains non-technical information about the API, such as a description,\ncontact details and legal small-print.\n\n### `contact` *`[url] [email] [name ...]`* &rArr; Contact\nSet the contactpoint or -person for this API.\nYou can specify the URL, email address and name in any order you want.\nThe URL and email address will be automatically detected, the name will\nconsist\tof all text remaining (properly separated with whitespace).\n\n### `description` *`text ...`*\n\tSet the description for the API.\n\n### `license` *`[url] [name ...]`* &rArr; License\nSet the license for this API.\nYou can specify the URL in name in any order you want.\nIf you omit the URL, you can use any number of predefined names, which are\nautomatically expanded to a full URL, such as `gpl`, `gpl-2.1` or `bsd`.\n\n### `terms` *`text ...`*\nSet the text for the terms of service of this API.\n\nalias: `tos`, `termsofservice`\n\n### `title` *`text ...`*\nSet the API title.\n\n### `version` *`number`*\nSet the API version number.\n\n## License\nRepresents the name and URL of the license that applies to the API.\n\n### `name` *`text ...`*\nSet the name of the license.\nIf you haven't set a URL yet, a URL may be automatically set if it is one\nof a number of recognized license names, such as `mpl` or `apache-2`\n\n### `url` *`text ...`*\nSet the URL of the license.\n\n## Operation\nDescribes an operation; a call to a specifc path using a specific method.\n\n### `body`/`body?` *`definition name [description ...]`* &rArr; BodyParameter\nAdd a new form Parameter to this operation.\n\nUse `body` to make the parameter required.\nUse `body?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `consumes` *`mime1 [mime2 ... mimeN]`*\nAdds mime types that this operation is able to understand.\nE.g. \"application/json\",  \"multipart/form-data\" or\n\"application/x-www-form-urlencoded\".\n\n### `deprecated`\nMark this operation as deprecated.\n\n### `description` *`text ...`*\nSet the long description of the operation.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n### `error` *`statuscode [description]`* &rArr; Error\nAdd a possible error statuscode that may be returned by this\noperation, including an optional description text.\n\nIf no description is given, the standard reason for the statuscode will\nbe used instead.\n\n### `errors` *`statuscode1 [statuscode2 ... statuscodeN]`*\nAdd several possible error statuscodes that may be returned by this\noperation.\n\n### `form`/`form?` *`definition name [description ...]`* &rArr; Parameter\nAdd a new form Parameter to this operation.\n\nUse `form` to make the parameter required.\nUse `form?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `header`/`header?` *`definition name [description ...]`* &rArr; Parameter\nAdd a new header Parameter to this operation.\n\nUse `header` to make the parameter required.\nUse `header?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `id` *`name`*\nSet an operation id for this operation.\n\n`name`  The ID name must be uniue among all operations in the document.\nIf you specify an ID that has already been set, an exception will be thrown.\n\n### `parameter` *`name`*\nAdd a new parameter by referencing the name of a globally defined parameter.\n\n`name`  The globally unique name of the parameter reference.\n\nalias: `param`\n\n### `path` *`definition name [description ...]`* &rArr; Parameter\nAdd a new path Parameter to this operation.\n\n`path` parameters are always required; they cannot be optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `produces` *`mime1 [mime2 ... mimeN]`*\nAdds mime types that this operation is able to produce.\nE.g. \"application/xml\" or \"application/json\".\n\n### `query`/`query?` *`definition name [description ...]`* &rArr; Parameter\nAdd a new query Parameter to this operation.\n\nUse `query` to make the parameter required.\nUse `query?` (with a question mark) to make the parameter optional.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `require` *`security1 [security2 ... securityN]`*\nSet the required security scheme(s) for this operation.\n\nSecurity schemes can be defined in the **Swagger** context.\n\n### `response` *`statuscode definition description`* &rArr; Response\nAdds a possible response status code with a definition of the data that\nwill be returned. Though for error statuscodes you would typically use\nthe `error` or `errors` commands, you can use this command for those\nstatus codes as well, including a return definition.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `response` *`reference statuscode`*\nReference a response definition.\n\nThe `reference` name must exist as a Response definition defined in the\n**Swagger** context.\n\nNote that this is one of two possible signatures for the `response` command.\n\n### `schemes` *`scheme1 [scheme2 ... schemeN]`*\nAdd any number of schemes to the operation.\n\n### `summary` *`text ...`*\nSet the a short summary description of the operation.\n\n### `tags` *`tag1 [tag2 ... tagN]`*\nAdd any number of tags to the operation.\n\n## Parameter\nRepresents either a form, query, header of path parameter.\n\nFor a list of commands, read the chapter on  **Parameter definitions**.\nThe available command depend on the particular type.\n\n## Path\nRepresents a URL endpoint or Path.\n\n### `operation` *`method [summary ...]`* &rArr; Operation\nAdd a new operation to the most recently specified endpoint.\nMethod can be any one of `get`, `put`, `post`, `delete` or `patch`.\n\n### `description` *`text ...`*\nIf a tag exists, sets the description for the tag, otherwise to nothing.\n\n## Response\nRepresents a response.\n\n### `example` *`name content`*\nAdd an example to the response.\n\n`name` single-word (without spaces) name of the example. Unique per Response.\n\n`content` content of any type. Either a string, JSON object (quotes optional),\n`false`, `true`, `null` or a number (with or without floating point).\n\n### `header` *`type name [description]`* &rArr; Header\nAdd a header to the response.\n\n`type` must be either `string`, `number`, `integer`, `boolean` or `array`.\n\n`name` must be a valid HTTP header name. I.e. `X-Rate-Limit-Limit`.\n\n## Schema\nRepresents a definitions of a type, such as an array.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n### `title` *`text ...`*\nSet the title of this schema.\n\n### `description` *`description ...`*\nSet the description of this schema.\n\nFor a list of other commands, read the chapter on  **Parameter definitions**.\nThe available command depend on the particular type.\n\n## SecurityScheme\nRepresents a single way of authenticating the user/client to the server.\nYou specify the type of security scheme and it's settings using the `security`\ncommand from the Swagger context.\n\n### `description` *`text ...`*\nSet the description.\n\n### `scope` *`name [description ...]`*\nAdd a new oAuth2 scope name with optional description.\n\n## Swagger\nRepresents the entire API documentation.\nThis is the initial context for commands.\n\n### `consumes` *`mime1 [mime2] ... [mimeN]`*\nAdds mime types that the API is able to understand. E.g.\n\"application/json\",  \"multipart/form-data\" or\n\"application/x-www-form-urlencoded\".\n\nalias: `consume`\n\n### `contact` *`[url] [email] [name ...]`* &rArr; Contact\nSet the contactpoint or -person for this API.\nYou can specify the URL, email address and name in any order you want.\nThe URL and email address will be automatically detected, the name will consist\nof all text remaining (properly separated with whitespace).\n\n### `definition` *`name` [type]* &rArr; Schema\nStart definition of a Schema using the reference name specified. \n\nDefinitions can be specified as read only using exclamation point at the end of\nthe definition command. E.g. `definition! user` will create a user model that\nwill appear in GET responses and be omitted from POST, PUT, and PATCH requests.\n\nWhen no type is specified, `definition` creates an `object` definition. You can\nspecify `type` to create definitions for other types:\n\n    definition PositiveInteger integer[1,>\n    \n    definition ArrayOfString array(string)\n\nSee the chapter on  **Parameter definitions** for a detailed description of all\nthe possible definition types.\n\nalias: `model` (for historical reasons)\n\n### `description` *`text ...`* &rArr; Info\nSet the description for the API.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n### `endpoint` *`/path [tag] [description ...]`* &rArr; Path\nCreate an endpoint using the /path.\nIf tag is set, the endpoint will be assigned to the tag group of that name.\nIf a description is set, the description of the group will be set.\n\n### `license` *`[url] [name ...]`* &rArr; License\nSet the license for this API.\nYou can specify the URL in name in any order you want.\nIf you omit the URL, you can use any number of predefined names, which are\nautomatically expanded to a full URL, such as `gpl`, `gpl-2.1`, `mit` or `bsd`.\n\n### `produces` *`mime1 [mime2] ... [mimeN]`*\nAdds mime types that the API is able to produce. E.g. \"application/xml\" or\n\"application/json\".\n\nalias: `produce`\n\n### `require` *`name [scopes]`*\nSet the required security scheme names.\nIf multiple names are given, they must all apply.\nIf an `oath2` scheme is specified, you may\n\n### `response` *`name definition description`* &rArr; Response\nAdds a response definition with a schema definition of the data that will be\nreturned. You can omit the `definition` by specifying `null` instead.\n\nSee the chapter on  **Parameter definitions** for a detailed\ndescription of all the possible definition formats.\n\n### `schemes` *`scheme1 [scheme2] ... [schemeN]`*\nAdds protocol schemes. E.g. \"http\" or \"https\".\n\nalias: `scheme`\n\n### `security` *`name type [params ...]`* &rArr; SecurityScheme\nDefine a security method, available to the API and individual operations.\nName can be any random name you choose. These names will be used to reference\nto the security shemes later on.\n\n`Type` must be either `basic`, `apikey` or `oauth2`.\nThe parameters depend on the type.\n\nFor `basic`, you can only specify a description text.\n\nFor `apikey`, you must first specify a name to use for the query parameter or\nheader, then use either `query` or `header` to set the type of apikey.\nOptionally followed by a description text.\n\nFor `oauth2`, you must set the flow type `implicit`, `password`, `application`\nor `accesscode`. For type `accesscode` you must specify two URL's, for\nauthorization and token respectively, for the other types only one URL is\nneeded. Optionally follow with a description text. You may need to add scopes\nusing the `scope` command afterwards.\n\n*\t`security` *`name`* `basic` *`[description ...]`*\n*\t`security` *`name`* `apikey` *`header-name`* `header` *`[description ...]`*\n*\t`security` *`name`* `apikey` *`query-variable`* `query` *`[description ...]`*\n*\t`security` *`name`* `oauth2 implicit` *`auth-url [description ...]`*\n*\t`security` *`name`* `oauth2 password` *`token-url [description ...]`*\n*\t`security` *`name`* `oauth2 application` *`token-url [description ...]`*\n*\t`security` *`name`* `oauth2 accesscode` *`auth-url token-url [description ...]`*\n\n### `tag` *`tag [description ...]`* &rArr; Tag\nSpecifies a tag definition; essentially the category in which an endpoint path\nwill be grouped together.\n\nalias: `api` (for historical reasons).\n\n### `terms` *`text ...`* &rArr; Info\nSet the text for the terms of service of this API.\n\nalias: `tos`, `termsofservice`\n\n### `title` *`text ...`* &rArr; Info\nSet the API title.\n\n### `version` *`number`* &rArr; Info\nSet the API version number.\n\n## Tag\nA tag is used to group paths and operations together in logical categories.\n\n### `description` *`text ...`*\nSet the description.\n\n### `doc` *`url [description ...]`* &rArr; ExternalDocumentation\nSet an URL pointing to more documentation.\n\nalias: `docs`\n\n# Parameter definitions\n\nAll parameters can handle the `example` command:\n\n### Commands\n*\t**`example` *content*** Set the example content of any type.\nEither a string, JSON object (quotes optional), `false`, `true`, `null` or a\nnumber (with or without floating point).\n\n## string, byte, binary, password\nRepresents a text.\n\n\ttype(pattern)[0,>=default\n\n*\ttype: `string` or `binary`,\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` value means zero.\n\tEmpty `max` value means infinity.\n*\tdefault: any valid text not containing whitespace.\n\n### Commands\n*\t**`default` *value*** Set the default value.\n*\t**`enum` *value1 value2 ... valueN*** Set or add allowed values.\n\n### Examples\n*\t**`string`** A simple text field.\n*\t**`string(^[a-z]{2}-[A-Z]{2}$)`** String matching ISO \"ll-CC\" locale.\n*\t**`string[,256>=red`** A text of at most 255 characters, default to \"red\".\n*\t**`binary[1,8]`** Upto 8 binary digits, requiring atleast one.\n\n\n## int32 (integer, int), int64 (long)\nRepresents numbers without decimals.\n\n\ttype[0,>=default\n\n*\ttype: `integer`, `int`, `int32`, `long` or `int64`.\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` or `max` values means infinity.\n*\tdefault: any valid integer.\n\n### Commands\n*\t**`default` *value*** Set the default value.\n*\t**`enum` *value1 value2 ... valueN*** Set or add allowed values.\n*\t**`step` *value*** Set the stepsize between numbers.\n\n### Examples\n*\t**`int`** 32-bit integer without a default or limited range.\n*\t**`long<,0>`** 64-bit negative integers only.\n*\t**`integer[0,>=100`** 32-bit positive integer or zero, default to 100.\n\n\n## float, double\nRepresents floating point numbers (with decimals).\n\n\ttype[0,>=default\n\n*\ttype: `float` or `double`\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` or `max` values means infinity.\n*\tdefault: any valid integer.\n\n### Commands\n*\t**`default` *value*** Set the default value.\n*\t**`enum` *value1 value2 ... valueN*** Set or add allowed values.\n*\t**`step` *value*** Set the stepsize between numbers.\n\n### Examples\n*\t**`float`** 32-bit floating point number without a default or limited range.\n*\t**`double<,1>`** 64-bit floating point numbers upto (but not including) 1.\n*\t**`float<0,>=0.1`** 32-bit positive numbers, excluding 0, default to 0.1.\n\n\n## boolean (bool)\nA true/false choice.\n\n\ttype=default\n\n*\ttype: `boolean` or `bool`.\n*\tdefault: `true`, `false`, 1 (true) or 0 (false).\n\n### Commands\n*\t**`default` *value*** Set the default value.\n\n### Examples\n*\t**`boolean`** A basic boolean.\n*\t**`bool=true`** A boolean, default to true.\n\n\n## date, date-time (datetime)\nSpecial type of string which is limited to dates only\n\n\ttype=default\n\n*\ttype: `date`, `date-time` or `datetime`,\n*\tdefault: Any valid date format recognized by the [PHP DateTime object](http://php.net/manual/en/datetime.formats.php).\n\n### Commands\n*\t**`default` *date*** Set the default value.\n\n### Examples\n*\t**`date`** A simple date\n*\t**`datetime=2015-12-31T12:34:56Z`** Date and time set to a default without\n\ta timezone offset.\n*\t**`datetime=2015-12-31T12:34:56.001+01:00`** Date and time set to a default\n\tvalue with fractional seconds and a timezone offset.\n\n## csv (array), ssv, tsv, pipes, multi\nList of items\n\n\ttype(definition)[0,>\n\nAlternative short-hand notation for `array` lists:\n\n\t[definition][0,>\n\n*\ttype: `csv`, `array`, `ssv`, `tsv`, `pipes`, or `multi`.\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` value means zero.\n\tEmpty `max` value means infinity.\n*\tdefault: any valid text not containing whitespace.\n*\tdefinition: a definition of the type of the items in the list. It is possible to\n\tdefine lists as items, creating multidimensional arrays.\n\n### Commands\n*\t**`min` *value*** Set the minimum number of items required.\n*\t**`max` *value*** Set the maximum number of items allowed.\n*\t**`items` *definition*** Set the definition of the items in this list.\n\n### Types\n*\t**`csv`** Comma (`,`) separated. I.e. `red,green,blue`. Alias: `array`.\n*\t**`ssv`** Space ( ) separated. I.e. `red green blue`.\n*\t**`tsv`** Tab-separated. I.e. `red\tgreen\tblue`.\n*\t**`pipes`** Pipe (`|`) separated. I.e. `red|green|blue`.\n*\t**`multi`** query-string formatted. I.e. `color=red&color=green&color=blue`.\n\tThis choice is only available for `form` and `query` parameters.\n\n### Examples\n*\t**`csv(string)`** A comma-separated list of strings.\n\n## file\nA file.\n\n\tfile\n\nNo further definition is possible. There are no command.\n\n### Examples\n*\t**`file`** A file.\n\n## object\nObject with properties. Typically used as key-value map\n\n\tobject(definition)[0,>\n\nAlternative short-hand notation:\n\n\t{definition}[0,>\n\n*\ttype: `object`.\n*\trange: [min,max].\n\tUse `[` or `]` for inclusive and `<` or `>` for\texclusive.\n\tEmpty `min` value means zero properties (no minimum).\n\tEmpty `max` value means infinite properties (no maximum).\n*\tdefinition: a comma-separated list of property definitions in the form of\n\t`key:definition`, where `key` can be any sequence of characters except `:` or\n\t`?` or `!`. The `?` means that key is optional. The `!` means the key is read only. \n\tRead only implies optional as well.\n\n### Commands\n*\t**`min` *value*** Set the minimum number of items required.\n*\t**`max` *value*** Set the maximum number of items allowed.\n*\t**`property` *definition name*** Add a required property.\n*\t**`property?` *definition name*** Add an optional property.\n*   **`property!` *definition name*** Add a read only property.\n*   **`discriminator` *propertyName*** Sets the property as a discriminator.\n\tThe property must be required (could not be read only nor optional), but\n\tyou can define it later.\n\n### Examples\n*\t**`object(age:int[18,25>)`** An object containing a single key `age` with\n\tan integer value greater or equal to 18 and less than 25.\n*\t**`object(age:int,name?:string[2,>)`** An object containing an `age` and an\n\toptional `name` string, where the value must be atleast two characters\n\tlong.\n*\t**`object()[4,8]`** An object containing four to eight unknown properties.\n\n## allof\nIntersection type (data must satisfy all base types). May be used for type\ncomposition or to implement inheritance (in conjunction with `discriminator`).\nCould also be used to refine the constraints imposed by the base type.\n\n    allof(definition)\n\n*\tdefinition: a comma-separated list of base types, either as inline\n\tdefinitions or references to another definition\n\n### Commands\n*   **`item` *type*** Add the type to the list of allOf types\n\n### Examples\n*   **`allOf(DataModel,IdModel)`** type composition: effectively creates\n\tDataWithId type.\n*   **`allOf(ModelWithOptionalName,object(name:string))`** type refinement:\n\teffectively makes `name` property required.\n\n## enum\nSpecial type of string which is limited to one of a number of predefined values.\n\n\tenum(value1,value1,...,valueN)=default\n\n*\tvalues: any text not containing whitespace or commas.\n*\tdefault: any of the specified texts.\n\n### Commands\nSee string.\n\n### Examples\n*\t**`enum(red,green,blue)=red`** A string containing either \"red\", \"green\" or\n\t\"blue\", default to \"red\".\n\n## uuid\nSpecial type of string which accepts\n[RFC 4122](https://www.ietf.org/rfc/rfc4122.txt) compliant Universally Unique\nIDentifier (UUID) strings. The default value is validated to ensure only valid\nUUID's are specified.\n\n\tuuid=default\n\n*\tdefault: any of the specified texts.\n\n### Commands\nSee string.\n\n### Examples\n*\t**`uuid=123e4567-e89b-12d3-a456-426655440000`** A uuid string, default to\n\tthe uuid \"123e4567-e89b-12d3-a456-426655440000\".\n\n## refobject\nReference to a globally defined `definition` (a.k.a. `model`) object.\n\n\trefobject(definitionName)\n\nor\n\n\tdefinitionName\n\n*\tdefinitionName: the name of the globally defined `definition`.\n\n### Examples\n*\t**`refobject(Address)`** Reference the a globally defined model named\n\t`Address`.\n*\t**`Address`** Reference the a globally defined model named\n\t`Address`.\n\n### Notes\nUsually, using the definition name alone is good enough.\nUse `refobject(...)` if you are using a name which is also used as a builtin\nparameter type, such as `string` or `object`.\nIt is best practice to start all definition names with an upper case character\n(i.e. `Address`).\nUsing `refobject(...)` also offers the safest forward-compatible strategy if\nyou do not start definition names with upper case (i.e. `address`).\n\n# Appendices\n## Mime types\nSome commands, such as `consumes` and `produces` take mime types as arguments.\nInstead of specifying the full mime types, you can any of the following\npredefined shorthands (case insensitive):\n\n\tfileform\tmultipart/form-data\n\tform\t\tapplication/x-www-form-urlencoded\n\tjson\t\tapplication/json\n\ttext\t\ttext/plain\n\tutf8\t\ttext/plain; charset=utf-8\n\tyml\t\t\tapplication/x-yaml\n\tyaml\t\tapplication/x-yaml\n\tphp\t\t\ttext/x-php\n\txml\t\t\ttext/xml\n\n## Licenses\nA selection of shorthands are available for licenses.\nIf you want another license added to it, please submit an issue or create a\npull request. The file you want to edit is `/SwaggerGen/Swagger/License.php`.\n\nThese are the license shorthands currently available:\n\n\tartistic-1.0\thttp://opensource.org/licenses/artistic-license-1.0\n\tartistic-1\t\thttp://opensource.org/licenses/artistic-license-1.0\n\tartistic-2.0\thttp://opensource.org/licenses/artistic-license-2.0\n\tartistic-2\t\thttp://opensource.org/licenses/artistic-license-2.0\n\tartistic\t\thttp://opensource.org/licenses/artistic-license-2.0\n\tbsd-new\t\t\thttps://opensource.org/licenses/BSD-3-Clause\n\tbsd-3\t\t\thttps://opensource.org/licenses/BSD-3-Clause\n\tbsd-2\t\t\thttps://opensource.org/licenses/BSD-2-Clause\n\tbsd\t\t\t\thttps://opensource.org/licenses/BSD-2-Clause\n\tepl-1.0\t\t\thttp://www.eclipse.org/legal/epl-v10.html\n\tepl-1\t\t\thttp://www.eclipse.org/legal/epl-v10.html\n\tepl\t\t\t\thttp://www.eclipse.org/legal/epl-v10.html\n\tapache-2.0\t\thttp://www.apache.org/licenses/LICENSE-2.0.html\n\tapache-2\t\thttp://www.apache.org/licenses/LICENSE-2.0.html\n\tapache\t\t\thttp://www.apache.org/licenses/LICENSE-2.0.html\n\tgpl-1.0\t\t\thttps://www.gnu.org/licenses/gpl-1.0.html\n\tgpl-1\t\t\thttps://www.gnu.org/licenses/gpl-1.0.html\n\tgpl-2.0\t\t\thttps://www.gnu.org/licenses/gpl-2.0.html\n\tgpl-2\t\t\thttps://www.gnu.org/licenses/gpl-2.0.html\n\tgpl-3.0\t\t\thttp://www.gnu.org/licenses/gpl-3.0.html\n\tgpl-3\t\t\thttp://www.gnu.org/licenses/gpl-3.0.html\n\tgpl\t\t\t\thttp://www.gnu.org/licenses/gpl-3.0.html\n\tlgpl-2.0\t\thttp://www.gnu.org/licenses/lgpl-2.0.html\n\tlgpl-2.1\t\thttp://www.gnu.org/licenses/lgpl-2.1.html\n\tlgpl-2\t\t\thttp://www.gnu.org/licenses/lgpl-2.1.html\n\tlgpl-3.0\t\thttp://www.gnu.org/licenses/lgpl-3.0.html\n\tlgpl-3\t\t\thttp://www.gnu.org/licenses/lgpl-3.0.html\n\tlgpl\t\t\thttp://www.gnu.org/licenses/lgpl-3.0.html\n\tmit\t\t\t\thttp://opensource.org/licenses/MIT\n\tmpl-1.1\t\t\thttps://www.mozilla.org/en-US/MPL/1.1/\n\tmpl-1\t\t\thttps://www.mozilla.org/en-US/MPL/1.1/\n\tmpl-2.0\t\t\thttps://www.mozilla.org/en-US/MPL/\n\tmpl-2\t\t\thttps://www.mozilla.org/en-US/MPL/\n\tmpl\t\t\t\thttps://www.mozilla.org/en-US/MPL/\n\tmspl\t\t\thttps://msdn.microsoft.com/en-us/library/ff648068.aspx\n\n\n# Example\nTo view an example of Swagger documentation generated with SwaggerGen, visit\nthe [Example API documentation](./example/docs/).\n\nThe following is a fragment of code from this example:\n\n\t/**\n\t * @rest\\endpoint /user/{username}\n\t * @rest\\method GET Get a list of all users\n\t * @rest\\path String username Name of the user\n\t * @rest\\see self::request\n\t */\n\tprivate function getUser($name)\n\t{\n\t\t/*\n\t\t * @rest\\model User\n\t\t * @rest\\property int age Age of the user in years\n\t\t * @rest\\property int height Height of the user in centimeters\n\t\t */\n\t\treturn $this->data['users'][$name]; // @rest\\response OK object(age:int[0,100>,height:float) User\n\t}\n"
garethjevans/swagger-codegen-maven-plugin: >
  swagger-codegen-maven-plugin

  ============================


  [![Build
  Status](https://travis-ci.org/garethjevans/swagger-codegen-maven-plugin.svg?branch=master)](https://travis-ci.org/garethjevans/swagger-codegen-maven-plugin)

  [![Maven version][maven-img]][maven-url]


  A Maven plugin to support the [swagger](http://swagger.io) code generation
  project


  Usage

  ============================


  Add to your `build->plugins` section (default phase is `generate-sources`
  phase)

  ```xml

  <plugin>
      <groupId>com.garethevans.plugin</groupId>
      <artifactId>swagger-codegen-maven-plugin</artifactId>
      <version>${project.version}</version>
      <executions>
          <execution>
              <goals>
                  <goal>generate</goal>
              </goals>
              <configuration>
                  <inputSpec>src/main/resources/api.yaml</inputSpec>
                  <language>java</language>
              </configuration>
          </execution>
      </executions>
  </plugin>

  ```


  Followed by:


  ```

  mvn clean compile

  ```


  ### Configuration parameters


  - `inputSpec` - swagger spec file path

  - `language` - target generation language

  - `output` - target output path (default is
  `${project.build.directory}/generated-sources/swagger`)

  - `templateDirectory` - directory with mustache templates

  - `addCompileSourceRoot` - add the output directory to the project as a source
  root (`true` by default)


  -- 

  [maven-url]:
  https://search.maven.org/#search%7Cga%7C1%7Cswagger-codegen-maven-plugin

  [maven-img]:
  https://img.shields.io/maven-central/v/com.garethevans.plugin/swagger-codegen-maven-plugin
noirbizarre/flask-restplus: >
  ==============

  Flask RestPlus

  ==============


  .. image::
  https://secure.travis-ci.org/noirbizarre/flask-restplus.svg?branch=master
      :target: https://travis-ci.org/noirbizarre/flask-restplus?branch=master
      :alt: Build status
  .. image::
  https://coveralls.io/repos/noirbizarre/flask-restplus/badge.svg?branch=master
      :target: https://coveralls.io/r/noirbizarre/flask-restplus?branch=master
      :alt: Code coverage
  .. image::
  https://readthedocs.org/projects/flask-restplus/badge/?version=latest
      :target: https://flask-restplus.readthedocs.io/en/latest/
      :alt: Documentation status
  .. image:: https://img.shields.io/pypi/l/flask-restplus.svg
      :target: https://pypi.org/project/flask-restplus
      :alt: License
  .. image:: https://img.shields.io/pypi/pyversions/flask-restplus.svg
      :target: https://pypi.org/project/flask-restplus
      :alt: Supported Python versions
  .. image:: https://badges.gitter.im/Join%20Chat.svg
     :alt: Join the chat at https://gitter.im/noirbizarre/flask-restplus
     :target: https://gitter.im/noirbizarre/flask-restplus?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge

  Flask-RESTPlus is an extension for `Flask`_ that adds support for quickly
  building REST APIs.

  Flask-RESTPlus encourages best practices with minimal setup.

  If you are familiar with Flask, Flask-RESTPlus should be easy to pick up.

  It provides a coherent collection of decorators and tools to describe your API

  and expose its documentation properly using `Swagger`_.



  Compatibility

  =============


  Flask-RestPlus requires Python 2.7 or 3.4+.



  Installation

  ============


  You can install Flask-Restplus with pip:


  .. code-block:: console

      $ pip install flask-restplus

  or with easy_install:


  .. code-block:: console

      $ easy_install flask-restplus


  Quick start

  ===========


  With Flask-Restplus, you only import the api instance to route and document
  your endpoints.


  .. code-block:: python

      from flask import Flask
      from flask_restplus import Api, Resource, fields

      app = Flask(__name__)
      api = Api(app, version='1.0', title='TodoMVC API',
          description='A simple TodoMVC API',
      )

      ns = api.namespace('todos', description='TODO operations')

      todo = api.model('Todo', {
          'id': fields.Integer(readOnly=True, description='The task unique identifier'),
          'task': fields.String(required=True, description='The task details')
      })


      class TodoDAO(object):
          def __init__(self):
              self.counter = 0
              self.todos = []

          def get(self, id):
              for todo in self.todos:
                  if todo['id'] == id:
                      return todo
              api.abort(404, "Todo {} doesn't exist".format(id))

          def create(self, data):
              todo = data
              todo['id'] = self.counter = self.counter + 1
              self.todos.append(todo)
              return todo

          def update(self, id, data):
              todo = self.get(id)
              todo.update(data)
              return todo

          def delete(self, id):
              todo = self.get(id)
              self.todos.remove(todo)


      DAO = TodoDAO()
      DAO.create({'task': 'Build an API'})
      DAO.create({'task': '?????'})
      DAO.create({'task': 'profit!'})


      @ns.route('/')
      class TodoList(Resource):
          '''Shows a list of all todos, and lets you POST to add new tasks'''
          @ns.doc('list_todos')
          @ns.marshal_list_with(todo)
          def get(self):
              '''List all tasks'''
              return DAO.todos

          @ns.doc('create_todo')
          @ns.expect(todo)
          @ns.marshal_with(todo, code=201)
          def post(self):
              '''Create a new task'''
              return DAO.create(api.payload), 201


      @ns.route('/<int:id>')
      @ns.response(404, 'Todo not found')
      @ns.param('id', 'The task identifier')
      class Todo(Resource):
          '''Show a single todo item and lets you delete them'''
          @ns.doc('get_todo')
          @ns.marshal_with(todo)
          def get(self, id):
              '''Fetch a given resource'''
              return DAO.get(id)

          @ns.doc('delete_todo')
          @ns.response(204, 'Todo deleted')
          def delete(self, id):
              '''Delete a task given its identifier'''
              DAO.delete(id)
              return '', 204

          @ns.expect(todo)
          @ns.marshal_with(todo)
          def put(self, id):
              '''Update a task given its identifier'''
              return DAO.update(id, api.payload)


      if __name__ == '__main__':
          app.run(debug=True)




  Documentation

  =============


  The documentation is hosted `on Read the Docs
  <http://flask-restplus.readthedocs.io/en/latest/>`_



  .. _Flask: http://flask.pocoo.org/

  .. _Swagger: http://swagger.io/
Trax-air/swagger-parser: >
  .. image:: https://travis-ci.org/Trax-air/swagger-parser.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-parser 
  .. image:: https://badges.gitter.im/Trax-air/swagger-parser.svg
     :alt: Join the chat at https://gitter.im/Trax-air/swagger-parser
     :target: https://gitter.im/Trax-air/swagger-parser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-parser.svg
      :target: https://pypi.python.org/pypi/swagger-parser/

  swagger-parser

  ==============


  Swagger-parser is a python module giving you access to some interesting data
  about your swagger file. Like getting a dictionary example from a definition
  name, get the definition of a dictionary, and more.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in
  your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-stub: A stub you can use in your
  client's unit tests. All the HTTP calls to your swagger API are mocked by
  default. You can also add your own mocked_calls in your test functions.

  * https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger
  specs into one. Useful for your API gateways!


  Example Usage

  -------------


  .. code:: python

    from swagger_parser import SwaggerParser

    parser = SwaggerParser(swagger_path='swagger_path')  # Init with file
    parser = SwaggerParser(swagger_dict={})  # Init with dictionary

    # Get an example of dict for the definition Foo
    parser.definitions_example.get('Foo')

    # Get the definition of a dictionary
    test = {
      'foo': 'bar'
    }
    parser.get_dict_definition(test)

    # Validate the definition of a dict
    parser.validate_definition('Foo', test)

    # Validate that the given data match a path specification
    parser.validate_request('/foo', 'post', body=test, query={'foo': 'bar'})

    # Get the possible return value of a path
    # It will return a dictionary with keys as status_code
    # and value as example of return value.
    parser.get_request_data('/foo', 'post', body=test)

    # Get an example of a correct body for a path
    parser.get_send_request_correct_body('/foo', 'post')

  Documentation

  -------------


  More documentation is available at
  https://swagger-parser.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-parser`


  License

  -------


  swagger-parser is licensed under http://opensource.org/licenses/MIT.
elmiko/pecan-swagger: |
  =====================
  Pecan Swagger Project
  =====================

  some helpers to create swagger output from a pecan app

  example usage
  -------------

  given a file named ``myapp.py``

  ::

      import pecan
      from pecan_swagger import decorators as swagger


      @swagger.path('profile', 'Profile', 'Root')
      class ProfileController(object):

          @pecan.expose(generic=True, template='index.html')
          def index(self):
              return dict()

          @index.when(method='POST')
          def index_post(self, **kw):
              print(kw)
              pecan.redirect('/profile')


      @swagger.path('/', 'Root')
      class RootController(object):

          profile = ProfileController()

  and another file named ``myapp-doc.py``

  ::

      import pprint

      from pecan_swagger import utils
      import myapp

      pp = pprint.PrettyPrinter(indent=2)
      pp.pprint(utils.swagger_build('myapp', '1.0'))


  the following will be produced when run

  ::

      $ python myapp-doc.py
      {
        "swagger": "2.0",
        "info": {
          "version": "1.0",
          "title": "myapp"
        },
        "paths": {
          "/profile": {
            "POST": {},
            "GET": {}
          }
        }
      }
smoketurner/dropwizard-swagger: "dropwizard-swagger\n==================\n[![Build Status](https://travis-ci.org/smoketurner/dropwizard-swagger.svg?branch=master)](https://travis-ci.org/smoketurner/dropwizard-swagger)\n[![Coverage Status](https://coveralls.io/repos/smoketurner/dropwizard-swagger/badge.svg?branch=master&service=github)](https://coveralls.io/github/smoketurner/dropwizard-swagger?branch=master)\n[![Maven Central](https://img.shields.io/maven-central/v/com.smoketurner/dropwizard-swagger.svg?style=flat-square)](https://maven-badges.herokuapp.com/maven-central/com.smoketurner/dropwizard-swagger/)\n[![GitHub license](https://img.shields.io/github/license/smoketurner/dropwizard-swagger.svg?style=flat-square)](https://github.com/smoketurner/dropwizard-swagger/tree/master)\n[![Become a Patron](https://img.shields.io/badge/Patron-Patreon-red.svg)](https://www.patreon.com/bePatron?u=9567343)\n\nA Dropwizard bundle that serves Swagger UI static content and loads Swagger endpoints. Swagger UI static content is taken from https://github.com/swagger-api/swagger-ui\n\nCurrent version has been tested with Dropwizard 1.3.7 and Swagger 1.5.21 which supports Swagger 2 spec!\n\nNote: if you come from previous versions there have been some changes in the way the bundle is configured, see details below.\n\nLicense\n-------\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nVersion matrix\n--------------\n\ndropwizard-swagger| Dropwizard |Swagger API|Swagger UI\n------------------|------------|-----------|----------\n     < 0.5        |   0.7.x    |  1.3.2    |    ?\n       0.5.x      |   0.7.x    |  1.3.12   | v2.1.4-M1\n       0.6.x      |   0.8.0    |  1.3.12   | v2.1.4-M1\n       0.7.x      |   0.8.x    |  1.5.1-M2 | v2.1.4-M1\n       0.7.2      |   0.8.4    |  1.5.3    | v2.1.2\n       0.9.x      |   0.9.x    |  1.5.9    | v2.1.5\n       1.0.x      |   1.0.x    |  1.5.12   | v2.2.10\n       1.1.x      |   1.1.x    |  1.5.16   | v2.2.10\n       1.2.x  \_ \_ |   1.2.x  \_ |  1.5.18   | v3.9.2\n       1.3.x  \_ \_ |   1.3.x  \_ |  1.5.21   | v3.19.2\n\nHow to use it\n-------------\n\n* Add the Maven dependency (available in Maven Central)\n\n```xml\n<dependency>\n    <groupId>com.smoketurner</groupId>\n    <artifactId>dropwizard-swagger</artifactId>\n    <version>1.3.7-1</version>\n</dependency>\n```\n\n\n* Add the following to your Configuration class:\n\n```java\npublic class YourConfiguration extends Configuration {\n\n    @JsonProperty(\"swagger\")\n    public SwaggerBundleConfiguration swaggerBundleConfiguration;\n```\n\n* Add the following your configuration yaml (this is the minimal configuration you need):\n\n```yaml\nprop1: value1\nprop2: value2\n\n# the only required property is resourcePackage, for more config options see below\nswagger:\n  resourcePackage: <a comma separated string of the packages that contain your @Api annotated resources>\n```\n\n* In your Application class:\n\n```java\n@Override\npublic void initialize(Bootstrap<YourConfiguration> bootstrap) {\n    bootstrap.addBundle(new SwaggerBundle<YourConfiguration>() {\n        @Override\n        protected SwaggerBundleConfiguration getSwaggerBundleConfiguration(YourConfiguration configuration) {\n            return configuration.swaggerBundleConfiguration;\n        }\n    });\n}\n```\n\n* As usual, add Swagger annotations to your resource classes and methods\n\n* Open a browser and hit `http://localhost:<your_port>/swagger`\n\nAdditional Swagger configuration\n--------------------------------\n\nTo see all the properties that can be used to customize Swagger see [SwaggerBundleConfiguration.java](src/main/java/io/federecio/dropwizard/swagger/SwaggerBundleConfiguration.java)\n\nA note on Swagger 2\n-------------------\n\nHost and port do not seem to be needed for Swagger 2 to work properly as it uses relative URLs. At the moment I haven't run through all the scenarios so some adjustments might be needed, please open a bug if you encounter any problems.\n\n\nContributors\n------------\n\n* Federico Recio [@federecio](http://twitter.com/federecio)\n* Jochen Szostek [prefabsoft] (http://prefabsoft.com)\n* Damien Raude-Morvan [drazzib] (https://github.com/drazzib)\n* Marcel Stör [marcelstoer] (https://github.com/marcelstoer)\n* Flemming Frandsen https://github.com/dren-dk\n* Tristan Burch [tburch] (https://github.com/tburch)\n* Matt Carrier [mattcarrier] (https://github.com/mattcarrier)\n* Justin Plock [jplock] (https://github.com/jplock)\n* Ian Rogers [IanRogers-LShift] (https://github.com/IanRogers-LShift)\n"
Trax-air/swagger-tester: >
  .. image:: https://travis-ci.org/Trax-air/swagger-tester.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-tester
  .. image:: https://badges.gitter.im/Trax-air/swagger-tester.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-tester
    :target: https://gitter.im/Trax-air/swagger-tester?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-tester.svg
      :target: https://pypi.python.org/pypi/swagger-tester/

  swagger-tester

  ==============


  Swagger-tester will test automatically your swagger API. Swagger API made with
  connexion (https://github.com/zalando/connexion) are supported directly
  without running the API server. In the case you use connexion it will
  automatically run a test server from your swagger file.


  To run the test, swagger-tester will detect every path and actions of your
  API. And for each, it will send a request and check if the response match the
  swagger file specification.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  - https://github.com/Trax-air/swagger-stub: A stub you can use in your
  client's unit tests. All the HTTP calls to your swagger API are mocked by
  default. You can also add your own mocked_calls in your test functions.

  - https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger
  specs into one. Useful for your API gateways!

  - https://github.com/Trax-air/swagger-parser: A helper that parses swagger
  specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  .. code:: python

   from swagger_tester import swagger_test

    # Dict containing the error you don't want to raise.
    # By default, every status_code over other than 1xx, 2xx or 3xx
    # will be considered as an error.
    authorize_error = {
          'post': {
              '/pet/{petId}': [200],
              '/pet': [200]
          },
          'put': {
              '/user/{username}': [200],
              '/pet': [200]
          },
          'delete': {
              '/pet/{petId}': [200],
              '/store/order/{orderId}': [200],
              '/user/{username}': [200]
          }
      }

    # Run the test with connexion
    # An AssertionError will be raise in case of error.
    swagger_test('path_to_your_swagger.yaml', authorize_error=authorize_error)

    # Or if you have a running API
    swagger_test(app_url='http://petstore.swagger.io/v2', authorize_error=authorize_error)

  Documentation

  -------------


  More documentation is available at
  https://swagger-tester.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-tester`


  License

  -------


  swagger-tester is licensed under http://opensource.org/licenses/MIT.
cachecontrol/hippie-swagger: >
  ![hippie-swagger](http://i.imgur.com/icjd94P.png)


  _"The confident hippie"_


  [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)

  [![Build
  Status](https://travis-ci.org/CacheControl/hippie-swagger.svg)](https://travis-ci.org/CacheControl/hippie-swagger)

  [![npm
  version](https://badge.fury.io/js/hippie-swagger.svg)](https://badge.fury.io/js/hippie-swagger)


  ## Synopsis


  ```hippie-swagger``` is a tool for testing RESTful APIs.  In addition to
  validating api behavior, it will fail tests when swagger documentation is
  missing or inaccurate.


  As the test suite runs, any request or response details *not* matching the
  swagger file will throw an appropriate exception, failing the spec.  This
  ensures the swagger definition accurately describes application behavior,
  keeping documentation in sync with reality.


  ```hippie-swagger``` uses [hippie](https://github.com/vesln/hippie) under the
  hood, an excellent API testing tool.


  ## Features


  * All [hippie](https://github.com/vesln/hippie) features included

  * All aspects of swagger file validated; parameters, request/response body,
  paths, etc.

  * Checks for extra parameters, paths, headers, etc not mentioned in the
  swagger file

  * Ensures swagger file accurately describes API behavior

  * Accurate, human readable assertion messages


  ## Installation


  ```

  npm install hippie-swagger --save-dev

  ```


  ## Basic Usage


  ```js

  var hippie = require('hippie-swagger'),
      swagger = require('./my-dereferenced-swagger-file'); // see example for how to dereference swagger

  hippie(app, swagger)

  .get('/users/{username}')

  .pathParams({
    username: 'cachecontrol'
  })

  .expectStatus(200)

  .expectValue('user.first', 'John')

  .expectHeader('cache-control', 'no-cache')

  .end(function(err, res, body) {
    if (err) throw err;
  });

  ```


  ## Usage

  * See [hippie](https://github.com/vesln/hippie) documentation for a
  description of the base api

  * When specifying a url(.get, .post, .patch, .url, etc), use the [swagger
  path](http://swagger.io/specification/#pathsObject)

  * Provide any path variables using [pathParams](#pathparams)


  These aside, use hippie as you normally would; see the
  [example](example/index.js).


  ## Methods


  ### #constructor (Object app, Object swagger, Object [options])


  Test an HTTP app (like express) directly


  ```js

  hippie(app, swagger, options)

  .get('/projects')

  .end(fn);

  ```


  ### #constructor (Object swagger, Object [options])


  Test a remote HTTP app using a fully qualified url


  ```js

  hippie(swagger, options)

  .get('http://localhost:3000/projects')

  .end(fn);

  ```


  ### #pathParams(Object hash)


  Replaces variables contained in the swagger path.


  ```js

  hippie(app, swagger)

  .get('/projects/{projectId}/tasks/{taskId}')

  .pathParams({
    projectId: 123,
    taskId: 99
  })

  .end(fn);

  ```


  ## Options


  To customize behavior, an ```options``` hash may be passed to the
  constructor.  Typically, ```options``` only need to be specified in situations
  where the test covers responses to improper requests (e.g. validating the
  application returns a 422 when a required parameter is not provided).


  ```js

  var options = {
    validateResponseSchema: true,
    validateParameterSchema: true,
    errorOnExtraParameters: true,
    errorOnExtraHeaderParameters: false
  };

  hippie(app, swagger, options)

  ```


  ```validateResponseSchema``` - Validate the server's response against the
  swagger json-schema definition (default: ```true```)


  ```validateParameterSchema``` - Validate the request parameters against the
  swagger json-schema definition (default: ```true```)


  ```validateRequiredParameters``` - Validate that required parameters were
  provided  (default: ```true```)


  ```errorOnExtraParameters``` - Throw an error if a parameter is missing from
  the swagger file  (default: ```true```)


  ```errorOnExtraHeaderParameters``` - Throw an error if a request header is
  missing from the swagger file.  By default this is turned off, because it
  results in every request needing to specify the "Content-Type" and "Accept"
  headers, which quickly becomes verbose. (default: ```false```)



  ## Example

  See the [example](example/index.js) folder


  ## Validations


  When hippie-swagger detects it is interacting with the app in ways not
  specified in the swagger file, it will throw an error and fail the test.  The
  idea is to use hippie's core features to write API tests as per usual, and
  hippie-swagger will only interject if the swagger contract is violated.


  Below are list of some of the validations that hippie-swagger checks for:


  ### Paths

  ```js

  hippie(app, swagger)

  .get('/pathNotMentionedInSwagger')

  .end(fn);

  // path does not exist in swagger file; throws:

  //    Swagger spec does not define path: pathNotMentionedInSwagger

  ```


  ### Parameter format

  ```js

  hippie(app, swagger)

  .get('/users/{userId}')

  .pathParams({
    userId: 'string-value',
  })

  .end(fn);

  // userId provided as a string, but swagger specifies it as an integer;
  throws:

  //    Invalid format for parameter {userId}

  ```


  ### Required Parameters

  ```js

  hippie(app, swagger)

  .get('/users/{username}')

  .end(fn);

  // "username" is marked 'required' in swagger file; throws:

  //    Missing required parameter in path: username

  ```


  ### Extraneous Parameters

  ```js

  hippie(app, swagger)

  .get('/users')

  .qs({ page: 2, limit: 30 })

  .end(fn);

  // "page" missing from swagger file; throws:

  //    Error: query parameter not mentioned in swagger spec: "page", available
  params: limit

  ```


  ### Response format

  ```js

  hippie(app, swagger)

  .get('/users')

  .end(fn);

  // body failed to validate against swagger file's "response" schema; throws:

  //    Response from /users failed validation: [failure description]

  ```


  ### Method validation

  ```js

  hippie(app, swagger)

  .post('/users')

  .end(fn);

  // "post" method not mentioned in swagger file; throws:

  //    Swagger spec does not define method: "post" in path /users

  ```


  ### Post body format

  ```js

  hippie(app, swagger)

  .post('/users')

  .send({"bogus":"post-body"})

  .end(fn);


  // post body fails to validate against swagger file's "body" parameter;
  throws:

  //    Invalid format for parameter {body}, received: {"bogus":"post-body"}

  ```


  ### Form Url-Encoded Parameters

  ```js

  hippie(app, swagger)

  .form()

  .post('/users')

  .send({})

  .end(fn);


  // "username" is {required: true, in: formData} in swagger; throws:

  //    Missing required parameter in formData: username

  ```


  ### Multipart Forms

  ```js

  hippie(app, swagger)

  .header('Content-Type','multipart/form-data')

  .send()

  .post('/users/upload')

  .end(fn);


  // "fileUpload" is {required: true, in: formData, type: file} in swagger;
  throws:

  //    Missing required parameter in formData: fileUpload

  ```


  ## Troubleshooting


  The most common mistake is forgetting to dereference the swagger file:


  ```js

  "'Error: cant resolve reference ...'

  ```


  Dereferencing can be accomplished using
  [swagger-parser](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#dereferenceapi-options-callback). 
  The [example](example/index.js) gives a demonstration.


  ## Contributing


  To run the `hippie-swagger` tests:


  ```

  npm test

  ```


  ## License

  [ISC](./LICENSE)
guokr/swagger-py-codegen: "# Python RESTful Web Framework Generator\n\n[![Build Status][travis-image]][travis-url] [![PyPi Version][pypi-image]][pypi-url]\n\n## Overview\n\n\nSwagger Py Codegen is a Python web framework generator, which can help you generate a Python web framework automatically based on a given Swagger Specification doc. Currently, the following languages/frameworks are supported:\n\n\n* [Flask](http://flask.pocoo.org/) (Python)\n* [Tornado](http://www.tornadoweb.org/en/stable/) (Python)\n* [Falcon](https://falconframework.org/) (Python)\n* [Sanic](https://github.com/channelcat/sanic) (Python)\n\n\n**Alpha version for now, it may not handle all validation properly. If you found a bug, feel free to contact us.**\n\n\n## Install\n\n```\npip install swagger-py-codegen\n```\n\n## Usage\n\nCreate all:\n\n```\nswagger_py_codegen --swagger-doc api.yml example-app\n```\n\nCommand Options:\n\n\t-s, --swagger-doc               Swagger doc file.  [required]\n\t-f, --force                     Force overwrite.\n\t-p, --package                   Package name / application name.\n\t-t, --template-dir              Path of your custom templates directory.\n\t--spec, --specification         Generate online specification json response.\n\t--ui                            Generate swagger ui.\n\t--validate                      Validate swagger file.\n\t-tlp, --templates               gen flask/tornado/falcon templates, default flask.\n\t--version                       Show current version.\n\t--help                          Show this message and exit.\n\n## Examples:\n\nGenerate example-app from [api.yml](https://github.com/guokr/swagger-py-codegen/blob/master/api.yml \"Title\"):\n\n#### Flask Example\n\n    $ swagger_py_codegen -s api.yml example-app -p demo\n    $ tree (flask-demo)\n\t.\n\t|__ api.yml\n\t|__ example-app\n\t   |__ demo\n\t   |  |__ __init__.py\n\t   |  |__ v1\n\t   |     |__ api\n\t   |     |  |__ __init__.py\n\t   |     |  |__ pets.py\n\t   |     |  |__ pets_petId.py\n\t   |     |__ __init__.py\n\t   |     |__ routes.py\n\t   |     |__ schemas.py\n\t   |     |__ validators.py\n\t   |__ requirements.txt\n\n#### Tornado Example\n\n\t$ swagger_py_codegen -s api.yml example-app -p demo -tlp=tornado\n    $ tree (tornado-demo)\n\t.\n\t|__ api.yml\n\t|__ example-app\n\t   |__ demo\n\t   |  |__ __init__.py\n\t   |  |__ core\n\t   |     |__ __init.py\n\t   |  |__ v1\n\t   |     |__ api\n\t   |     |  |__ __init__.py\n\t   |     |  |__ pets.py\n\t   |     |  |__ pets_petId.py\n\t   |     |__ __init__.py\n\t   |     |__ routes.py\n\t   |     |__ schemas.py\n\t   |     |__ validators.py\n\t   |__ requirements.txt\n\n#### Falcon Example\n\n    $ swagger_py_codegen -s api.yml example-app -p demo -tlp=falcon\n    $ tree (falcon-demo)\n\t.\n\t|__ api.yml\n\t|__ example-app\n\t   |__ demo\n\t   |  |__ __init__.py\n\t   |  |__ v1\n\t   |     |__ api\n\t   |     |  |__ __init__.py\n\t   |     |  |__ pets.py\n\t   |     |  |__ pets_petId.py\n\t   |     |__ __init__.py\n\t   |     |__ routes.py\n\t   |     |__ schemas.py\n\t   |     |__ validators.py\n\t   |__ requirements.txt\n\n\n#### Sanic Example\n\n    $ swagger_py_codegen -s api.yml example-app -p demo -tlp=sanic\n    $ tree (sanic-demo)\n\t.\n\t|__ api.yml\n\t|__ example-app\n\t   |__ demo\n\t   |  |__ __init__.py\n\t   |  |__ v1\n\t   |     |__ api\n\t   |     |  |__ __init__.py\n\t   |     |  |__ pets.py\n\t   |     |  |__ pets_petId.py\n\t   |     |__ __init__.py\n\t   |     |__ routes.py\n\t   |     |__ schemas.py\n\t   |     |__ validators.py\n\t   |__ requirements.txt\n\n\n#### Run Web Server\n\nInstall example-app requirements:\n\n    $ cd example-app\n    $ pip install -r requirements.txt\n\nStart example-app:\n\n    $ cd demo\n    $ python __init__.py\n\nAnd generate example-app-ui from api.yml with ui:\n\n    $ swagger_py_codegen -s api.yml  example-app-ui -p demo-ui --ui --spec\n\nThen you can visit [http://127.0.0.1:5000/static/swagger-ui/index.html](http://127.0.0.1:5000/static/swagger-ui/index.html) in a browser.\n\n\n#### OAuth2 Scopes Usage\n\nSee the [wiki](https://github.com/guokr/swagger-py-codegen/wiki/OAuth2-Scopes-Usage)\n\n\n## Compatibility\n\n|component|compatibility|\n|-----|-----|\n|OpenAPI Spec|2.0|\n|Python|2.\\*, 3.\\*(Sanic only 3.\\*)|\n\n\n## Authors\n\nSee the [AUTHORS](https://github.com/guokr/swagger-py-codegen/blob/master/AUTHORS \"Title\").\n\n\n## License\n\nMIT\n\n[travis-url]: https://travis-ci.org/guokr/swagger-py-codegen\n[travis-image]: https://travis-ci.org/guokr/swagger-py-codegen.svg\n\n[pypi-url]: https://pypi.python.org/pypi/swagger-py-codegen/\n[pypi-image]: https://img.shields.io/pypi/v/swagger-py-codegen.svg?style=flat-square\n"
domaindrivendev/rswag: >
  rswag

  =========

  [![Build
  Status](https://travis-ci.org/domaindrivendev/rswag.svg?branch=master)](https://travis-ci.org/domaindrivendev/rswag)


  [Swagger](http://swagger.io) tooling for Rails API's. Generate beautiful API
  documentation, including a UI to explore and test operations, directly from
  your rspec integration tests.


  Rswag extends rspec-rails "request specs" with a Swagger-based DSL for
  describing and testing API operations. You describe your API operations with a
  succinct, intuitive syntax, and it automaticaly runs the tests. Once you have
  green tests, run a rake task to auto-generate corresponding Swagger files and
  expose them as JSON endpoints. Rswag also provides an embedded version of the
  awesome [swagger-ui](https://github.com/swagger-api/swagger-ui) that's powered
  by the exposed JSON. This toolchain makes it seamless to go from integration
  specs, which youre probably doing in some form already, to living
  documentation for your API consumers.


  And that's not all ...


  Once you have an API that can describe itself in Swagger, you've opened the
  treasure chest of Swagger-based tools including a client generator that can be
  targeted to a wide range of popular platforms. See
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more
  details.


  ## Compatibility ##


  |Rswag Version|Swagger (OpenAPI) Spec.|swagger-ui|

  |----------|----------|----------|

  |[master](https://github.com/domaindrivendev/rswag/tree/master)|2.0|3.17.3|

  |[2.0.5](https://github.com/domaindrivendev/rswag/tree/2.0.4)|2.0|3.17.3|

  |[1.6.0](https://github.com/domaindrivendev/rswag/tree/1.6.0)|2.0|2.2.5|


  ## Getting Started ##


  1. Add this line to your applications _Gemfile_:

      ```ruby
      gem 'rswag'
      ```

      or if you like to avoid loading rspec in other bundler groups.

      ```ruby
      # Gemfile
      gem 'rswag-api'
      gem 'rswag-ui'

      group :test do
        gem 'rspec-rails'
        gem 'rswag-specs'
      end
      ```

  2. Run the install generator

      ```ruby
      rails g rswag:install
      ```
      
      Or run the install generators for each package separately if you installed Rswag as separate gems, as indicated above:
      
      ```ruby
      rails g rswag:api:install rswag:ui:install
      RAILS_ENV=test rails g rswag:specs:install
      ```

  3. Create an integration spec to describe and test your API.

      ```ruby
      # spec/integration/blogs_spec.rb
      require 'swagger_helper'

      describe 'Blogs API' do

        path '/blogs' do

          post 'Creates a blog' do
            tags 'Blogs'
            consumes 'application/json', 'application/xml'
            parameter name: :blog, in: :body, schema: {
              type: :object,
              properties: {
                title: { type: :string },
                content: { type: :string }
              },
              required: [ 'title', 'content' ]
            }

            response '201', 'blog created' do
              let(:blog) { { title: 'foo', content: 'bar' } }
              run_test!
            end

            response '422', 'invalid request' do
              let(:blog) { { title: 'foo' } }
              run_test!
            end
          end
        end

        path '/blogs/{id}' do

          get 'Retrieves a blog' do
            tags 'Blogs'
            produces 'application/json', 'application/xml'
            parameter name: :id, :in => :path, :type => :string

            response '200', 'blog found' do
              schema type: :object,
                properties: {
                  id: { type: :integer },
                  title: { type: :string },
                  content: { type: :string }
                },
                required: [ 'id', 'title', 'content' ]

              let(:id) { Blog.create(title: 'foo', content: 'bar').id }
              run_test!
            end

            response '404', 'blog not found' do
              let(:id) { 'invalid' }
              run_test!
            end

            response '406', 'unsupported accept header' do
              let(:'Accept') { 'application/foo' }
              run_test!
            end
          end
        end
      end
      ```

  4. Generate the Swagger JSON file(s)

      ```ruby
      rake rswag:specs:swaggerize
      ```

  5. Spin up your app and check out the awesome, auto-generated docs at
  _/api-docs_!


  ## The rspec DSL ##


  ### Paths, Operations and Responses ###


  If you've used [Swagger](http://swagger.io/specification) before, then the
  syntax should be very familiar. To describe your API operations, start by
  specifying a path and then list the supported operations (i.e. HTTP verbs) for
  that path. Path parameters must be surrounded by curly braces ({}). Within an
  operation block (see "post" or "get" in the example above), most of the fields
  supported by the [Swagger "Operation"
  object](http://swagger.io/specification/#operationObject) are available as
  methods on the example group. To list (and test) the various responses for an
  operation, create one or more response blocks. Again, you can reference the
  [Swagger "Response" object](http://swagger.io/specification/#responseObject)
  for available fields.


  Take special note of the __run_test!__ method that's called within each
  response block. This tells rswag to create and execute a corresponding
  example. It builds and submits a request based on parameter descriptions and
  corresponding values that have been provided using the rspec "let" syntax. For
  example, the "post" description in the example above specifies a "body"
  parameter called "blog". It also lists 2 different responses. For the success
  case (i.e. the 201 response), notice how "let" is used to set the blog
  parameter to a value that matches the provided schema. For the failure case
  (i.e. the 422 response), notice how it's set to a value that does not match
  the provided schema. When the test is executed, rswag also validates the
  actual response code and, where applicable, the response body against the
  provided [JSON Schema](http://json-schema.org/documentation.html).


  If you want to do additional validation on the response, pass a block to the
  __run_test!__ method:


  ```ruby

  response '201', 'blog created' do
    run_test! do |response|
      data = JSON.parse(response.body)
      expect(data['title']).to eq('foo')
    end
  end

  ```


  If you'd like your specs to be a little more explicit about what's going on
  here, you can replace the call to __run_test!__ with equivalent "before" and
  "it" blocks:


  ```ruby

  response '201', 'blog created' do
    let(:blog) { { title: 'foo', content: 'bar' } }

    before do |example|
      submit_request(example.metadata)
    end

    it 'returns a valid 201 response' do |example|
      assert_response_matches_metadata(example.metadata)
    end
  end

  ```


  ### Null Values ###


  This library is currently using JSON::Draft4 for validation of response
  models. It does not support null as a value. So you can add the property
  'x-nullable' to a definition to allow null/nil values to pass.

  ```ruby

  describe 'Blogs API' do
    path '/blogs' do
      post 'Creates a blog' do
        ...

        response '200', 'blog found' do
          schema type: :object,
            properties: {
              id: { type: :integer },
              title: { type: :string },
              content: { type: :string, 'x-nullable': true }
            }
          ....
        end
      end
    end
  end

  ```

  *Note:* the OAI v3 may be released soon(ish?) and include a nullable property.
  This may have an effect on the need/use of custom extension to the draft. Do
  not use this property if you don't understand the implications.

  <https://github.com/OAI/OpenAPI-Specification/issues/229#issuecomment-280376087>


  ### Global Metadata ###


  In addition to paths, operations and responses, Swagger also supports global
  API metadata. When you install rswag, a file called _swagger_helper.rb_ is
  added to your spec folder. This is where you define one or more Swagger
  documents and provide global metadata. Again, the format is based on Swagger
  so most of the global fields supported by the top level ["Swagger"
  object](http://swagger.io/specification/#swaggerObject) can be provided with
  each document definition. As an example, you could define a Swagger document
  for each version of your API and in each case specify a title, version string
  and URL basePath:


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        swagger: '2.0',
        info: {
          title: 'API V1',
          version: 'v1',
          description: 'This is the first version of my API'
        },
        basePath: '/api/v1'
      },

      'v2/swagger.json' => {
        swagger: '2.0',
        info: {
          title: 'API V2',
          version: 'v2',
          description: 'This is the second version of my API'
        },
        basePath: '/api/v2'
      }
    }
  end

  ```


  #### Supporting multiple versions of API #### 

  By default, the paths, operations and responses defined in your spec files
  will be associated with the first Swagger document in _swagger_helper.rb_. If
  your API has multiple versions, you should be using separate documents to
  describe each of them. In order to assign a file with a given version of API,
  you'll need to add the ```swagger_doc``` tag to each spec specifying its
  target document name:


  ```ruby

  # spec/integration/v2/blogs_spec.rb

  describe 'Blogs API', swagger_doc: 'v2/swagger.json' do

    path '/blogs' do
    ...

    path '/blogs/{id}' do
    ...
  end

  ```


  #### Formatting the description literals: #### 

  Swagger supports the Markdown syntax to format strings. This can be especially
  handy if you were to provide a long description of a given API version or
  endpoint. Use [this
  guide](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) for
  reference. 


  __NOTE:__ There is one difference between the official Markdown syntax and
  Swagger interpretation, namely tables. To create a table like this:


  | Column1 | Collumn2 |

  | ------- | -------- |

  | cell1   | cell2    | 


  you should use the folowing syntax, making sure there are no whitespaces at
  the start of any of the lines:


  ```

  &#13;

  | Column1 | Collumn2 |&#13;

  | ------- | -------- |&#13;

  | cell1   | cell2    |&#13;

  &#13;

  ```


  ### Specifying/Testing API Security ###


  Swagger allows for the specification of different security schemes and their
  applicability to operations in an API. To leverage this in rswag, you define
  the schemes globally in _swagger_helper.rb_ and then use the "security"
  attribute at the operation level to specify which schemes, if any, are
  applicable to that operation. Swagger supports :basic, :apiKey and :oauth2
  scheme types. See [the
  spec](http://swagger.io/specification/#security-definitions-object-109) for
  more info.


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        ...
        securityDefinitions: {
          basic: {
            type: :basic
          },
          apiKey: {
            type: :apiKey,
            name: 'api_key',
            in: :query
          }
        }
      }
    }
  end


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do
        tags 'Blogs'
        security [ basic: [] ]
        ...

        response '201', 'blog created' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          run_test!
        end

        response '401', 'authentication failed' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('bogus:bogus')}" }
          run_test!
        end
      end
    end
  end

  ```


  __NOTE:__ Depending on the scheme types, you'll be required to assign a
  corresponding parameter value with each example. For example, :basic auth is
  required above and so the :Authorization (header) parameter must be set
  accordingly


  ## Configuration & Customization ##


  The steps described above will get you up and running with minimal setup.
  However, rswag offers a lot of flexibility to customize as you see fit. Before
  exploring the various options, you'll need to be aware of it's different
  components. The following table lists each of them and the files that get
  added/updated as part of a standard install.


  |Gem|Description|Added/Updated|

  |---------|-----------|-------------|

  |__rswag-specs__|Swagger-based DSL for rspec & accompanying rake task for
  generating Swagger files|_spec/swagger_helper.rb_|

  |__rswag-api__  |Rails Engine that exposes your Swagger files as JSON
  endpoints|_config/initializers/rswag-api.rb, config/routes.rb_|

  |__rswag-ui__   |Rails Engine that includes
  [swagger-ui](https://github.com/swagger-api/swagger-ui) and powers it from
  your Swagger endpoints|_config/initializers/rswag-ui.rb, config/routes.rb_|


  ### Output Location for Generated Swagger Files ###


  You can adjust this in the _swagger_helper.rb_ that's installed with
  __rswag-specs__:


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you do change this, you'll also need to update the rswag-api.rb
  initializer (assuming you're using rswag-api). More on this later.


  ### Referenced Parameters and Schema Definitions ###


  Swagger allows you to describe JSON structures inline with your operation
  descriptions OR as referenced globals. For example, you might have a standard
  response structure for all failed operations. Rather than repeating the schema
  in every operation spec, you can define it globally and provide a reference to
  it in each spec:


  ```ruby

  # spec/swagger_helper.rb

  config.swagger_docs = {
    'v1/swagger.json' => {
      swagger: '2.0',
      info: {
        title: 'API V1'
      },
      definitions: {
        errors_object: {
          type: 'object',
          properties: {
            errors: { '$ref' => '#/definitions/errors_map' }
          }
        },
        errors_map: {
          type: 'object',
          additionalProperties: {
            type: 'array',
            items: { type: 'string' }
          }
        }
      }
    }
  }


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do

        response 422, 'invalid request' do
          schema '$ref' => '#/definitions/errors_object'
    ...
  end


  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          schema '$ref' => '#/definitions/errors_object'
    ...
  end

  ```


  ### Response headers ###


  In Rswag, you could use `header` method inside the response block to specify
  header objects for this response. Rswag will validate your response headers
  with those header objects and inject them into the generated swagger file:


  ```ruby

  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          header 'X-Rate-Limit-Limit', type: :integer, description: 'The number of allowed requests in the current period'
          header 'X-Rate-Limit-Remaining', type: :integer, description: 'The number of remaining requests in the current period'
    ...
  end

  ```


  ### Response examples ###


  You can provide custom response examples to the generated swagger file by
  calling the method `examples` inside the response block:


  ```ruby

  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}' do

      get 'Retrieves a blog' do

        response 200, 'blog found' do
          examples 'application/json' => {
              id: 1,
              title: 'Hello world!',
              content: '...'
            }
    ...
  end

  ```


  ### Enable generation examples from responses ###


  To enable examples generation from responses add callback above run_test!
  like:

  ```ruby

  after do |example|
    example.metadata[:response][:examples] = { 'application/json' => JSON.parse(response.body, symbolize_names: true) }
  end

  ```

  You need to disable --dry-run option for Rspec > 3


  Add to application.rb:

  ```ruby

  RSpec.configure do |config|
    config.swagger_dry_run = false
  end

  ```

  ### Route Prefix for Swagger JSON Endpoints ###


  The functionality to expose Swagger files, such as those generated by
  rswag-specs, as JSON endpoints is implemented as a Rails Engine. As with any
  Engine, you can change it's mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'your-custom-prefix'
  end

  ```


  Assuming a Swagger file exists at &lt;swagger_root&gt;/v1/swagger.json, this
  configuration would expose the file as the following JSON endpoint:


  ```

  GET http://<hostname>/your-custom-prefix/v1/swagger.json

  ```


  ### Root Location for Swagger Files ###


  You can adjust this in the _rswag-api.rb_ initializer that's installed with
  __rspec-api__:


  ```ruby

  Rswag::Api.configure do |c|
    c.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you're using rswag-specs to generate Swagger files, you'll want
  to ensure they both use the same &lt;swagger_root&gt;. The reason for separate
  settings is to maintain independence between the two gems. For example, you
  could install rswag-api independently and create your Swagger files manually.


  ### Dynamic Values for Swagger JSON ##


  There may be cases where you need to add dynamic values to the Swagger JSON
  that's returned by rswag-api. For example, you may want to provide an explicit
  host name. Rather than hardcoding it, you can configure a filter that's
  executed prior to serializing every Swagger document:


  ```ruby

  Rswag::Api.configure do |c|
    ...

    c.swagger_filter = lambda { |swagger, env| swagger['host'] = env['HTTP_HOST'] }
  end

  ```


  Note how the filter is passed the rack env for the current request. This
  provides a lot of flexibilty. For example, you can assign the "host" property
  (as shown) or you could inspect session information or an Authoriation header
  and remove operations based on user permissions.


  ### Enable Swagger Endpoints for swagger-ui ###


  You can update the _rswag-ui.rb_ initializer, installed with rswag-ui, to
  specify which Swagger endpoints should be available to power the documentation
  UI. If you're using rswag-api, these should correspond to the Swagger
  endpoints it exposes. When the UI is rendered, you'll see these listed in a
  drop-down to the top right of the page:


  ```ruby

  Rswag::Ui.configure do |c|
    c.swagger_endpoint '/api-docs/v1/swagger.json', 'API V1 Docs'
    c.swagger_endpoint '/api-docs/v2/swagger.json', 'API V2 Docs'
  end

  ```


  ### Route Prefix for the swagger-ui ###


  Similar to rswag-api, you can customize the swagger-ui path by changing it's
  mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'api-docs'
    mount Rswag::Ui::Engine => 'your-custom-prefix'
  end

  ```


  ### Customizing the swagger-ui ###


  The swagger-ui provides several options for customizing it's behavior, all of
  which are documented here
  https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui. If you need to
  tweak these or customize the overall look and feel of your swagger-ui, then
  you'll need to provide your own version of index.html. You can do this with
  the following generator.


  ```ruby

  rails g rswag:ui:custom


  ```


  This will add a local version that you can modify at
  _app/views/rswag/ui/home/index.html.erb_


  ### Serve UI Assets Directly from your Web Server


  Rswag ships with an embedded version of the
  [swagger-ui](https://github.com/swagger-api/swagger-ui), which is a static
  collection of JavaScript and CSS files. These assets are served by the
  rswag-ui middleware. However, for optimal performance you may want to serve
  them directly from your web server (e.g. Apache or NGINX). To do this, you'll
  need to copy them to the web server root. This is the "public" folder in a
  typical Rails application.


  ```

  bundle exec rake rswag:ui:copy_assets[public/api-docs]

  ```


  __NOTE:__: The provided subfolder MUST correspond to the UI mount prefix -
  "api-docs" by default.
drewish/rspec-rails-swagger: "# RSpec Rails Swagger\n\n[![Build Status](https://travis-ci.org/drewish/rspec-rails-swagger.svg?branch=master)](https://travis-ci.org/drewish/rspec-rails-swagger)\n[![Code Climate](https://codeclimate.com/github/drewish/rspec-rails-swagger/badges/gpa.svg)](https://codeclimate.com/github/drewish/rspec-rails-swagger)\n\nThis gem helps you generate Swagger docs by using RSpec to document the paths.\nYou execute a command to run the tests and generate the `.yaml` or `.json` output.\nRunning the tests ensures that your API and docs are in agreement, and generates\noutput that can be saved as response examples.\n\nThe design of this was heavily influenced by the awesome [swagger_rails gem](https://github.com/domaindrivendev/swagger_rails).\n\n## Setup\n\nAdd the gem to your Rails app's `Gemfile`:\n```rb\ngroup :development, :test do\n  gem 'rspec-rails-swagger'\nend\n```\n\nUpdate your bundle:\n```\nbundle install\n```\n\nIf you don't have a `spec/rails_helper.rb` file:\n```\nrails generate rspec:install\n```\n\nCreate the `spec/swagger_helper.rb` file:\n```\nrails generate rspec:swagger_install\n```\n\n## Documenting Your API\n\nNow you can edit `spec/swagger_helper.rb` and start filling in the top level\nSwagger documentation, e.g. basePath, [definitions](http://swagger.io/specification/#definitionsObject),\n[parameters](http://swagger.io/specification/#parametersDefinitionsObject),\n[tags](http://swagger.io/specification/#tagObject), etc.\n\nYou can use the generator to create a spec to documentation a controller:\n\n```\nrails generate rspec:swagger PostsController\n```\n\nThat will create a `spec/requests/posts_spec.rb` file with the paths, operations\nand some default requests filled in. With the structure in place you should only\nneed to add `before` calls to create records and then update the `let`s to\nreturn the appropriate values.\n\n## Generate the JSON or YAML\n\nTo create the Swagger files use the rake task:\n\n```\nbundle exec rake swagger\n```\n\nNow you can use Swagger UI or the renderer of your choice to display the\nformatted documentation. [swagger_engine](https://github.com/batdevis/swagger_engine)\nworks pretty well and supports multiple documents.\n\n## RSpec DSL\n\nThe DSL follows the hierarchy of the Swagger Schema:\n\n- [Paths Object](http://swagger.io/specification/#paths-object-29)\n  - [Path Item Object](http://swagger.io/specification/#path-item-object-32)\n    - [Parameter Object](http://swagger.io/specification/#parameter-object-44)s (Optional)\n    - [Operation Object](http://swagger.io/specification/#operation-object-36)\n      - [Parameter Object](http://swagger.io/specification/#parameter-object-44)s (Optional)\n      - [Responses Object](http://swagger.io/specification/#responses-object-54)\n        - [Response Object](http://swagger.io/specification/#response-object-58)\n          - [Example Object](http://swagger.io/specification/#example-object-65)s (Optional)\n\nHere's an example of a spec with comments to for the corresponding objects:\n\n```rb\nrequire 'swagger_helper'\n\n# Paths Object\nRSpec.describe \"Posts Controller\", type: :request do\n  before { Post.new.save }\n\n  # Path Item Object\n  path '/posts' do\n    # Operation Object\n    operation \"GET\", summary: \"fetch list\" do\n      # Response Object\n      response 200, description: \"successful\"\n    end\n  end\n\n  # Path Object\n  path '/posts/{post_id}' do\n    # Parameter Object\n    parameter \"post_id\", { in: :path, type: :integer }\n    let(:post_id) { 1 }\n\n    # Operation Object\n    get summary: \"fetch item\" do\n      # Response Object\n      response 200, description: \"success\"\n    end\n  end\n\n  # Path Post Object\n  path '/posts/' do\n    # Parameter Object for content type could be defined like:\n    consumes 'application/json'\n    # or:\n    parameter 'Content-Type', { in: :header, type: :string }\n    let(:'Content-Type') { 'application/json' }\n    # one of them would be considered\n\n    # authorization token in the header:\n    parameter 'Authorization', { in: :header, type: :string }\n    let(:'Authorization') { 'Bearer <token-here>' }\n\n    # Parameter Object\n    parameter \"post_id\", { in: :path, type: :integer }\n    let(:post_id) { 1 }\n\n    # Parameter Object for Body\n    parameter \"body\", { in: :body, required: true, schema: {\n      type: :object,\n        properties: {\n          title: { type: :string },\n          author_email: { type: :email }\n        }\n    }\n    let (:body) {\n      { post:\n        { title: 'my example',\n          author_email: 'me@example.com' }\n        }\n      }\n    }\n\t# checkout http://swagger.io/specification/#parameter-object-44 for more information, options and details\n\n    # Operation Object\n    post summary: \"update an item\" do\n      # Response Object\n      response 200, description: \"success\"\n    end\n    # ...\nend\n```\n\n\n### Paths Object\nThese methods are available inside of an RSpec contexts with the `type: :request` tag.\n\n#### `path(template, attributes = {}, &block)`\nDefines a new Path Item.\n\nThe `attributes` parameter accepts:\n- `swagger_doc` a key in `RSpec.configuration.swagger_docs` that determines\n  which file the path belongs in.\n- `tags` with an array of tags that will be applied to the child Operations.\n\nYou can also provide a default file and tags by setting them on a parent RSpec\ncontext block:\n```rb\nRSpec.describe \"Sample Requests\", type: :request do\n  # The swagger_doc will be used as a default for the paths defined within the\n  # context block. Similarly, the tags will be merged with those set on paths\n  # defined within them.\n  context \"setting defaults\", swagger_doc: 'default_document.json', tags: [:context_tag] do\n    path '/posts', swagger_doc: 'overridden_document.yaml' tags: ['path_tag'] do\n      operation \"GET\", summary: \"fetch list\" do\n        produces 'application/json'\n        tags 'operation_tag'\n\n        response(200, { description: \"successful\" })\n      end\n    end\n  end\nend\n```\nThe `GET /posts` operation in this example will be saved in the `'overridden_document.yaml'`\nfile and tagged with `[\"context_tag\", \"path_tag\", \"operation_tag\"]`.\n\n\n### Path Item Object\nThese methods are available inside of blocks passed to the `path` method.\n\n#### `operation(method, attributes = {}, &block)`\nDefines a new Operation Object. The `method` is case insensitive.\n\nThe `attributes` parameter accepts:\n- `tags` with an array of tags. These will be merged with tags passed to the\n  Path Item or `tags` method inside the Operation's block.\n\n#### `delete(attributes = {}, &block)`\nAlias for `operation(:delete, attributes, block)`.\n\n#### `get(attributes = {}, &block)`\nAlias for `operation(:get, attributes, block)`.\n\n#### `head(attributes = {}, &block)`\nAlias for `operation(:head, attributes, block)`.\n\n#### `options(attributes = {}, &block)`\nAlias for `operation(:options, attributes, block)`.\n\n#### `patch(attributes = {}, &block)`\nAlias for `operation(:patch, attributes, block)`.\n\n#### `post(attributes = {}, &block)`\nAlias for `operation(:post, attributes, block)`.\n\n#### `put(attributes = {}, &block)`\nAlias for `operation(:put, attributes, block)`.\n\n\n### Parameters\nThese methods are available inside of blocks passed to the `path` or `operation` method.\n\n#### `parameter(name, attributes = {})`\nDefines a new Parameter Object. You can define the parameter inline:\n```rb\nparameter :callback_url, in: :query, type: :string, required: true\n```\n\nOr, via reference:\n```rb\nparameter ref: \"#/parameters/site_id\"\n```\n\nValues for the parameters are set using `let`:\n```rb\npost summary: \"create\" do\n  parameter \"body\", in: :body, schema: { foo: :bar }\n  let(:body) { { post: { title: 'asdf', body: \"blah\" } } }\n  # ...\nend\n```\n\n\n### Operation Object\nThese methods are available inside of blocks passed to the `operation` method.\n\n#### `consumes(*mime_types)`\nUse this to add MIME types that are specific to the operation. They will be merged\nwith the Swagger Object's consumes field.\n```rb\nconsumes 'application/json', 'application/xml'\n```\n\n#### `produces(*mime_types)`\nUse this to add MIME types that are specific to the operation. They will be merged\nwith the Swagger Object's consumes field.\n```rb\nproduces 'application/json', 'application/xml'\n```\n\n#### `response(status_code, attributes = {}, &block)`\nDefines a new Response Object. `status_code` must be between 1 and 599. `attributes`\nmust include a `description`.\n\n#### `tags(*tags)`\nAdds operation specific tags.\n```rb\ntags :accounts, :pets\n```\n\nYou can also provide tags through the RSpec context block and/or `path` method:\n```rb\nRSpec.describe \"Sample Requests\", type: :request, tags: [:context_tag] do\n  path '/posts', tags: ['path_tag'] do\n    operation \"GET\", summary: \"fetch list\" do\n      produces 'application/json'\n      tags 'operation_tag'\n\n      response(200, { description: \"successful\" })\n    end\n  end\nend\n```\nThese tags will be merged with those of the operation. The `GET /posts` operation\nin this example will be tagged with `[\"context_tag\", \"path_tag\", \"operation_tag\"]`.\n\n\n### Response Object\nThese methods are available inside of blocks passed to the `response` method.\n\n#### `capture_example()`\nThis method will capture the response body from the test and create an Example\nObject for the Response.\n\nYou could also set this in an RSpec context block if you'd like examples for\nmultiple operations or paths:\n```rb\ndescribe 'Connections', type: :request, capture_examples: true do\n  # Any requests in this block will capture example responses\nend\n```\n\n#### `schema(definition)`\nSets the schema field for the Response Object. You can define it inline:\n```rb\nschema(\n  type: :array,\n  items: {\n    type: :object,\n    properties: {\n      id: { type: :string },\n      name: { type: :string },\n    },\n  }\n)\n```\n\nOr, by reference:\n```rb\nschema ref: '#/definitions/Account'\n```\n"
zalando/connexion: >
  Connexion

  =========


  .. image:: https://badges.gitter.im/zalando/connexion.svg
     :alt: Join the chat at https://gitter.im/zalando/connexion
     :target: https://gitter.im/zalando/connexion?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge

  .. image:: https://travis-ci.org/zalando/connexion.svg?branch=master
     :target: https://travis-ci.org/zalando/connexion
     :alt: Travis CI build status

  .. image::
  https://coveralls.io/repos/zalando/connexion/badge.svg?branch=master
     :target: https://coveralls.io/r/zalando/connexion?branch=master
     :alt: Coveralls status

  .. image:: https://img.shields.io/pypi/v/connexion.svg
     :target: https://pypi.python.org/pypi/connexion
     :alt: Latest Version

  .. image:: https://img.shields.io/pypi/status/connexion.svg
     :target: https://pypi.python.org/pypi/connexion
     :alt: Development Status

  .. image:: https://img.shields.io/pypi/pyversions/connexion.svg
     :target: https://pypi.python.org/pypi/connexion
     :alt: Python Versions

  .. image:: https://img.shields.io/pypi/l/connexion.svg
     :target: https://github.com/zalando/connexion/blob/master/LICENSE
     :alt: License

  Connexion is a framework that automagically handles HTTP requests based on
  `OpenAPI Specification`_

  (formerly known as Swagger Spec) of your API described in `YAML format`_.
  Connexion allows you to

  write an OpenAPI specification, then maps the endpoints to your Python
  functions; this makes it

  unique, as many tools generate the specification based on your Python code.
  You can describe your

  REST API in as much detail as you want; then Connexion guarantees that it will
  work as you

  specified.


  We built Connexion this way in order to:


  - simplify the development process

  - confirm expectations about what your API will look like


  Connexion Features:

  -------------------


  - Validates requests and endpoint parameters automatically, based on
    your specification
  - Provides a Web Swagger Console UI so that the users of your API can
    have live documentation and even call your API's endpoints
    through it
  - Handles OAuth 2 token-based authentication

  - Supports API versioning

  - Supports automatic serialization of payloads. If your
    specification defines that an endpoint returns JSON, Connexion will
    automatically serialize the return value for you and set the right
    content type in the HTTP header.

  Why Connexion

  -------------


  With Connexion, you write the spec first. Connexion then calls your Python

  code, handling the mapping from the specification to the code. This

  incentivizes you to write the specification so that all of your

  developers can understand what your API does, even before you write a

  single line of code.


  If multiple teams depend on your APIs, you can use Connexion to easily send
  them the documentation of your API. This guarantees that your API will follow
  the specification that you wrote. This is a different process from that
  offered by frameworks such as Hug_, which generates a specification *after*
  you've written the code. Some disadvantages of generating specifications based
  on code is that they often end up lacking details or mix your documentation
  with the code logic of your application.


  Other Sources/Mentions

  ----------------------


  - Zalando Tech blog post `API First`_

  - Connexion listed on Swagger_'s website

  - Blog post: `Crafting effective Microservices in Python`_


  New in Connexion 2.0:

  ---------------------

  - App and Api options must be provided through the "options" argument
  (``old_style_options`` have been removed).

  - You must specify a form content-type in 'consumes' in order to consume form
  data.

  - The `Operation` interface has been formalized in the `AbstractOperation`
  class.

  - The `Operation` class has been renamed to `Swagger2Operation`.

  - Array parameter deserialization now follows the Swagger 2.0 spec more
  closely.
    In situations when a query parameter is passed multiple times, and the collectionFormat is either csv or pipes, the right-most value will be used.
    For example, `?q=1,2,3&q=4,5,6` will result in `q = [4, 5, 6]`.
    The old behavior is available by setting the collectionFormat to `multi`, or by importing `decorators.uri_parsing.AlwaysMultiURIParser` and passing `parser_class=AlwaysMultiURIParser` to your Api.
  - The spec validator library has changed from `swagger-spec-validator` to
  `openapi-spec-validator`.

  - Errors that previously raised `SwaggerValidationError` now raise the
  `InvalidSpecification` exception.
    All spec validation errors should be wrapped with `InvalidSpecification`.
  - Support for nullable/x-nullable, readOnly and writeOnly/x-writeOnly has been
  added to the standard json schema validator.

  - Custom validators can now be specified on api level (instead of app level).

  - Added support for basic authentication and apikey authentication

  - If unsupported security requirements are defined or
  ``x-tokenInfoFunc``/``x-tokenInfoUrl`` is missing, connexion now denies
  requests instead of allowing access without security-check.

  - Accessing ``connexion.request.user`` / ``flask.request.user`` is no longer
  supported, use ``connexion.context['user']`` instead


  How to Use

  ==========


  Prerequisites

  -------------


  Python 2.7 or Python 3.4+


  Installing It

  -------------


  In your command line, type:


  .. code-block:: bash

      $ pip install connexion

  Running It

  ----------


  Place your API YAML inside a folder in the root

  path of your application (e.g ``swagger/``). Then run:


  .. code-block:: python

      import connexion

      app = connexion.App(__name__, specification_dir='swagger/')
      app.add_api('my_api.yaml')
      app.run(port=8080)

  See the `Connexion Pet Store Example Application`_ for a sample

  specification.


  Now you're able to run and use Connexion!



  OAuth 2 Authentication and Authorization

  ----------------------------------------


  Connexion supports one of the three OAuth 2 handling methods. (See

  "TODO" below.) With Connexion, the API security definition **must**

  include a 'x-tokenInfoUrl' or 'x-tokenInfoFunc (or set ``TOKENINFO_URL``

  or ``TOKENINFO_FUNC`` env var respectively). 'x-tokenInfoUrl' must contain an

  URL to validate and get the `token information`_ and 'x-tokenInfoFunc must

  contain a reference to a function used to obtain the token info. When both
  'x-tokenInfoUrl'

  and 'x-tokenInfoFunc' are used, Connexion will prioritize the function method.
  Connexion expects to

  receive the OAuth token in the ``Authorization`` header field in the

  format described in `RFC 6750 <rfc6750_>`_ section 2.1. This aspect

  represents a significant difference from the usual OAuth flow.


  Dynamic Rendering of Your Specification

  ---------------------------------------


  Connexion uses Jinja2_ to allow specification parameterization through the
  ``arguments`` parameter. You can define specification arguments for the
  application either globally (via the ``connexion.App`` constructor) or for
  each specific API (via the ``connexion.App#add_api`` method):


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='swagger/',
                          arguments={'global': 'global_value'})
      app.add_api('my_api.yaml', arguments={'api_local': 'local_value'})
      app.run(port=8080)

  When a value is provided both globally and on the API, the API value will take
  precedence.


  Endpoint Routing to Your Python Views

  -------------------------------------


  Connexion uses the ``operationId`` from each `Operation Object`_ to

  identify which Python function should handle each URL.


  **Explicit Routing**:


  .. code-block:: yaml

      paths:
        /hello_world:
          post:
            operationId: myapp.api.hello_world

  If you provide this path in your specification POST requests to

  ``http://MYHOST/hello_world``, it will be handled by the function

  ``hello_world`` in the ``myapp.api`` module. Optionally, you can include

  ``x-swagger-router-controller`` (or ``x-openapi-router-controller``) in your

  operation definition, making ``operationId`` relative:


  .. code-block:: yaml

      paths:
        /hello_world:
          post:
            x-swagger-router-controller: myapp.api
            operationId: hello_world

  Keep in mind that Connexion follows how `HTTP methods work in Flask`_ and
  therefore HEAD requests will be handled by the ``operationId`` specified under
  GET in the specification. If both methods are supported,
  ``connexion.request.method`` can be used to determine which request was made.


  Automatic Routing

  -----------------


  To customize this behavior, Connexion can use alternative

  ``Resolvers``--for example, ``RestyResolver``. The ``RestyResolver``

  will compose an ``operationId`` based on the path and HTTP method of

  the endpoints in your specification:


  .. code-block:: python

      from connexion.resolver import RestyResolver

      app = connexion.App(__name__)
      app.add_api('swagger.yaml', resolver=RestyResolver('api'))

  .. code-block:: yaml

     paths:
       /:
         get:
            # Implied operationId: api.get
       /foo:
         get:
            # Implied operationId: api.foo.search
         post:
            # Implied operationId: api.foo.post

       '/foo/{id}':
         get:
            # Implied operationId: api.foo.get
         put:
            # Implied operationId: api.foo.put
         copy:
            # Implied operationId: api.foo.copy
         delete:
            # Implied operationId: api.foo.delete

  ``RestyResolver`` will give precedence to any ``operationId`` encountered in
  the specification. It will also respect

  ``x-router-controller``. You can import and extend
  ``connexion.resolver.Resolver`` to implement your own ``operationId``

  (and function) resolution algorithm.


  Automatic Parameter Handling

  ----------------------------


  Connexion automatically maps the parameters defined in your endpoint
  specification to arguments of your Python views as named parameters, and,
  whenever possible, with value casting. Simply define the endpoint's parameters
  with the same names as your views arguments.


  As an example, say you have an endpoint specified as:


  .. code-block:: yaml

      paths:
        /foo:
          get:
            operationId: api.foo_get
            parameters:
              - name: message
                description: Some message.
                in: query
                type: string
                required: true

  And the view function:


  .. code-block:: python

      # api.py file

      def foo_get(message):
          # do something
          return 'You send the message: {}'.format(message), 200

  In this example, Connexion automatically recognizes that your view

  function expects an argument named ``message`` and assigns the value

  of the endpoint parameter ``message`` to your view function.


  .. note:: In the OpenAPI 3.x.x spec, the requestBody does not have a name.
            By default it will be passed in as 'body'. You can optionally
            provide the x-body-name parameter in your requestBody schema
            to override the name of the parameter that will be passed to your
            handler function.

  .. warning:: When you define a parameter at your endpoint as *not* required,
  and
      this argument does not have default value in your Python view, you will get
      a "missing positional argument" exception whenever you call this endpoint
      WITHOUT the parameter. Provide a default value for a named argument or use
      ``**kwargs`` dict.

  Type casting

  ^^^^^^^^^^^^


  Whenever possible, Connexion will try to parse your argument values and

  do type casting to related Python native values. The current

  available type castings are:


  +--------------+-------------+

  | OpenAPI Type | Python Type |

  +==============+=============+

  | integer      | int         |

  +--------------+-------------+

  | string       | str         |

  +--------------+-------------+

  | number       | float       |

  +--------------+-------------+

  | boolean      | bool        |

  +--------------+-------------+

  | array        | list        |

  +--------------+-------------+

  | null         | None        |

  +--------------+-------------+

  | object       | dict        |

  +--------------+-------------+


  If you use the ``array`` type In the Swagger definition, you can define the

  ``collectionFormat`` so that it won't be recognized. Connexion currently

  supports collection formats "pipes" and "csv". The default format is "csv".


  Connexion is opinionated about how the URI is parsed for ``array`` types.

  The default behavior for query parameters that have been defined multiple

  times is to use the right-most value. For example, if you provide a URI with

  the the query string ``?letters=a,b,c&letters=d,e,f``, connexion will set

  ``letters = ['d', 'e', 'f']``.


  You can override this behavior by specifying the URI parser in the app or

  api options.


  .. code-block:: python

     from connexion.decorators.uri_parsing import Swagger2URIParser
     options = {'uri_parsing_class': AlwaysMultiURIParser}
     app = connexion.App(__name__, specification_dir='swagger/', options=options)

  You can implement your own URI parsing behavior by inheriting from

  ``connextion.decorators.uri_parsing.AbstractURIParser``.


  There are a handful of URI parsers included with connection.


  +----------------------+---------------------------------------------------------------------------+

  | OpenAPIURIParser     | This parser adheres to the OpenAPI 3.x.x spec, and
  uses the ``style``     |

  | default: OpenAPI 3.0 | parameter. Query parameters are parsed from left to
  right, so if a query  |

  |                      | parameter is defined twice, then the right-most
  definition will take      |

  |                      | precedence. For example, if you provided a URI with
  the query string      |

  |                      | ``?letters=a,b,c&letters=d,e,f``, and ``style:
  simple``, then connexion   |

  |                      | will set ``letters = ['d', 'e', 'f']``. For
  additional information see    |

  |                      | `OpenAPI 3.0 Style
  Values`_.                                              |

  +----------------------+---------------------------------------------------------------------------+

  | Swagger2URIParser    | This parser adheres to the Swagger 2.0 spec, and will
  only join together  |

  | default: OpenAPI 2.0 | multiple instance of the same query parameter if the
  ``collectionFormat`` |

  |                      | is set to ``multi``. Query parameters are parsed from
  left to right, so   |

  |                      | if a query parameter is defined twice, then the
  right-most definition     |

  |                      | wins. For example, if you provided a URI with the
  query string            |

  |                      | ``?letters=a,b,c&letters=d,e,f``, and
  ``collectionFormat: csv``, then     |

  |                      | connexion will set ``letters = ['d', 'e',
  'f']``                          |

  +----------------------+---------------------------------------------------------------------------+

  | FirstValueURIParser  | This parser behaves like the Swagger2URIParser,
  except that it prefers    |

  |                      | the first defined value. For example, if you provided
  a URI with the query|

  |                      | string ``?letters=a,b,c&letters=d,e,f`` and
  ``collectionFormat: csv``     |

  |                      | hen connexion will set ``letters = ['a', 'b',
  'c']``                      |

  +----------------------+---------------------------------------------------------------------------+

  | AlwaysMultiURIParser | This parser is backwards compatible with Connexion
  1.x. It joins together |

  |                      | multiple instances of the same query
  parameter.                           |

  +----------------------+---------------------------------------------------------------------------+



  Parameter validation

  ^^^^^^^^^^^^^^^^^^^^


  Connexion can apply strict parameter validation for query and form data

  parameters.  When this is enabled, requests that include parameters not
  defined

  in the swagger spec return a 400 error.  You can enable it when adding the API

  to your application:


  .. code-block:: python

      app.add_api('my_apy.yaml', strict_validation=True)

  API Versioning and basePath

  ---------------------------


  Setting a base path is useful for versioned APIs. An example of

  a base path would be the ``1.0`` in ``http://MYHOST/1.0/hello_world``.


  If you are using OpenAPI 3.x.x, you set your base URL path in the

  servers block of the specification. You can either specify a full

  URL, or just a relative path.


  .. code-block:: yaml

      servers:
        - url: https://MYHOST/1.0
          description: full url example
        - url: /1.0
          description: relative path example

      paths:
        ...

  If you are using OpenAPI 2.0, you can define a ``basePath`` on the top level

  of your OpenAPI 2.0 specification.


  .. code-block:: yaml

      basePath: /1.0

      paths:
        ...

  If you don't want to include the base path in your specification, you

  can provide it when adding the API to your application:


  .. code-block:: python

      app.add_api('my_api.yaml', base_path='/1.0')

  Swagger JSON

  ------------

  Connexion makes the OpenAPI/Swagger specification in JSON format

  available from either ``swagger.json`` (for OpenAPI 2.0) or

  ``openapi.json`` (for OpenAPI 3.x.x) at the base path of the API.

  For example, if your base path was ``1.0``, then your spec would be

  available at ``/1.0/openapi.json``.


  You can disable serving the spec JSON at the application level:


  .. code-block:: python

      options = {"serve_spec": False}
      app = connexion.App(__name__, specification_dir='openapi/',
                          options=options)
      app.add_api('my_api.yaml')

  You can also disable it at the API level:


  .. code-block:: python

      options = {"serve_spec": False}
      app = connexion.App(__name__, specification_dir='openapi/')
      app.add_api('my_api.yaml', options=options)

  HTTPS Support

  -------------


  When specifying HTTPS as the scheme in the API YAML file, all the URIs

  in the served Swagger UI are HTTPS endpoints. The problem: The default

  server that runs is a "normal" HTTP server. This means that the

  Swagger UI cannot be used to play with the API. What is the correct

  way to start a HTTPS server when using Connexion?


  One way, `described by Flask`_, looks like this:


  .. code-block:: python

     from OpenSSL import SSL
     context = SSL.Context(SSL.SSLv23_METHOD)
     context.use_privatekey_file('yourserver.key')
     context.use_certificate_file('yourserver.crt')

     app.run(host='127.0.0.1', port='12344',
             debug=False/True, ssl_context=context)

  However, Connexion doesn't provide an ssl_context parameter. This is

  because Flask doesn't, either--but it uses ``**kwargs`` to send the

  parameters to the underlying `werkzeug`_ server.


  The Swagger UI Console

  ----------------------


  The Swagger UI for an API is available through pip extras.

  You can install it with ``pip install connexion[swagger-ui]``.

  It will be served up at ``{base_path}/ui/`` where ``base_path`` is the

  base path of the API.


  You can disable the Swagger UI at the application level:


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='openapi/',
                          options={"swagger_ui": False})
      app.add_api('my_api.yaml')


  You can also disable it at the API level:


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='openapi/')
      app.add_api('my_api.yaml', options={"swagger_ui": False})

  If necessary, you can explicitly specify the path to the directory with

  swagger-ui to not use the connexion[swagger-ui] distro.

  In order to do this, you should specify the following option:


  .. code-block:: python

     options = {'swagger_path': '/path/to/swagger_ui/'}
     app = connexion.App(__name__, specification_dir='openapi/', options=options)

  If you wish to provide your own swagger-ui distro, note that connextion

  expects a jinja2 file called ``swagger_ui/index.j2`` in order to load the

  correct ``swagger.json`` by default. Your ``index.j2`` file can use the

  ``openapi_spec_url`` jinja variable for this purpose:


  .. code-block::

      const ui = SwaggerUIBundle({ url: "{{ openapi_spec_url }}"})

  Additionally, if you wish to use swagger-ui-3.x.x, it is also provided by

  installing connexion[swagger-ui], and can be enabled like this:


  .. code-block:: python

     from swagger_ui_bundle import swagger_ui_3_path
     options = {'swagger_path': swagger_ui_3_path}
     app = connexion.App(__name__, specification_dir='swagger/', options=options)


  Server Backend

  --------------


  By default Connexion uses the Flask_ server. For asynchronous

  applications, you can also use Tornado_ as the HTTP server. To do

  this, set your server to ``tornado``:


  .. code-block:: python

      import connexion

      app = connexion.App(__name__, specification_dir='swagger/')
      app.run(server='tornado', port=8080)

  You can use the Flask WSGI app with any WSGI container, e.g. `using

  Flask with uWSGI`_ (this is common):


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='swagger/')
      application = app.app # expose global WSGI application object

  You can use the ``aiohttp`` framework as server backend as well:


  .. code-block:: python

      import connexion

      app = connexion.AioHttpApp(__name__, specification_dir='swagger/')
      app.run(port=8080)

  .. note:: Also check aiohttp handler examples_.


  Set up and run the installation code:


  .. code-block:: bash

      $ sudo pip3 install uwsgi
      $ uwsgi --http :8080 -w app -p 16  # use 16 worker processes

  See the `uWSGI documentation`_ for more information.


  .. _using Flask with uWSGI:
  http://flask.pocoo.org/docs/latest/deploying/uwsgi/

  .. _uWSGI documentation: https://uwsgi-docs.readthedocs.org/

  .. _examples: https://docs.aiohttp.org/en/stable/web.html#handler



  Documentation

  =============

  Additional information is available at `Connexion's Documentation Page`_.


  Changes

  =======


  A full changelog is maintained on the `GitHub releases page`_.


  .. _GitHub releases page: https://github.com/zalando/connexion/releases


  Contributing to Connexion/TODOs

  ===============================


  We welcome your ideas, issues, and pull requests. Just follow the

  usual/standard GitHub practices.


  Unless you explicitly state otherwise in advance, any non trivial

  contribution intentionally submitted for inclusion in this project by you

  to the steward of this repository (Zalando SE, Berlin) shall be under the

  terms and conditions of Apache License 2.0 written below, without any

  additional copyright information, terms or conditions.


  TODOs

  -----



  If you'd like to become a more consistent contributor to Connexion, we'd love
  your help working on

  these we have a list of `issues where we are looking for contributions`_.


  Thanks

  ===================


  We'd like to thank all of Connexion's contributors for working on this

  project, and to Swagger/OpenAPI for their support.


  License

  ===================


  Copyright 2015 Zalando SE


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at http://www.apache.org/licenses/LICENSE-2.0.


  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.


  .. _Flask: http://flask.pocoo.org/

  .. _issues waffle board: https://waffle.io/zalando/connexion

  .. _API First:
  https://tech.zalando.com/blog/on-apis-and-the-zalando-api-guild/

  .. _Hug: https://github.com/timothycrosley/hug

  .. _Swagger: http://swagger.io/open-source-integrations/

  .. _Jinja2: http://jinja.pocoo.org/

  .. _rfc6750: https://tools.ietf.org/html/rfc6750

  .. _OpenAPI Specification: https://www.openapis.org/

  .. _OpenAPI 3.0 Style Values:
  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#style-values

  .. _Operation Object:
  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object

  .. _swager.spec.security_definition:
  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-definitions-object

  .. _swager.spec.security_requirement:
  https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-requirement-object

  .. _YAML format:
  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#format

  .. _token information: https://tools.ietf.org/html/rfc6749

  .. _Tornado: http://www.tornadoweb.org/en/stable/

  .. _Connexion Pet Store Example Application:
  https://github.com/hjacobs/connexion-example

  .. _described by Flask: http://flask.pocoo.org/snippets/111/

  .. _werkzeug: http://werkzeug.pocoo.org/

  .. _Connexion's Documentation Page:
  http://connexion.readthedocs.org/en/latest/

  .. _Crafting effective Microservices in Python:
  https://jobs.zalando.com/tech/blog/crafting-effective-microservices-in-python/

  .. _issues where we are looking for contributions:
  https://github.com/zalando/connexion/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22

  .. _HTTP Methods work in Flask:
  http://flask.pocoo.org/docs/1.0/quickstart/#http-methods
rochacbruno/flasgger: >+
  # Flasgger

  ## Easy Swagger UI for your Flask API


  [![Build
  Status](https://travis-ci.org/rochacbruno/flasgger.svg?branch=master)](https://travis-ci.org/rochacbruno/flasgger)

  [![Code
  Health](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)

  [![Coverage
  Status](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)

  [![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)
   <a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest"><img alt='Donate with Paypal' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>


  ![flasgger](docs/flasgger.png)


  Flasgger is a Flask extension to **extract
  [OpenAPI=Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)**
  from all Flask views registered in your API.


  Flasgger also comes with **[SwaggerUI](http://swagger.io/swagger-ui/)
  embedded** so you can access
  [http://localhost:5000/apidocs](localhost:5000/apidocs) and visualize and
  interact with your API resources.


  Flasgger also **provides validation** of the incoming data, using the same
  specification it can validates if the data received as as a POST, PUT, PATCH
  is valid against the schema defined using **YAML**, **Python dictionaries** or
  **Marshmallow Schemas**.


  Flasgger can work with simple function views or MethodViews using docstring as
  specification, or using `@swag_from` decorator to get specification from
  **YAML** or **dict** and also provides **SwaggerView** which can use
  **Marshmallow Schemas**  as specification.


  Flasgger is compatible with `Flask-RESTful` so you can use `Resources` and
  `swag` specifications together, take a look at [restful
  example.](examples/restful.py)


  Flasgger also supports `Marshmallow APISpec` as base template for
  specification, if you are using APISPec from Marshmallow take a look at
  [apispec example.](examples/apispec_example.py)


  # Top Contributors


  [![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)


  # Examples and demo app


  There are some [example applications](examples/) and you can also play with
  examples in [Flasgger demo app](http://flasgger.pythonanywhere.com/)


  > NOTE: all the examples apps are also test cases and run automatically in
  Travis CI to ensure quality and coverage.


  ## Docker


  The examples and demo app can also be built and run as a Docker
  image/container:


  ```

  docker build -t flasgger .

  docker run -it --rm -p 5000:5000 --name flasgger flasgger

  ```

  Then access the Flasgger demo app at http://localhost:5000 .


  # Installation


  > under your virtualenv do:


  Ensure you have latest setuptools

  ```

  pip install -U setuptools

  ```


  then


  ```

  pip install flasgger

  ```


  or (dev version)


  ```

  pip install https://github.com/rochacbruno/flasgger/tarball/master

  ```


  > NOTE: If you want to use **Marshmallow Schemas** you also need to run `pip
  install marshmallow apispec`


  # Getting started


  ## Using docstrings as specification


  Create a file called for example `colors.py`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      This is using docstrings for specifications.
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      definitions:
        Palette:
          type: object
          properties:
            palette_name:
              type: array
              items:
                $ref: '#/definitions/Color'
        Color:
          type: string
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            $ref: '#/definitions/Palette'
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  Now run:


  ```

  python colors.py

  ```


  And go to: [http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)


  You should get:


  ![colors](docs/colors.png)


  ## Using external YAML files


  Save a new file `colors.yml`


  ```yaml

  Example endpoint returning a list of colors by palette

  In this example the specification is taken from external YAML file

  ---

  parameters:
    - name: palette
      in: path
      type: string
      enum: ['all', 'rgb', 'cmyk']
      required: true
      default: all
  definitions:
    Palette:
      type: object
      properties:
        palette_name:
          type: array
          items:
            $ref: '#/definitions/Color'
    Color:
      type: string
  responses:
    200:
      description: A list of colors (may be filtered by palette)
      schema:
        $ref: '#/definitions/Palette'
      examples:
        rgb: ['red', 'green', 'blue']
  ```



  lets use the same example changing only the view function.


  ```python

  from flasgger import swag_from


  @app.route('/colors/<palette>/')

  @swag_from('colors.yml')

  def colors(palette):
      ...
  ```


  If you do not want to use the decorator you can use the docstring `file:`
  shortcut.


  ```python

  @app.route('/colors/<palette>/')

  def colors(palette):
      """
      file: colors.yml
      """
      ...
  ```



  ## Using dictionaries as raw specs


  Create a Python dictionary as:


  ```python

  specs_dict = {
    "parameters": [
      {
        "name": "palette",
        "in": "path",
        "type": "string",
        "enum": [
          "all",
          "rgb",
          "cmyk"
        ],
        "required": "true",
        "default": "all"
      }
    ],
    "definitions": {
      "Palette": {
        "type": "object",
        "properties": {
          "palette_name": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Color"
            }
          }
        }
      },
      "Color": {
        "type": "string"
      }
    },
    "responses": {
      "200": {
        "description": "A list of colors (may be filtered by palette)",
        "schema": {
          "$ref": "#/definitions/Palette"
        },
        "examples": {
          "rgb": [
            "red",
            "green",
            "blue"
          ]
        }
      }
    }
  }

  ```


  Now take the same function and use the dict in the place of YAML file.


  ```python

  @app.route('/colors/<palette>/')

  @swag_from(specs_dict)

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      In this example the specification is taken from specs_dict
      """
      ...
  ```


  ## Using Marshmallow Schemas


  > FIRST: `pip install marshmallow apispec`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, SwaggerView, Schema, fields



  class Color(Schema):
      name = fields.Str()

  class Palette(Schema):
      pallete_name = fields.Str()
      colors = fields.Nested(Color, many=True)

  class PaletteView(SwaggerView):
      parameters = [
          {
              "name": "palette",
              "in": "path",
              "type": "string",
              "enum": ["all", "rgb", "cmyk"],
              "required": True,
              "default": "all"
          }
      ]
      responses = {
          200: {
              "description": "A list of colors (may be filtered by palette)",
              "schema": Palette
          }
      }

      def get(self, palette):
          """
          Colors API using schema
          This example is using marshmallow schemas
          """
          all_colors = {
              'cmyk': ['cian', 'magenta', 'yellow', 'black'],
              'rgb': ['red', 'green', 'blue']
          }
          if palette == 'all':
              result = all_colors
          else:
              result = {palette: all_colors.get(palette)}
          return jsonify(result)

  app = Flask(__name__)

  swagger = Swagger(app)


  app.add_url_rule(
      '/colors/<palette>',
      view_func=PaletteView.as_view('colors'),
      methods=['GET']
  )


  app.run(debug=True)


  ```


  > NOTE: take a look at `examples/validation.py` for a more complete example.



  > NOTE: when catching arguments in path rule always use explicit types, bad:
  ``/api/<username>`` good: ``/api/<string:username>``



  ## Using **Flask RESTful** Resources


  Flasgger is compatible with Flask-RESTful you only need to install `pip
  install flask-restful` and then:


  ```python


  from flask import Flask

  from flasgger import Swagger

  from flask_restful import Api, Resource


  app = Flask(__name__)

  api = Api(app)

  swagger = Swagger(app)


  class Username(Resource):
      def get(self, username):
         """
         This examples uses FlaskRESTful Resource
         It works also with swag_from, schemas and spec_dict
         ---
         parameters:
           - in: path
             name: username
             type: string
             required: true
         responses:
           200:
             description: A single user item
             schema:
               id: User
               properties:
                 username:
                   type: string
                   description: The name of the user
                   default: Steven Wilson
          """
          return {'username': username}, 200


  api.add_resource(Username, '/username/<username>')


  app.run(debug=True)


  ```


  ## Auto-parsing external YAML docs and `MethodView`s


  Flasgger can be configured to auto-parse external YAM API docs.  [Set a
  `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16)
  in your `app.config['SWAGGER']` and Swagger will load API docs by looking in
  `doc_dir` for YAML files stored by endpoint-name and method-name.  For
  example, `'doc_dir': './examples/docs/'` and a file
  `./examples/docs/items/get.yml` will provide a Swagger doc for `ItemsView`
  method `get`.


  Additionally, when using **Flask RESTful** per above, by passing `parse=True`
  when constructing `Swagger`, Flasgger will use 
  `flask_restful.reqparse.RequestParser`, locate all `MethodView`s and parsed
  and validated data will be stored in `flask.request.parsed_data`.


  ## Handling multiple http methods and routes for a single function


  You can separate specifications by endpoint or methods


  ```python

  from flasgger.utils import swag_from


  @app.route('/api/<string:username>', endpoint='with_user_name',
  methods=['PUT', 'GET'])

  @app.route('/api/', endpoint='without_user_name')

  @swag_from('path/to/external_file.yml', endpoint='with_user_name')

  @swag_from('path/to/external_file_no_user_get.yml',
  endpoint='without_user_name', methods=['GET'])

  @swag_from('path/to/external_file_no_user_put.yml',
  endpoint='without_user_name', methods=['PUT'])

  def fromfile_decorated(username=None):
      if not username:
          return "No user!"
      return jsonify({'username': username})
  ```


  And the same can be achieved with multiple methods in a `MethodView` or
  `SwaggerView` by

  registering the `url_rule` many times. Take a look at `examples/example_app`



  # Use the same data to validate your API POST body.


  Setting `swag_from`'s _validation_ parameter to `True` will validate incoming
  data automatically:


  ```python

  from flasgger import swag_from


  @swag_from('defs.yml', validation=True)

  def post():
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Using `swagger.validate` annotation is also possible:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('UserSchema')

  def post():
      '''
      file: defs.yml
      '''
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Yet you can call `validate` manually:


  ```python

  from flasgger import swag_from, validate


  @swag_from('defs.yml')

  def post():
      validate(request.json, 'UserSchema', 'defs.yml')
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  It is also possible to define `validation=True` in `SwaggerView` and also use

  `specs_dict` for validation.


  Take a look at `examples/validation.py` for more information.


  All validation options can be found at
  http://json-schema.org/latest/json-schema-validation.html


  ### Custom validation


  By default Flasgger will use
  [python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)

  to perform validation.


  Custom validation functions are supported as long as they meet the
  requirements:
   - take two, and only two, positional arguments:
      - the data to be validated as the first; and
      - the schema to validate against as the second argument
   - raise any kind of exception when validation fails.

  Any return value is discarded.



  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_function=my_validation_function)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from('spec.yml', validation=True, validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml', validation_function=my_function)
  ```


  ### Validation Error handling


  By default Flasgger will handle validation errors by aborting the

  request with a 400 BAD REQUEST response with the error message.


  A custom validation error handling function can be provided to

  supersede default behavior as long as it meets the requirements:
   - take three, and only three, positional arguments:
      - the error raised as the first;
      - the data which failed validation as the second; and
      - the schema used in to validate as the third argument


  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_error_handler=my_handler)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from(
      'spec.yml', validation=True, validation_error_handler=my_handler)
  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_error_handler=my_handler)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml',
          validation_error_handler=my_handler)
  ```


  Examples of use of a custom validation error handler function can be

  found at [example
  validation_error_handler.py](examples/validation_error_handler.py)


  # Get defined schemas as python dictionaries


  You may wish to use schemas you defined in your Swagger specs as dictionaries

  without replicating the specification. For that you can use the `get_schema`

  method:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, swag_from


  app = Flask(__name__)

  swagger = Swagger(app)


  @swagger.validate('Product')

  def post():
      """
      post endpoint
      ---
      tags:
        - products
      parameters:
        - name: body
          in: body
          required: true
          schema:
            id: Product
            required:
              - name
            properties:
              name:
                type: string
                description: The product's name.
                default: "Guarana"
      responses:
        200:
          description: The product inserted in the database
          schema:
            $ref: '#/definitions/Product'
      """
      rv = db.insert(request.json)
      return jsonify(rv)

  ...


  product_schema = swagger.get_schema('product')

  ```


  This method returns a dictionary which contains the Flasgger schema id,

  all defined parameters and a list of required parameters.


  # HTML sanitizer


  By default Flasgger will try to sanitize the content in YAML definitions

  replacing every ```\n``` with ```<br>``` but you can change this behaviour

  setting another kind of sanitizer.


  ```python

  from flasgger import Swagger, NO_SANITIZER


  app =Flask()

  swagger = Swagger(app, sanitizer=NO_SANITIZER)

  ```


  You can write your own sanitizer


  ```python

  swagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))

  ```


  There is also a Markdown parser available, if you want to be able to render

  Markdown in your specs description use **MK_SANITIZER**



  # Swagger UI and templates


  You can override the `templates/flasgger/index.html` in your application and

  this template will be the `index.html` for SwaggerUI. Use
  `flasgger/ui2/templates/index.html`

  as base for your customization.


  Flasgger supports Swagger UI versions 2 and 3, The version 3 is still
  experimental but you

  can try setting `app.config['SWAGGER']['uiversion']`.


  ```python

  app = Flask(__name__)

  app.config['SWAGGER'] = {
      'title': 'My API',
      'uiversion': 3
  }

  swagger = Swagger(app)


  ```


  ## Externally loading Swagger UI and jQuery JS/CSS


  Starting with Flasgger 0.9.2 you can specify external URL locations for
  loading the JavaScript and CSS for the Swagger and jQuery libraries loaded in
  the Flasgger default templates.  If the configuration properties below are
  omitted, Flasgger will serve static versions it includes - these versions may
  be older than the current Swagger UI v2 or v3 releases.


  The following example loads Swagger UI and jQuery versions from unpkg.com:


  ```

  swagger_config = Swagger.DEFAULT_CONFIG

  swagger_config['swagger_ui_bundle_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'

  swagger_config['swagger_ui_standalone_preset_js'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'

  swagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'

  swagger_config['swagger_ui_css'] =
  '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'

  Swagger(app, config=swagger_config)

  ```


  # Initializing Flasgger with default data.


  You can start your Swagger spec with any default data providing a template:


  ```python

  template = {
    "swagger": "2.0",
    "info": {
      "title": "My API",
      "description": "API for my data",
      "contact": {
        "responsibleOrganization": "ME",
        "responsibleDeveloper": "Me",
        "email": "me@me.com",
        "url": "www.me.com",
      },
      "termsOfService": "http://me.com/terms",
      "version": "0.0.1"
    },
    "host": "mysite.com",  # overrides localhost:500
    "basePath": "/api",  # base bash for blueprint registration
    "schemes": [
      "http",
      "https"
    ],
    "operationId": "getmyData"
  }


  swagger = Swagger(app, template=template)


  ```


  And then the template is the default data unless some view changes it. You

  can also provide all your specs as template and have no views. Or views in

  external APP.


  ## Getting default data at runtime


  Sometimes you need to get some data at runtime depending on dynamic values ex:
  you want to check `request.is_secure` to decide if `schemes` will be `https`
  you can do that by using `LazyString`.


  ```py

  from flask import Flask

  from flasgger import, Swagger, LazyString, LazyJSONEncoder


  app = Flask(__init__)


  # Set the custom Encoder (Inherit it if you need to customize)

  app.json_encoder = LazyJSONEncoder



  template = dict(
      info={
          'title': LazyString(lambda: 'Lazy Title'),
          'version': LazyString(lambda: '99.9.9'),
          'description': LazyString(lambda: 'Hello Lazy World'),
          'termsOfService': LazyString(lambda: '/there_is_no_tos')
      },
      host=LazyString(lambda: request.host),
      schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],
      foo=LazyString(lambda: "Bar")
  )

  Swagger(app, template=template)


  ```


  The `LazyString` values will be evaluated only when `jsonify` encodes the
  value at runtime, so you have access to Flask `request, session, g, etc..` and
  also may want to access a database.


  ## Behind a reverse proxy


  Sometimes you're serving your swagger docs behind an reverse proxy (e.g.
  NGINX).  When following the [Flask
  guidance](http://flask.pocoo.org/snippets/35/),

  the swagger docs will load correctly, but the "Try it Out" button points to
  the wrong place.  This can be fixed with the following code:


  ```python

  from flask import Flask, request

  from flasgger import Swagger, LazyString, LazyJSONEncoder


  app = Flask(__name__)

  app.json_encoder = LazyJSONEncoder


  template = dict(swaggerUiPrefix=LazyString(lambda :
  request.environ.get('HTTP_X_SCRIPT_NAME', '')))

  swagger = Swagger(app, template=template)


  ``` 


  # Customize default configurations


  Custom configurations such as a different specs route or disabling Swagger UI
  can be provided to Flasgger:


  ```python

  swagger_config = {
      "headers": [
      ],
      "specs": [
          {
              "endpoint": 'apispec_1',
              "route": '/apispec_1.json',
              "rule_filter": lambda rule: True,  # all in
              "model_filter": lambda tag: True,  # all in
          }
      ],
      "static_url_path": "/flasgger_static",
      # "static_folder": "static",  # must be set by user
      "swagger_ui": True,
      "specs_route": "/apidocs/"
  }


  swagger = Swagger(app, config=swagger_config)


  ```


  ## Extracting Definitions


  Definitions can be extracted when `id` is found in spec, example:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            id: Palette
            type: object
            properties:
              palette_name:
                type: array
                items:
                  schema:
                    id: Color
                    type: string
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  In this example you do not have to pass `definitions` but need to add `id` to

  your schemas.

fotinakis/swagger-blocks: >
  # Swagger::Blocks


  [![Build
  Status](https://travis-ci.org/fotinakis/swagger-blocks.svg?branch=master)](https://travis-ci.org/fotinakis/swagger-blocks)

  [![Gem
  Version](https://badge.fury.io/rb/swagger-blocks.svg)](http://badge.fury.io/rb/swagger-blocks)


  Swagger::Blocks is a DSL for pure Ruby code blocks that can be turned into
  JSON.


  It helps you write API docs in the
  [Swagger](https://helloreverb.com/developers/swagger) style in Ruby and then
  automatically build JSON that is compatible with [Swagger
  UI](http://petstore.swagger.wordnik.com/#!/pet).


  ## Features


  * Supports **live updating** by design. Change code, refresh your API docs.

  * **Works with all Ruby web frameworks** including Rails, Sinatra, etc.

  * **100% support** for all features of the [Swagger
  2.0](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)
  spec.

  * Flexible—you can use Swagger::Blocks anywhere, split up blocks to fit your
  style preferences, etc. Since it's pure Ruby and serves definitions
  dynamically, you can easily use initializers/config objects to change values
  or even **show different APIs based on environment**.

  * 1:1 naming with the Swagger spec—block names and nesting should match almost
  exactly with the swagger spec, with rare exceptions to make things more
  convenient.


  ## Swagger UI demo


  http://petstore.swagger.io/


  ![swagger-sample](https://cloud.githubusercontent.com/assets/75300/5822830/4769805c-a08c-11e4-9efe-d57cf0f752e0.png)


  ## Installation


  Add this line to your application's Gemfile:

      gem 'swagger-blocks'

  Or install directly with `gem install swagger-blocks`.


  ## Swagger 2.0 example (Rails)


  This is a simplified example based on the objects in the Petstore [Swagger
  Sample App](http://petstore.swagger.wordnik.com/#!/pet). For a more complex
  and complete example, see the
  [swagger_v2_blocks_spec.rb](https://github.com/fotinakis/swagger-blocks/blob/master/spec/lib/swagger_v2_blocks_spec.rb)
  file.


  Also note that **Rails is not required**, you can use Swagger::Blocks in plain
  Ruby objects.


  ### PetsController


  ```Ruby

  class PetsController < ActionController::Base
    include Swagger::Blocks

    swagger_path '/pets/{id}' do
      operation :get do
        key :summary, 'Find Pet by ID'
        key :description, 'Returns a single pet if the user has access'
        key :operationId, 'findPetById'
        key :tags, [
          'pet'
        ]
        parameter do
          key :name, :id
          key :in, :path
          key :description, 'ID of pet to fetch'
          key :required, true
          key :type, :integer
          key :format, :int64
        end
        response 200 do
          key :description, 'pet response'
          schema do
            key :'$ref', :Pet
          end
        end
        response :default do
          key :description, 'unexpected error'
          schema do
            key :'$ref', :ErrorModel
          end
        end
      end
    end
    swagger_path '/pets' do
      operation :get do
        key :summary, 'All Pets'
        key :description, 'Returns all pets from the system that the user has access to'
        key :operationId, 'findPets'
        key :produces, [
          'application/json',
          'text/html',
        ]
        key :tags, [
          'pet'
        ]
        parameter do
          key :name, :tags
          key :in, :query
          key :description, 'tags to filter by'
          key :required, false
          key :type, :array
          items do
            key :type, :string
          end
          key :collectionFormat, :csv
        end
        parameter do
          key :name, :limit
          key :in, :query
          key :description, 'maximum number of results to return'
          key :required, false
          key :type, :integer
          key :format, :int32
        end
        response 200 do
          key :description, 'pet response'
          schema do
            key :type, :array
            items do
              key :'$ref', :Pet
            end
          end
        end
        response :default do
          key :description, 'unexpected error'
          schema do
            key :'$ref', :ErrorModel
          end
        end
      end
      operation :post do
        key :description, 'Creates a new pet in the store.  Duplicates are allowed'
        key :operationId, 'addPet'
        key :produces, [
          'application/json'
        ]
        key :tags, [
          'pet'
        ]
        parameter do
          key :name, :pet
          key :in, :body
          key :description, 'Pet to add to the store'
          key :required, true
          schema do
            key :'$ref', :PetInput
          end
        end
        response 200 do
          key :description, 'pet response'
          schema do
            key :'$ref', :Pet
          end
        end
        response :default do
          key :description, 'unexpected error'
          schema do
            key :'$ref', :ErrorModel
          end
        end
      end
    end

    # ...
  end

  ```


  ### Models


  #### Pet model


  ```Ruby

  class Pet < ActiveRecord::Base
    include Swagger::Blocks

    swagger_schema :Pet do
      key :required, [:id, :name]
      property :id do
        key :type, :integer
        key :format, :int64
      end
      property :name do
        key :type, :string
      end
      property :tag do
        key :type, :string
      end
    end

    swagger_schema :PetInput do
      allOf do
        schema do
          key :'$ref', :Pet
        end
        schema do
          key :required, [:name]
          property :id do
            key :type, :integer
            key :format, :int64
          end
        end
      end
    end

    # ...
  end

  ```


  #### Error model


  ``` Ruby

  class ErrorModel  # Notice, this is just a plain ruby object.
    include Swagger::Blocks

    swagger_schema :ErrorModel do
      key :required, [:code, :message]
      property :code do
        key :type, :integer
        key :format, :int32
      end
      property :message do
        key :type, :string
      end
    end
  end

  ```


  ### Docs controller


  To integrate these definitions with Swagger UI, we need a docs controller that
  can serve the JSON definitions.


  ```Ruby

  resources :apidocs, only: [:index]

  ```


  ```Ruby

  class ApidocsController < ActionController::Base
    include Swagger::Blocks

    swagger_root do
      key :swagger, '2.0'
      info do
        key :version, '1.0.0'
        key :title, 'Swagger Petstore'
        key :description, 'A sample API that uses a petstore as an example to ' \
                          'demonstrate features in the swagger-2.0 specification'
        key :termsOfService, 'http://helloreverb.com/terms/'
        contact do
          key :name, 'Wordnik API Team'
        end
        license do
          key :name, 'MIT'
        end
      end
      tag do
        key :name, 'pet'
        key :description, 'Pets operations'
        externalDocs do
          key :description, 'Find more info here'
          key :url, 'https://swagger.io'
        end
      end
      key :host, 'petstore.swagger.wordnik.com'
      key :basePath, '/api'
      key :consumes, ['application/json']
      key :produces, ['application/json']
    end

    # A list of all classes that have swagger_* declarations.
    SWAGGERED_CLASSES = [
      PetsController,
      Pet,
      ErrorModel,
      self,
    ].freeze

    def index
      render json: Swagger::Blocks.build_root_json(SWAGGERED_CLASSES)
    end
  end

  ```


  The special part of this controller is this line:


  ```Ruby

  render json: Swagger::Blocks.build_root_json(SWAGGERED_CLASSES)

  ```


  That is the only line necessary to build the full [root Swagger
  object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schema)
  JSON and all definitions underneath it. You simply pass in a list of all the
  "swaggered" classes in your app.


  If you want to include controllers outside the standard path just use the full
  class path including module names, like:


  ```Ruby

  SWAGGERED_CLASSES = [
    Api::V1::PetsController,
    self,
  ]

  ```


  If you are receiving a "swagger_root must be declared" error make sure you are
  including "self" in your SWAGGERED_CLASSES definition, as shown above.


  Now, simply point Swagger UI at `/apidocs` and everything should Just Work™.
  If you change any of the Swagger block definitions, you can simply refresh
  Swagger UI to see the changes.


  ### Security handling


  To support Swagger's definitions for API key auth or OAuth2, use
  `security_definition` in your `swagger_root`:


  ```Ruby
    swagger_root do
      key :swagger, '2.0'

      # ...

      security_definition :api_key do
        key :type, :apiKey
        key :name, :api_key
        key :in, :header
      end
      security_definition :petstore_auth do
        key :type, :oauth2
        key :authorizationUrl, 'http://swagger.io/api/oauth/dialog'
        key :flow, :implicit
        scopes do
          key 'write:pets', 'modify pets in your account'
          key 'read:pets', 'read your pets'
        end
      end
    end
  ```


  You can then apply [security requirement
  objects](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#securityRequirementObject)
  to the entire `swagger_root`, or to individual operations:


  ```Ruby
    swagger_path '/pets/{id}' do
      operation :get do

        # ...

        security do
          key :api_key, []
        end
        security do
          key :petstore_auth, ['write:pets', 'read:pets']
        end
      end
    end
  ```


  #### Nested complex objects


  The `key` block simply takes the value you give and puts it directly into the
  final JSON object. So, if you need to set more complex objects, you can just
  do:


  ```ruby
    key :foo, {some_complex: {nested_object: true}}
  ```


  #### Parameter referencing


  It is possible to reference parameters rather than explicitly define them in
  every action in which they are used.


  To define a reusable parameter, declare it within `swagger_root`

  To reference the parameter, call it within a `swagger_path` or `operation`
  node


  ```ruby

  swagger_root do
    key :swagger, '2.0'
    # ...
    parameter :species do
      key :name, :species
      key :description, 'Species of this pet'
    end
  end


  swagger_path '/pets/' do
    operation :post do
      parameter :species
      # ...
    end
  end

  ```


  #### Inline keys


  It is possible to omit numerous `key` calls using inline hash keys on any
  block.


  All three calls are equivalent:


  ```ruby

  parameter do
    key :paramType, :path
    key :name, :petId
    key :description, 'ID of pet that needs to be fetched'
    key :type, :string
  end

  ```


  ```ruby

  parameter paramType: :path, name: :petId do
    key :description, 'ID of pet that needs to be fetched'
    key :type, :string
  end

  ```


  ```ruby

  parameter paramType: :path,
            name: :petId,
            description: 'ID of pet that needs to be fetched',
            type: :string
  ```


  These inline keys can be used on any block, not just `parameter` blocks.


  #### Writing JSON to a file


  If you are not serving the JSON directly and need to write it to a file for
  some reason, you can easily use `build_root_json` for that as well:


  ```Ruby

  swagger_data = Swagger::Blocks.build_root_json(SWAGGERED_CLASSES)

  File.open('swagger.json', 'w') { |file| file.write(swagger_data.to_json) }

  ```


  #### Overriding attributes


  If certain attributes must be customized on-the-fly, you can merge a hash
  containing the customized values on the returned JSON. You can wrap
  ```build_root_json``` inside your own method:


  ```Ruby

  def build_and_override_root_json(overrides = {})
    Swagger::Blocks.build_root_json(SWAGGERED_CLASSES).merge(overrides)
  end

  ```


  #### Reducing boilerplate


  To create reusable parameters, please see [parameter
  referencing](#parameter-referencing).


  Most APIs have some common responses for 401s, 404s, etc. Rather than
  declaring these responses over and over, you can create a reusable module.


  ```ruby

  module SwaggerResponses
    module AuthenticationError
      def self.extended(base)
        base.response 401 do
          key :description, 'not authorized'
          schema do
            key :'$ref', :AuthenticationError
          end
        end
      end
    end
  end

  ```


  Now, you just need to extend it:


  ```ruby

  operation :post do
    extend SwaggerResponses::AuthenticationError
    # ...
    response 200 do
      # ...
    end
  end

  ```


  ## Reference


  See the
  [swagger_v2_blocks_spec.rb](https://github.com/fotinakis/swagger-blocks/blob/master/spec/lib/swagger_v2_blocks_spec.rb)
  for examples of more complex features and declarations possible.


  ### Swagger 1.2


  The old [Swagger
  1.2](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md) spec
  is not supported in swagger-blocks >= 2.0.0, but you may use
  [1.4.0](https://github.com/fotinakis/swagger-blocks/tree/v1.4.0).


  ## Contributing


  1. Fork it ( https://github.com/fotinakis/swagger-blocks/fork )

  2. Create your feature branch (`git checkout -b my-new-feature`)

  3. Commit your changes (`git commit -am 'Add some feature'`)

  4. Push to the branch (`git push origin my-new-feature`)

  5. Create a new Pull Request


  Throw a ★ on it! :)


  ## Filing issues


  **Please DO [file an
  issue](https://github.com/fotinakis/swagger-blocks/issues)**:


  - If you find a bug or some part of the Swagger 2.0 spec that swagger-blocks
  does not support.

  - To propose and discuss a code change before submitting a PR for it.

  - To talk about anything related specifically to swagger-blocks, not Swagger
  itself.


  **Please DO NOT file an issue**:


  - If you have a question about Swagger or Swagger UI. We simply cannot support
  all Swagger-related questions. Check out the http://swagger.io/community/ for
  help.


  ## Release notes


  * v2.0.1: Bugfix to allow nested arrays of `items`.

  * v2.0.0: Code cleanup, drop support for Swagger 1.2 spec.

  * v1.4.0: Allow parameters to be defined once in swagger_root and reused.

  * v1.3.4: Fix support for fully-qualified URIs in `$ref` values.

  * v1.3.3: Bugfix to allow `parameter` inside `swagger_path`.

  * v1.3.2: Bugfix to allow `property` inside `items` for rare extended schema
  uses.

  * v1.3.1: Bugfix to allow nested objects via `property` nested in `property`.

  * v1.3.0: Added support for condensed syntax via inline keys on every block.

  * v1.2.0: Improved support for `$ref` Path Item Object parameters.

  * v1.1.3: Rename tags directive to tag for consistency.

  * v1.1.2: Bugfix for security definition support.

  * v1.1.1: Bugfix for tags node support.

  * v1.1: Support for Swagger 2.0 spec.

  * v1.0.1: Make backwards-compatible with Ruby 1.9.3.

  * v1.0.0: Initial major release.


  ## Credits


  Thanks to [@ali-graham](https://github.com/ali-graham) for contributing
  support for Swagger 2.0.


  Original idea inspired by [@richhollis](https://github.com/richhollis/)'s
  [swagger-docs](https://github.com/richhollis/swagger-docs/) gem.
westfieldlabs/apivore: >
  [![Build
  Status](https://travis-ci.org/westfieldlabs/apivore.svg?branch=master)](https://travis-ci.org/westfieldlabs/apivore)


  [![Code
  Climate](https://codeclimate.com/github/westfieldlabs/apivore/badges/gpa.svg)](https://codeclimate.com/github/westfieldlabs/apivore)

  # Apivore


  Automatically tests your rails API against its OpenAPI (Swagger) description
  of end-points, models, and query parameters.


  Currently supports and validates against OpenAPI 2.0, (see
  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)


  ## Installation


  To use Apivore, add the following to your Gemfile:

      gem 'apivore'
  ***WARNING:*** If apivore is listed in the Gemfile _above_ rspec then some
  issues, specifically `NameError: uninitialized constant RSpec::Mocks`, may
  arise when trying to run specs.


  ## Usage


  Create a new request spec in spec/requests:

  ```ruby

  require 'spec_helper'


  RSpec.describe 'the API', type: :apivore, order: :defined do
    subject { Apivore::SwaggerChecker.instance_for('/swagger.json') }

    context 'has valid paths' do
      # tests go here
    end

    context 'and' do
      it 'tests all documented routes' do
        expect(subject).to validate_all_paths
      end
    end
  end

  ```

  using the path to your application's Swagger 2.0 documentation. The convention
  is `/swagger.json`.


  This will validate the json against the Swagger 2.0 schema and allow you to
  add tests for each documented endpoint combination of a path, method, and
  expected response.


  If your Swagger documentation contains a schema for the response model, the
  generated tests will test whether the response conforms to that model.


  For paths that take parameters, listed in the Swagger docs like
  `/deals/{id}.json`, values need to be passed to Apivore to substitute in to
  access the responses generated by your test data.


  This is accomplished by passing the params into the validates function.

  ```ruby

  context 'has valid paths' do
    let(:params) { { "id" => 1 } }
    specify do
      expect(subject).to validate(
        :get, '/deals/{id}.json', 200, params
      )
    end

    # or alternatively

    it { is_expected.to validate( :get, '/deals/{id}.json', 200, params ) }
  end

  ```

  A query string can be specified with the `_query_string` key as follows:


  ```ruby

  expect(subject).to validate(
    :get '/deals', 200, {"_query_string" => "title=Hello%20World&edition=3"}
  )

  ```

  Parameters in the query string are not validated or processed by Apivore in
  any way.


  Post parameters can be specified with the `_data` key as follows:


  ```ruby

  expect(subject).to validate(
    :post '/deals', 200, {"_data" => {'title' => 'Hello World'} }
  )

  ```


  HTTP headers can be specified via the `_headers` key:


  ```ruby

  expect(subject).to validate(
    :get '/deals', 200, {"_headers" => {'accept' => 'application/json'} }
  )

  ```


  Your Swagger.json can be validated against additional custom schemata, for
  example to enforce organisation API documentation standards, by using the
  following syntax:


  ```ruby

  it 'additionally conforms to a custom schema' do
    expect(subject).to conform_to("<your custom schema>.json")
  end

  ```

  We have included an example [here]
  (data/custom_schemata/westfield_api_standards.json). The file path to this
  custom schema is stored in `Apivore::CustomSchemaValidator::WF_SCHEMA`, if you
  wish to use it. 


  Run the tests as part of your normal rspec test suite, e.g., `rake
  spec:requests`


  ## Useful Resources


  * http://json-schema.org/

  * https://github.com/OAI/OpenAPI-Specification

  * https://github.com/ruby-json-schema/json-schema


  ## License


  Copyright 2014 Westfield Labs Corporation


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at


  http://www.apache.org/licenses/LICENSE-2.0


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.


  This project includes and makes use of the [OpenAPI (Swagger) 2.0 schema
  json](http://swagger.io/v2/schema.json) (Copyright 2016 The Linux Foundation.
  Released under the [Apache
  License](http://www.apache.org/licenses/LICENSE-2.0)) included here as
  `data/swagger_2.0_schema.json`


  It also includes a copy of http://json-schema.org/draft-04/schema, included as
  `data/draft04_schema.json`. These schemata are included to prevent network
  resource fetching and speed up validation times considerably.


  ## Contributors


  * Charles Horn (https://github.com/hornc)

  * Leon Dewey (https://github.com/leondewey)

  * Max Brosnahan (https://github.com/gingermusketeer)
slanatech/swagger-stats: >
  <p align="center">

  <img
  src="https://github.com/slanatech/swagger-stats/blob/master/screenshots/logo-c-ssm.png?raw=true"
  alt="swagger-stats"/>

  </p>


  # swagger-stats



  ####  [http://swaggerstats.io](http://swaggerstats.io) |
  [Documentation](http://swaggerstats.io/docs.html) | [API
  DOC](http://swaggerstats.io/apidoc.html) | [API
  SPEC](http://swaggerstats.io/sws-api-swagger.yaml)


  [![Build
  Status](https://travis-ci.org/slanatech/swagger-stats.svg?branch=master)](https://travis-ci.org/slanatech/swagger-stats)

  [![Dependencies](https://david-dm.org/slanatech/swagger-stats.svg)](https://david-dm.org/slanatech/swagger-stats)

  [![Coverage
  Status](https://coveralls.io/repos/github/slanatech/swagger-stats/badge.svg?branch=master&dummy)](https://coveralls.io/github/slanatech/swagger-stats?branch=master&dummy)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru)

  [![npm
  version](https://badge.fury.io/js/swagger-stats.svg)](https://badge.fury.io/js/swagger-stats)




  ## API Telemetry and APM


  > Trace API calls and Monitor API performance, health and usage statistics in
  Node.js Microservices


  **swagger-stats** traces REST API requests and responses in Node.js
  Microservices, and collects statistics per API Operation.

  **swagger-stats** detects API operations based on express routes. You may also
  provide [Swagger (Open API)
  specification](https://swagger.io/specification/), 

  and swagger-stats will match API requests with API Operations defined in
  swagger specification. 



  **swagger-stats** exposes statistics and metrics per API Operation, such as
  `GET /myapi/:parameter`, or `GET /pet/{petId}`
   

  ### Built-In API Telemetry 


  > **swagger-stats** provides built-in Telemetry UI, so you may enable
  **swagger-stats** in your app, and start monitoring immediately, with no
  infrastructure requirements.

  > Navigate to `http://<your app host:port>/swagger-stats/ui`   



  ![swagger-stats Built-In Monitoring](screenshots/ui0950.gif?raw=true)


         
  ### API Analytics with [Elasticsearch](https://www.elastic.co/) and
  [Kibana](https://www.elastic.co/products/kibana)


  > **swagger-stats** stores details about each request/response in
  [Elasticsearch](https://www.elastic.co/), so you may use
  [Kibana](https://www.elastic.co/products/kibana) 

  > to perform detailed analysis of API usage over time, build visualizations
  and dashboards



  ![swagger-stats Kibana Dashboard](screenshots/kibana.gif?raw=true)


  See `dashboards/elastic6` for swagger-stats Kibana visualizations and
  dashboards
   

  ### Monitoring and Alerting with [Prometheus](https://prometheus.io/) and
  [Grafana](https://grafana.com/)


  > **swagger-stats** exposes metrics in [Prometheus](https://prometheus.io/)
  format, so you may use [Prometheus](https://prometheus.io/) and
  [Grafana](https://grafana.com/) to setup API monitoring and alerting



  ![swagger-stats Prometheus
  Dashboard](screenshots/prometheus-dashboard-2-sm.png?raw=true)



  See `dashboards/prometheus` for swagger-stats Grafana dashboards 




  With statistics and metrics exposed by **swagger-stats** you may spot
  problematic API endpoints, see where most of errors happens, 

  catch long-running requests, analyze details of last errors, observe trends,
  setup alerting. 

   
  **swagger-stats** provides:

  * Metrics in [Prometheus](https://prometheus.io/) format, so you may use
  [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) to
  setup API monitoring and alerting

  * Storing details about each API Request/Response in
  [Elasticsearch](https://www.elastic.co/), so you may use
  [Kibana](https://www.elastic.co/products/kibana) to perform analysis of API
  usage over time, build visualizations and dashboards  

  * Built-in API Telemetry UI, so you may enable swagger-stats in your app, and
  start monitoring right away, with no additional tools required

  * Exposing collected statistics via API, including:

  * Counts of requests and responses(total and by response class), processing
  time (total/avg/max), 

  content length(total/avg/max) for requests and responses, rates for requests
  and errors. 

  This is baseline set of stats. 

  * Statistics by Request Method: baseline stats collected for each request
  method

  * Timeline: baseline stats collected for each 1 minute interval during last 60
  minutes. Timeline helps you to analyze trends.

  * Errors: count of responses per each error code, top "not found" resources,
  top "server error" resources

  * Last errors: request and response details for the last 100 errors (last 100
  error responses)

  * Longest requests: request and response details for top 100 requests that
  took longest time to process (time to send response)

  * Tracing: Request and Response details - method, URLs, parameters, request
  and response headers, addresses, start/stop times and processing duration,
  matched API Operation info

  * API Statistics: baseline stats and parameter stats per each API Operation.
  API operation detected based on express routes, and based on [Swagger (Open
  API) specification](https://swagger.io/specification/) 

  * CPU and Memory Usage of Node process



  ## How to Use 



  ### Install 


  ```

  npm install swagger-stats --save

  ```


  ### Enable swagger-stats middleware in your app


  ```javascript

  var swStats = require('swagger-stats');

  var apiSpec = require('swagger.json');

  app.use(swStats.getMiddleware({swaggerSpec:apiSpec}));

  ```


  See `/examples` for sample apps 


  ### Get Statistics with API



  ```

  $ curl http://<your app host:port>/swagger-stats/stats

  {
    "startts": 1501647865959,
    "all": {
      "requests": 7,
      "responses": 7,
      "errors": 3,
      "info": 0,
      "success": 3,
      "redirect": 1,
      "client_error": 2,
      "server_error": 1,
      "total_time": 510,
      "max_time": 502,
      "avg_time": 72.85714285714286,
      "total_req_clength": 0,
      "max_req_clength": 0,
      "avg_req_clength": 0,
      "total_res_clength": 692,
      "max_res_clength": 510,
      "avg_res_clength": 98,
      "req_rate": 1.0734549915657108,
      "err_rate": 0.4600521392424475
    },
    "sys": {
      "rss": 59768832,
      "heapTotal": 36700160,
      "heapUsed": 20081776,
      "external": 5291923,
      "cpu": 0
    },
    "name": "swagger-stats-testapp",
    "version": "0.90.1",
    "hostname": "hostname",
    "ip": "127.0.0.1"
  }

  ```


  Take a look at [Documentation](http://swaggerstats.io/docs.html#api) for more
  details on API and returned statistics.



  ### Get Prometheus Metrics 



  ```

  $ curl http://<your app host:port>/swagger-stats/metrics

  # HELP api_all_request_total The total number of all API requests received

  # TYPE api_all_request_total counter

  api_all_request_total 88715

  # HELP api_all_success_total The total number of all API requests with success
  response

  # TYPE api_all_success_total counter

  api_all_success_total 49051

  # HELP api_all_errors_total The total number of all API requests with error
  response

  # TYPE api_all_errors_total counter

  api_all_errors_total 32152

  # HELP api_all_client_error_total The total number of all API requests with
  client error response

  # TYPE api_all_client_error_total counter

  api_all_client_error_total 22986


  . . . . . . . . . .  


  ```



  ### Embedded Monitoring User Interface 


  Swagger-stats comes with built-in User Interface. Navigate to
  `/swagger-stats/ui` in your app to start monitoring right away
     
  ```

  http://<your app host:port>/swagger-stats/ui

  ```


  ##### Key metrics


  ![swagger-stats bundled User Interface](screenshots/metrics.png?raw=true)


  ##### Timeline


  ![swagger-stats bundled User Interface](screenshots/timeline.png?raw=true)


  ##### Request and error rates 


  ![swagger-stats bundled User Interface](screenshots/rates.png?raw=true)


  ##### API Operations 


  ![swagger-stats bundled User Interface](screenshots/apitable.png?raw=true)


  ##### Stats By Method


  ![swagger-stats bundled User Interface](screenshots/methods.png?raw=true)



  ## Updates 


  #### v0.95.7


  * [bug] Fixes error in body stringification
  [#59](https://github.com/slanatech/swagger-stats/issues/59),
  [#60](https://github.com/slanatech/swagger-stats/pull/60)


  * [bug] Cannot upload to elk and Built-In API Telemetry
  [#46](https://github.com/slanatech/swagger-stats/issues/46)


  * [feature] Option `elasticsearchIndexPrefix` 
  [#45](https://github.com/slanatech/swagger-stats/issues/45),[#47](https://github.com/slanatech/swagger-stats/issues/47)




  #### v0.95.6


  * [bug] Last Errors and Errors tab no populated using FeatherJS
  [#42](https://github.com/slanatech/swagger-stats/issues/42)


  * [bug] Request Content Length null or undefined
  [#40](https://github.com/slanatech/swagger-stats/issues/40)



  #### v0.95.5


  * [feature] Allow onAuthenticate to be asynchronous
  [#31](https://github.com/slanatech/swagger-stats/issues/31)  


  * [feature] Prevent tracking of specific routes
  [#36](https://github.com/slanatech/swagger-stats/issues/36)  


  * [feature] Support for extracting request body
  [#38](https://github.com/slanatech/swagger-stats/issues/38)   

  Thanks to [DavisJaunzems](https://github.com/DavisJaunzems)!



  #### v0.95.0


  * [feature] Elasticsearch support
  [#12](https://github.com/slanatech/swagger-stats/issues/12)  


  *swagger-stats* now supports storing details about each API Request/Response
  in [Elasticsearch](https://www.elastic.co/), so you may use
  [Kibana](https://www.elastic.co/products/kibana) to perform analysis of API
  usage over time, build visualizations and dashboards.

  Example Kibana dashboards provided in `dashboards/elastic6`



  #### v0.94.0


  * [feature] Apdex score
  [#10](https://github.com/slanatech/swagger-stats/issues/10)  


  * [feature] Support Authentication for /stats and /metrics
  [#14](https://github.com/slanatech/swagger-stats/issues/14)


  * [feature] Add label "code" to Prometheus histogram metrics
  [#21](https://github.com/slanatech/swagger-stats/issues/21)


  See updated dashboard at [Grafana
  Dashboards](https://grafana.com/dashboards/3091) 




  #### v0.93.1


  * [bug] Can't start on node v7.10.1, Mac Os 10.12.6
  [#22](https://github.com/slanatech/swagger-stats/issues/22)  


  #### v0.93.0


  * [feature] Support providing Prometheus metrics via
  [prom-client](https://www.npmjs.com/package/prom-client) library
  [#20](https://github.com/slanatech/swagger-stats/issues/20)  



  #### v0.92.0


  * [feature] OnResponseFinish hook: pass request/response record to callback so
  app can post proceses it add it to the log
  [#5](https://github.com/slanatech/swagger-stats/issues/5)  



  #### v0.91.0


  * [feature] Option to specify alternative URI path for ui,stats and metrics 
  [#17](https://github.com/slanatech/swagger-stats/issues/17)


  ```javascript

  app.use(swStats.getMiddleware({
     uriPath: '/myservice',
     swaggerSpec:swaggerSpec
  }));

  ```

  ```

  $ curl http://<your app host:port>/myservice/stats

  ```


  #### v0.90.3


  * [feature] Added new chart to API Operation Page
  [#16](https://github.com/slanatech/swagger-stats/issues/16)                                                   
      - handle time histogram
      - request size histogram
      - response size histogram
      - response codes counts  

  #### v0.90.2


  * [feature] Added [Prometheus](https://prometheus.io/) metrics and
  [Grafana](https://grafana.com/) dashboards
  [#9](https://github.com/slanatech/swagger-stats/issues/9)
    

  #### v0.90.1


  * [feature] Added CPU and Memory Usage Stats and monitoring in UI
  [#8](https://github.com/slanatech/swagger-stats/issues/8)  



  ## Enhancements and Bug Reports


  If you find a bug, or have an enhancement in mind please post
  [issues](https://github.com/slanatech/swagger-stats/issues) on GitHub.


  ## License
   
  MIT
notonthehighstreet/svelte: "# Svelte\n\nSvelte is a Swagger-to-Ruby object mapper.\n\nIt reads a Swagger specification file in JSON, and automatically generates Resource Classes with static methods to represent the various HTTP endpoints.\n\n[![Build Status](https://secure.travis-ci.org/notonthehighstreet/svelte.png?branch=master)](http://travis-ci.org/notonthehighstreet/svelte)\n[![Code Climate](https://codeclimate.com/github/notonthehighstreet/svelte/badges/gpa.svg)](https://codeclimate.com/github/notonthehighstreet/svelte)\n\n## Installation\n\nAdd this line to your application's Gemfile:\n\n```ruby\ngem \"svelte\"\n```\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install svelte\n\n## Usage\n\nPoint a service at an actual API spec.\n\nYou may pass in a URL pointing to a Swagger spec or the JSON directly:\n\n```ruby\nservice = Svelte::Service.create(url: \"http://path/to/swagger/spec/resource.json\", module_name: 'PetStore')\nservice = Svelte::Service.create(json: \"{ <JSON here> }\", module_name: 'PetStore')\n```\n\nThis will build a dynamically generated client on top of `Svelte::Service::PetStore`.\n\nThe structure of the new module will be based on the API paths and their respective operations.\nLet's look at an example. Using the complete PetStore spec, we can find the following path:\n\n```json\n\"/pet/findByStatus\": {\n  \"get\": {\n    \"tags\": [\n      \"pet\"\n    ],\n    \"summary\": \"Finds Pets by status\",\n    \"description\": \"Multiple status values can be provided with comma separated strings\",\n    \"operationId\": \"findPetsByStatus\",\n    \"produces\": [\n      \"application/xml\",\n      \"application/json\"\n    ],\n    \"parameters\": [\n      {\n        \"name\": \"status\",\n        \"in\": \"query\",\n        \"description\": \"Status values that need to be considered for filter\",\n        \"required\": true,\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"available\",\n            \"pending\",\n            \"sold\"\n          ],\n          \"default\": \"available\"\n        },\n        \"collectionFormat\": \"multi\"\n      }\n    ],\n    \"responses\": {\n      \"200\": {\n        \"description\": \"successful operation\",\n        \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Pet\"\n          }\n        }\n      },\n      \"400\": {\n        \"description\": \"Invalid status value\"\n      }\n    },\n    \"security\": [\n      {\n        \"petstore_auth\": [\n          \"write:pets\",\n          \"read:pets\"\n        ]\n      }\n    ]\n  }\n}\n```\n\nThe path contains two parts: `pet` and `findByStatus`. This will generate\nthe following hierarchy in the new module:\n\n```ruby\nSvelte::Service::PetStore::Pet::FindByStatus\n```\n\nWe can see the path has one `get` operation. A method will be generated in the\n`FindByStatus` module based on the `operationId` Swagger attribute, which will\nhave the following signature:\n\n```ruby\nSvelte::Service::PetStore::Pet::FindByStatus.find_pets_by_status(\n  request_payload,\n  request_options = {}\n)\n```\n\nWhere `request_payload` is a `Hash` representing the parameters of the operation\nand `request_options`, defaulting to an empty `Hash`, will be a `Hash` of\noptions to pass to the request.\n\nIn our case, the parameters would look like this:\n\n```ruby\nrequest_parameters = {\n  status: ['available', 'pending']\n}\n```\n\n### Responses\n\nSvelte will return a [`Faraday::Request`](http://www.rubydoc.info/gems/faraday/0.9.1/Faraday/Response) object as a response to a call.\n\n### Models\n\nSvelte also provides generators for Swagger models. They allow an easy way\nto programmatically create and validate requests.\nThey also provide an `as_json` that will generate a valid json body for\n a given request.\n\nConsider the definitions key of this Swagger model:\n\n```json\n{\n  \"definitions\": {\n    \"MoneyView\": {\n      \"id\": \"MoneyView\",\n      \"description\": \"\",\n      \"required\": [\n        \"amount\",\n        \"currencyCode\"\n      ],\n      \"extends\": \"\",\n      \"properties\": {\n        \"amount\": {\n          \"type\": \"number\",\n          \"format\": \"double\",\n          \"description\": \"Decimal amount\"\n        },\n        \"currencyCode\": {\n          \"type\": \"string\",\n          \"description\": \"ISO 3 letter currency code\"\n        }\n      }\n    }\n  }\n}\n```\n\nIn Svelte you can generate the ruby mapper like this:\n\n```ruby\nclass MoneyRequest\n  extend Svelte::ModelFactory\n  define_models_from_file(path_to_models_json_file)\nend\n\nview = MoneyRequest::MoneyView.new\nview.valid? # false\nview.validate # {\"currencyCode\"=>\"Invalid parameter: Missing required parameter\", \"amount\"=>\"Invalid parameter: Missing required parameter\"}\nview.currencyCode = \"GBP\"\nview.amount = 40.00\nview.valid? # true\nview.as_json # {:currencyCode=>\"GBP\", :amount=>40.0}\n```\n\n### Options\n\nYou can specify a timeout option on a per request basis. If the request times out a `Svelte::TimeoutError` exception\nwill be raised.\n\n```ruby\nbegin\n  Svelte::Service::PetStore::Pet::FindByStatus.find_pets_by_status(request.as_json, { timeout: 10 })\nrescue Svelte::TimeoutError => e\n  handle_timeout_error(e)\nend\n```\n\n##\_Limitations\n\nSvelte is still a work in progress gem and it lacks some features that will be\nimplemented in the future. Feel free to request or comment on what you'd like\nto see supported. Here is a non exhaustive list of the pitfalls we've identified\nso far:\n\n* Supports `application/json` request and response types only\n* API calls return a raw [Faraday::Response] objects. We'll support returning\n  dynamically generated model responses based on the Swagger spec response\n  schema\n* Request parameter validation is only done for url based parameters.\n    It'd be possible to add validations to all parameters of the request.\n    In fact the `ModelFactory` already provides that functionality, but it\n    requires the client to call `valid?` on the requests to perform the\n    validation. This should happen automatically\n\n## Development\n\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run `bin/console` for an interactive prompt that will allow you to experiment.\n\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release` to create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\n\n## Contributing\n\n1. Fork it ( https://github.com/notonthehighstreet/svelte/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n"
domaindrivendev/Swashbuckle.AspNetCore: "| :mega: Important for anyone upgrading major versions! |\n|--------------|\n|* If you're upgrading from 2.x to 3.x, there's a couple of breaking changes to be aware of. See the [release notes](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/releases/tag/v3.0.0) for details<br />* If you're upgrading from 3.x to 4.x, there's more breaking changes to be aware of. See those [release notes here](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/releases/tag/v4.0.0)|\n\nSwashbuckle.AspNetCore\n=========\n\n[![Build status](https://ci.appveyor.com/api/projects/status/xpsk2cj1xn12c0r7/branch/master?svg=true)](https://ci.appveyor.com/project/domaindrivendev/ahoy/branch/master)\n\n[Swagger](http://swagger.io) tooling for API's built with ASP.NET Core. Generate beautiful API documentation, including a UI to explore and test operations, directly from your routes, controllers and models.\n\nIn addition to its [Swagger](http://swagger.io/specification/) generator, Swashbuckle also provides an embedded version of the awesome [swagger-ui](https://github.com/swagger-api/swagger-ui) that's powered by the generated Swagger JSON. This means you can complement your API with living documentation that's always in sync with the latest code. Best of all, it requires minimal coding and maintenance, allowing you to focus on building an awesome API.\n\nAnd that's not all ...\n\nOnce you have an API that can describe itself in Swagger, you've opened the treasure chest of Swagger-based tools including a client generator that can be targeted to a wide range of popular platforms. See [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more details.\n\n# Compatibility #\n\n|Swashbuckle Version|ASP.NET Core|Swagger / OpenAPI Spec.|swagger-ui|ReDoc UI|\n|----------|----------|----------|----------|----------|\n|[master](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/tree/master/README-v5.md)|>=2.0.0|2.0, 3.0|3.20.9|2.0.0-rc.2|\n|[5.0.0-beta](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/tree/master/README-v5.md)|>=2.0.0|2.0, 3.0|3.19.5|1.22.2|\n|[4.0.0](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/tree/v4.0.0)|>=2.0.0|2.0|3.19.5|1.22.2|\n|[3.0.0](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/tree/v3.0.0)|>=1.0.4|2.0|3.17.1|1.20.0|\n|[2.5.0](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/tree/v2.5.0)|>=1.0.4|2.0|3.16.0|1.20.0|\n\n# Getting Started #\n\n1. Install the standard Nuget package into your ASP.NET Core application.\n\n    ```\n    Package Manager : Install-Package Swashbuckle.AspNetCore\n    CLI : dotnet add package Swashbuckle.AspNetCore\n    ```\n\n2. In the _ConfigureServices_ method of _Startup.cs_, register the Swagger generator, defining one or more Swagger documents.\n\n    ```csharp\n    using Swashbuckle.AspNetCore.Swagger;\n    \n    services.AddMvc();\n\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\", new Info { Title = \"My API\", Version = \"v1\" });\n    });\n    ```\n\n3. Ensure your API actions and non-route parameters are decorated with explicit \"Http\" and \"From\" bindings.\n\n    ```csharp\n    [HttpPost]\n    public void CreateProduct([FromBody]Product product)\n    ...\n\n    [HttpGet]\n    public IEnumerable<Product> SearchProducts([FromQuery]string keywords)\n    ...\n    ```\n\n    _NOTE: If you omit the explicit parameter bindings, the generator will describe them as \"query\" params by default._\n\n4. In the _Configure_ method, insert middleware to expose the generated Swagger as JSON endpoint(s)\n\n    ```csharp\n    app.UseSwagger();\n    ```\n\n    _At this point, you can spin up your application and view the generated Swagger JSON at \"/swagger/v1/swagger.json.\"_\n\n5. Optionally insert the swagger-ui middleware if you want to expose interactive documentation, specifying the Swagger JSON endpoint(s) to power it from.\n\n    ```csharp\n    app.UseSwaggerUI(c =>\n    {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\");\n    });\n    ```\n\n    _Now you can restart your application and check out the auto-generated, interactive docs at \"/swagger\"._\n\n# Swashbuckle, ApiExplorer, and Routing #\n\nSwashbuckle relies heavily on _ApiExplorer_, the API metadata layer that ships with ASP.NET Core. If you're using the _AddMvc_ helper to bootstrap the MVC stack, then _ApiExplorer_ will be automatically registered and SB will work without issue. However, if you're using _AddMvcCore_ for a more pared-down MVC stack, you'll need to explicitly add the Api Explorer service:\n\n```csharp\nservices.AddMvcCore()\n    .AddApiExplorer();\n```\n\nAdditionally, if you are using _[conventional routing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing#conventional-routing)_ (as opposed to attribute routing), any controllers and the actions on those controllers that use conventional routing will not be represented in ApiExplorer, which means Swashbuckle won't be able to find those controllers and generate Swagger documents from them. For instance:\n\n```csharp\napp.UseMvc(routes =>\n{\n   // SwaggerGen won't find controllers that are routed via this technique.\n   routes.MapRoute(\"default\", \"{controller=Home}/{action=Index}/{id?}\");\n});\n```\n\nYou **must** use attribute routing for any controllers that you want represented in your Swagger document(s):\n\n```csharp\n[Route(\"example\")]\npublic class ExampleController : Controller\n{\n    [HttpGet(\"\")]\n    public IActionResult DoStuff() { /**/ }\n}\n```\nRefer to the [routing documentation](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing) for more information.\n\n# Components #\n\nSwashbuckle consists of multiple components that can be used together or individually dependening on your needs. At its core, there's a Swagger object model, a Swagger generator and a packaged version of the [swagger-ui](https://github.com/swagger-api/swagger-ui). These 3 packages can be installed with the `Swashbuckle.AspNetCore` \"metapackage\" and will work together seamlessly (see [Getting Started](#getting-started)) to provide beautiful API docs that are automatically generated from your code.\n\nAdditionally, there's add-on packages (CLI tools, [an alternate UI](https://github.com/Rebilly/ReDoc) etc.) that you can optinally install and configure as needed.\n\n## \"Core\" Packages (i.e. installed via Swashbuckle.AspNetCore)\n\n|Package|Description|\n|---------|-----------|\n|Swashbuckle.AspNetCore.Swagger|Exposes _SwaggerDocument_ objects as a JSON API. It expects an implementation of _ISwaggerProvider_ to be registered which it queries to retrieve Swagger document(s) before returning as serialized JSON|\n|Swashbuckle.AspNetCore.SwaggerGen|Injects an implementation of _ISwaggerProvider_ that can be used by the above component. This particular implementation automatically generates _SwaggerDocument_(s) from your routes, controllers and models|\n|Swashbuckle.AspNetCore.SwaggerUI|Exposes an embedded version of the swagger-ui. You specify the API endpoints where it can obtain Swagger JSON and it uses them to power interactive docs for your API|\n\n## Additional Packages ##\n\n|Package|Description|\n|---------|-----------|\n|Swashbuckle.AspNetCore.Annotations|Includes a set of custom attributes that can be applied to controllers, actions and models to enrich the generated Swagger|\n|Swashbuckle.AspNetCore.Cli (Beta)|Provides a CLI interface for retrieving Swagger directly from a startup assembly, and writing to file|\n|Swashbuckle.AspNetCore.ReDoc|Exposes an embedded version of the ReDoc UI (an alternative to swagger-ui)|\n\n## Community Packages ##\n\nThese packages are provided by the open-source community.\n\n|Package|Description|\n|---------|-----------|\n|[Swashbuckle.AspNetCore.Filters](https://github.com/mattfrear/Swashbuckle.AspNetCore.Filters)| Some useful Swashbuckle filters which add additional documentation, e.g. request and response examples, a file upload button, etc. See its Readme for more details |\n|[MicroElements.Swashbuckle.FluentValidation](https://github.com/micro-elements/MicroElements.Swashbuckle.FluentValidation)| Use FluentValidation rules instead of ComponentModel attributes to augment generated Swagger Schemas |\n\n# Configuration & Customization #\n\nThe steps described above will get you up and running with minimal setup. However, Swashbuckle offers a lot of flexibility to customize as you see fit. Check out the table below for the full list of options:\n\n* [Swashbuckle.AspNetCore.Swagger](#swashbuckleaspnetcoreswagger)\n\n    * [Change the Path for Swagger JSON Endpoints](#change-the-path-for-swagger-json-endpoints)\n    * [Modify Swagger with Request Context](#modify-swagger-with-request-context)\n    * [Pretty Print Swagger JSON](#pretty-print-swagger-json)\n\n* [Swashbuckle.AspNetCore.SwaggerGen](#swashbuckleaspnetcoreswaggergen)\n\n    * [Assign Explicit OperationIds](#assign-explicit-operationids)\n    * [List Operations Responses](#list-operation-responses)\n    * [Flag Required Parameters and Schema Properties](#flag-required-parameters-and-schema-properties)\n    * [Include Descriptions from XML Comments](#include-descriptions-from-xml-comments)\n    * [Provide Global API Metadata](#provide-global-api-metadata)\n    * [Generate Multiple Swagger Documents](#generate-multiple-swagger-documents)\n    * [Omit Obsolete Operations and/or Schema Properties](#omit-obsolete-operations-andor-schema-properties)\n    * [Omit Arbitrary Operations](#omit-arbitrary-operations)\n    * [Customize Operation Tags (e.g. for UI Grouping)](#customize-operation-tags-eg-for-ui-grouping)\n    * [Change Operation Sort Order (e.g. for UI Sorting)](#change-operation-sort-order-eg-for-ui-sorting)\n    * [Customize Schema Id's](#customize-schema-ids)\n    * [Customize Schema for Enum Types](#customize-schema-for-enum-types)\n    * [Override Schema for Specific Types](#override-schema-for-specific-types)\n    * [Extend Generator with Operation, Schema & Document Filters](#extend-generator-with-operation-schema--document-filters)\n    * [Add Security Definitions and Requirements](#add-security-definitions-and-requirements)\n\n* [Swashbuckle.AspNetCore.SwaggerUI](#swashbuckleaspnetcoreswaggerui)\n    * [Change Relative Path to the UI](#change-relative-path-to-the-ui)\n    * [Change Document Title](#change-document-title)\n    * [List Multiple Swagger Documents](#list-multiple-swagger-documents)\n    * [Apply swagger-ui Parameters](#apply-swagger-ui-parameters)\n    * [Inject Custom CSS](#inject-custom-css)\n    * [Customize index.html](#customize-indexhtml)\n    * [Enable OAuth2.0 Flows](#enable-oauth20-flows)\n\n* [Swashbuckle.AspNetCore.Annotations](#swashbuckleaspnetcoreannotations)\n\t* [Install and Enable Annotations](#install-and-enable-annotations)\n\t* [Enrich Operation Metadata](#enrich-operation-metadata)\n\t* [Enrich Response Metadata](#enrich-response-metadata)\n\t* [Enrich Parameter Metadata](#enrich-parameter-metadata)\n\t* [Enrich Schema Metadata](#enrich-schema-metadata)\n\t* [Add Tag Metadata](#add-tag-metadata)\n\n* [Swashbuckle.AspNetCore.Cli](#swashbuckleaspnetcorecli)\n\t* [Retrieve Swagger Directly from a Startup Assembly](#retrieve-swagger-directly-from-a-startup-assembly)\n\n* [Swashbuckle.AspNetCore.ReDoc](#swashbuckleaspnetcoreredoc)\n\t* Docs coming soon\n\n## Swashbuckle.AspNetCore.Swagger ##\n\n### Change the Path for Swagger JSON Endpoints ###\n\nBy default, Swagger JSON will be exposed at the following route - \"/swagger/{documentName}/swagger.json\". If necessary, you can change this when enabling the Swagger middleware. Custom routes MUST include the {documentName} parameter.\n\n```csharp\napp.UseSwagger(c =>\n{\n    c.RouteTemplate = \"api-docs/{documentName}/swagger.json\";\n});\n```\n\n_NOTE: If you're using the SwaggerUI middleware, you'll also need to update its configuration to reflect the new endpoints:_\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n    c.SwaggerEndpoint(\"/api-docs/v1/swagger.json\", \"My API V1\");\n})\n```\n\n### Modify Swagger with Request Context ###\n\nIf you need to set some Swagger metadata based on the current request, you can configure a filter that's executed prior to serializing the document.\n\n```csharp\napp.UseSwagger(c =>\n{\n    c.PreSerializeFilters.Add((swaggerDoc, httpReq) => swaggerDoc.Host = httpReq.Host.Value);\n});\n```\n\nThe _SwaggerDocument_ and the current _HttpRequest_ are passed to the filter. This provides a lot of flexibility. For example, you can assign the \"host\" property (as shown) or you could inspect session information or an Authorization header and remove operations int the document based on user permissions.\n\n### Pretty Print Swagger JSON ###\n\nBy default, Swagger JSON will not be formatted. If the Swagger JSON should be indented properly, set the _SerializerSettings_  option in your _AddMvc_ helper:\n\n```csharp\nservices.AddMvc()\n    .AddJsonOptions(options =>\n    {\n        options.SerializerSettings.Formatting = Formatting.Indented;\n    });\n```\n\n## Swashbuckle.AspNetCore.SwaggerGen ##\n\n### Assign Explicit OperationIds ###\n\nIn Swagger, Operations can be a assigned a unique `operationId`. This is often used by code generation tools (e.g. client libraries) and so, it's important for the value to follow common programming conventions while also revealing the purpose of the operation. To best meet these goals, Swashbuckle requires API authors to provide the value explicitly and provides two different options to do so:\n\n__Option 1) Action Names__\n\n```csharp\n[HttpGet(\"{id}\")]\npublic IActionResult GetProductById(int id) // operationId = \"GetProductById\"\n```\n\n__Option 2) Route Names__\n\n```csharp\n[HttpGet(\"{id}\", Name = \"GetProductById\")]\npublic IActionResult Get(int id) // operationId = \"GetProductById\"\n```\n\n_NOTE: In both cases, API authors are responsible for ensuring the uniqueness of `operationId`s across all Operations_\n\n__Display Operations In SwaggerUI__\nTo display the operations in you SwaggerUI, you need to invoke `DisplayOperationId()` on the `SwaggerUIOptions` as follows:\n```csharp\napp.UseSwaggerUI(c =>\n{\n\t...\n    c.DisplayOperationId();\n    ...\n}\n```\n\n### List Operation Responses ###\n\nBy default, Swashbuckle will generate a \"200\" response for each operation. If the action returns a response DTO, then this will be used to generate a \"schema\" for the response body. For example ...\n\n```csharp\n[HttpPost(\"{id}\")]\npublic Product GetById(int id)\n```\n\nWill produce the following response metadata:\n\n```\nresponses: {\n  200: {\n    description: \"Success\",\n    schema: {\n      $ref: \"#/definitions/Product\"\n    }\n  }\n}\n```\n\n#### Explicit Responses ####\n\nIf you need to specify a different status code and/or additional responses, or your actions return _IActionResult_ instead of a response DTO, you can describe explicit responses with the `ProducesResponseTypeAttribute` that ships with ASP.NET Core. For example ...\n\n```csharp\n[HttpPost(\"{id}\")]\n[ProducesResponseType(typeof(Product), 200)]\n[ProducesResponseType(typeof(IDictionary<string, string>), 400)]\n[ProducesResponseType(500)]\npublic IActionResult GetById(int id)\n```\n\nWill produce the following response metadata:\n\n```\nresponses: {\n  200: {\n    description: \"Success\",\n    schema: {\n      $ref: \"#/definitions/Product\"\n    }\n  },\n  400: {\n    description: \"Bad Request\",\n    schema: {\n      type: \"object\",\n      additionalProperties: {\n        type: \"string\"\n      }\n    }\n  },\n  500: {\n    description: \"Server Error\"\n  }\n}\n```\n\n### Flag Required Parameters and Schema Properties ###\n\nIn a Swagger document, you can flag parameters and schema properties that are required for a request. If a parameter (top-level or property-based) is decorated with the `BindRequiredAttribute` or `RequiredAttribute`, then Swashbuckle will automatically flag it as a \"required\" parameter in the generated Swagger:\n\n```csharp\n// ProductsController.cs\npublic IActionResult Search([FromQuery, BindRequired]string keywords, [FromQuery]PagingParams pagingParams)\n{\n    if (!ModelState.IsValid)\n        return BadRequest(ModelState);\n    ...\n}\n\n// SearchParams.cs\npublic class PagingParams\n{\n    [Required]\n    public int PageNo { get; set; }\n\n    public int PageSize { get; set; }\n}\n```\n\nIn addition to parameters, Swashbuckle will also honor the `RequiredAttribute` when used in a model that's bound to the request body. In this case, the decorated properties will be flagged as \"required\" properties in the body description:\n\n```csharp\n// ProductsController.cs\npublic IActionResult Create([FromBody]Product product)\n{\n    if (!ModelState.IsValid)\n        return BadRequest(ModelState);\n    ...\n}\n\n// Product.cs\npublic class Product\n{\n    [Required]\n    public string Name { get; set; }\n\n    public string Description { get; set; }\n}\n```\n\n### Include Descriptions from XML Comments ###\n\nTo enhance the generated docs with human-friendly descriptions, you can annotate controller actions and models with [Xml Comments](http://msdn.microsoft.com/en-us/library/b2s063f7(v=vs.110).aspx) and configure Swashbuckle to incorporate those comments into the outputted Swagger JSON:\n\n1. Open the Properties dialog for your project, click the \"Build\" tab and ensure that \"XML documentation file\" is checked. This will produce a file containing all XML comments at build-time.\n\n    _At this point, any classes or methods that are NOT annotated with XML comments will trigger a build warning. To suppress this, enter the warning code \"1591\" into the \"Suppress warnings\" field in the properties dialog._\n\n2. Configure Swashbuckle to incorporate the XML comments on file into the generated Swagger JSON:\n\n    ```csharp\n    services.AddSwaggerGen(c =>\n    {\n        c.SwaggerDoc(\"v1\",\n            new Info\n            {\n                Title = \"My API - V1\",\n                Version = \"v1\"\n            }\n         );\n\n         var filePath = Path.Combine(System.AppContext.BaseDirectory, \"MyApi.xml\");\n         c.IncludeXmlComments(filePath);\n    }\n    ```\n\n3. Annotate your actions with summary, remarks and response tags:\n\n    ```csharp\n    /// <summary>\n    /// Retrieves a specific product by unique id\n    /// </summary>\n    /// <remarks>Awesomeness!</remarks>\n    /// <response code=\"200\">Product created</response>\n    /// <response code=\"400\">Product has missing/invalid values</response>\n    /// <response code=\"500\">Oops! Can't create your product right now</response>\n    [HttpGet(\"{id}\")]\n    [ProducesResponseType(typeof(Product), 200)]\n    [ProducesResponseType(typeof(IDictionary<string, string>), 400)]\n    [ProducesResponseType(500)]\n    public Product GetById(int id)\n    ```\n\n4. You can also annotate types with summary and example tags:\n\n    ```csharp\n    public class Product\n    {\n        /// <summary>\n        /// The name of the product\n        /// </summary>\n        /// <example>Men's basketball shoes</example>\n        public string Name { get; set; }\n\n        /// <summary>\n        /// Quantity left in stock\n        /// </summary>\n        /// <example>10</example>\n        public int AvailableStock { get; set; }\n    }\n    ```\n\n5. Rebuild your project to update the XML Comments file and navigate to the Swagger JSON endpoint. Note how the descriptions are mapped onto corresponding Swagger fields.\n\n_NOTE: You can also provide Swagger Schema descriptions by annotating your API models and their properties with summary tags. If you have multiple XML comments files (e.g. separate libraries for controllers and models), you can invoke the IncludeXmlComments method multiple times and they will all be merged into the outputted Swagger JSON._\n\n### Provide Global API Metadata ###\n\nIn addition to _Paths_, _Operations_ and _Responses_, which Swashbuckle generates for you, Swagger also supports global metadata (see http://swagger.io/specification/#swaggerObject). For example, you can provide a full description for your API, terms of service or even contact and licensing information:\n\n```csharp\nc.SwaggerDoc(\"v1\",\n    new Info\n    {\n        Title = \"My API - V1\",\n        Version = \"v1\",\n        Description = \"A sample API to demo Swashbuckle\",\n        TermsOfService = \"Knock yourself out\",\n        Contact = new Contact\n        {\n            Name = \"Joe Developer\",\n            Email = \"joe.developer@tempuri.org\"\n        },\n        License = new License\n        {\n            Name = \"Apache 2.0\",\n            Url = \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n        }\n    }\n)\n```\n\n_Use IntelliSense to see what other fields are available._\n\n### Generate Multiple Swagger Documents ###\n\nWith the setup described above, the generator will include all API operations in a single Swagger document. However, you can create multiple documents if necessary. For example, you may want a separate document for each version of your API. To do this, start by defining multiple Swagger docs in _Startup.cs_:\n\n```csharp\nservices.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new Info { Title = \"My API - V1\", Version = \"v1\" });\n    c.SwaggerDoc(\"v2\", new Info { Title = \"My API - V2\", Version = \"v2\" });\n})\n```\n\n_Take note of the first argument to SwaggerDoc. It MUST be a URI-friendly name that uniquely identifies the document. It's subsequently used to make up the path for requesting the corresponding Swagger JSON. For example, with the default routing, the above documents will be available at \"/swagger/v1/swagger.json\" and \"/swagger/v2/swagger.json\"._\n\nNext, you'll need to inform Swashbuckle which actions to include in each document. Although this can be customized (see below), by default, the generator will use the _ApiDescription.GroupName_ property, part of the built-in metadata layer that ships with ASP.NET Core, to make this distinction. You can set this by decorating individual actions OR by applying an application wide convention.\n\n#### Decorate Individual Actions ####\n\nTo include an action in a specific Swagger document, decorate it with the _ApiExplorerSettingsAttribute_ and set _GroupName_ to the corresponding document name (case sensitive):\n\n```csharp\n[HttpPost]\n[ApiExplorerSettings(GroupName = \"v2\")]\npublic void Post([FromBody]Product product)\n```\n\n#### Assign Actions to Documents by Convention ####\n\nTo group by convention instead of decorating every action, you can apply a custom controller or action convention. For example, you could wire up the following convention to assign actions to documents based on the controller namespace.\n\n```csharp\n// ApiExplorerGroupPerVersionConvention.cs\npublic class ApiExplorerGroupPerVersionConvention : IControllerModelConvention\n{\n    public void Apply(ControllerModel controller)\n    {\n        var controllerNamespace = controller.ControllerType.Namespace; // e.g. \"Controllers.V1\"\n        var apiVersion = controllerNamespace.Split('.').Last().ToLower();\n\n        controller.ApiExplorer.GroupName = apiVersion;\n    }\n}\n\n// Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc(c =>\n        c.Conventions.Add(new ApiExplorerGroupPerVersionConvention())\n    );\n\n    ...\n}\n```\n\n#### Customize the Action Selection Process ####\n\nWhen selecting actions for a given Swagger document, the generator invokes a _DocInclusionPredicate_ against every _ApiDescription_ that's surfaced by the framework. The default implementation inspects _ApiDescription.GroupName_ and returns true if the value is either null OR equal to the requested document name. However, you can also provide a custom inclusion predicate. For example, if you're using an attribute-based approach to implement API versioning (e.g. Microsoft.AspNetCore.Mvc.Versioning), you could configure a custom predicate that leverages this instead:\n\n```csharp\nc.DocInclusionPredicate((docName, apiDesc) =>\n{\n    if (!apiDesc.TryGetMethodInfo(out MethodInfo methodInfo)) return false;\n\n    var versions = methodInfo.DeclaringType\n        .GetCustomAttributes(true)\n        .OfType<ApiVersionAttribute>()\n        .SelectMany(attr => attr.Versions);\n\n    return versions.Any(v => $\"v{v.ToString()}\" == docName);\n});\n```\n\n#### Exposing Multiple Documents through the UI ####\n\nIf you're using the _SwaggerUI_ middleware, you'll need to specify any additional Swagger endpoints you want to expose. See [List Multiple Swagger Documents](#list-multiple-swagger-documents) for more.\n\n### Omit Obsolete Operations and/or Schema Properties ###\n\nThe [Swagger spec](http://swagger.io/specification/) includes a \"deprecated\" flag for indicating that an operation is deprecated and should be refrained from use. The Swagger generator will automatically set this flag if the corresponding action is decorated with the _ObsoleteAttribute_. However, instead of setting a flag, you can configure the generator to ignore obsolete actions altogether:\n\n```csharp\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.IgnoreObsoleteActions();\n};\n```\n\nA similar approach can also be used to omit obsolete properties from Schemas in the Swagger output. That is, you can decorate model properties with the _ObsoleteAttribute_ and configure Swashbuckle to omit those properties when generating JSON Schemas:\n\n```csharp\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.IgnoreObsoleteProperties();\n};\n```\n\n### Omit Arbitrary Operations ###\n\nYou can omit operations from the Swagger output by decorating individual actions OR by applying an application wide convention.\n\n#### Decorate Individual Actions ####\n\nTo omit a specific action, decorate it with the _ApiExplorerSettingsAttribute_ and set the _IgnoreApi_ flag:\n\n```csharp\n[HttpGet(\"{id}\")]\n[ApiExplorerSettings(IgnoreApi = true)]\npublic Product GetById(int id)\n```\n\n#### Omit Actions by Convention ####\n\nTo omit actions by convention instead of decorating them individually, you can apply a custom action convention. For example, you could wire up the following convention to only document GET operations:\n\n```csharp\n// ApiExplorerGetsOnlyConvention.cs\npublic class ApiExplorerGetsOnlyConvention : IActionModelConvention\n{\n    public void Apply(ActionModel action)\n    {\n        action.ApiExplorer.IsVisible = action.Attributes.OfType<HttpGetAttribute>().Any();\n    }\n}\n\n// Startup.cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc(c =>\n        c.Conventions.Add(new ApiExplorerGetsOnlyConvention())\n    );\n\n    ...\n}\n```\n\n### Customize Operation Tags (e.g. for UI Grouping) ###\n\nThe [Swagger spec](http://swagger.io/specification/) allows one or more \"tags\" to be assigned to an operation. The Swagger generator will assign the controller name as the default tag. This is particularly interesting if you're using the _SwaggerUI_ middleware as it uses this value to group operations.\n\nYou can override the default tag by providing a function that applies tags by convention. For example, the following configuration will tag, and therefore group operations in the UI, by HTTP method:\n\n```csharp\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.TagActionsBy(api => api.HttpMethod);\n};\n```\n\n### Change Operation Sort Order (e.g. for UI Sorting) ###\n\nBy default, actions are ordered by assigned tag (see above) before they're grouped into the path-based, hierarchichal structure imposed by the [Swagger spec](http://swagger.io/specification). You can change this behavior with a custom sorting strategy:\n\n```csharp\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.OrderActionsBy((apiDesc) => $\"{apiDesc.ActionDescriptor.RouteValues[\"controller\"]}_{apiDesc.HttpMethod}\");\n};\n```\n\n_NOTE: This dictates the sort order BEFORE actions are grouped and transformed into the Swagger format. So, it affects the ordering of groups (i.e. Swagger PathItems), AND the ordering of operations within a group, in the Swagger output._\n\n### Customize Schema Id's ###\n\nIf the generator encounters complex parameter or response types, it will generate a corresponding JSON Schema, add it to the global \"definitions\" dictionary, and reference it from the operation description by unique Id. For example, if you have an action that returns a \"Product\" type, the generated schema will be referenced as follows:\n\n```\nresponses: {\n  200: {\n    description: \"Success\",\n    schema: {\n      $ref: \"#/definitions/Product\"\n    }\n  }\n}\n```\n\nHowever, if it encounters multiple \"Product\" classes under different namespaces (e.g. \"RequestModels.Product\" & \"ResponseModels.Product\"), then Swashbuckle will raise an exception due to \"Conflicting schemaIds\". In this case, you'll need to provide a custom Id strategy that further qualifies the name:\n\n```csharp\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.CustomSchemaIds((type) => type.FullName);\n};\n```\n\n### Customize Schema for Enum Types ###\n\nWhen describing parameters and responses, Swashbuckle does its best to reflect the application's serialization settings. For example, if the _CamelCaseContractResolver_ is enabled, Schema property names will be camelCased in the generated Swagger.\n\nSimilarly for enum types, if the _StringEnumConverter_ is enabled, then the corresponding Schemas will list enum names rather than integer values.\n\nFor most cases this should be sufficient. However, if you need more control, Swashbuckle exposes the following options to override the default behavior:\n\n```csharp\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.DescribeAllEnumsAsStrings();\n    c.DescribeStringEnumsInCamelCase();\n};\n```\n\n### Override Schema for Specific Types ###\n\nOut-of-the-box, Swashbuckle does a decent job at generating JSON Schemas that accurately describe your request and response payloads. However, if you're customizing serialization behavior for certain types in your API, you may need to help it out.\n\nFor example, you might have a class with multiple properties that you want to represent in JSON as a comma-separated string. To do this you would probably implement a custom _JsonConverter_. In this case, Swashbuckle doesn't know how the converter is implemented and so you would need to provide it with a Schema that accurately describes the type:\n\n```csharp\n// PhoneNumber.cs\npublic class PhoneNumber\n{\n    public string CountryCode { get; set; }\n\n    public string AreaCode { get; set; }\n\n    public string SubscriberId { get; set; }\n}\n\n// Startup.cs\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.MapType<PhoneNumber>(() => new Schema { Type = \"string\" });\n};\n```\n\n### Extend Generator with Operation, Schema & Document Filters ###\n\nSwashbuckle exposes a filter pipeline that hooks into the generation process. Once generated, individual metadata objects are passed into the pipeline where they can be modified further. You can wire up one or more custom filters for _Operation_, _Schema_ and _Document_ objects:\n\n#### Operation Filters ####\n\nSwashbuckle retrieves an _ApiDescription_, part of ASP.NET Core, for every action and uses it to generate a corresponding _Swagger Operation_. Once generated, it passes the _Operation_ and the _ApiDescription_ through the list of configured Operation Filters.\n\nIn a typical filter implementation, you inspect the _ApiDescription_ for relevant information (e.g. route info, action attributes etc.) and then update the Swagger _Operation_ accordingly. For example, the following filter lists an additional \"401\" response for all actions that are decorated with the _AuthorizeAttribute_:\n\n```csharp\n// AuthResponsesOperationFilter.cs\npublic class AuthResponsesOperationFilter : IOperationFilter\n{\n    public void Apply(Operation operation, OperationFilterContext context)\n    {\n        var authAttributes = context.MethodInfo.DeclaringType.GetCustomAttributes(true)\n            .Union(context.MethodInfo.GetCustomAttributes(true))\n            .OfType<AuthorizeAttribute>();\n\n        if (authAttributes.Any())\n            operation.Responses.Add(\"401\", new Response { Description = \"Unauthorized\" });\n    }\n}\n\n// Startup.cs\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.OperationFilter<AuthResponsesOperationFilter>();\n};\n```\n\n_NOTE: Filter pipelines are DI-aware. That is, you can create filters with constructor parameters and if the parameter types are registered with the DI framework, they'll be automatically injected when the filters are instantiated_\n\n#### Schema Filters ####\n\nSwashbuckle generates a Swagger-flavored _[JSONSchema](http://swagger.io/specification/#schemaObject)_ for every parameter, response and property type that's exposed by your controller actions. Once generated, it passes the _Schema_ and _Type_ through the list of configured Schema Filters.\n\nThe example below adds an AutoRest vendor extension (see https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-enum) to inform the AutoRest tool how enums should be modelled when it generates the API client.\n\n```csharp\n// AutoRestSchemaFilter.cs\npublic class AutoRestSchemaFilter : ISchemaFilter\n{\n    public void Apply(Schema schema, SchemaFilterContext context)\n    {\n        var typeInfo = context.SystemType.GetTypeInfo();\n\n        if (typeInfo.IsEnum)\n        {\n            schema.Extensions.Add(\n                \"x-ms-enum\",\n                new { name = typeInfo.Name,  modelAsString = true }\n            );\n        };\n    }\n}\n\n// Startup.cs\nservices.AddSwaggerGen(c =>\n{\n    ...\n    c.SchemaFilter<AutoRestSchemaFilter>();\n};\n```\n\n#### Document Filters ####\n\nOnce a _Swagger Document_ has been generated, it too can be passed through a set of pre-configured _Document_ Filters. This gives full control to modify the document however you see fit. To ensure you're still returning valid Swagger JSON, you should have a read through the [specification](http://swagger.io/specification/) before using this filter type.\n\nThe example below provides a description for any tags that are assigned to operations in the document:\n\n```csharp\npublic class TagDescriptionsDocumentFilter : IDocumentFilter\n{\n    public void Apply(SwaggerDocument swaggerDoc, DocumentFilterContext context)\n    {\n        swaggerDoc.Tags = new[] {\n            new Tag { Name = \"Products\", Description = \"Browse/manage the product catalog\" },\n            new Tag { Name = \"Orders\", Description = \"Submit orders\" }\n        };\n    }\n}\n```\n\n_NOTE: If you're using the SwaggerUI middleware, this filter can be used to display additional descriptions beside each group of Operations._\n\n### Add Security Definitions and Requirements ###\n\nIn Swagger, you can describe how your API is secured by defining one or more security schemes (e.g basic, api key, oauth2 etc.) and declaring which of those schemes are applicable globally OR for specific operations. For more details, take a look at the \"securityDefinitions\" and \"security\" fields in the [Swagger spec](http://swagger.io/specification/#swaggerObject).\n\nIn Swashbuckle, you can define schemes by invoking the `AddSecurityDefinition` method, providing a name and an instance of BasicAuthScheme, ApiKeyScheme or OAuth2Scheme. For example you can define an [OAuth 2.0 - implicit flow](https://oauth.net/2/) as follows:\n\n```csharp\n// Startup.cs\nservices.AddSwaggerGen(c =>\n{\n    ...\n\n    // Define the OAuth2.0 scheme that's in use (i.e. Implicit Flow)\n    c.AddSecurityDefinition(\"oauth2\", new OAuth2Scheme\n    {\n        Type = \"oauth2\",\n        Flow = \"implicit\",\n        AuthorizationUrl = \"http://petstore.swagger.io/oauth/dialog\",\n        Scopes = new Dictionary<string, string>\n        {\n            { \"readAccess\", \"Access read operations\" },\n            { \"writeAccess\", \"Access write operations\" }\n        }\n    });\n};\n```\n\n__NOTE__: In addition to defining a scheme, you also need to indicate which operations that scheme is applicable to. You can apply schemes globally (i.e. to ALL operations) through the `AddSecurityRequirement` method. The example below indicates that the scheme called \"oauth2\" should be applied to all operations, and that the \"readAccess\" and \"writeAccess\" scopes are required. When applying schemes of type other than \"oauth2\", the array of scopes MUST be empty.\n\n```csharp\nc.AddSwaggerGen(c =>\n{\n\t...\n\n    c.AddSecurityRequirement(new Dictionary<string, IEnumerable<string>>\n    {\n        { \"oauth2\", new[] { \"readAccess\", \"writeAccess\" } }\n    });\n})\n```\n\nIf you have schemes that only apply to specific operations, you can apply them through an `OperationFilter`. For example, the following filter adds OAuth2 requirements based on the presence of the `AuthorizeAttribute`:\n\n```csharp\n// SecurityRequirementsOperationFilter.cs\npublic class SecurityRequirementsOperationFilter : IOperationFilter\n{\n    public void Apply(Operation operation, OperationFilterContext context)\n    {\n        // Policy names map to scopes\n        var requiredScopes = context.MethodInfo\n            .GetCustomAttributes(true)\n            .OfType<AuthorizeAttribute>()\n            .Select(attr => attr.Policy)\n            .Distinct();\n\n        if (requiredScopes.Any())\n        {\n            operation.Responses.Add(\"401\", new Response { Description = \"Unauthorized\" });\n            operation.Responses.Add(\"403\", new Response { Description = \"Forbidden\" });\n\n            operation.Security = new List<IDictionary<string, IEnumerable<string>>>();\n            operation.Security.Add(new Dictionary<string, IEnumerable<string>>\n            {\n                { \"oauth2\", requiredScopes }\n            });\n        }\n    }\n}\n```\n\n__NOTE__: If you're using the SwaggerUI middleware, you can enable interactive OAuth2.0 flows that are powered by the emitted security metadata. See [Enabling OAuth2.0 Flows](#enable-oauth20-flows) for more details.\n\n## Swashbuckle.AspNetCore.SwaggerUI ##\n\n### Change Relative Path to the UI ###\n\nBy default, the Swagger UI will be exposed at \"/swagger\". If necessary, you can alter this when enabling the SwaggerUI middleware:\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n    c.RoutePrefix = \"api-docs\"\n    ...\n}\n```\n\n### Change Document Title ###\n\nBy default, the Swagger UI will have a generic document title. When you have multiple Swagger pages open, it can be difficult to tell them apart. You can alter this when enabling the SwaggerUI middleware:\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n    c.DocumentTitle = \"My Swagger UI\";\n    ...\n}\n```\n\n### List Multiple Swagger Documents ###\n\nWhen enabling the middleware, you're required to specify one or more Swagger endpoints (fully qualified or relative to the current host) to power the UI. If you provide multiple endpoints, they'll be listed in the top right corner of the page, allowing users to toggle between the different documents. For example, the following configuration could be used to document different versions of an API.\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n    c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"V1 Docs\");\n    c.SwaggerEndpoint(\"/swagger/v2/swagger.json\", \"V2 Docs\");\n}\n```\n\n### Apply swagger-ui Parameters ###\n\nThe swagger-ui ships with it's own set of configuration parameters, all described here https://github.com/swagger-api/swagger-ui/blob/v3.8.1/docs/usage/configuration.md#display. In Swashbuckle, most of these are surfaced through the SwaggerUI middleware options:\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n    c.DefaultModelExpandDepth(2);\n    c.DefaultModelRendering(ModelRendering.Model);\n    c.DefaultModelsExpandDepth(-1);\n    c.DisplayOperationId();\n    c.DisplayRequestDuration();\n    c.DocExpansion(DocExpansion.None);\n    c.EnableDeepLinking();\n    c.EnableFilter();\n    c.MaxDisplayedTags(5);\n    c.ShowExtensions();\n    c.EnableValidator();\n    c.SupportedSubmitMethods(SubmitMethod.Get, SubmitMethod.Head);\n});\n```\n\n__NOTE:__ The `InjectOnCompleteJavaScript` and `InjectOnFailureJavaScript` options have been removed because the latest version of swagger-ui doesn't expose the neccessary hooks. Instead, it provides a [flexible customization system](https://github.com/swagger-api/swagger-ui/blob/master/docs/customization/overview.md) based on concepts and patterns from React and Redux. To leverage this, you'll need to provide a custom version of index.html as described [below](#customize-indexhtml).\n\nThe [custom index sample app](test/WebSites/CustomUIIndex/Swagger/index.html) demonstrates this approach, using the swagger-ui plugin system provide a custom topbar, and to hide the info component.\n\n### Inject Custom CSS ###\n\nTo tweak the look and feel, you can inject additional CSS stylesheets by adding them to your _wwwroot_ folder and specifying the relative paths in the middleware options:\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n    ...\n    c.InjectStylesheet(\"/swagger-ui/custom.css\");\n}\n```\n\n### Customize index.html ###\n\nTo customize the UI beyond the basic options listed above, you can provide your own version of the swagger-ui index.html page:\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n    c.IndexStream = () => GetType().GetTypeInfo().Assembly\n        .GetManifestResourceStream(\"CustomUIIndex.Swagger.index.html\"); // requires file to be added as an embedded resource\n});\n```\n\nTo get started, you should base your custom index.html on the [default version](src/Swashbuckle.AspNetCore.SwaggerUI/index.html)\n\n### Enable OAuth2.0 Flows ###\n\nThe swagger-ui has built-in support to participate in OAuth2.0 authorization flows. It interacts with authorization and/or token endpoints, as specified in the Swagger JSON, to obtain access tokens for subsequent API calls. See [Adding Security Definitions and Requirements](#add-security-definitions-and-requirements) for an example of adding OAuth2.0 metadata to the generated Swagger.\n\nIf you're Swagger endpoint includes the appropriate security metadata, the UI interaction should be automatically enabled. However, you can further customize OAuth support in the UI with the following settings below. See https://github.com/swagger-api/swagger-ui/blob/v3.10.0/docs/usage/oauth2.md for more info:\n\n```csharp\napp.UseSwaggerUI(c =>\n{\n\t...\n\n\tc.OAuthClientId(\"test-id\");\n\tc.OAuthClientSecret(\"test-secret\");\n\tc.OAuthRealm(\"test-realm\");\n\tc.OAuthAppName(\"test-app\");\n\tc.OAuthScopeSeparator(\" \");\n\tc.OAuthAdditionalQueryStringParams(new { foo = \"bar\" });\n\tc.OAuthUseBasicAuthenticationWithAccessCodeGrant();\n});\n```\n\n## Swashbuckle.AspNetCore.Annotations ##\n\n### Install and Enable Annotations ###\n\n1. Install the following Nuget package into your ASP.NET Core application.\n\n    ```\n    Package Manager : Install-Package Swashbuckle.AspNetCore.Annotations\n    CLI : dotnet add package Swashbuckle.AspNetCore.Annotations\n    ```\n\n2. In the _ConfigureServices_ method of _Startup.cs_, enable annotations within the `SwaggerGen` config block:\n\n    ```csharp\n    services.AddSwaggerGen(c =>\n    {\n       ...\n\n\t   c.EnableAnnotations();\n    });\n    ```\n\n### Enrich Operation Metadata ###\n\nOnce annotations have been enabled, you can enrich the generated Operation metadata by decorating actions with a `SwaggerOperationAttribute`.\n\n\n```csharp\n[HttpPost]\n\n[SwaggerOperation(\n\tSummary = \"Creates a new product\",\n\tDescription = \"Requires admin privileges\",\n\tOperationId = \"CreateProduct\",\n\tTags = new[] { \"Purchase\", \"Products\" }\n)]\npublic IActionResult Create([FromBody]Product product)\n```\n\n### Enrich Response Metadata ###\n\nASP.NET Core provides the `ProducesResponseTypeAttribute` for listing the different responses that can be returned by an action. These attributes can be combined with XML comments, as described [above](#include-descriptions-from-xml-comments), to include human friendly descriptions with each response in the generated Swagger. If you'd prefer to do all of this with a single attribute, and avoid the use of XML comments, you can alternatively apply one or more `SwaggerResponseAttributes`:\n\n```csharp\n[HttpPost]\n[SwaggerResponse(201, \"The product was created\", typeof(Product))]\n[SwaggerResponse(400, \"The product data is invalid\")]\npublic IActionResult Create([FromBody]Product product)\n```\n\n### Enrich Parameter Metadata ###\n\nYou can annotate top-level parameters (i.e. not part of a model) with a `SwaggerParameterAttribute` to include a description and/or flag it as \"required\" in the generated Swagger document:\n\n```csharp\n[HttpGet]\npublic IActionResult GetProducts(\n\t[FromQuery, SwaggerParameter(\"Search keywords\", Required = true)]string keywords)\n```\n\n### Enrich Schema Metadata ###\n\nThe `SwaggerGen` package provides several extension points, including Schema Filters ([described here](#extend-generator-with-operation-schema--document-filter)) for customizing ALL generated Schemas. However, there may be cases where it's preferable to apply a filter to a specific Schema. For example, if you'd like to include an example for a specific type in your API. This can be done by decorating the type with a `SwaggerSchemaFilterAttribute`:\n\n```csharp\n// Product.cs\n[SwaggerSchemaFilter(typeof(ProductSchemaFilter))]\npublic class Product\n{\n\t...\n}\n\n// ProductSchemaFilter.cs\npublic class ProductSchemaFilter : ISchemaFilter\n{\n    public void Apply(Schema schema, SchemaFilterContext context)\n    {\n        schema.Example = new Product\n        {\n            Id = 1,\n            Description = \"An awesome product\"\n        };\n    }\n}\n```\n\n### Add Tag Metadata\n\nBy default, the Swagger generator will tag all operations with the controller name. This tag is then used to drive the operation groupings in the swagger-ui. If you'd like to provide a description for each of these groups, you can do so by adding metadata for each controller name tag via the `SwaggerTagAttribute`:\n\n```csharp\n[SwaggerTag(\"Create, read, update and delete Products\")]\npublic class ProductsController\n{\n\t...\n}\n```\n\n_NOTE:_ This will add the above description specifically to the tag named \"Products\". Therefore, you should avoid using this attribute if you're tagging Operations with something other than controller name - e.g. if you're customizing the tagging behavior with TagActionsBy.\n\n## Swashbuckle.AspNetCore.Cli ##\n\n_NOTE:_ This feature is currently beta only. Please post feedback to the following [issue](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/541)\n\n### Retrieve Swagger Directly from a Startup Assembly ###\n\nThe Swashbuckle CLI tool can retrieve Swagger JSON directly from your application startup assembly, and write it to file. This can be useful if you want to incorporate Swagger generation into a CI/CD process, or if you want to serve it from static file at run-time.\n\nThe tool can be installed as a [per-project, framework-dependent CLI extension](https://docs.microsoft.com/en-us/dotnet/core/tools/extensibility#per-project-based-extensibility) by adding the following reference to your .csproj file and running `dotnet restore`:\n\n```xml\n<ItemGroup>\n  <DotNetCliToolReference Include=\"Swashbuckle.AspNetCore.Cli\" Version=\"2.1.0-beta1\" />\n</ItemGroup>\n```\n\nOnce this is done, you should be able to run the following command from your project root:\n\n```\ndotnet swagger tofile --help\n```\n\nBefore you invoke the `tofile` command, you need to ensure your application is configured to expose Swagger JSON, as described in [Getting Started](#getting-started). Once this is done, you can point to your startup assembly and generate a local Swagger JSON file with the following command:\n\n```\ndotnet swagger tofile --output [output] [startupassembly] [swaggerdoc]\n```\n\nWhere ...\n* [output] is the relative path where the Swagger JSON will be output to\n* [startupassembly] is the relative path to your application's startup assembly\n* [swaggerdoc] is the name of the swagger document you want to retrieve, as configured in your startup class\n\nCheckout the [CliExample app](test/WebSites/CliExample) for more inspiration. It leverages the MSBuild Exec command to generate Swagger JSON at build-time.\n"
z0mt3c/hapi-swaggered: >
  # hapi-swaggered 3.x

  Yet another hapi plugin providing swagger compliant API specifications
  (swagger specs 2.0) based on routes and joi schemas to be used with
  swagger-ui.


  Supports hapi 17.x and up


  For earlier versions check [hapi-swaggered
  2.x](https://github.com/z0mt3c/hapi-swaggered/blob/2.x/README.md) (current
  default/latest `npm install hapi-swaggered --save`)


  [![Build
  Status](https://img.shields.io/travis/z0mt3c/hapi-swaggered/master.svg)](https://travis-ci.org/z0mt3c/hapi-swaggered)

  [![Coverage
  Status](https://img.shields.io/coveralls/z0mt3c/hapi-swaggered/master.svg)](https://coveralls.io/r/z0mt3c/hapi-swaggered?branch=master)

  [![Dependency
  Status](https://img.shields.io/gemnasium/z0mt3c/hapi-swaggered.svg)](https://gemnasium.com/z0mt3c/hapi-swaggered)

  [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)

  [![npm
  downloads](https://img.shields.io/npm/dm/hapi-swaggered.svg)](https://www.npmjs.com/package/hapi-swaggered)


  ## Install

  ```bash

  npm install hapi-swaggered@next --save

  ```


  ## Similar swagger-projects for hapi

  [krakenjs/swaggerize-hapi](https://github.com/krakenjs/swaggerize-hapi)
  follows a design driven approach (swagger-schema first) for building APIs. In
  other words: it supports you to implement an api behind a specific
  swagger-schema while you have to create and maintain the swagger-schema
  yourself (or a third-party). In contrast with hapi-swaggered you will have to
  design your api through hapi route defintions and joi schemas (or did already)
  and hapi-swaggered will generate it's swagger specifications up on that (Of
  course not as beautiful and shiny structured as done by hand). Based on this
  you are able to get beautiful hands-on swagger-ui documentation (like
  [this](http://petstore.swagger.io/)) for your api up and running (e.g. through
  [hapi-swaggered-ui](https://github.com/z0mt3c/hapi-swaggered-ui)).


  ## Swagger-UI

  This plugin does not include the
  [swagger-ui](https://github.com/wordnik/swagger-ui) interface. It just serves
  a bare swagger 2.0 compliant json feed. If you are looking for an easy
  swagger-ui plugin to drop-in? You should have a look at:

  * [hapi-swaggered-ui](https://github.com/z0mt3c/hapi-swaggered-ui)


  ## Plugin Configuration

  * `requiredTags`: an array of strings, only routes with all of the specified
  tags will be exposed, defaults to: `['api']`

  * `produces`: an array of mime type strings, defaults to: `[
  'application/json' ]`

  * `consumes`: an array of mime type strings, defaults to: `[
  'application/json' ]`

  * `endpoint`: route path to the swagger specification, defaults to:
  `'/swagger'`

  * `routeTags`: an array of strings, all routes exposed by hapi-swaggered will
  be tagged as specified, defaults to `['swagger']`

  * `stripPrefix`: a path prefix which should be stripped from the swagger
  specifications. E.g. your root resource are located under
  `/api/v12345678/resource` you might want to strip `/api/v12345678`, defaults
  to null

  * `basePath`: string, optional url base path (e.g. used to fix reverse proxy
  routes)

  * `supportedMethods`: array of http methods, only routes with mentioned
  methods will be exposed, in case of a wildcard * a route will be generated for
  each method, defaults to `['get', 'put', 'post', 'delete', 'patch']`

  * `host`: string, overwrite requests host (e.g. domain.tld:1337)

  * `schemes`: array of allowed schemes e.g. `['http', 'https', 'ws', 'wss']`
  (optional)

  * `info`: exposed swagger api informations, defaults to null (optional)
    * `title`: string (required)
    * `description`: string (required)
    * `termsOfService`: string
    * `contact`: object (optional)
      * `name`: string
      * `url`: string
      * `email`: string
    * `license`: object  (optional)
      * `name`: string: string
      * `url`: string: string
    * `version`: version string of your api, which will be exposed (required)
  * `tagging`: Options used for grouping routes
    * `mode`: string, can be `path` (routes will be grouped by its path) or `tags` (routes will be grouped by its tags), default is `path`
    * `pathLevel` integer, in case of mode `path` it defines on which level the path grouping will take place (default is 1)
    * `stripRequiredTags` boolean, in case of mode `tags` it defines if the `requiredTags` will not be exposed (default is true)
  * `tags`: object (or array with objects according to the [swagger
  specs](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#tagObject))
  for defining tag / group descriptions. E.g. you two endpoints `/get/this` and
  `/get/that` and the tagging mode is set to path (with pathLevel: 1) they will
  be groupped unter /get and you are able to define a description through this
  object as `{ 'get': 'get this and that' }`, defaults to null

  * `cors`: boolean or object with cors configuration as according to the
  [hapijs
  documentation](https://github.com/hapijs/hapi/blob/master/API.md#route-options)
  (defaults to false)

  * `cache`: caching options for the swagger schema generation as specified in
  [`server.method()`](https://github.com/hapijs/hapi/blob/master/API.md#servermethodname-method-options)
  of hapi, defaults to: `{ expiresIn: 15 * 60 * 1000 }`

  * `responseValidation`: boolean, turn response validation on and off for
  hapi-swaggered routes, defaults to false

  * `auth`: authentication configuration [hapijs
  documentation](https://github.com/hapijs/hapi/blob/master/API.md#route-options)
  (default to undefined)

  * `securityDefinitions`: security definitions according to [swagger
  specs](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md]


  ## Example

  Example configuration for hapi-swaggered + hapi-swaggered-ui


  ```js

  const Hapi = require('hapi');


  (async () => {
    const server = await new Hapi.Server({
      port: 8000
    })

    await server.register([
      require('inert'),
      require('vision'),
      {
        plugin: require('hapi-swaggered'),
        options: {
          tags: {
            'foobar/test': 'Example foobar description'
          },
          info: {
            title: 'Example API',
            description: 'Powered by node, hapi, joi, hapi-swaggered, hapi-swaggered-ui and swagger-ui',
            version: '1.0'
          }
        }
      },
      {
        plugin: require('hapi-swaggered-ui'),
        options: {
          title: 'Example API',
          path: '/docs',
          authorization: {
            field: 'apiKey',
            scope: 'query', // header works as well
            // valuePrefix: 'bearer '// prefix incase
            defaultValue: 'demoKey',
            placeholder: 'Enter your apiKey here'
          },
          swaggerOptions: {
            validatorUrl: null
          }
        }
      }
    ])

    server.route({
      path: '/',
      method: 'GET',
      handler (request, h) {
        return h.response().redirect('/docs')
      }
    })

    try {
      await server.start()
      console.log('Server running at:', server.info.uri)
    } catch (err) {
      console.log(err)
    }
  })()

  ```


  Demo Routes

  ```js

  server.route({
    path: '/foobar/test',
    method: 'GET',
    options: {
      tags: ['api'],
      description: 'My route description',
      notes: 'My route notes',
      handler () {
        return {};
      }
    }
  });


  server.route({
    path: '/foobar/{foo}/{bar}',
    method: 'GET',
    options: {
      tags: ['api'],
      validate: {
        params: {
          foo: Joi.string().required().description('test'),
          bar: Joi.string().required()
        }
      },
      handler () {
        return {};
      }
    }
  });

  ```


  ## Features

  ### Model naming

  To assign custom names to your Models use the Joi.meta() option (in previous
  joi versions Joi.options() may be used)


  ```js

  Joi.object({}).meta({ className: 'FooBar' });

  ```


  ### Model description

  To assign a description to your Models use the Joi.meta() option like above


  ```js

  Joi.object({}).meta({ description: 'A description of FooBar' });

  ```


  ### Type naming

  To override the type a Joi model should be interpreted as, use the Joi.meta()
  option like above. This is especially useful when utilizing the extend and
  coerce features of Joi schema definition


  ```js

  Joi.object({}).meta({ swaggerType: string });

  ```


  ### Document responses

  There are 2 and a half different ways of documenting responses of routes:


  The hapi way:


  ```js

  {
    options: {
      response: {
        schema: Joi.object({
          bar: Joi.string().description('test').required()
        }).description('test'),
        status: {
          500: Joi.object({
            bar: Joi.string().description('test').required()
          })
        }
      }
    }
  }

  ```


  The plugin way without schemas:


  ```js

  {
    options: {
      plugins: {
        'hapi-swaggered': {
          responses: {
            default: {description: 'Bad Request'},
            500: {description: 'Internal Server Error'}
          }
        }
      },
      response: {
        schema: Joi.object({
          bar: Joi.string().required()
        }).description('test')
      }
    }
  }

  ```


  The plugin way with schemas:


  ```js

  {
    options: {
      plugins: {
        'hapi-swaggered': {
          responses: {
            default: {
              description: 'Bad Request', schema: Joi.object({
                bar: Joi.string().description('test').required()
              })
            },
            500: {description: 'Internal Server Error'}
          }
        }
      }
    }
  }

  ```


  Specify an operationId for a route:


  ```js

  {
    options: {
      plugins: {
        'hapi-swaggered': {
          operationId: 'testRoute'
        }
      }
    }
  }

  ```


  Specify an security options to a route / operation:


  ```js

  {
    options: {
      plugins: {
        'hapi-swaggered': {
          security: {}
        }
      }
    }
  }

  ```


  ### Tag filtering

  Routes can be filtered for tags through the tags query parameter beside the
  requiredTags property which is always required to be present.


  For example:


  * `?tags=public,beta (equal to ?tags=+public,+beta)`
    * will only show apis and routes with tag public AND/OR beta.
  * `?tags=public,-beta (equal to ?tags=+public,-beta)`
    * will only show apis and routes with tag public AND NOT beta.

  ## Known issues

  ### No response types

  The routes response schemas which hapi-swaggered is parsing will be dropped by
  hapi whenever the response validation is disabled. In this case hapi-swaggered
  will not be able to show any response types. A very low sampling rate is
  sufficient to keep the repsonse types.
jfinkhaeuser/prance: >+
  |Posix Build Status| |Windows Build Status| |Docs| |License|

  |PyPI| |Python Versions| |Package Format| |Package Status| |FOSSA Status|


  |Logo|


  Prance provides parsers for `Swagger/OpenAPI

  2.0 and 3.0 <http://swagger.io/specification/>`__ API specifications in
  Python.

  It uses `flex <https://github.com/pipermerriam/flex>`__,

  `swagger\_spec\_validator <https://github.com/Yelp/swagger_spec_validator>`__

  or `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__

  to validate specifications, but additionally resolves `JSON

  references <https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03>`__

  in accordance with the OpenAPI spec.


  Mostly the latter involves handling non-URI references; OpenAPI is fine

  with providing relative file paths, whereas JSON references require URIs

  at this point in time.


  Usage

  =====


  Installation

  ------------


  Prance is available from PyPI, and can be installed via pip:


  .. code:: bash

      $ pip install prance

  Note that this will install the code, but additional subpackages must be
  specified

  to unlock various pieces of functionality. At minimum, a parsing backend must
  be

  installed. For the CLI functionality, you need further dependencies.


  The recommended installation installs the CLI, uses ICU and installs one
  validation

  backend:


  .. code:: bash

      $ pip install prance[osv,icu,cli]


  Command Line Interface

  ----------------------


  After installing prance, a CLI is available for validating (and resolving

  external references in) specs:


  .. code:: bash

      # Validates with resolving
      $ prance validate path/to/swagger.yml

      # Validates without resolving
      $ prance validate --no-resolve path/to/swagger.yml

      # Fetch URL, validate and resolve.
      $ prance validate http://petstore.swagger.io/v2/swagger.json
      Processing "http://petstore.swagger.io/v2/swagger.json"...
       -> Resolving external references.
      Validates OK as Swagger/OpenAPI 2.0!

  Validation is not the only feature of prance. One of the side effects of

  resolving is that from a spec with references, one can create a fully resolved

  output spec. In the past, this was done via options to the ``validate``
  command,

  but now there's a specific command just for this purpose:


  .. code:: bash

      # Compile spec
      $ prance compile path/to/input.yml path/to/output.yml


  Lastly, with the arrival of OpenAPI 3.0.0, it becomes useful for tooling to

  convert older specs to the new standard. Instead of re-inventing the wheel,

  prance just provides a CLI command for passing specs to the web API of

  `swagger2openapi <https://github.com/Mermade/swagger2openapi>`__ - a working

  internet connection is therefore required for this command:


  .. code:: bash

      # Convert spec
      $ prance convert path/to/swagger.yml path/to/openapi.yml


  Code

  ----


  Most likely you have spec file and want to parse it:


  .. code:: python

      from prance import ResolvingParser
      parser = ResolvingParser('path/to/my/swagger.yaml')
      parser.specification  # contains fully resolved specs as a dict

  Prance also includes a non-resolving parser that does not follow JSON

  references, in case you prefer that.


  .. code:: python

      from prance import BaseParser
      parser = BaseParser('path/to/my/swagger.yaml')
      parser.specification  # contains specs as a dict still containing JSON references

  On Windows, the code reacts correctly if you pass posix-like paths

  (``/c:/swagger``) or if the path is relative.  If you pass absolute

  windows path (like ``c:\swagger.yaml``), you can use

  ``prance.util.fs.abspath`` to convert them.


  URLs can also be parsed:


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json')

  Largely, that's it. There is a whole slew of utility code that you may

  or may not find useful, too. Look at the `full documentation

  <https://jfinkhaeuser.github.io/prance/#api-modules>`__ for details.



  Compatibility

  -------------


  Different validation backends support different features.


  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | Backend                | Python Version | OpenAPI Version | Strict Mode |
  Notes                                                 | Available From |
  Link                                                                             
  |

  +========================+================+=================+=============+=======================================================+================+===================================================================================+

  | swagger-spec-validator | 2 and 3        | 2.0 only        | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.1     |
  `swagger\_spec\_validator
  <https://github.com/Yelp/swagger_spec_validator>`__     |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | flex                   | 2 and 3        | 2.0 only        | n/a         |
  Fastest; unfortunately deprecated.                    | prance 0.8     | `flex
  <https://github.com/pipermerriam/flex>`__                                   |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | openapi-spec-validator | 2 and 3        | 2.0 and 3.0     | yes         |
  Slow; does not accept integer keys (see strict mode). | prance 0.11    |
  `openapi\_spec\_validator
  <https://github.com/p1c2u/openapi-spec-validator>`__    |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+


  You can select the backend in the constructor of the parser(s):


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json', backend = 'openapi-spec-validator')


  No backend is included in the dependencies; they are detected at run-time. If
  you install them,

  they can be used:


  .. code:: bash

      $ pip install openapi-spec-validator
      $ pip install prance
      $ prance validate --backend=openapi-spec-validator path/to/spec.yml


  *A note on strict mode:* The OpenAPI specs are a little ambiguous. On the one
  hand, they use JSON

  references and JSON schema a fair bit. But on the other hand, what they
  specify as examples does

  not always match the JSON specs.


  Most notably, JSON only accepts string keys in objects. However, some keys in
  the specs tend to be

  integer values, most notably the status codes for responses. Strict mode
  rejects non-string keys;

  the default lenient mode accepts them.


  Since the ``flex`` validator is not based on JSON, it does not have this
  issue. The ``strict`` option

  therefore does not apply here.



  *A note on flex usage:* While flex is the fastest validation backend,
  unfortunately it is no longer

  maintained and there are issues with its dependencies. For one thing, it
  depends on a version of `PyYAML`

  that contains security flaws. For another, it depends explicitly on older
  versions of `click`.


  If you use the flex subpackage, therefore, you do so at your own risk.



  A Note on JSON References

  -------------------------


  The relevant parts of the RFC for JSON references can be condensed like this:

      A JSON Reference is a JSON object, which contains a member named
      "$ref", which has a JSON string value.  Example:

      { "$ref": "http://example.com/example.json#/foo/bar" }

      (...)

      Any members other than "$ref" in a JSON Reference object SHALL be
      ignored.

      (...)

      Resolution of a JSON Reference object SHOULD yield the referenced
      JSON value.  Implementations MAY choose to replace the reference with
      the referenced value.

  Prance is strict about ignoring additional keys, and does so by replacing the
  reference with

  the referenced value.


  In practice, that means that given such a reference:


  .. code:: yaml

      # main file
      ---
      foo: bar
      $ref: /path/to/ref

      # and at /path/to/ref
      ---
      baz: quux

  Then, after resolution, the result is the following:


  .. code:: yaml

      # resolved
      ---
      baz: quux

  That is, the key ``foo`` is ignored as the specs require. That is the reason
  the OpenAPI

  specs tend to use JSON references within ``schema`` objects, and place any
  other parameters

  as siblings of the ``schema`` object.



  Extensions

  ----------


  Prance includes the ability to reference outside swagger definitions

  in outside Python packages. Such a package must already be importable

  (i.e. installed), and be accessible via the

  `ResourceManager API
  <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api>`__

  (some more info `here
  <https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files>`__).


  For example, you might create a package ``common_swag`` with the file

  ``base.yaml`` containing the definition


  .. code:: yaml

      definitions:
        Severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL

  In the ``setup.py`` for ``common_swag`` you would add lines such as


  .. code:: python

      packages=find_packages('src'),
      package_dir={'': 'src'},
      package_data={
          '': '*.yaml'
      }

  Then, having installed ``common_swag`` into some application, you could

  now write


  .. code:: yaml

      definitions:
        Message:
          type: object
          properties:
            severity:
              $ref: 'python://common_swag/base.yaml#/definitions/Severity'
            code:
              type: string
            summary:
              type: string
            description:
              type: string
          required:
          - severity
          - summary

  Contributing

  ============


  See `CONTRIBUTING.md
  <https://github.com/jfinkhaeuser/prance/blob/master/CONTRIBUTING.md>`__ for
  details.


  Professional support is available through `finkhaeuser consulting
  <https://finkhaeuser.de>`__.


  License

  =======


  Licensed under MITNFA (MIT +no-false-attribs) License. See the

  `LICENSE.txt
  <https://github.com/jfinkhaeuser/prance/blob/master/LICENSE.txt>`__ file for
  details.


  "Prancing unicorn" logo image Copyright (c) Jens Finkhaeuser. All rights
  reserved.

  Made by `Moreven B <http://morevenb.com/>`__.


  .. |Posix Build Status| image::
  https://travis-ci.org/jfinkhaeuser/prance.svg?branch=master
     :target: https://travis-ci.org/jfinkhaeuser/prance
  .. |Windows Build Status| image::
  https://ci.appveyor.com/api/projects/status/ic7lo8r95mkee7di/branch/master?svg=true
     :target: https://ci.appveyor.com/project/jfinkhaeuser/prance
  .. |Docs| image::
  https://readthedocs.org/projects/prance/badge/?version=latest
     :target: http://prance.readthedocs.io/en/latest/
  .. |License| image:: https://img.shields.io/pypi/l/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |PyPI| image:: https://img.shields.io/pypi/v/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Format| image:: https://img.shields.io/pypi/format/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Python Versions| image:: https://img.shields.io/pypi/pyversions/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Status| image:: https://img.shields.io/pypi/status/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |FOSSA Status| image::
  https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance.svg?type=shield
     :target: https://app.fossa.io/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance?ref=badge_shield
  .. |Logo| image::
  https://raw.githubusercontent.com/jfinkhaeuser/prance/master/docs/images/prance_logo_256.png

swimlane/qswag: >
  # qswag


  Fast & Light Swagger generator for .NET Core. For more information, checkout
  the [documentation](https://swimlane.gitbooks.io/qswag/content/)


  ## Example


  ```csharp

  using System;

  using System.Collections.Generic;

  using System.IO;

  using System.Linq;

  using System.Net.Http;

  using System.Reflection;

  using System.Text;

  using Microsoft.AspNetCore.Authorization;

  using Microsoft.AspNetCore.Mvc;

  using Newtonsoft.Json;

  using QSwagGenerator;

  using QSwagSchema;


  namespace Controllers

  {
      /// <summary>
      /// Swagger spec controller.
      /// </summary>
      /// <seealso cref="Microsoft.AspNetCore.Mvc.Controller" />
      public class SwaggerController : Controller
      {
          private readonly List<Type> _types;

          /// <summary>
          /// Initializes a new instance of the <see cref="SwaggerController"/> class.
          /// </summary>
          public SwaggerController()
          {
              _types = new List<Type>
              {
                  typeof(GroupsController),
                  typeof(SettingsController)

              };
          }
          /// <summary>
          /// Gets the swagger.
          /// </summary>
          /// <returns>Swagger specification Json
          /// </returns>
          [HttpGet("/swagger")]
          public ActionResult GetSwagger(params string[] type)
          {
              var types = type == null || type.Length <= 0 ? _types : type.Select(GetTypeFromString);
              var httpRequest = HttpContext?.Request;
              
              var generatorSettings = new GeneratorSettings(httpRequest)
              {
                  DefaultUrlTemplate = "/[controller]/{id?}",
                  IgnoreObsolete = true,
                  Info = new Info() { Title = "Swimlane API", Version = "3.0" },
                  XmlDocPath = Path.ChangeExtension(Assembly.GetEntryAssembly().Location, "xml"),
                  SecurityDefinitions = new Dictionary<string, SecurityDefinition>()
                  {
                      {
                          "jwt_token",
                          new SecurityDefinition("Authorization", SecuritySchemeType.ApiKey) {In = Location.Header}
                      }
                  },
                  JsonSchemaLicense = "YourJsonSchemaLicense"
              };
              
              generatorSettings.Security.Add(new SecurityRequirement("jwt_token"));
              var generateForControllers = WebApiToSwagger.GenerateForControllers(types, generatorSettings, nameof(GetSwagger));
              
              return new FileContentResult(Encoding.UTF8.GetBytes(generateForControllers), "application/json");
          }

          private Type GetTypeFromString(string type)
          {
              var typeFromString = Type.GetType(type);
              if (typeFromString != null)
                  return typeFromString;
              if (!type.Contains("."))
                  return GetTypeFromString(string.Join(".", GetType().Namespace, type));
              if (!type.EndsWith("controller", StringComparison.CurrentCultureIgnoreCase))
                  return GetTypeFromString(string.Concat(type, "Controller"));
              return null;
          }
      }
  }

  ```


  ## Credits

  `qswag` is a [Swimlane](http://swimlane.com) open-source project; we believe
  in giving back to the open-source community by sharing some of the projects we
  build for our application. Swimlane is an automated cyber security operations
  and incident response platform that enables cyber security teams to leverage
  threat intelligence, speed up incident response and automate security
  operations.
frankiesardo/pedestal-swagger: >
  # route-swagger


  [![Build
  status](https://circleci.com/gh/frankiesardo/route-swagger.svg?style=shield)](https://circleci.com/gh/frankiesardo/route-swagger)


  Generate Swagger documentation from pedestal (or tripod) routes


  - [Demo](https://pedestal-swagger.herokuapp.com)


  ## For old pedestal-swagger users


  This project now focuses solely on route transformation and schema validation
  and thus is pedestal-agnostic.


  Route-swagger is a much lower level library. Everything the old
  pedestal-swagger did is still possible (look at the example repo) but requires
  a bit more boilerplate. The major breaking difference is that now
  route-swagger uses ring specific keys for describing the schema rather than
  swagger ones, e.g.


  ```clj

  {:parameters {:body-params ..
                :form-params ..
                :query-params ..
                :path-params ..
                :headers ..}
    :responses {500 {:body .. :headers ..}}}            
  ```


  Instead of `body`, `formData`, `query`, `schema`, etc. That should make it
  much more user friendly for clojure users.


  For a nicer integration with pedestal, extra features and easier migration
  path from the old pedestal-swagger check out
  [pedestal-api](https://github.com/oliyh/pedestal-api).


  ## Download


  [![Clojars
  Project](http://clojars.org/frankiesardo/route-swagger/latest-version.svg)](http://clojars.org/frankiesardo/route-swagger)


  ## Usage


  Have a look at the project under the example folder for a working pedestal app


  ## License


  Copyright © 2015 Frankie Sardo


  Distributed under the Eclipse Public License either version 1.0 or (at

  your option) any later version.
gengo/grpc-gateway: >
  # grpc-gateway


  [![release](https://img.shields.io/github/release/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](https://github.com/grpc-ecosystem/grpc-gateway/releases)
  [![CircleCI](https://img.shields.io/circleci/project/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://circleci.com/gh/grpc-ecosystem/grpc-gateway)
  [![coverage](https://img.shields.io/codecov/c/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://codecov.io/gh/grpc-ecosystem/grpc-gateway)
  [![license](https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](LICENSE.txt)


  The grpc-gateway is a plugin of the Google protocol buffers compiler

  [protoc](https://github.com/protocolbuffers/protobuf).

  It reads protobuf service definitions and generates a reverse-proxy server
  which

  translates a RESTful JSON API into gRPC. This server is generated according to
  the

  [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotations in your service definitions.


  It helps you provide your APIs in both gRPC and RESTful style at the same
  time.


  ![architecture introduction
  diagram](https://docs.google.com/drawings/d/12hp4CPqrNPFhattL_cIoJptFvlAqm5wLQ0ggqI5mkCg/pub?w=749&amp;h=370)


  ## Check out our
  [documentation](https://grpc-ecosystem.github.io/grpc-gateway/)!


  ## Background

  gRPC is great -- it generates API clients and server stubs in many programming

  languages, it is fast, easy-to-use, bandwidth-efficient and its design is

  combat-proven by Google. However, you might still want to provide a
  traditional

  RESTful JSON API as well. Reasons can range from maintaining

  backwards-compatibility, supporting languages or clients not well supported by

  gRPC to simply maintaining the aesthetics and tooling involved with a RESTful

  JSON architecture.


  This project aims to provide that HTTP+JSON interface to your gRPC service.

  A small amount of configuration in your service to attach HTTP semantics is
  all

  that's needed to generate a reverse-proxy with this library.


  ## Installation


  The grpc-gateway requires a local installation of the Google protocol buffers

  compiler `protoc` v3.0.0 or above. Please install this via your local package

  manager or by downloading one of the releases from the official repository:


  https://github.com/protocolbuffers/protobuf/releases



  Then, `go get -u` as usual the following packages:


  ```sh

  go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway

  go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger

  go get -u github.com/golang/protobuf/protoc-gen-go

  ```


  This will place three binaries in your `$GOBIN`;


  * `protoc-gen-grpc-gateway`

  * `protoc-gen-grpc-swagger`

  * `protoc-gen-go`


  Make sure that your `$GOBIN` is in your `$PATH`.


  ## Usage


  1. Define your service in gRPC

     your_service.proto:
     ```protobuf
     syntax = "proto3";
     package example;
     message StringMessage {
       string value = 1;
     }

     service YourService {
       rpc Echo(StringMessage) returns (StringMessage) {}
     }
     ```
  2. Add a
  [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotation to your .proto file

     your_service.proto:
     ```diff
      syntax = "proto3";
      package example;
     +
     +import "google/api/annotations.proto";
     +
      message StringMessage {
        string value = 1;
      }

      service YourService {
     -  rpc Echo(StringMessage) returns (StringMessage) {}
     +  rpc Echo(StringMessage) returns (StringMessage) {
     +    option (google.api.http) = {
     +      post: "/v1/example/echo"
     +      body: "*"
     +    };
     +  }
      }
     ```

     If you do not want to modify the proto file for use with grpc-gateway you can
     alternatively use an external
     [gRPC Service Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config) file.
     [Check our documentation](https://grpc-ecosystem.github.io/grpc-gateway/docs/grpcapiconfiguration.html)
     for more information.

  3. Generate gRPC stub

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --go_out=plugins=grpc:. \
       path/to/your_service.proto
     ```

     It will generate a stub file `path/to/your_service.pb.go`.
  4. Implement your service in gRPC as usual
     1. (Optional) Generate gRPC stub in the language you want.

       e.g.
       ```sh
       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --ruby_out=. \
         path/to/your/service_proto

       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --plugin=protoc-gen-grpc=grpc_ruby_plugin \
         --grpc-ruby_out=. \
         path/to/your/service.proto
       ```
     2. Add the googleapis-common-protos gem (or your language equivalent) as a dependency to your project.
     3. Implement your service

  5. Generate reverse-proxy

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --grpc-gateway_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

     It will generate a reverse proxy `path/to/your_service.pb.gw.go`.

  6. Write an entrypoint

     Now you need to write an entrypoint of the proxy server.
     ```go
     package main

     import (
       "flag"
       "net/http"

       "github.com/golang/glog"
       "golang.org/x/net/context"
       "github.com/grpc-ecosystem/grpc-gateway/runtime"
       "google.golang.org/grpc"

       gw "path/to/your_service_package"
     )

     var (
       echoEndpoint = flag.String("echo_endpoint", "localhost:9090", "endpoint of YourService")
     )

     func run() error {
       ctx := context.Background()
       ctx, cancel := context.WithCancel(ctx)
       defer cancel()

       mux := runtime.NewServeMux()
       opts := []grpc.DialOption{grpc.WithInsecure()}
       err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux, *echoEndpoint, opts)
       if err != nil {
         return err
       }

       return http.ListenAndServe(":8080", mux)
     }

     func main() {
       flag.Parse()
       defer glog.Flush()

       if err := run(); err != nil {
         glog.Fatal(err)
       }
     }
     ```

  7. (Optional) Generate swagger definitions

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --swagger_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

  ## Parameters and flags

  `protoc-gen-grpc-gateway` supports custom mapping from Protobuf `import` to

  Golang import paths. They are compatible to

  [the parameters with same names in
  `protoc-gen-go`](https://github.com/golang/protobuf#parameters)

  (except `source_relative`).


  In addition we also support the `request_context` parameter in order to use
  the

  `http.Request`'s Context (only for Go 1.7 and above). This parameter can be

  useful to pass request scoped context between the gateway and the gRPC
  service.


  `protoc-gen-grpc-gateway` also supports some more command line flags to
  control

  logging. You can give these flags together with parameters above. Run

  `protoc-gen-grpc-gateway --help` for more details about the flags.


  ## More Examples

  More examples are available under `examples` directory.

  * `proto/examplepb/echo_service.proto`,
  `proto/examplepb/a_bit_of_everything.proto`,
  `proto/examplepb/unannotated_echo_service.proto`: service definition
    * `proto/examplepb/echo_service.pb.go`, `proto/examplepb/a_bit_of_everything.pb.go`, `proto/examplepb/unannotated_echo_service.pb.go`: [generated] stub of the service
    * `proto/examplepb/echo_service.pb.gw.go`, `proto/examplepb/a_bit_of_everything.pb.gw.go`, `proto/examplepb/uannotated_echo_service.pb.gw.go`: [generated] reverse proxy for the service
    * `proto/examplepb/unannotated_echo_service.yaml`: gRPC API Configuration for ```unannotated_echo_service.proto```
  * `server/main.go`: service implementation

  * `main.go`: entrypoint of the generated reverse proxy


  To use the same port for custom HTTP handlers (e.g. serving `swagger.json`),

  gRPC-gateway, and a gRPC server, see

  [this code example by
  CoreOS](https://github.com/philips/grpc-gateway-example/blob/master/cmd/serve.go)

  (and its accompanying [blog
  post](https://coreos.com/blog/gRPC-protobufs-swagger.html)).


  ## Features


  ### Supported


  * Generating JSON API handlers.

  * Method parameters in request body.

  * Method parameters in request path.

  * Method parameters in query string.

  * Enum fields in path parameter (including repeated enum fields).

  * Mapping streaming APIs to newline-delimited JSON streams.

  * Mapping HTTP headers with `Grpc-Metadata-` prefix to gRPC metadata (prefixed
  with `grpcgateway-`)

  * Optionally emitting API definitions for

  [OpenAPI (Swagger)
  v2](https://swagger.io/docs/specification/2-0/basic-structure/).

  * Setting [gRPC
  timeouts](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests)

  through inbound HTTP `Grpc-Timeout` header.

  * Partial support for [gRPC API
  Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config)

  files as an alternative to annotation.

  * Automatically translating PATCH requests into Field Mask gRPC requests. See

  [the docs](https://grpc-ecosystem.github.io/grpc-gateway/docs/patch.html)

  for more information.


  ### No plan to support

  But patch is welcome.

  * Method parameters in HTTP headers.

  * Handling trailer metadata.

  * Encoding request/response body in XML.

  * True bi-directional streaming.


  # Mapping gRPC to HTTP


  * [How gRPC error codes map to HTTP status codes in the
  response](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/errors.go#L15).

  * HTTP request source IP is added as `X-Forwarded-For` gRPC request header.

  * HTTP request host is added as `X-Forwarded-Host` gRPC request header.

  * HTTP `Authorization` header is added as `authorization` gRPC request header.

  * Remaining Permanent HTTP header keys (as specified by the IANA

  [here](http://www.iana.org/assignments/message-headers/message-headers.xhtml)

  are prefixed with `grpcgateway-` and added with their values to gRPC request

  header.

  * HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata

  (prefixed with `grpcgateway-`).

  * While configurable, the default {un,}marshaling uses

  [jsonpb](https://godoc.org/github.com/golang/protobuf/jsonpb) with

  `OrigName: true`.


  # Contribution

  See
  [CONTRIBUTING.md](http://github.com/grpc-ecosystem/grpc-gateway/blob/master/CONTRIBUTING.md).


  # License

  grpc-gateway is licensed under the BSD 3-Clause License.

  See
  [LICENSE.txt](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt)
  for more details.
BigstickCarpet/swagger-express-middleware: >
  Swagger Express Middleware

  ============================

  ### Swagger 2.0 middleware and mocks for Express.js


  [![Cross-Platform
  Compatibility](https://apidevtools.org/img/os-badges.svg)](https://travis-ci.com/APIDevTools/swagger-express-middleware)

  [![Build
  Status](https://api.travis-ci.com/APIDevTools/swagger-express-middleware.svg?branch=master)](https://travis-ci.com/APIDevTools/swagger-express-middleware)

  [![Coverage
  Status](https://coveralls.io/repos/github/APIDevTools/swagger-express-middleware/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-express-middleware)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)


  [![npm](https://img.shields.io/npm/v/swagger-express-middleware.svg)](https://www.npmjs.com/package/swagger-express-middleware)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-express-middleware.svg)](https://david-dm.org/APIDevTools/swagger-express-middleware)

  [![License](https://img.shields.io/npm/l/swagger-express-middleware.svg)](LICENSE)




  OpenAPI 3.0 Support

  --------------------------

  We are currently working on migrating Swagger Express Middleware to OpenAPI
  3.0.  You can find the latest information in [**the v3
  branch**](https://github.com/APIDevTools/swagger-express-middleware/tree/v3).




  Features

  --------------------------

  - **Supports Swagger 2.0 specs in JSON or YAML** <br>

  Swagger Express Middleware uses
  [Swagger-Parser](https://github.com/APIDevTools/swagger-parser) to parse,
  validate, and dereference Swagger files.  You can even split your spec into
  multiple different files using `$ref` pointers.


  - **Thoroughly tested**<br>

  Over 1,000 unit tests and integration tests with 100% code coverage.  Tested
  on [**over 1,000 real-world APIs**](https://apis.guru/browse-apis/) from
  Google, Instagram, Spotify, etc.  All tests are run on Mac, Linux, and Windows
  using all LTS versions of Node. But nothing's perfect, so if you find a bug,
  [please report
  it](https://github.com/APIDevTools/swagger-express-middleware/issues).


  - [**Mock
  middleware**](https://apidevtools.org/swagger-express-middleware/docs/middleware/mock.html)<br>

  **Fully-functional mock** implementations for every operation in your API,
  including data persistence, all with **zero code!**  This is a great way to
  test-drive your API as you write it, or for quick demos and POCs.  You can
  even extend the mock middleware with your own logic and data to fill in any
  gaps.


  - [**Metadata
  middleware**](https://apidevtools.org/swagger-express-middleware/docs/middleware/metadata.html)<br>

  Annotates each request with all the relevant information from the Swagger
  definition.  The path, the operation, the parameters, the security
  requirements - they're all easily accessible at `req.swagger`.


  - [**Parse Request
  middleware**](https://apidevtools.org/swagger-express-middleware/docs/middleware/parseRequest.html)<br>

  Parses incoming requests and converts everything into the correct data types,
  according to your Swagger API definition.


  - [**Validate Request
  middleware**](https://apidevtools.org/swagger-express-middleware/docs/middleware/validateRequest.html)<br>

  Ensures that every request complies with your Swagger API definition, or
  returns the appropriate HTTP error codes if needed.  Of course, you can catch
  any validation errors and handle them however you want.


  - [**CORS
  middleware**](https://apidevtools.org/swagger-express-middleware/docs/middleware/CORS.html)<br>

  Adds the appropriate CORS headers to each request and automatically responds
  to CORS preflight requests, all in compliance with your Swagger API
  definition.


  - [**Files
  middleware**](https://apidevtools.org/swagger-express-middleware/docs/middleware/files.html)<br>

  Serves the Swagger API file(s) in JSON or YAML format so they can be used with
  front-end tools like [Swagger UI](http://www.swagger.io), [Swagger
  Editor](http://editor.swagger.io), and [Postman](http://getpostman.com).



  Installation and Use

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/).


  ```bash

  npm install swagger-express-middleware

  ```

  Then use it in your [Node.js](http://nodejs.org/) script like this:


  ```javascript

  const express = require('express');

  const createMiddleware = require('swagger-express-middleware');


  let app = express();


  createMiddleware('PetStore.yaml', app, function(err, middleware) {
      // Add all the Swagger Express Middleware, or just the ones you need.
      // NOTE: Some of these accept optional options (omitted here for brevity)
      app.use(
          middleware.metadata(),
          middleware.CORS(),
          middleware.files(),
          middleware.parseRequest(),
          middleware.validateRequest(),
          middleware.mock()
      );

      app.listen(8000, function() {
          console.log('The PetStore sample is now running at http://localhost:8000');
      });
  });

  ```


  Samples & Walkthroughs

  --------------------------

  Swagger Express Middleware comes two samples that use the [Swagger Pet Store
  API](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/PetStore.yaml).


  #### Sample 1

  This sample demonstrates the most simplistic usage of Swagger Express
  Middleware. It simply creates a new Express Application and adds all of the
  Swagger middleware without changing any options, and without adding any custom
  middleware.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample1.js)

  *
  [Walkthrough](https://apidevtools.org/swagger-express-middleware/docs/walkthroughs/running.html)



  #### Sample 2

  This sample demonstrates a few more advanced features of Swagger Express
  Middleware, such as setting a few options, initializing the mock data store,
  and adding custom middleware logic.


  * [Source
  Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample2.js)

  *
  [Walkthrough](https://apidevtools.org/swagger-express-middleware/docs/walkthroughs/walkthrough2.html)



  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an
  issue](https://github.com/APIDevTools/swagger-express-middleware/issues) on
  GitHub and [submit a pull
  request](https://github.com/APIDevTools/swagger-express-middleware/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-express-middleware.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`


  4. **Run the sample app**<br>

  `npm start`



  License

  --------------------------

  Swagger Express Middleware is 100% free and open-source, under the [MIT
  license](LICENSE). Use it however you want.


  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers
  ❤


  [![Travis
  CI](https://jsdevtools.org/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jsdevtools.org/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jsdevtools.org/img/badges/coveralls.svg)](https://coveralls.io)
RobWin/swagger2markup-gradle-plugin: >
  = Swagger2Markup Gradle Plugin

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin.svg?branch=master["Build
  Status",
  link="https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin"]
  image:https://coveralls.io/repos/Swagger2Markup/swagger2markup-gradle-plugin/badge.svg["Coverage
  Status",
  link="https://coveralls.io/r/Swagger2Markup/swagger2markup-gradle-plugin"]
  image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup-gradle-plugin/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup-gradle-plugin/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]
  image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/Swagger2Markup/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]


  == Reference documentation


  The documentation can be found at
  https://github.com/Swagger2Markup/swagger2markup#reference-documentation[Reference
  documentation]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
raphael/goa: >
  # <img src="http://goa.design/img/goa-logo.svg">


  goa is a framework for building micro-services and REST APIs in Go using a

  unique design-first approach.


  ---

  [![Build
  Status](https://travis-ci.org/goadesign/goa.svg?branch=master)](https://travis-ci.org/goadesign/goa)

  [![Windows Build
  status](https://ci.appveyor.com/api/projects/status/vixp37loj5i6qmaf/branch/master?svg=true)](https://ci.appveyor.com/project/RaphaelSimon/goa-oqtis/branch/master)

  [![Sourcegraph](https://sourcegraph.com/github.com/goadesign/goa/-/badge.svg)](https://sourcegraph.com/github.com/goadesign/goa?badge)

  [![Godoc](https://godoc.org/github.com/goadesign/goa?status.svg)](http://godoc.org/github.com/goadesign/goa)

  [![Slack](https://img.shields.io/badge/slack-gophers-orange.svg?style=flat)](https://gophers.slack.com/messages/goa/)


  *goa v1.4.1 released! [Release Notes](https://goa.design/blog/008-v_1_4_1/)*


  ## V2


  [goa v2](https://github.com/goadesign/goa/tree/v2) is currently in beta:

  it is robust enough to be used in production but there may still be breaking

  changes before the final release. If you're new to goa then you may want to

  consider starting with v2.


  ## Why goa?


  goa takes a different approach to building micro-services. Instead of focusing

  solely on helping with implementation, goa makes it possible to describe the

  *design* of your API using a simple Go DSL. goa then uses that description to

  generate specialized service helper code, documentation, API clients, tests
  and

  even custom artifacts via plugins.


  If DSLs or code generation are not your thing then consider this: APIs are
  meant

  to be consumed. This means that they need to come with accurate documentation

  that describes in details each of the API endpoints: their path, their

  parameters, their request and response payloads as well as any associated

  validation (which parameters are required, their maximum length etc.).
  Typically

  this requires maintaining a completely separate document (for example an
  OpenAPI

  specification). Making sure that the document stays up-to-date takes a lot of

  effort and quickly becomes impossible as the number of services and thus APIs

  grows. Starting from the design means a *single source of truth* for the

  implementations of the service and the client as well as for the
  documentation.

  Write the DSL once and reap the benefits multiple times over.


  Another aspect to consider is the need for designing APIs. The API is the

  interface to your service and as such must be crafted carefully. Consistency
  is

  very important and details matter. If the source code is the only place where

  design decisions are kept then not only is it very hard to maintain
  consistency

  it's also difficult to think abstractly about the API in the first place. The

  goa DSL makes it possible to reason about and describe the design explicitly

  and - since it's code - to easily re-use design elements across the service

  endpoints or even across multiple services.


  ## goagen


  [goagen](https://goa.design/implement/goagen/) is the code generation tool of

  goa. It accepts the design package where the DSL is written as input and

  produces various outputs. One of the outputs is the glue code that binds your

  code with the underlying HTTP server. This code is specific to your API so
  that

  for example there is no need to cast or "bind" any handler argument prior to

  using them. Each generated handler has a signature that is specific to the

  corresponding resource action. It's not just the parameters though, each
  handler

  also has access to specific helper methods that generate the possible
  responses

  for that action. The DSL can also define validations in which case the
  generated

  code takes care of validating the incoming request parameters and payload
  prior

  to invoking the handler.


  The end result is controller code that is terse and clean, the boilerplate is

  all gone. Another big benefit is the clean separation of concern between
  design

  and implementation: on bigger projects it's often the case that API design

  changes require careful review. On such project being able to generate a new

  version of the documentation without having to write a single line of

  implementation is a big boon.


  This idea of separating design and implementation is not new, the

  excellent [Praxis](http://praxis-framework.io) framework from RightScale
  follows

  the same pattern and was an inspiration to goa.


  ## Installation


  Assuming you have a working [Go](https://golang.org) setup:

  ```

  go get -u github.com/goadesign/goa/...

  ```


  ### Stable Versions


  goa follows [Semantic Versioning](http://semver.org/) which is a fancy way of
  saying it publishes

  releases with version numbers of the form `vX.Y.Z` and makes sure that your
  code can upgrade to new

  versions with the same `X` component without having to make changes.


  Releases are tagged with the corresponding version number. There is also a
  branch for each major

  version (only `v1` at the moment). The recommended practice is to vendor the
  stable branch.


  Current Release: `v1.4.1`

  Stable Branch: `v1`


  ## Teaser


  ### 1. Design


  Create the file `$GOPATH/src/goa-adder/design/design.go` with the following
  content:

  ```go

  package design


  import (
          . "github.com/goadesign/goa/design"
          . "github.com/goadesign/goa/design/apidsl"
  )


  var _ = API("adder", func() {
          Title("The adder API")
          Description("A teaser for goa")
          Host("localhost:8080")
          Scheme("http")
  })


  var _ = Resource("operands", func() {
          Action("add", func() {
                  Routing(GET("add/:left/:right"))
                  Description("add returns the sum of the left and right parameters in the response body")
                  Params(func() {
                          Param("left", Integer, "Left operand")
                          Param("right", Integer, "Right operand")
                  })
                  Response(OK, "text/plain")
          })

  })

  ```

  This file contains the design for an `adder` API which accepts HTTP GET
  requests to `/add/:x/:y`

  where `:x` and `:y` are placeholders for integer values. The API returns the
  sum of `x` and `y` in

  its body.


  ### 2. Implement


  Now that the design is done, let's run `goagen` on the design package:

  ```

  cd $GOPATH/src/goa-adder

  goagen bootstrap -d goa-adder/design

  ```

  This produces the following outputs:


  * `main.go` and `operands.go` contain scaffolding code to help bootstrap the
  implementation.
    running `goagen` again does not recreate them so that it's safe to edit their content.
  * an `app` package which contains glue code that binds the low level HTTP
  server to your
    implementation.
  * a `client` package with a `Client` struct that implements a `AddOperands`
  function which calls
    the API with the given arguments and returns the `http.Response`.
  * a `tool` directory that contains the complete source for a client CLI tool.

  * a `swagger` package with implements the `GET /swagger.json` API endpoint.
  The response contains
    the full Swagger 2.0 specificiation of the API.

  ### 3. Run


  First let's implement the API - edit the file `operands.go` and replace the
  content of the `Add`

  function with:

  ```go

  // Add import for strconv

  import "strconv"


  // Add runs the add action.

  func (c *OperandsController) Add(ctx *app.AddOperandsContext) error {
          sum := ctx.Left + ctx.Right
          return ctx.OK([]byte(strconv.Itoa(sum)))
  }

  ```

  Now let's compile and run the service:

  ```

  cd $GOPATH/src/goa-adder

  go build

  ./goa-adder

  2016/04/05 20:39:10 [INFO] mount ctrl=Operands action=Add route=GET
  /add/:left/:right

  2016/04/05 20:39:10 [INFO] listen transport=http addr=:8080

  ```

  Open a new console and compile the generated CLI tool:

  ```

  cd $GOPATH/src/goa-adder/tool/adder-cli

  go build

  ```

  The tool includes contextual help:

  ```

  ./adder-cli --help

  CLI client for the adder service


  Usage:
    adder-cli [command]

  Available Commands:
    add         add returns the sum of the left and right parameters in the response body

  Flags:
        --dump               Dump HTTP request and response.
    -H, --host string        API hostname (default "localhost:8080")
    -s, --scheme string      Set the requests scheme
    -t, --timeout duration   Set the request timeout (default 20s)

  Use "adder-cli [command] --help" for more information about a command.

  ```

  To get information on how to call a specific API use:

  ```

  ./adder-cli add operands --help

  Usage:
    adder-cli add operands [/add/LEFT/RIGHT] [flags]

  Flags:
        --left int    Left operand
        --pp          Pretty print response body
        --right int   Right operand

  Global Flags:
        --dump               Dump HTTP request and response.
    -H, --host string        API hostname (default "localhost:8080")
    -s, --scheme string      Set the requests scheme
    -t, --timeout duration   Set the request timeout (default 20s)
  ```

  Now let's run it:

  ```

  ./adder-cli add operands /add/1/2

  2016/04/05 20:43:18 [INFO] started id=HffVaGiH
  GET=http://localhost:8080/add/1/2

  2016/04/05 20:43:18 [INFO] completed id=HffVaGiH status=200 time=1.028827ms

  3⏎

  ```

  This also works:

  ```

  $ ./adder-cli add operands --left=1 --right=2

  2016/04/25 00:08:59 [INFO] started id=ouKmwdWp
  GET=http://localhost:8080/add/1/2

  2016/04/25 00:08:59 [INFO] completed id=ouKmwdWp status=200 time=1.097749ms

  3⏎

  ```

  The console running the service shows the request that was just handled:

  ```

  2016/06/06 10:23:03 [INFO] started req_id=rLAtsSThLD-1 GET=/add/1/2 from=::1
  ctrl=OperandsController action=Add

  2016/06/06 10:23:03 [INFO] params req_id=rLAtsSThLD-1 right=2 left=1

  2016/06/06 10:23:03 [INFO] completed req_id=rLAtsSThLD-1 status=200 bytes=1
  time=66.25µs

  ```

  Now let's see how robust our service is and try to use non integer values:

  ```

  ./adder-cli add operands add/1/d

  2016/06/06 10:24:22 [INFO] started id=Q2u/lPUc
  GET=http://localhost:8080/add/1/d

  2016/06/06 10:24:22 [INFO] completed id=Q2u/lPUc status=400 time=1.301083ms

  error: 400: {"code":"invalid_request","status":400,"detail":"invalid value
  \"d\" for parameter \"right\", must be a integer"}

  ```

  As you can see the generated code validated the incoming request against the
  types defined in the

  design.


  ### 4. Document


  The `swagger` directory contains the API Swagger (OpenAPI) version 2.0
  specification in both

  YAML and JSON format.


  For open source projects hosted on

  github [swagger.goa.design](http://swagger.goa.design) provides a free service

  that renders the Swagger representation dynamically from goa design packages.

  Simply set the `url` query string with the import path to the design package.

  For example displaying the docs for `github.com/goadesign/goa-cellar/design`
  is

  done by browsing to:


  http://swagger.goa.design/?url=goadesign%2Fgoa-cellar%2Fdesign


  Note that the above generates the swagger spec dynamically and does not
  require it to be present in

  the Github repo.


  The Swagger JSON can also easily be served from the documented service itself
  using a simple

  [Files](http://goa.design/reference/goa/design/apidsl/#func-files-a-name-apidsl-files-a)

  definition in the design. Edit the file `design/design.go` and add:


  ```go

  var _ = Resource("swagger", func() {
          Origin("*", func() {
                 Methods("GET") // Allow all origins to retrieve the Swagger JSON (CORS)
          })
          Files("/swagger.json", "swagger/swagger.json")
  })

  ```


  Re-run `goagen bootstrap -d goa-adder/design` and note the new file

  `swagger.go` containing the implementation for a controller that serves the

  `swagger.json` file.


  Mount the newly generated controller by adding the following two lines to the
  `main` function in

  `main.go`:


  ```go

  cs := NewSwaggerController(service)

  app.MountSwaggerController(service, cs)

  ```


  Recompile and restart the service:


  ```

  ^C

  go build

  ./goa-adder

  2016/06/06 10:31:14 [INFO] mount ctrl=Operands action=Add route=GET
  /add/:left/:right

  2016/06/06 10:31:14 [INFO] mount ctrl=Swagger files=swagger/swagger.json
  route=GET /swagger.json

  2016/06/06 10:31:14 [INFO] listen transport=http addr=:8080

  ```


  Note the new route `/swagger.json`.  Requests made to it return the Swagger
  specification. The

  generated controller also takes care of adding the proper CORS headers so that
  the JSON may be

  retrieved from browsers using JavaScript served from a different origin (e.g.
  via Swagger UI). The

  client also has a new `download` action:


  ```

  cd tool/adder-cli

  go build

  ./adder-cli download --help

  Download file with given path


  Usage:
    adder-cli download [PATH] [flags]

  Flags:
        --out string   Output file

  Global Flags:
        --dump               Dump HTTP request and response.
    -H, --host string        API hostname (default "localhost:8080")
    -s, --scheme string      Set the requests scheme
    -t, --timeout duration   Set the request timeout (default 20s)
  ```


  Which can be used like this to download the file `swagger.json` in the current
  directory:


  ```

  ./adder-cli download swagger.json

  2016/06/06 10:36:24 [INFO] started file=swagger.json id=ciHL2VLt
  GET=http://localhost:8080/swagger.json

  2016/06/06 10:36:24 [INFO] completed file=swagger.json id=ciHL2VLt status=200
  time=1.013307ms

  ```


  We now have a self-documenting API and best of all the documentation is
  automatically updated as the

  API design changes.


  ## Resources


  Consult the following resources to learn more about goa.


  ### goa.design


  [goa.design](https://goa.design) contains further information on goa including
  a getting

  started guide, detailed DSL documentation as well as information on how to
  implement a goa service.


  ### Examples


  The [examples](https://github.com/goadesign/examples) repo contains simple
  examples illustrating

  basic concepts.


  The [goa-cellar](https://github.com/goadesign/goa-cellar) repo contains the
  implementation for a

  goa service which demonstrates many aspects of the design language. It is kept
  up-to-date and

  provides a reference for testing functionality.


  ## Contributing


  Did you fix a bug? write docs or additional tests? or implement some new
  awesome functionality?

  You're a rock star!! Just make sure that `make` succeeds (or that TravisCI is
  green) and send a PR

  over.
'BigstickCarpet/swagger-parser#swagger-parser': >-
  {"id":25453221,"node_id":"MDEwOlJlcG9zaXRvcnkyNTQ1MzIyMQ==","name":"swagger-parser","full_name":"APIDevTools/swagger-parser","private":false,"owner":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"html_url":"https://github.com/APIDevTools/swagger-parser","description":"Swagger
  2.0 and OpenAPI 3.0
  parser/validator","fork":false,"url":"https://api.github.com/repos/APIDevTools/swagger-parser","forks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/forks","keys_url":"https://api.github.com/repos/APIDevTools/swagger-parser/keys{/key_id}","collaborators_url":"https://api.github.com/repos/APIDevTools/swagger-parser/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/APIDevTools/swagger-parser/teams","hooks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/hooks","issue_events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/events{/number}","events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/events","assignees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/assignees{/user}","branches_url":"https://api.github.com/repos/APIDevTools/swagger-parser/branches{/branch}","tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/tags","blobs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/refs{/sha}","trees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/trees{/sha}","statuses_url":"https://api.github.com/repos/APIDevTools/swagger-parser/statuses/{sha}","languages_url":"https://api.github.com/repos/APIDevTools/swagger-parser/languages","stargazers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/stargazers","contributors_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contributors","subscribers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscribers","subscription_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscription","commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/commits{/sha}","git_commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/commits{/sha}","comments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/comments{/number}","issue_comment_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/comments{/number}","contents_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contents/{+path}","compare_url":"https://api.github.com/repos/APIDevTools/swagger-parser/compare/{base}...{head}","merges_url":"https://api.github.com/repos/APIDevTools/swagger-parser/merges","archive_url":"https://api.github.com/repos/APIDevTools/swagger-parser/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/APIDevTools/swagger-parser/downloads","issues_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues{/number}","pulls_url":"https://api.github.com/repos/APIDevTools/swagger-parser/pulls{/number}","milestones_url":"https://api.github.com/repos/APIDevTools/swagger-parser/milestones{/number}","notifications_url":"https://api.github.com/repos/APIDevTools/swagger-parser/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/APIDevTools/swagger-parser/labels{/name}","releases_url":"https://api.github.com/repos/APIDevTools/swagger-parser/releases{/id}","deployments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/deployments","created_at":"2014-10-20T06:14:51Z","updated_at":"2019-04-23T01:44:21Z","pushed_at":"2019-01-25T20:55:41Z","git_url":"git://github.com/APIDevTools/swagger-parser.git","ssh_url":"git@github.com:APIDevTools/swagger-parser.git","clone_url":"https://github.com/APIDevTools/swagger-parser.git","svn_url":"https://github.com/APIDevTools/swagger-parser","homepage":"https://apidevtools.org/swagger-parser","size":29779,"stargazers_count":456,"watchers_count":456,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"forks_count":73,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":31,"license":{"key":"mit","name":"MIT
  License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"forks":73,"open_issues":31,"watchers":456,"default_branch":"master","permissions":{"admin":false,"push":false,"pull":true},"organization":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"network_count":73,"subscribers_count":19}
kogosoftwarellc/express-openapi: >
  # @open-api [![Build Status][travis-image]][travis-url] [![Coveralls
  Status][coveralls-image]][coveralls-url] [![Gitter
  chat][gitter-image]][gitter-url] [![Greenkeeper
  badge](https://badges.greenkeeper.io/kogosoftwarellc/open-api.svg)](https://greenkeeper.io/)

  > A Monorepo of various packages to power OpenAPI in node.


  ## Quick Start Express


  * See
  [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)&nbsp;&nbsp;&nbsp;[![express-openapi
  Downloads][express-openapi-downloads-image]][express-openapi-npm-url]


  ## Quick Start Koa

  * See
  [koa-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/koa-openapi)&nbsp;&nbsp;&nbsp;[![koa-openapi
  Downloads][koa-openapi-downloads-image]][koa-openapi-npm-url]


  ## Packages

  *
  [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)

  *
  [fetch-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fetch-openapi)

  *
  [fs-routes](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fs-routes)

  *
  [openapi-default-setter](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-default-setter)

  *
  [openapi-framework](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-framework)

  *
  [openapi-jsonschema-parameters](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-jsonschema-parameters)

  *
  [openapi-request-coercer](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-coercer)

  *
  [openapi-request-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-validator)

  *
  [openapi-response-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-response-validator)

  *
  [openapi-schema-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-schema-validator)

  *
  [openapi-types](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-types)


  ## Development


  _Note:  One of the goals of this monorepo is to support independent package
  versions.  The author has used other popular options out there (like lerna),
  and has found independent versioning to behave strangely with them.  Another
  goal with the current approach is to reduce boilerplate code as much as
  possible (something tools like lerna don't help with).  The inspiration for
  the current approach came from
  [boennemann/alle](https://github.com/boennemann/alle).  The author isn't

  married to the current approach, so if you have ideas on how to simplify the
  development of this monorepo by all means please [open an
  issue](https://github.com/kogosoftwarellc/open-api/issues/new)._


  ### Typical Workflow for Contributors


  Let's say you're working on a package under
  [./packages](https://github.com/kogosoftwarellc/open-api/tree/master/packages). 
  Here's what you do:


  1. `cd open-api`

  1. `./bin/test packages/<package_you're_working_on>`

  1. Make your changes.
    1. _Do not bump the version in package.json._  A maintainer will handle that once your PR is merged.
  1. Once you're satisfied with your changes:
    1. Create a new branch `git checkout -b my-branch` (in case you haven't done so already).
    1. `./bin/commit packages/<package_you're_working_on> 'commit message describing your change.  can be multi line here.  just close with a single quote like so:'`
    1. Push your change to your fork
    1. Open a PR.

  ### bin


  Several scripts have been created to aid in the development of this monorepo
  (see [./bin](./bin)).  They assume that your `$PWD` is the root of the
  repository.  Here is a brief summary of common actions:


  * Testing
    * (Note: `./bin/test` will run `npm i` in the package _prior_ to running the tests)
    * Test a single package - `./bin/test packages/<package_to_test>` (starts the test in watch mode)
    * Test all packages - `./bin/test`
  * Commit changes to a package - `./bin/commit packages/<package_to_commit>
  'Commit message'` (the commit message will be prepended with the package name
  e.g. `<package_to_commit>: Commit message`


  #### dev-tools

  Scripts in this directory wrap common tools, like `nyc`, `tsc`, and `mocha`. 
  They reduce boilerplate and are called from npm scripts.


  ## LICENSE


  ```

  The MIT License (MIT)


  Copyright (c) 2018 Kogo Software LLC


  Permission is hereby granted, free of charge, to any person obtaining a copy

  of this software and associated documentation files (the "Software"), to deal

  in the Software without restriction, including without limitation the rights

  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

  copies of the Software, and to permit persons to whom the Software is

  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in

  all copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN

  THE SOFTWARE.

  ```


  [express-openapi-downloads-image]:
  http://img.shields.io/npm/dm/express-openapi.svg

  [express-openapi-npm-url]: https://npmjs.org/package/express-openapi

  [koa-openapi-downloads-image]: http://img.shields.io/npm/dm/koa-openapi.svg

  [koa-openapi-npm-url]: https://npmjs.org/package/koa-openapi


  [travis-url]: https://travis-ci.org/kogosoftwarellc/open-api

  [travis-image]:
  https://api.travis-ci.org/kogosoftwarellc/open-api.svg?branch=master


  [coveralls-url]: https://coveralls.io/r/kogosoftwarellc/open-api

  [coveralls-image]:
  https://coveralls.io/repos/github/kogosoftwarellc/open-api/badge.svg?branch=master


  [gitter-url]: https://gitter.im/kogosoftwarellc/open-api

  [gitter-image]: https://badges.gitter.im/kogosoftwarellc/open-api.png
inaka/cowboy-swagger: >
  <img src="http://www.braveterry.com/wp-content/uploads/2015/03/swagger2.png"/>


  # cowboy-swagger

  [Swagger](http://swagger.io/) integration for
  [Cowboy](https://github.com/ninenines/cowboy) (built on
  [trails](https://github.com/inaka/cowboy-trails)).


  ## Contact Us

  If you find any **bugs** or have a **problem** while using this library,
  please

  [open an issue](https://github.com/inaka/elvis/issues/new) in this repo

  (or a pull request :)).


  ## Requirements

  Cowboy Swagger requires Erlang 18+ after 0.1.0 version


  ## Why Cowboy Swagger?

  Simple, because there isn't a tool in Erlang to document Cowboy RESTful APIs
  easy and fast,

  and to improve development productivity.


  With `cowboy_swagger` is possible to integrate Swagger to your Erlang projects
  that use Cowboy as a web server.

  It is extremely easy to use, and with just a few steps you'll have a nice Web
  documentation for your RESTful APIs.


  To learn a bit more about Swagger, please check this [blog
  post](http://inaka.net/blog/2015/06/23/erlang-swagger-2015/).


  ## How to Use it?

  This is the best part. It is extremely easy.


  ### 1. Document each Cowboy Handler

  Because `cowboy_swagger` runs on top of `trails`, the first thing that you
  have to do

  is document all about your handler within the trails metadata. Keep in mind
  that

  all fields defined within each method into the metadata must be compliant with
  the

  [Swagger specification](http://swagger.io/specification).


  For example, suppose that you have `example_echo_handler`, so it must
  implement the `trails/0`

  callback from `trails_handler` behaviour:


  ```erlang

  trails() ->
    Metadata =
      #{get =>
        #{tags => ["echo"],
          description => "Gets echo var from the server",
          produces => ["text/plain"]
        },
        put =>
        #{tags => ["echo"],
          description => "Sets echo var in the server",
          produces => ["text/plain"],
          parameters => [
            #{name => <<"echo">>,
              description => <<"Echo message">>,
              in => <<"path">>,
              required => false,
              type => <<"string">>}
          ]
        }
      },
    [trails:trail("/message/[:echo]", example_echo_handler, [], Metadata)].
  ```


  To get a better idea of how your handler should look like, please check
  [here](./example/src/example_echo_handler.erl).


  ### 2. Include cowboy_swagger in your app

  First, you need to include `cowboy_swagger_handler` module in your list of
  trails to be compiled.


  ```erlang

  % Include cowboy_swagger_handler in the trails list

  Trails = trails:trails([example_echo_handler,
                          example_description_handler,
                          cowboy_swagger_handler]),
  % store them

  trails:store(Trails),

  % and then compile them

  Dispatch = trails:single_host_compile(Trails),

  ```


  The snippet of code above is usually placed when you start `cowboy`. Check it
  [here](./example/src/example.erl#L31).


  Then add `cowboy_swagger` to the list of apps to be loaded in your `*.app.src`
  file.


  ```erlang

  {application, example,
   [
    {description, "Cowboy Swagger Basic Example."},
    {vsn, "0.1"},
    {applications,
     [kernel,
      stdlib,
      jsx,
      cowboy,
      trails,
      cowboy_swagger
     ]},
    {modules, []},
    {mod, {example, []}},
    {registered, []},
    {start_phases, [{start_trails_http, []}]}
   ]
  }.

  ```


  And that's it, you got it. Now start your application and then you will have
  access to the API docs

  under the path `/api-docs`. Supposing that you're running the app on
  `localhost:8080`,

  that will be [http://localhost:8080/api-docs](http://localhost:8080/api-docs).


  ## Configuration


  Additionally, `cowboy_swagger` can be configured/customized from a `*.config`
  file:


  ### app.config


  ```erlang

  [
   %% Other apps ...

   %% cowboy_swagger config
   {cowboy_swagger,
    [
     %% `static_files`: Static content directory. This is where Swagger-UI
     %% is located. Default: `priv/swagger`.
     %% Remember that Swagger-UI is embedded into `cowboy-swagger` project,
     %% within `priv/swagger` folder. BUT you have to reference that path,
     %% and depending on how you're using `cowboy-swagger` it will be different.
     %% For example, assuming that you want to run your app which has
     %% `cowboy-swagger` as dependency from the console, `static_files` will be:
     {static_files, "./deps/cowboy_swagger/priv/swagger"},

     %% `global_spec`: Global fields for Swagger specification.
     %% If these fields are not set, `cowboy_swagger` will set default values.
     {global_spec,
      #{swagger => "2.0",
        info => #{title => "Example API"},
        basePath => "/api-docs"
       }
     }
    ]
   }
  ].

  ```


  ### Definitions


  [Definitions](http://swagger.io/specification/#definitionsObject) can be used
  for describing

  [parameters](http://swagger.io/specification/#parametersDefinitionsObject),

  [responses](http://swagger.io/specification/#responsesDefinitionsObject) and

  [security](http://swagger.io/specification/#securityDefinitionsObject)
  schemas.


  For adding definitions to your app, you have 2 choices:


  1. Add a `definitions` key to your cowboy_swagger `global_spec` map.

  2. Add them by calling `cowboy_swagger:add_definition/2` and send the
     definition's name and properties.

  Let's say you want to describe a `POST` call to a `newspapers` endpoint that
  requires

  `name` and `description` fields only, you can do it like this:


  **Option 1:**

  ```erlang

  [ ... % other configurations

  , { cowboy_swagger
    , [ { global_spec
        , #{ swagger => "2.0"
           , info => #{title => "My app API"}
           , definitions => #{
               "RequestBody" =>
                 #{ "name" =>
                     #{ "type" => "string"
                      , "description" => "Newspaper name"
                      }
                  , "description" =>
                      #{ "type" => "string"
                       , "description" => "Newspaper description"
                       }
                  }
             }
           }
        }
      ]
    }
  ]

  ```


  **Option 2:**


  For the second choice, you can do it for example in one or several
  `start_phases`,

  directly in your handler or any other place you want.


  ```erlang

  -spec trails() -> trails:trails().

  trails() ->
    DefinitionName = <<"RequestBody">>,
    DefinitionProperties =
      #{ <<"name">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper name">>
            }
       , <<"description">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper description">>
            }
       },
    % Add the definition
    ok = cowboy_swagger:add_definition(DefinitionName, DefinitionProperties),
    ...
  ```



  Now in your handler's trails callback function you can use it:


  ```erlang

  ...
    RequestBody =
      #{ name => <<"request body">>
       , in => body
       , description => <<"request body (as json)">>
       , required => true
         % Use the previously created `RequestBody' definition
       , schema => cowboy_swagger:schema(<<"RequestBody">>)
       },
    Metadata =
      #{ get =>
         #{ tags => ["newspapers"]
          , description => "Returns the list of newspapers"
          , produces => ["application/json"]
          }
       , post =>
         # { tags => ["newspapers"]
           , description => "Creates a new newspaper"
           , consumes => ["application/json"]
           , produces => ["application/json"]
           , parameters => [RequestBody] % and then use that parameter here
           }
       },
    Path = "/newspapers",
    Options = #{path => Path},
    [trails:trail(Path, newspapers_handler, Options, Metadata)].
  ```


  What this does for you is add a nice `response`, `parameter` or `security`

  model in swagger-ui, so client developers will know exactly what parameters

  the API expects for every endpoint.


  ## Example

  For more information about `cowboy_swagger` and how to use it, please check
  this [Example](./example).
gedaiu/swaggarize: >
  # OpenApi


  I will not mantain this project in the future. Please have a loog at this
  fork: [https://github.com/gedaiu/OpenApi](https://github.com/gedaiu/OpenApi)
tjwebb/sails-swagger: >
  # sails-swagger


  [![NPM version][npm-image]][npm-url]

  [![Build status][ci-image]][ci-url]

  [![Dependency Status][daviddm-image]][daviddm-url]

  [![Code Climate][codeclimate-image]][codeclimate-url]



  [swagger.io](http://swagger.io/) (v2.0) hook for Sails. The application's
  models, controllers, and routes are aggregated and transformed into a Swagger
  Document. Supports the Swagger 2.0 specification.


  ## Install


  ```sh

  $ npm install sails-swagger --save

  ```


  ## Configuration

  ```js

  // config/swagger.js

  module.exports.swagger = {
    /**
     * require() the package.json file for your Sails app.
     */
    pkg: require('../package'),
    ui: {
      url: 'http://swagger.balderdash.io'
    }
  };

  ```


  ## Usage

  After installing and configuring swagger, you can find the docs output on the
  [/swagger/doc](http://localhost:1337/swagger/doc) route.


  You may also specify additional swagger endpoints by specifying the swagger
  spec in config/routes.js


  ```

  /**
   * Route Mappings
   * @file config/routes.js
   * (sails.config.routes)
   *
   * Your routes map URLs to views and controllers.
   */

  module.exports.routes = {

      /***************************************************************************
       *                                                                          *
       * Make the view located at `views/homepage.ejs` (or `views/homepage.jade`, *
       * etc. depending on your default view engine) your home page.              *
       *                                                                          *
       * (Alternatively, remove this and add an `index.html` file in your         *
       * `assets` directory)                                                      *
       *                                                                          *
       ***************************************************************************/

      '/': {
          view: 'homepage'
      },

      /***************************************************************************
       *                                                                          *
       * Custom routes here...                                                    *
       *                                                                          *
       * If a request to a URL doesn't match any of the custom routes above, it   *
       * is matched against Sails route blueprints. See `config/blueprints.js`    *
       * for configuration options and examples.                                  *
       *                                                                          *
       ***************************************************************************/
      'get /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['GET', 'POST'],
              summary: ' Get Groups ',
              description: 'Get Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'List of Groups',
                      schema: 'Group', // api/model/Group.js,
                      type: 'array'
                  }
              },
              parameters: []

          }
      },
      'put /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['PUT', 'POST'],
              summary: 'Update Groups ',
              description: 'Update Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'Updated Group',
                      schema: 'Group' // api/model/Group.js
                  }
              },
              parameters: [
                  'Group' // api/model/Group.js
              ]

          }
      }
  };



  ```


  ## License

  MIT


  ## Maintained By

  [<img src='http://i.imgur.com/Y03Jgmf.png' height='64px'>](http://langa.io)


  [sails-version-image]: https://goo.gl/gTUV5x

  [sails-url]: http://sailsjs.org

  [npm-image]: https://img.shields.io/npm/v/sails-swagger.svg?style=flat

  [npm-url]: https://npmjs.org/package/sails-swagger

  [ci-image]:
  https://img.shields.io/travis/langateam/sails-swagger/master.svg?style=flat

  [ci-url]: https://travis-ci.org/langateam/sails-swagger

  [daviddm-image]:
  http://img.shields.io/david/langateam/sails-swagger.svg?style=flat

  [daviddm-url]: https://david-dm.org/langateam/sails-swagger

  [codeclimate-image]:
  https://img.shields.io/codeclimate/github/langateam/sails-swagger.svg?style=flat

  [codeclimate-url]: https://codeclimate.com/github/langateam/sails-swagger
sarnowski/swagger1st: >
  ## swagger1st: A Swagger-First Clojure Ring handler


  ![Maven
  Central](https://img.shields.io/maven-central/v/org.zalando/swagger1st.svg)

  [![Build
  Status](https://travis-ci.org/zalando-stups/swagger1st.svg?branch=master)](https://travis-ci.org/zalando-stups/swagger1st)

  [![codecov](https://codecov.io/gh/zalando-stups/swagger1st/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando-stups/swagger1st)


  swagger1st is a Clojure [Ring](https://github.com/ring-clojure/ring) handler
  that parses, validates and routes requests

  based on your [Swagger](http://swagger.io/)/OpenAPI definition. It takes the
  opposite approach of
  [ring-swagger](https://github.com/metosin/ring-swagger)—which enables you to
  generate your Swagger spec from your Clojure code—by allowing you to use your
  Swagger spec to generate Clojure code.


  Instead of defining routes and validation rules in your code, you can use
  swagger1st along with [Swagger/OpenAPI's great tool
  set](http://editor.swagger.io/) to specify your API according to the
  [Swagger/Open API 2.0
  Specification](https://github.com/swagger-api/swagger-spec). This enables you
  to specify your API in an API-First, technology-independent format. The
  resulting definition is the ultimate format for publishing, sharing and
  reviewing your API.


  #### Compatibility Overview

  swagger1st aims to implement all of the Swagger/OpenAPI spec's features, so
  that you only have to write your business logic. [This
  document](https://github.com/zalando-stups/swagger1st/blob/master/comp-2.0.md)
  shows which aspects of the spec it currently supports.


  swagger1st will use the Swagger definition of your API as a configuration file
  for processing incoming requests—ensuring that your implementation and
  specification always remain in sync. During runtime, you can inspect and
  easily test

  your API with the built-in [Swagger UI](http://petstore.swagger.io/). You can
  also extend the interpretation of

  your definition according to your own needs.


  Imagine a simple API definition like this:


  ```yaml

  swagger: '2.0'


  info:
    title: Example API
    version: '0.1'

  paths:
    /helloworld:
      get:
        summary: Returns a greeting.
        operationId: example.api/generate-greeting
        parameters:
          - name: firstname
            in: query
            type: string
            pattern: "^[A-Z][a-z]+"
        responses:
            200:
                description: say hello
  ```


  By default, this definition is connected to your business logic via the
  `operationId`, which might be defined like so:


  ```clojure

  (ns example.api
    (:require [ring.util.response :as r]))

  (defn generate-greeting [request]
    (let [firstname (-> request :parameters :query :firstname)]
      (-> (r/response (str "Hello " firstname "!"))
          (r/content-type "plain/text"))))
  ```


  This is all you need to do to define and implement your API. Only fully
  validated requests get to your function,

  so you can rely on swagger1st to properly check all input parameters according
  to your definition. The function itself

  is a normal Clojure function without any dependencies to swagger1st - simple
  as that.


  ### Quickstart


  The following provides instructions for simple, complex and manual setups. For
  all three approaches you'll need to install [Leiningen](http://leiningen.org/)
  as the build tool.


  #### Simple Setup

  If you're bootstrapping a completely new project, or just want to try out
  swagger1st, you can use this Leiningen template:


  ```

  $ lein new swagger1st myproject

  $ cd myproject

  $ lein ring server-headless

  ```


  This will run a local web server on port 3000, so you can interact with the
  API at <http://localhost:3000/>. Also, you might want to have a look at
  <http://localhost:3000/ui/> for a graphical interface to explore and
  experiment with your API (using [Swagger UI](http://petstore.swagger.io/)).


  ### Complex Setup


  To see how you can handle dependency injection with swagger1st, generate a
  project setup that includes Stuart Sierra's

  [component](https://github.com/stuartsierra/component) framework:


  ```

  $ lein new swagger1st myproject +component

  $ cd myproject

  $ lein run -m myproject.core

  ```


  As with the simple setup above, this will launch a local web server on port
  3000.


  ### Manual Setup


  The following steps describe how to manually set up swagger1st in a Clojure
  project. This is especially useful if you want to integrate it into an
  existing project or cannot use the provided template for other reasons.


  Use the following dependency in your [Leiningen](http://leiningen.org/)
  project:

      [org.zalando/swagger1st "<latest>"]

  This creates a Ring-compliant handler:


  ```clojure

  (ns example
    (:require [io.sarnowski.swagger1st.core :as s1st]
              [io.sarnowski.swagger1st.util.security :as s1stsec]))

  (def app
    (-> (s1st/context :yaml-cp "my-swagger-api.yaml")
        (s1st/discoverer)
        (s1st/mapper)
        (s1st/parser)
        (s1st/protector {"oauth2" (s1stsec/allow-all)})
        (s1st/executor)))
  ```


  ### Commands for Development


  ```shell

  # get the source

  $ git clone https://github.com/zalando-stups/swagger1st.git

  $ cd swagger1st


  # run the tests

  $ lein test


  # run all tests, including performance benchmarks

  $ lein test :all


  # build an own artifact for local development

  $ lein install


  # release a new version

  $ lein release :minor

  ```


  For interactive development, you can start a REPL by typing `lein repl`.


  ### Projects Using Swagger1st in Production


  - [Friboo](https://github.com/zalando/friboo), a utility library for writing
  microservices in Clojure, with support for Swagger and OAuth. It uses
  swagger1st at its base for RESTful HTTP endpoints and also integrates with the
  [component](https://github.com/stuartsierra/component) framework.

  - [STUPS.io](https://stups.io/) components
  [Kio](https://github.com/zalando-stups/kio),
  [PierOne](https://github.com/zalando-stups/pierone) (a complete Docker
  registry based on S3),
  [Essentials](https://github.com/zalando-stups/essentials),
  [TWINTIP](https://github.com/zalando-stups/twintip-storage) and
  [mint](https://github.com/zalando-stups/mint-storage)


  ### The Ring Handler in Detail


  * `s1st/context` (required)
      * Creates a new context from a given definition. This context will be used by the next steps to prepare the
        execution of requests.
  * `s1st/discoverer` (optional)
      * The discoverer enables certain HTTP endpoints, that makes it easy to work with your API. In particular, this
        enables the Swagger UI under the path `/ui/` and exposes the Swagger definition under `/swagger.json`.
  * `s1st/mapper` (required)
      * The mapper denormalizes the given definition (e.g. resolves all `$ref`s) and figures out, which request definition
        maps to the actual incoming request. After this function, your `request` map contains the `:swagger` key, which
        contains a `:request` key containing the denormalized definition of the request and a `:key` key which can be used
        to uniquely identify a request.
  * `s1st/parser` (required)
      * The parser parses the incoming request according to the definition and validates all inputs.
  * `s1st/protector` (optional)
      * The protector can enforce all security definitions for you. As the security check implementations vary depending
        on your environment, this is only a framework to hook into the system and define callbacks for the actual checks.
  * `s1st/executor` (required)
      * The executor executes your defined function in the end. At this point, the whole definition was validated and only
        valid requests make it up until here. You can also specify an own function resolver function in order to hook into
        your own framework.

  ### License


  Copyright (c) 2015, Tobias Sarnowski

  Copyright (c) 2016, Zalando SE


  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted,

  provided that the above copyright notice and this permission notice appear in
  all copies.


  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL

  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
  AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,

  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  CONNECTION WITH THE USE OR PERFORMANCE OF

  THIS SOFTWARE.
lucybot/api-spec-converter: >
  # api-spec-converter

  [![Share on Twitter][twitter-image]][twitter-link]


  [![Chat on gitter][gitter-image]][gitter-link]

  [![NPM version][npm-image]][npm-link]

  [![Build status][travis-image]][travis-link]


  [![Dependency status][deps-image]][deps-link]

  [![devDependency status][devdeps-image]][devdeps-link]


  Convert between API description formats such as [Swagger](http://swagger.io/)
  and [RAML](http://raml.org/)


  **Currently only supports conversion to OpenAPI(fka Swagger) 2.0 format, and
  from OpenAPI 2.0 to OpenAPI 3.0.x**


  You can also use the online version at
  https://lucybot-inc.github.io/api-spec-converter/.


  ## Installation


  ### Command Line

  > Problems? See [issue
  #132](https://github.com/LucyBot-Inc/api-spec-converter/issues/132)

  ```bash

  npm install -g api-spec-converter

  ```


  ### NodeJS/Browser

  ```bash

  npm install --save api-spec-converter

  ```


  ## Usage


  ### Command Line

  ```bash

  $ api-spec-converter -h

    Usage: api-spec-converter [options] <URL|filename>

    Convert API descriptions between popular formats.

    Supported formats:
      * swagger_1
      * swagger_2
      * openapi_3
      * api_blueprint
      * io_docs
      * google
      * raml
      * wadl

    Options:

      -h, --help              output usage information
      -V, --version           output the version number
      -f, --from <format>     Specifies format to convert
      -t, --to <format>       Specifies output format
      -s, --syntax [syntax]   Specifies output data syntax: json or yaml. Defaults to json
      -o, --order [sortOrder] Specifies top fields ordering: openapi or alpha. Defaults to openapi
      -c, --check             Check if result is valid spec
      -d, --dummy             Fill missing required fields with dummy data
  ```


  Example:

  ```bash

  $ api-spec-converter --from=swagger_1 --to=swagger_2 --syntax=yaml
  --order=alpha
  https://raw.githubusercontent.com/LucyBot-Inc/api-spec-converter/master/test/input/swagger_1/petstore/pet.json
  > swagger.json

  ```


  ### NodeJS


  ### Options

  * `from` - source format (see formats below)

  * `to` - desired format (see formats below)

  * `source` - Filename, URL, or JS object for the source

  ### Simple example:

  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  }, function(err, converted) {
    console.log(converted.stringify());
    // For yaml and/or OpenApi field order output replace above line
    // with an options object like below
    //   var  options = {syntax: 'yaml', order: 'openapi'}
    //   console.log(converted.stringify(options));
  })

  ```

  ### Callback vs Promises

  This library has full support for both callback and promises.

  All async functions return promises but also will execute callback if
  provided.


  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })

  .then(function(converted) {
    console.log(converted.stringify());
  });

  ```

  ### Advanced features:

  ```js

  var Converter = require('api-spec-converter');

  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })
    .then(function(converted) {
      // [Optional] Fill missing fields with dummy values
      converted.fillMissing();

      // [Optional] Validate converted spec
      return converted.validate()
        .then(function (result) {
          if (result.errors)
            return console.error(JSON.stringify(errors, null, 2));
          if (result.warnings)
            return console.error(JSON.stringify(warnings, null, 2));

          fs.writeFileSync('swagger2.json', converted.stringify());
        });
    });
  ```


  ### Browser

  ```js

  <script
  src="node_modules/api-spec-converter/dist/api-spec-converter.js"></script>

  APISpecConverter.convert(...)

  ```


  ## Supported Formats


  * [Swagger
  1.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md)
  (swagger_1)

  * [OpenAPI(fka Swagger)
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)
  (swagger_2)

  * [OpenAPI
  3.0.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  (openapi_3)

  * [I/O Docs](https://github.com/mashery/iodocs) (io_docs)

  * [API
  Blueprint](https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md)
  (api_blueprint)

  * [Google API
  Discovery](https://developers.google.com/discovery/v1/reference/apis) (google)

  * [RAML](http://raml.org/spec.html) (raml)

  * [WADL](http://www.w3.org/Submission/wadl/) (wadl)



  ## Conversion Table


  |from:            
  |swagger_1|swagger_2|openapi_3|io_docs|api_blueprint|google|raml|wadl|

  -------------------|:-------:|:-------:|:-----:|:-----:|:-----------:|:----:|:--:|:--:|

  |to swagger_1      |  n/a    |         |       |       |             |     
  |    |    |

  |to swagger_2      | :white_check_mark: |    n/a  | :white_check_mark:  |
  :white_check_mark: | :white_check_mark: | :white_check_mark: |
  :white_check_mark: | :white_check_mark: |

  |to openapi_3      |   :eight_spoked_asterisk:     | :white_check_mark: | 
  n/a  |   :eight_spoked_asterisk:  | :eight_spoked_asterisk: | 
  :eight_spoked_asterisk:   | :eight_spoked_asterisk:  |
  :eight_spoked_asterisk:  |

  |to io_docs        |         |         |       |  n/a  |             |     
  |    |    |

  |to api_blueprint  |         |         |       |       |    n/a      |     
  |    |    |

  |to google         |         |         |       |       |             |  n/a
  |    |    |

  |to raml           |         |         |       |       |             |      |
  n/a|    |

  |to wadl           |         |         |       |       |             |     
  |    | n/a|


  #### Key

  * :white_check_mark: - direct conversion

  * :eight_spoked_asterisk: - conversion via swagger_2


  ## Contributing

  Contributions are welcome and encouraged.


  ### Testing

  Please add a test case if you're adding features or fixing bugs. To run the
  tests:


  ```bash

  WRITE_GOLDEN=true npm test

  ```


  ### Releases

  ```

  npm run browserify

  git commit -a -m "Build browser distribution"

  npm version minor # or major/patch

  npm publish

  git push --follow-tags

  ```


  [twitter-image]:
  https://img.shields.io/twitter/url/http/lucybot.github.io/api-spec-converter.svg?style=social

  [twitter-link]:
  https://twitter.com/intent/tweet?text=Convert+between+API+description+formats+such+as+Swagger+and+RAML:&url=http%3A%2F%2Flucybot.github.io%2Fapi-spec-converter

  [gitter-image]:
  https://img.shields.io/gitter/room/lucybot/api-spec-converter.svg

  [gitter-link]: https://gitter.im/lucybot/api-spec-converter

  [npm-image]: https://img.shields.io/npm/v/api-spec-converter.svg

  [npm-link]: https://npmjs.org/package/api-spec-converter

  [travis-image]:
  https://img.shields.io/travis/LucyBot-Inc/api-spec-converter.svg

  [travis-link]: https://travis-ci.org/LucyBot-Inc/api-spec-converter

  [deps-image]: https://img.shields.io/david/lucybot/api-spec-converter.svg

  [deps-link]: https://david-dm.org/lucybot/api-spec-converter

  [devdeps-image]:
  https://img.shields.io/david/dev/lucybot/api-spec-converter.svg

  [devdeps-link]:
  https://david-dm.org/lucybot/api-spec-converter#info=devDependencies
zalando/play-swagger: >
  ## The Play-Swagger plugin is now renamed
  [api-first-hand](https://github.com/zalando/api-first-hand). This version is
  no longer under active development.

  ## Api-First-Hand is actively mantained and offers full functionality of
  Play-Swagger with an exception of Play 2.4 support. Please navigate to
  [api-first-hand](https://github.com/zalando/api-first-hand) if you'd like to
  check out Play-Swagger or create an issue.


  --

  --

  --

  --



  # Play-Swagger


  [![Build
  Status](https://travis-ci.org/zalando/play-swagger.svg)](https://travis-ci.org/zalando/play-swagger)

  [![codecov](https://codecov.io/gh/zalando/play-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando/play-swagger)

  [![Gitter
  Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/zalando/play-swagger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  ## Compatibility


  - Play 2.4

  - Swagger (OpenAPI) 2.0


  ## Status


  This plugin should be enabled using the
  [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service)
  activator template 

  as the version in this repository is under active development. The status of
  this software is beta, 

  an end-to-end functional release intended to demonstrate the possibility to
  generate following from a Swagger specification:


  - Play route files

  - Generators of random test data

  - Wrappers for Play route files to convert semantics from http-related to
  domain-related (controller_base)

  - Skeletons for the domain-driven controller implementation

  - Model classes and validation rules

  - Unit tests for invalid and valid parameter sets

  - Security extractors (if needed)

  - Skeletons for custom deserializers (if needed)


  We benefit from community feedback. All comments are welcome!


  # Play-Swagger Tutorial


  This tutorial is based on the
  [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service)
  activator template.


  ```bash

  $ activator new playground play-swagger-service

  ```


  The template project contains following:


  - `tutorial` folder with HTML tutorial

  - `public/swagger` folder containing static files needed for swagger UI

  - `project` folder containing pre-configured `plugins.sbt` file with a
  definition of all required resolvers and plugins

  - `conf` folder with following customized contents:
      * `routes` file with route configuration for Swagger UI, example specification and commented out links to other examples
      * `example.yaml`, a demo Swagger specification. The specification has a dummy implementation in `app` folder. 
      * `examples` folder containing other different Swagger specification examples. Each specification in this folder represents some aspect of the Play-Swagger plugin in more details.
          For the specification to be picked up by the plugin it must be moved into the `conf` folder. It is allowed to have multiple Swagger specifications in the `conf` folder at the same time. 
  - `app` directory with following template implementations:
      * `controllers/Swagger.scala` - a backend side of the Swagger UI
      * `generated_controllers/example.yaml.scala` - a dummy implementation of the example controller. Will be (re)generated if deleted
      * `security/example.yaml.scala` - a marshaller for OAuth2 tokens. Will not be regenerated until 
          a) deleted or renamed
          b) explicitly requested by issuing a `apiFirstSecurity` command 


  ## Welcome to Play-Swagger


  Congratulations, you just created a new Play-Swagger application!


  The [Play Framework](http://www.playframework.com/) with the
  [Play-Swagger](https://github.com/zalando/play-Swagger/) 

  plugin make it easy to build RESTful web services from a Swagger API
  specification as the single source of truth. 

  Play is based on a lightweight, stateless, web-friendly architecture. Built on
  [Akka](http://akka.io), 

  Play provides predictable and minimal resource consumption for highly-scalable
  applications. 

  The Play-Swagger plugin takes Swagger API definitions and treats them as the
  single source of truth of your REST services.


  Play-Swagger supports round-trip regeneration and compilation of:


  - Play routes definitions (managed).

  - Swagger domain model definitions and parameters onto Scala case classes
  (managed).

  - Swagger domain model constraints onto Play validations (managed).

  - Generators for random test data generation of parameter values (managed).

  - Unit tests for validating your service at the API boundary (managed).

  - Swagger path definitions onto skeletons for Play controller implementations
  (unmanaged).


  In the list above, "(managed)" means that the code is managed by sbt. The code
  is not controlled 

  and altered by you, the programmer of the REST service. The plugin takes your
  Swagger API definition as the single 

  source of truth and regenerates these code parts in a consistent manner.

  You'll instead be focusing on implementing the service business logic in an
  (unmanaged) Play controller class 

  that is generated once. Subsequent regenerations keep the code that you have
  added, either by commenting out the 

  parts that are no longer valid, or by adding parts that are needed because you
  have made a change to the API.


  Manual generation and compilation of:


  - Security extractors

  - Unmarshallers for custom content types 


  is supported in the case if


  a) No security extractor or unmarshaller with the same name already exists

  b) The developer issues `apiFirstSecurity` or `apiFirstMarshallers` sbt
  command 


  ## Run Your Application


  Before we go any further, let's run the application.


  - Open a shell and `cd` into your service project directory.

  - Start `sbt` and `run` the service.

  - View the running application at
  [http://localhost:9000](http://localhost:9000).


  The service template comes with the Swagger UI frontend included, 

  run statically from the within Play, which provides a sandbox for your
  service. 

  The template is configured with a template Swagger API definition called
  `example.yaml` 

  and located in the `conf` directory of the Play application. 


  The `example.yaml` definition provides an example [API
  description](https://github.com/zalando/play-swagger-service/blob/master/conf/example.yaml)


  This definition contains three end points: 

  - the `/token` path, which accept the `GET` and `POST` methods

  - the `/todos/{user_id}`, which accepts the `GET` method. 


  The `GET /token` API plays a role of an authentication server and is used by
  the Swagger UI for OAuth token requests.

  The `POST /token` API represents an authorization server and is used by the
  security part of the 

  generated code to validate OAuth tokens.
   
  The `GET /todos/{user_id}` takes a path parameter `user_id` and returns a TODO
  list for given user. 

  For the client to be allowed to access this endpoint, it must provide an OAuth
  token with the scope `admin:org`. 

  The token can be requested using the Swagger UI.


  Try it out for yourself: 


  Click the [default](http://localhost:9000/) button to expand the API
  definition in the Swagger UI.



  # Play Routes Integration


  As a Play application developer, you are used to defining your endpoints in
  the `conf/routes` file. 

  Not so with the Play-Swagger plugin! Swagger API specifications already define
  endpoints as `path` definitions, 

  as seen in the example above. So why do the work twice, right? Instead, the
  Play-Swagger plugin requires you to 

  link your API definition in the routes file ones—making all Swagger
  API-defined endpoints available as children 

  of one single path context location, and generating Play route definitions
  from them (as shown below):


  ```

  ->      /example        example.yaml.Routes

  ```


  Note that the `conf/routes` file provided by this activator template also
  contains a couple of additional `GET` 

  mappings required for the the Swagger UI sandbox.


  There are a couple of commented out links to other examples. If you activate
  some specification by moving it from 

  the `examples` folder into the `conf` folder, you'll need to uncomment an
  appropriate line in the `routes` file in

  order for play to be able to find it.  



  ## Swagger Domain Definitions


  Scala domain model definitions are generated for all data types defined as
  Swagger parameters in an API specification. 

  Swagger parameters can be of path, query, header, form or body types, and
  consist of either primitive data types or 

  more complex types composed from objects and arrays with primitives as
  leaves. 


  Both primitive types and complex types are mapped to scala.


  As an example, let's look at the Swagger API specification file
  [`simple.petstore.api.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/simple.petstore.api.yaml), 

  which defines the API of a simple pet store. It contains a model definition
  for a pet.


  ```yaml

  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
  ```


  This definition consists of an object `pet` containing the required properties
  `id` and `name` 

  and the optional property `tag`. The Swagger primitive types of these
  properties are a 64-bit `integer` 

  and (twice) a `string`, successively.  The Play-Swagger plugin will map this
  definition on to a generated Scala model.


  ```scala

  package simple.petstore.api


  package object yaml {

      type PetTag = Option[String]

      case class Pet(id: Long, name: String, tag: PetTag)
  }

  ```


  This generated model contains a type definition `PetTag`, which declares a
  type alias for the optional `tag` property, 

  and a `Pet` case class with the properties as named in the Swagger API
  definition and mapped on the subsequent 

  Scala primitive or declared types. The case class and type alias are generated
  in an package object `yaml`, 

  this package  object itself is contained in the package `simple.petstore.api`
  so that full object name corresponds 

  to the API filename.


  Note that models are generated within a Play application as _managed_ code in
  the target folder. 

  Generated model code is not intended to be altered.  We should instead look
  upon the Swagger definition as the single 

  source of truth, and as the source code that defines our model.

  The Swagger specification file of our API is, in that sense, part of the
  codebase. 

  Even though the generated `Pet` case class is managed by the plugin, and not
  us, it can (of course) 

  be used in our application codebase after being imported.


  ```scala

  import simple.petstore.api.yaml._


  val pet = Pet(0L, "Tucker", Some("Greyhound"))

  ```


  ## Specification Cross-References


  A `$ref` element of the specification is allowed to contain a name of file as
  it's part. Because of this, it is possible to split 

  a single specification into multiple files as shown in
  [`cross_spec_references.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/cross_spec_references.yaml) 

  example. It is also possible to reference a definition in one specification
  from another specification. 

  In this case for each reference an independent copy of the class definition
  will be created for each referencing specification. 

  The definition is then placed into the appropriate package for each
  specification. 


  Thus, even if multiple classes with  the same name and structure might be
  generated, they all will coexist in their 

  own separate namespaces and won't be interchangeable.



  ## Primitive Types


  Swagger version 2.0 allows for primitive data types based on the types defined
  by 

  [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8).


  When generated as Scala, the following mapping applies:


  | Common Name | Swagger Type | Swagger Format | Scala
  Type                                  |

  |-------------|--------------|----------------|---------------------------------------------|

  | integer     | integer      | int32          |
  scala.Int                                   |

  | long        | integer      | int64          |
  scala.Long                                  |

  | float       | number       | float          |
  scala.Float                                 |

  | double      | number       | double         |
  scala.Double                                |

  | big int     | integer      |                |
  scala.math.BigInt                           |

  | big decimal | number       |                |
  scala.math.BigDecimal                       |

  | boolean     | boolean      |                |
  scala.Boolean                               |

  | string      | string       |                |
  scala.String                                |

  | byte        | string       | byte           |
  de.zalando.play.controllers.Base64String    |

  | binary      | string       | binary         |
  de.zalando.play.controllers.BinaryString    |

  | date        | string       | date           |
  org.joda.time.LocalDate                     |

  | datetime    | string       | date-time      |
  org.joda.time.DateTime                      |

  | password    | string       | password       |
  scala.String                                |

  | file        | file         |                |
  java.io.File                                |


  Additionally, if a validation of type "enum" is defined for some primitive
  type, a trait and a set of case objects forming an ADT 

  will be generated for this enum.


  ## Complex Types


  Complex types are made up of primitive objects, or nested objects.


  ### Objects


  Complex object types are defined in Swagger model definitions as either
  objects or arrays.


  Objects are, again, based on the
  [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8)
  specification 

  and defined as Swagger [Schema
  Objects](https://github.com/Swagger-api/Swagger-spec/blob/master/versions/2.0.md#schema-object) 

  for parameter definitions of `type: "object"`.

  For example, given a Swagger API definition file `api.yaml` containing a model
  that defines a `person` as an object 

  with the properties `name` and `age` of the primitive types `string` and
  `integer` subsequently, 

  this object will be mapped on a Scala case class, and generated in a Scala
  package object (namespace) with the same name 

  as the extension of the file the specification is read from and in a package
  with the same name as the 

  Swagger definition file in which the model is defined—that is, `api`


  ```yaml

  definitions:
    person:
      type: object
      required:
        - name
        - age
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Person(name: String, age: Int) 
  }

  ```


  ### Nested Objects


  Nested objects are generated adjourned but referenced hierarchically. E.g.


  ```yaml

  definitions:
    parent:
      type: object
      required:
        - child
      properties:
        child:
          type: object
          required:
            - name
          properties:
            name:
              type: string
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Parent(child: ParentChild) 
      case class ParentChild(name: String) 
  }


  ```


  ### Optionality


  Swagger, by default, defines object properties to be optional, which can be
  overridden by providing a list of `required` 

  object properties as already used in the examples above. Optional properties
  are mapped upon Scala's `Option` type, 

  for which a type alias is generated for each property that is optional. E.g.


  ```yaml

  definitions:
    product:
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type ProductTag = Option[String]
      case class Product(name: String, tag: ProductTag) 
  }


  ```


  As objects can be nested, so can object property optionality. To facilitate
  for nested optionality, we generate a nested scala `Option` type alias. E.g.


  ```yaml

  definitions:
    Basic:
      properties:
        optional:
          type: object
          properties:
            nested:
              type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type BasicOptional = Option[BasicOptionalOpt]
      type BasicOptionalNested = Option[String]

      case class BasicOptionalOpt(nested: BasicOptionalNested) 
      case class Basic(optional: BasicOptional) 
  }

  ```



  ### Parameter optionality


  As object properties can be optional, so can be query, header, body or form
  parameters. 

  In the case if they are not required, they are mapped to the Scala's `Option`
  type. 


  Path parameters are _must_ be declared as required.


  In the case, if a parameter is _not_ required, it is allowed to have a default
  value.



  ### Extension


  Objects can extend other objects via employment of Swagger's `allOff`
  property. In the example below, the `ExtendedErrorModel` inherits _all of_ the
  properties of the `ErrorModel` which it refers to—that is, the properties
  `message` and `code`—and _extends_ this model with the property `rootCause`.
  Swagger object extension is mapped by duplicating inherited properties in the
  object that extends. E.g.


  ```yaml

  definitions:
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
    ExtendedErrorModel:
      allOf:
      - $ref: '#/definitions/ErrorModel'
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
    import scala.math.BigInt
    case class ErrorModel(message: String, code: BigInt) 
    case class ExtendedErrorModel(message: String, code: BigInt, rootCause: String) 
  }


  ```


  ### Polymorphism


  Polymorphic object definitions are possible through employment of the Swagger
  `discriminator` property. 

  In the example definition below, an abstract `Pet` defines what concrete `Cat`
  and `Dog`s have in common. 

  Swagger object models define data, so a discriminator property is required to
  distinguish concrete cat and dog 

  instances as they are serialised to and from the API. In this sense, the
  discriminator property works 

  in the same way as a discriminator column works in ORM frameworks when mapping
  a class hierarchy onto a single table. 

  It simply contains a value that maps onto one of the concrete types—for
  example, `petType: "Cat"` or `petType: "Dog"`.


  ```yaml

  definitions:
    Pet:
      discriminator: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          huntingSkill:
            type: string
            default: lazy
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          packSize:
            type: integer
            format: int32
        required:
        - packSize
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      trait IPet {
          def name: String
          def petType: String
      }

      case class Cat(name: String, petType: String, huntingSkill: CatHuntingSkill) extends IPet
      case class Dog(name: String, petType: String, packSize: Int) extends IPet
      case class Pet(name: String, petType: String) extends IPet

      sealed trait CatHuntingSkill { def value: String }
      case object Clueless extends CatHuntingSkill { val value = "clueless" }
      case object Lazy extends CatHuntingSkill { val value = "lazy" }
      case object Adventurous extends CatHuntingSkill { val value = "adventurous" }
      case object Aggressive extends CatHuntingSkill { val value = "aggressive" }
      implicit def stringToCatHuntingSkill(in: String): CatHuntingSkill = in match {
          case "clueless" => Clueless
          case "lazy" => Lazy
          case "adventurous" => Adventurous
          case "aggressive" => Aggressive
      }
  }


  ```


  Please note how the enumeration of cat's `huntingSkill`'s get's translated
  into the ADT with a sealed trait `CatHuntingSkill`

  and four case objects implementing that trait.


  ### Additional Properties


  Swagger's model language allows objects' additional properties to be loosely
  defined employing the `additionalProperties` annotation 

  in order to model dictionaries. These dictionaries are mapped to Scala's `Map`
  type, for which a type alias is 

  generated following the same (by now) well-known pattern as for optional
  properties, with the map's key parameter type being a Scala `String`.


  A Swagger additional property definition takes as its type property the
  element type of the dictionary, 

  which can be of primitive or complex type and which is mapped on Scala as the
  map's value parameter type. 

  Swagger allows for one `additionalProperties` annotation per object
  definition, so we can generate this Scala parameter 

  with the static name `additionalProperties`.


  In the following example we define a Swagger model object definition
  `KeyedArray` that uses the `additionalProperties` 

  annotation to provide the object with a set of key value mappings from string
  to array. E.g.


  ```yaml

  definitions:
    KeyedArrays:
      type: object
      additionalProperties:
        type: array
        items:
          type: integer
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper
      import scala.math.BigInt
      import scala.collection.immutable.Map

      type KeyedArraysAdditionalPropertiesCatchAll = ArrayWrapper[BigInt]
      type KeyedArraysAdditionalProperties = Map[String, KeyedArraysAdditionalPropertiesCatchAll]
      case class KeyedArrays(additionalProperties: KeyedArraysAdditionalProperties) 
  }

  ```


  ## Arrays


  Swagger's `array` is used to define properties that hold sets or lists of
  model values—possibly of a primitive type, 

  but complex element types are also allowed. Depending on the place where the
  array definition appears, Swagger array can be mapped to one of two Scala
  types, parametrised for the element type that it contains:

  - if an array only defined inline as a part of the response definition, it is
  translated to a `Seq` type

  - otherwise (array appears in the parameter definition or in the `definitions`
  part of the specification) it is 

  defined as a `de.zalando.play.controllers.ArrayWrapper`


  For example, in the snippet below, an `Activity` object definition is referred
  to as an item element in the 

  `messages` property of `type: array` of the containing object definition
  `Example`. 

  A Scala type alias will be generated for the array type (just as we've seen
  before with optional properties), 

  after which the array-containing property can be generated within the case
  class as being of this alias type. 

  E.g. in the Swagger definition and code


  ```yaml

  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
    Example:
      type: object
      required:
      - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/definitions/Activity'
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessages = ArrayWrapper[Activity]

      case class Activity(actions: String) 
      case class Example(messages: ExampleMessages) 
  }


  ```


  If the description of the same array is inlined as a part of the response
  definition like that:


  ```yaml

  paths:
    /api:
      get:
        responses:
          200:
            schema:
              type: object
              required:
              - messages
              properties:
                messages:
                  type: array
                  items:
                    $ref: '#/definitions/Activity'
            description: array payload
  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
  ```


  than the `Seq` scala type will be used:

  ```scala

  package api

  package object yaml {
      type ApiGetResponses200Messages = Seq[Activity]
      case class Activity(actions: String) 
      case class ApiGetResponses200(messages: ApiGetResponses200Messages) 
  }

  ```



  ### Nested Arrays


  Array definition types can be nested and are possibly optional. 

  The following (contrived) snippet depicts the generated Scala code when both
  definition types are 

  employed in a somewhat non-useful manner. The intent of this example is to
  show that the case 

  class definitions are rather concisely generated, even though a stack of type
  aliases is needed 

  to make sure that we still refer in Scala code to an aptly named Swagger
  definition—especially 

  in conjunction with the object properties being optional. Next to its
  benefits, 

  type safety against `null` pointers does have an associated cost as well.


  ```yaml

  definitions:
    Activity:
      type: object
      properties:
        actions:
          type: string
    Example:
      type: object
      properties:
        messages:
          type: array
          items:
            type: array
            items:
              $ref: '#/definitions/Activity'
        nested:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  type: string
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessagesOpt = ArrayWrapper[ExampleMessagesOptArr]
      type ExampleMessages = Option[ExampleMessagesOpt]
      type ExampleNested = Option[ExampleNestedOpt]
      type ExampleMessagesOptArr = ArrayWrapper[Activity]
      type ExampleNestedOptArrArrArr = ArrayWrapper[String]
      type ExampleNestedOptArrArr = ArrayWrapper[ExampleNestedOptArrArrArr]
      type ActivityActions = Option[String]
      type ExampleNestedOptArr = ArrayWrapper[ExampleNestedOptArrArr]
      type ExampleNestedOpt = ArrayWrapper[ExampleNestedOptArr]

      case class Activity(actions: ActivityActions) 
      case class Example(messages: ExampleMessages, nested: ExampleNested) 
  }


  ```


  ## Swagger Validations


  Swagger API definitions allow for constraints to be put on parameter types. 

  We have already seen the `required` constraint, used to mark a parameter or
  specific field within 

  a domain definition to be required upon input. Additional constraints, as
  defined by the 

  [Parameter
  Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject), 

  can be added to your API definition. The Play-Swagger plugin will generate
  validations for these parameter 

  constraints and make sure that your controller methods are only called if the
  input of your service 

  complies to those constraints. 


  In the example below, the API definition of the `token` parameter of 

  type `Base64String`, as the form parameter, contains validation rules for the
  lenght of the perameter as well as a regexp pattern the value of the parameter
  must confirm to.

  The parameter is also required.


  ```yaml

  ...

  parameters:
        - name: token
          in: formData
          description: oauth2 token
          type: string
          format: byte
          pattern: "[A-Za-z0-9]*"
          minLength: 5
          maxLength: 100
          required: true
  ...

  ```


  Let's take another example:


  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: string
          minLength: 1
          maxLength: 110
          required: false
  ...

  ```


  The `state` parameter is of type string, is not required and has no default
  value. 

  It is also only allowed to have a state of length between 1 and 110, otherwise
  it won't pass validation. 

  For the demo purposes, let's change it's type to `integer` and make it
  required. 


  As the parameter is required now, the `default` value cannot be present. The
  `maxLength` and `maxLength` validations 

  are not allowed for integer parameters, therefore let's replace them with
  `minimum` and `maximum` values:
      
  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: integer
          format: int32
          required: true
          minimum: 2000
          maximum: 2100      
  ...

  ```    



  As we just changed the parameter type, refreshing Swagger UI will, in addition
  to generating validations 

  for that parameter type, also force a regeneration of the model consistent
  with the validation. 

  That's nice, but note that it will break the current implementation of the
  controller class, as the 

  implementation of the `postAction` expects `state` to be of type `String`.


  ![Validation screenshot](/docs/validations-01.png)


  Let's change the implementation. The second parameter `state` is no longer 

  of type `Option[String]` but of type `Int`. We change the implementation to
  take this fact into the account:


  ```scala

  ...

  val tokenGet = tokenGetAction { input: (String, String, String, Int) =>
      val (redirect_uri, scope, response_type, state) = input
      // ----- Start of unmanaged code area for action  TokenService.tokenGet
      val statePart = s"""state=$state"""
  ...

  }

  ```


  Refreshing Swagger UI and trying out a couple of integer values for `state`
  shows that the service 

  now excepts value within the range `[2000..2100]`, but returns a descriptive
  error when outside. I.e.


  ```json

  [
    {
      "messages": [
        "error.max"
      ],
      "args": [
        2100
      ]
    }
  ]

  ```


  ## Test Generators


  Having an API definition as the single source of truth in your codebase—with
  formal type specification of the in- and output values, 

  including their constraints—provides for a powerful feature when it comes to
  testing. 

  The Play-Swagger plugin automates the creation of test data generators that
  can drive property checks directly 

  from the API specification. Play-Swagger derives data generators and unit
  tests directly from your Swagger API specification.


  Property-based testing using generator-driven property checks is a cool way to
  test the validity of your application 

  according to the rules or properties that apply to your application.
  Properties, in this sense, are high-level 

  specifications that should always hold for a range of data values. The idea is
  to generate a range of data 

  values for your data types and let (also generated) tests assert that the
  properties of these data types hold. 

  A Swagger API definition contains formal type definitions _and_ constraints
  for all data values, and the Play-Swagger 

  plugin maps these types on managed Scala source code that represents the data
  types, so it is also possible to map 

  these API definitions on test data generators that provide a range of data
  values for these types. 

  The plugin does exactly that: It creates managed test data generators and unit
  tests that assert whether your 

  application still complies to your specification. It does so in a
  single-source-of-truth manner, 

  taking the Swagger API definition as the source.


  We employ the ScalaTest [property-based
  testing](http://www.scalatest.org/user_guide/property_based_testing) 

  functionality as the framework to generate the data values, and map the data
  types of our API definition on 

  the test data generators that are created by the plugin. ScalaTest provides 

  `org.scalacheck.Gen` and `org.scalacheck.Arbitrary` objects with utility
  methods that help generate a range of 

  (possibly arbitrary) data values for common Scala types and primitives. The
  Play-Swagger plugin uses these 

  methods to create test data generators specific for the data types of our API
  definition. When necessary, 

  it composes generators from primitive types into generators for complex types,
  so that you end up with a 

  set of generators that provide test data for your complete API.


  As an example, let's take the API definition for the simple pet store—trimmed
  down to the parts defining 

  parameter types, and (for brevity) omitting any non-data definitions and error
  definitions:


  ```yaml

  paths:
    /pets:
      get:
        parameters:
          - name: limit
            in: query
            required: false
            type: integer
            format: int32
        responses:
          default:
            description: error payload
      post:
        parameters:
          - name: pet
            in: body
            required: true
            schema:
              $ref: '#/definitions/newPet'
        responses:
          default:
            description: error payload
    /pets/{id}:
      get:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
      delete:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    newPet:
        required:
          - name
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          tag:
            type: string
  ```


  The `get` method on path `/pets` takes an optional `limit` parameter of common
  type `integer`. 

  The `post` method takes a `newPet` body parameter comprising of the primitive
  attributes `id`, `name` and `tag`, 

  subsequently of common types `long` and `string` (twice). Of these, only the
  `name` attribute is mandatory. 

  The `get` method on the path `/pets/{id}` takes the path parameter `id` of
  common type `long` and returns 

  an array of `pet`s consisting of the same attributes and primitive types as a
  `newPet` - but this time 

  with both `name` and `id` being mandatory. This specification maps to the
  following managed Scala domain model code:



  ```scala

  package example


  package object yaml {

      import de.zalando.play.controllers.PlayPathBindables

      type PetsIdDeleteResponsesDefault = Null
      type NewPetTag = Option[String]
      type PetsIdDeleteId = Long
      type PetsGetLimit = Option[Int]
      type NewPetId = Option[Long]

      case class Pet(id: Long, name: String, tag: NewPetTag) 
      case class NewPet(name: String, id: NewPetId, tag: NewPetTag) 

      implicit val bindable_OptionIntQuery = PlayPathBindables.createOptionQueryBindable[Int]
  }

  ```


  We want to have test data generators that generate an arbitrary range of
  values for the model 

  code shown above - composed from primitive, and sometimes optional, data
  definitions. 

  The Play-Swagger plugin does this by generating two Scala objects: one for the
  Swagger API definition, 

  and one for the API path parts. Each object contains generator factory methods
  for the defined data types, 

  prefixed by `create`, which returns a generator function. A generator function
  takes a given integer count 

  and returns a generated amount of test data for the data type it was created
  for.


  Data types are composed from primitive types, Scala optional types, and
  possibly more complex types. 

  Test data values for the primitive types are generated arbitrarily, employing
  the ScalaCheck 

  `org.scalacheck.Arbitrary.arbitrary[T]` method (the type parameter, replaced
  with Scala's primitive type, 

  on which the Swagger common type is mapped).


  In the code shown below, starting with primitive leaf data values, the `pet`
  parameter's attribute `id` 

  of common type `long` is arbitrarily generated from a `scala.Long`.  Note that
  the `id` attribute is optional, 

  though, for the `newPet` definition. As with the generated model, we created a
  `NewPetIdGenerator` value that 

  takes an arbitrarily generated `scala.Long` id value and generates an option
  value from it, employing the 

  ScalaCheck `org.scalacheck.Gen.option[T]`.  This generator will generate test
  data values comprising of `None` 

  and `Some` arbitrarily id value. It's probably best to let the Scala generator
  code speak for itself. 

  Note how it composes according to the same structure as the Scala model code.


  ```scala

  package example.yaml


  import org.scalacheck.Gen

  import org.scalacheck.Arbitrary

  import play.api.libs.json.scalacheck.JsValueGenerators

  import Arbitrary._


  object Generators extends JsValueGenerators {

      def createNullGenerator = _generate(NullGenerator)
      def createNewPetTagGenerator = _generate(NewPetTagGenerator)
      def createLongGenerator = _generate(LongGenerator)
      def createPetsGetLimitGenerator = _generate(PetsGetLimitGenerator)
      def createNewPetIdGenerator = _generate(NewPetIdGenerator)

      def createPetGenerator = _generate(PetGenerator)
      def createNewPetGenerator = _generate(NewPetGenerator)

      def NullGenerator = arbitrary[Null]
      def NewPetTagGenerator = Gen.option(arbitrary[String])
      def LongGenerator = arbitrary[Long]
      def PetsGetLimitGenerator = Gen.option(arbitrary[Int])
      def NewPetIdGenerator = Gen.option(arbitrary[Long])

      def PetGenerator = for {
          id <- arbitrary[Long]
          name <- arbitrary[String]
          tag <- NewPetTagGenerator
      } yield Pet(id, name, tag)
      def NewPetGenerator = for {
          name <- arbitrary[String]
          id <- NewPetIdGenerator
          tag <- NewPetTagGenerator
      } yield NewPet(name, id, tag)

      def _generate[T](gen: Gen[T]) = (count: Int) => for (i <- 1 to count) yield gen.sample
  }

  ```


  A `PetGenerator` and `NewPetGenerator` are created and implemented by the
  plugin as a for comprehension 

  that generates data values for each attribute, yielding an instance of a test
  pet. Other generators follow 

  the same pattern but, if necessary, delegate to different child generators.
  From this we acquire a set of 

  test data generators to implement our property-based testing.


  Running the test is as simple as running a test set from sbt. Just type `test`
  from your `sbt` prompt.


  # Building a Play-Swagger Plugin


  To build a plugin, do the following:


  - Clone the repository to your local filesystem

  - Run ```sbt +publishLocal``` in the Play-Swagger directory. This will publish
  the plugin into your local ivy repository


  To use the plugin in a plain Play project:


  - Create a new Play-Swagger project using activator template, for example:
  ```activator new hello-world play-swagger-service```

  - Take a look at the `project/plugins.sbt` of the generated project and add
  required plugins and resolvers to the `project/plugins.sbt` of your Play
  project

  - Do the same for `build.sbt`

  - Put a Swagger specification with a ```.yaml``` or ```.json``` extension into
  the ```conf``` directory

  - Add a specification link (`->`) to the play's routes file



  ## Plugin Architecture


  Ths Play-Swagger plugin has a three-tier architecture:


  * specification - this tier is responsible for finding and parsing a
  specification and converting it into the raw AST format

  * normalisation - this tier performs a couple of optimisations on the AST
  including type deduplication, flattening and parameter dereferencing

  * generation - a final step including transformation of the AST into the
  source-code related data and generation of source code from it   


  The separation of the specification and generation tiers allows for plugging
  in different specification standards 

  and generating source code for different frameworks.



  ## Plugin Project Structure


  There are a couple of sub-projects:


  * `swagger-model` - A standalone Scala Swagger model and a Jackson parser for
  it. Can be used by another projects

  * `api` - This is the project that's automatically added to the runtime
  classpath of any projects that use this plugin.

  * `swagger-parser` - A converter of the Swagger model to the internal AST of
  the plugin

  * `api-first-core` - This is a core of the plugin with minimal functionality.
  It includes defining an AST structure and some transformations on AST.  

  * `play-scala-generator` - The standalone generator for transforming an AST
  into the skeleton of Play-Scala application. 

  * `plugin` - A coupble of sbt plugins, one for each tier:
      - `ApiFirstSwaggerParser` - a plugin wrapping Swagger parsing part 
      - `ApiFirstCore` - a wrapper for AST-related functionality
      - `ApiFirstPlayScalaCodeGenerator` - a wrapper for the Play-Scala generator

  Because of the modular plugin architecture, all modules must be enabled
  separatly in sbt's build.sbt. 

  It is also necessary to configure which parser(s) must be used by the plugin,
  like that: 


  ```scala

  lazy val root = (project in file(".")).enablePlugins(PlayScala, ApiFirstCore,
  ApiFirstPlayScalaCodeGenerator, ApiFirstSwaggerParser)


  apiFirstParsers := Seq(ApiFirstSwaggerParser.swaggerSpec2Ast.value).flatten

  ```


  Please take a look at activator template's configuration for complete example.



  ## Custom Templates For Code Generation


  The PlayScala generator supports custom templates. In order to override
  default template for some of the components,

  please provide your custom template named in accordance to the following list:

      * `play_scala_test.mustache` - for unit tests
      * `play_validation.mustache` - for validators 
      * `generators.mustache` - for test data generators
      * `model.mustache` - for model classes and query and path bindables
      * `play_scala_controller_base.mustache` - for play controller bases 
      * `play_scala_controller_security.mustache` - for security adapters used by controller bases
      * `play_scala_form_parser.mustache` - for form parsers used by the controller bases
      * `play_scala_controller.mustache` - for play controller skeletons supposed to be augmented by the programmer
      * `play_scala_response_writers.mustache` - for custom serializers to be augmented by the programmer
      * `play_scala_security_extractors.mustache` - for custom security extractors to be augmented by the programmer 


  Please be aware that generated artifacts need to preserve some specific shape
  in order to be compiled together without errors.


  The location where custom templates reside needs to be configured by
  overriding the plugin setting `playScalaCustomTemplateLocation`.


  For example following configuration will set this place to be `conf/templates`
  folder of the project:

  ```scala

  playScalaCustomTemplateLocation := Some(((resourceDirectory in Compile) /
  "templates").value)

  ```



  ## Plugin Developing


  sbt doesn't allow sub-projects to depend on each other as sbt plugins. To test
  an sbt plugin, you need a separate 

  project.  This project is `swagger-tester`.  To test your changes as you're
  developing the plugin, cd into this 

  directory, and run sbt. This project uses an sbt `ProjectRef` to the sbt
  plugin, which means you don't need to 

  `publishLocal` the plugin after each change. Just run `reload` in the sbt
  console, and it will pick up your changes.


  The play-swagger plugin provides a couple of commands useful for development: 


  * `apiFirstPrintDenotations` - outputs a common names of different parts of
  the AST as they are intended to be used in generated Scala code

  * `apiFirstPrintRawAstTypes` - outputs all type definitions as they read from
  the specification before type optimisations

  * `apiFirstPrintRawAstParameters` - outputs all parameters definitions before
  type optimisations

  * `apiFirstPrintFlatAstTypes` - outputs type definitions after type
  optimisations

  * `apiFirstPrintFlatAstParameters` - outputs parameter definitions after type
  optimisations



  ## Plugin Testing


  We're using the sbt scripted framework for testing. You can find the tests in
  `plugin/src/sbt-test`, and run them 

  by running `scripted` in the sbt console.



  ## Code quality


  There are some quality checks embedded into the build script:

  * the source code is (re)formatted using
  [scalariform](https://github.com/scala-ide/scalariform) each time it is
  compiled (currently deactivated).

  * [`scalastyle`](http://www.scalastyle.org) sbt command shall be used to
  perform code style checks before putting changes into the repository.

  * [`lint:compile`](https://github.com/HairyFotr/linter) sbt command shall be
  used to perform static code analysis before putting changes into the
  repository.

  * code coverage for api and compiler modules can be executed by issuing `sbt
  clean coverage test` command for these 

  projects. Coverage statistics can be generated using `coverageReport` sbt
  command. 
casualjim/go-swagger: >
  # Swagger 2.0 [![Build
  Status](https://circleci.com/gh/go-swagger/go-swagger.svg?style=shield)](https://circleci.com/gh/go-swagger/go-swagger)
  [![Build
  status](https://ci.appveyor.com/api/projects/status/x377t5o9ennm847o/branch/master?svg=true)](https://ci.appveyor.com/project/casualjim/go-swagger/branch/master)
  [![codecov](https://codecov.io/gh/go-swagger/go-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/go-swagger/go-swagger)
  [![GitHub
  version](https://badge.fury.io/gh/go-swagger%2Fgo-swagger.svg)](https://badge.fury.io/gh/go-swagger%2Fgo-swagger)

  [![Slack
  Status](https://slackin.goswagger.io/badge.svg)](https://slackin.goswagger.io)

  [![license](http://img.shields.io/badge/license-Apache%20v2-orange.svg)](https://raw.githubusercontent.com/swagger-api/swagger-spec/master/LICENSE)

  [![GoDoc](https://godoc.org/github.com/go-swagger/go-swagger?status.svg)](http://godoc.org/github.com/go-swagger/go-swagger)

  [![Docker Repository on
  Quay](https://quay.io/repository/goswagger/swagger/status "Docker Repository
  on Quay")](https://quay.io/repository/goswagger/swagger)

  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_shield)

  [![GolangCI](https://golangci.com/badges/github.com/go-swagger/go-swagger.svg)](https://golangci.com)

  [![Go Report
  Card](https://goreportcard.com/badge/github.com/go-swagger/go-swagger)](https://goreportcard.com/report/github.com/go-swagger/go-swagger)


  This package contains a golang implementation of Swagger 2.0 (aka [OpenAPI
  2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)):

  it knows how to serialize and deserialize swagger specifications.


  [Swagger](https://swagger.io/) is a simple yet powerful representation of your
  RESTful API.<br>


  >
  ![swagger](https://raw.githubusercontent.com/go-swagger/go-swagger/master/docs/favicon-16x16.png)
  **Swagger in a nutshell**

  >

  > With the largest ecosystem of API tooling on the planet, thousands of
  developers are supporting Swagger in almost every modern programming language
  and deployment environment.

  >

  > With a Swagger-enabled API, you get interactive documentation, client SDK
  generation and discoverability. We created Swagger to help fulfill the promise
  of APIs.

  >

  > Swagger helps companies like Apigee, Getty Images, Intuit, LivingSocial,
  McKesson, Microsoft, Morningstar, and PayPal build the best possible services
  with RESTful APIs. Now in version 2.0, Swagger is more enabling than ever. And
  it's 100% open source software.


  ##  Features

  `go-swagger` brings to the go community a complete suite of fully-featured,
  high-performance, API components to  work with a Swagger API: server, client
  and data model.


  * Generates a server from a swagger specification

  * Generates a client from a swagger specification

  * Supports most features offered by jsonschema and swagger, including
  polymorphism

  * Generates a swagger specification from annotated go code

  * Additional tools to work with a swagger spec

  * Great customization features, with vendor extensions and customizable
  templates


  Our focus with code generation is to produce idiomatic, fast go code, which
  plays nice with golint, go vet etc.


  ##  Project status

  `go-swagger` is now feature complete and has stabilized its API.


  Most features and building blocks are now in a stable state, with a rich set
  of CI tests.


  The go-openapi community actively continues bringing fixes and enhancements to
  this code base.


  There is still much room for improvement: contributors and PR's are welcome.
  You may also get in touch with maintainers on [our slack
  channel](https://slackin.goswagger.io).


  ## Documentation

  <https://goswagger.io>


  ## FAQ

  Q&A contributed by the community:


  <https://goswagger.io/faq/>


  ## How is this different from go generator in swagger-codegen?

  **tl;dr** The main difference at this moment is that this one actually
  works...


  The swagger-codegen project only generates a _workable_ go client and even
  there it will only support flat models.

  Further, the go server generated by swagger-codegen is mostly a stub.


  > **Motivation**

  > Why is this not done as a part of the swagger-codegen project? Because:

  >

  > * I don't really know java very well and so I'd be learning both java and
  the object model of the codegen which was in heavy flux as opposed to doing go
  and I really wanted to go experience of designing a large codebase with it.

  > * Go's super limited type system makes it so that it doesn't fit well in the
  model of swagger-codegen

  > * Go's idea of polymorphism doesn't reconcile very well with a solution
  designed for languages that actually have inheritance and so forth.

  > * For supporting types like `[][][]map[string][][]int64` I don't think it's
  possible with mustache

  >

  > I gravely underestimated the amount of work that would be involved in making
  something useful out of it.

  > My personal mission: I want the jvm to go away, it was great way back when
  now it's just silly (vm in container on vm in vm in container)


  ## What's inside?


  Here is an outline of available features (see the full list
  [here](https://goswagger.io/features.html)):


  - An object model that serializes swagger-compliant yaml or json

  - A tool to work with swagger
    - Serve swagger UI for any swagger spec file
    - Flexible code generation, with customizable templates
      - Generate go API server based on swagger spec
      - Generate go API client from a swagger spec
    -  Validate a swagger spec document, with extra rules outlined [here](https://github.com/apigee-127/sway/blob/master/docs/README.md#semantic-validation)
    -  Generate a spec document based on annotated code
  - A runtime to work with Rest API and middlewares
    - Serve spec
    - Routing
    - Validation
    - Authorization
    - Swagger docs UI

  There is more to that...


  - A [typed JSON Schema implementation](https://goswagger.io/use/model.html),
  supporting most Draft 4 features

  - Extended string and numeric formats:
  [strfmt](https://github.com/go-openapi/strfmt)

  - Utilities to work with JSON, convert data types and pointers:
  [swag](https://github.com/go-openapi/swag)

  - A jsonschema (Draft 4) validator, with full $ref support:
  [validate](https://github.com/go-openapi/validate)

  - Custom validation interface


  ## Installing

  `go-swagger` is available as binary or docker releases as well as from source:
  [more details](https://goswagger.io/install.html).


  ## Use-cases

  The main package of the toolkit, go-swagger/go-swagger, provides command line
  tools to help working with swagger.


  The toolkit is highly customizable and allows endless possibilities to work
  with OpenAPI2.0 specifications.


  Beside the go-swagger CLI tool and generator, the [go-openapi
  packages](https://github.com/go-openapi) provide modular functionality to
  build custom solutions on top of OpenAPI.


  The CLI supports shell autocompletion utilities: see
  [here](https://goswagger.io/cli_helpers.html).


  ### Serve specification UI

  Most basic use-case: serve a UI for your spec:


  ```

  swagger serve
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Validate a specification

  To [validate](https://goswagger.io/usage/validate.html) a Swagger
  specification:


  ```

  swagger validate
  https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Generate an API server

  To generate a [server for a swagger
  spec](https://goswagger.io/generate/server.html) document:


  ```

  swagger generate server [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate an API client

  To generate a [client for a swagger
  spec](https://goswagger.io/generate/client.html) document:


  ```

  swagger generate client [-f ./swagger.json] -A [application-name [--principal
  [principal-name]]

  ```


  ### Generate a spec from source

  To generate a [swagger spec document for a go
  application](https://goswagger.io/generate/spec.html):


  ```

  swagger generate spec -o ./swagger.json

  ```


  ### Generate a data model

  To generate model structures and validators exposed by the API:


  ```

  swagger generate model --spec={spec}

  ```


  ### Transform specs


  There are [several commands](https://goswagger.io/use/transform.html) allowing
  you to transform your spec.


  Resolve and expand $ref's in your spec as inline definitions:

  ```

  swagger expand {spec}

  ```


  Flatten your spec: all external $ref's are imported into the main document and
  inline schemas reorganized as definitions.

  ```

  swagger flatten {spec}

  ```


  Merge specifications (composition):

  ```

  swagger mixin {spec1} {spec2}

  ```


  ## Try it


  Try `go-swagger` in a free online workspace using Gitpod:


  [![Open in
  Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/go-swagger/go-swagger)


  ## Licensing


  The toolkit itself is licensed as Apache Software License 2.0. Just like
  swagger, this does not cover code generated by the toolkit. That code is
  entirely yours to license however you see fit.



  [![FOSSA
  Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_large)


  ## Who is using this project?


  To name but a few... (feel free to sign in there if you are using this
  project):


  > In the list below, we tried to figure out the public repos where you'll find
  examples on how to use `go-swagger` and `go-openapi`:


  [3DSIM](https://github.com/3DSIM)  

  [Alibaba PouchAPI](https://github.com/alibaba/pouch)  

  [CheckR](https://github.com/checkr/flagr)  

  [Cilium](https://github.com/cilium/cilium)  

  [CoreOS](https://github.com/coreos/go-quay)  

  [DigitalOcean](https://github.com/digitalocean/go-netbox)  

  [EVE Central](https://github.com/evecentral)  

  Iron.io

  [JaegerTracing](https://github.com/jaegertracing/jaeger)  

  [Kubernetes-Helm](https://github.com/kubernetes-helm/monocular)  

  [Kubernetes](https://godoc.org/k8s.io/apiextensions-apiserver/pkg/apiserver)  

  [ManifoldCo](https://github.com/manifoldco)  

  [Metaparticle.io](https://github.com/metaparticle-io/metaparticle-ast)  

  [Netlify](https://github.com/netlify/open-api)  

  [Nutanix](https://github.com/nutanix)  

  [OAS2](https://github.com/hypnoglow/oas2)  

  [OVH API](https://github.com/appscode/go-ovh)  

  [RackHD](https://github.com/RackHD/RackHD)  

  [ScaleFT](https://github.com/authclub/billforward)  

  [StratoScale](https://github.com/Stratoscale/swagger)  

  [VMWare](https://github.com/vmware/dispatch)  

  ...


  ## Note to users migrating from older releases


  ### Using 0.5.0


  Because 0.5.0 and master have diverged significantly, you should checkout the
  tag 0.5.0 for go-swagger when you use the currently released version.


  ### Migrating from 0.5.0 to 0.6.0


  You will have to rename some imports:


  ```

  github.com/go-swagger/go-swagger/httpkit/validate to
  github.com/go-openapi/validate

  github.com/go-swagger/go-swagger/httpkit to github.com/go-openapi/runtime

  github.com/naoina/denco to github.com/go-openapi/runtime/middleware/denco

  github.com/go-swagger/go-swagger to github.com/go-openapi

  ```


  ### Migrating from 0.12 to 0.13


  Spec flattening and $ref resolution brought breaking changes in model
  generation, since all complex things generate their own definitions.


  ### Migrating from 0.14 to 0.15


  Generated servers no more import the following package (replaced by go1.8
  native functionality):

  ```

  github.com/tylerb/graceful

  ```


  Spec flattening now defaults to minimal changes to models and should be
  workable for 0.12 users.


  Users who prefer to stick to 0.13 and 0.14 default flattening mode may now use
  the `--with-flatten=full` option.


  Note that the `--skip-flatten` option has been phased out and replaced by the
  more explicit `--with-expand` option.
krakenjs/swaggerize-hapi: >
  # hapi-openapi


  [![Build
  Status](https://travis-ci.org/krakenjs/hapi-openapi.svg?branch=master)](https://travis-ci.org/krakenjs/hapi-openapi)  

  [![NPM
  version](https://badge.fury.io/js/hapi-openapi.png)](http://badge.fury.io/js/hapi-openapi)  


  ### Note: this project was renamed from 'swaggerize-hapi' to 'hapi-openapi'.


  `hapi-openapi` is a design-driven approach to building RESTful services with
  [OpenAPI (Swagger)](http://openapis.org) and [Hapi](http://hapijs.com)
  (OpenAPI 3.0 support coming soon).


  `hapi-openapi` provides the following features:


  - API schema validation.

  - Routes based on the OpenAPI document.

  - API documentation route.

  - Input validation.


  ### Why "Design Driven"


  There are already a number of modules that help build RESTful APIs for node
  with OpenAPI. However,

  these modules tend to focus on building the documentation or specification as
  a side effect of writing

  the application business logic.


  `hapi-openapi` begins with the OpenAPI document first. This facilitates
  writing APIs that are easier to design, review, and test.


  At runtime, `hapi-openapi` uses the API specification to build routes from
  previously defined paths. This ensures that everything specified is what is
  implemented.


  ### Quick Start with a Generator


  This guide will let you go from an `api.json` to a service project in no time
  flat.


  First install `generator-swaggerize` (and `yo` if you haven't already):


  ```bash

  $ npm install -g yo

  $ npm install -g generator-swaggerize

  ```


  Now run the generator.


  ```bash

  $ mkdir petstore && cd $_

  $ yo swaggerize

  ```


  Follow the prompts (note: make sure to choose `hapi` as your framework
  choice).


  You now have a working api and can use something like
  [SwaggerHub](https://swaggerhub.com/?_ga=2.118604234.2143392684.1515431456-1673703125.1481054263)
  to explore it.


  ### Manual Usage


  ```javascript

  const Hapi = require('hapi');


  const server = new Hapi.Server();


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: Path.join(__dirname, './config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### Hapi Plugin


  The plugin will be registered as `openapi` on `server.plugins` with the
  following exposed:


  - `getApi()` - the resolved Swagger document.

  - `setHost(host)` - a helper function for setting the `host` property on the
  `api`.


  ### Configuration Options


  - `api` - a path to a valid OpenAPI 2.0 document, or a valid document in the
  form of an object.

  - *deprecated* `docspath` - the path to expose api docs for swagger-ui, etc.
  Defaults to `/api-docs`.

  - `docs` - an object used to configure the api docs route.
      - `path` - the path to expose api docs for swagger-ui, etc. Defaults to `/api-docs`.
      - `auth` - options auth config for this route.
      - `stripExtensions` - strip vendor extensions from docs. Defaults to true.
      - `prefixBasePath` - prefix path of docs with he OpenAPI document's `basePath` value. Defaults to true.
  - `handlers` - either a string directory structure for route handlers, object,
  or not set if using `x-hapi-handler`.

  - `extensions` - an array of file extension types to use when scanning for
  handlers. Defaults to `['js']`.

  - `vhost` - *optional* domain string (see [hapi route
  options](http://hapijs.com/api#route-options)).

  - `cors` - *optional* cors setting (see [hapi route
  options](http://hapijs.com/api#route-options)).

  - `outputvalidation` - *optional* validate response data.


  ### Mount Path


  Api `path` values will be prefixed with the OpenAPI document's `basePath`
  value.  This behavior can be negated if you set the option
  `docs.prefixBasePath` to `false`.


  ### Handlers Directory


  The `options.handlers` option specifies a directory to scan for handlers.
  These handlers are bound to the api `paths` defined in the OpenAPI document.


  ```

  handlers
    |--foo
    |    |--bar.js
    |--foo.js
    |--baz.js
  ```


  Will route as:


  ```

  foo.js => /foo

  foo/bar.js => /foo/bar

  baz.js => /baz

  ```


  ### Path Parameters


  The file and directory names in the handlers directory can also represent path
  parameters.


  For example, to represent the path `/users/{id}`:


  ```shell

  handlers
    |--users
    |    |--{id}.js
  ```


  This works with directory names as well:


  ```shell

  handlers
    |--users
    |    |--{id}.js
    |    |--{id}
    |        |--foo.js
  ```


  To represent `/users/{id}/foo`.


  ### Handlers File


  Each provided javascript file should export an object containing functions
  with HTTP verbs as keys.


  Example:


  ```javascript

  module.exports = {
      get: function (req, h) { ... },
      put: function (req, h) { ... },
      ...
  }

  ```


  Optionally, `pre` handlers can be used by providing an array of handlers for a
  method:


  ```javascript

  module.exports = {
      get: [
          function p1(req, h) { ... },
          function handler(req, h) { ... }
      ],
  }

  ```


  ### Handlers Object


  The directory generation will yield this object, but it can be provided
  directly as `options.handlers`.


  Example:


  ```javascript

  {
      'foo': {
          'get': function (req, h) { ... },
          'bar': {
              'get': function (req, h) { ... },
              'post': function (req, h) { ... }
          }
      }
      ...
  }

  ```


  ### X-Hapi-Handler


  Alternatively the API document can set `x-hapi-handler` attribute on each
  defined `paths` element if `handlers` is not defined.


  Example:


  ```

  "/pets/{id}": {
      "x-hapi-handler": "./routes/pets-by-id.js",
      .
      .
      .
  ```


  This will construct a `handlers` object from the given `x-hapi-handler` files.


  ### X-Hapi-Options


  There is now support at the operations level for `x-hapi-options` which
  represent individual [Hapi Route
  Optijons](https://github.com/hapijs/hapi/blob/master/API.md#route-options). 


  This support is limited to configuration supported by the JSON file type.


  Example:


  ```

  "/internal": {
    "post": {
      "x-hapi-options": {
        "isInternal": true
      }
      .
      .
      .
  ```


  ### Authentication


  Support for OpenAPI [security
  schemes](http://swagger.io/specification/#securitySchemeObject) requires that
  relevant authentication scheme and strategy are registered before the
  hapi-openapi plugin. See the [hapi docs](http://hapijs.com/tutorials/auth) for
  information about authentication schemes and strategies.


  The name of the hapi authentication strategy is expected to match the name
  field of the OpenAPI [security requirement
  object](http://swagger.io/specification/#securityRequirementObject).


  Example:


  ```yaml

  securityDefinitions:
    api_key:
      type: apiKey
      name: Authorization
      in: header
  paths:
    '/users/':
      get:
        security:
          - api_key: []
  ```


  ```javascript

  const server = new Hapi.Server();


  await server.register({ plugin: AuthTokenScheme });


  server.auth.strategy('api_key', 'auth-token-scheme', {
      validateFunc: async function (token) {
        // Implement validation here, return { credentials, artifacts }.
      }
  });


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: require('./config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### X-Hapi-Auth


  Alternatively it may be easier to automatically register a plugin to handle
  registering the necessary schemes and strategies.


  **x-hapi-auth-schemes**


  The root document can contain an `x-hapi-auth-schemes` object specifying
  different plugins responsible for registering auth schemes.


  Example:


  ```

  "x-hapi-auth-schemes": {
      "apiKey": "../lib/xauth-scheme.js"
  }

  ```


  This plugin will be passed the following options:


  - `name` - the auth scheme name, in this example `apiKey`.


  **x-hapi-auth-strategy**


  The `securityDefinitions` entries can contain an `x-hapi-auth-strategy`
  attribute pointing to a plugin responsible for registering auth strategies.


  Example:


  ```

  "securityDefinitions": {
    "api_key": {
      "x-hapi-auth-strategy": "../lib/xauth-strategy.js",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  }

  ```


  The plugin will be passed the following options:


  - `name` - the `securityDefinitions` entry's key. In this example, `api_key`.
  This is typically used as the strategy name.

  - `scheme` - the `securityDefinitions` `type`. In this example, `apiKey`. This
  should match a `x-hapi-auth-scheme` name.

  - `where` - `securityDefinitions` entry `in` attribute. This is search for the
  `lookup` value; in this example `header`.

  - `lookup` - `securityDefinitions` entry `name` attribute. Used as the name to
  look up against `where`.


  The way you can make these play together is that for every `type`, a scheme
  exists that delegates some lookup or evaluation to the appropriate strategy.


  Example:


  ```javascript

  //xauth-scheme.js


  const register = function (server, { name  }) {
      server.auth.scheme(name /*apiKey*/, (server, /* options received from the strategy */ { validate }) => {
          return {
              authenticate: async function (request, h) {
                  return h.authenticated(await validate(request));
              }
          };
      });
  };


  module.exports = { register, name: 'x-hapi-auth-scheme' };

  ```


  and


  ```javascript

  //xauth-strategy.js


  const Boom = require('boom');


  const register = function (server, { name, scheme, where, lookup }) {
      server.auth.strategy(name, /* the scheme to use this strategy with */ scheme, {
          //Define a validate function for the scheme above to receive
          validate: async function (request) {
              const token = request.headers[lookup];

              //Some arbitrary example
              if (token === '12345') {
                  return { credentials: { scope: ['read'] }, artifacts: { token } };
              }

              throw Boom.unauthorized();
          }
      });
  };


  module.exports = { register, name: 'x-hapi-auth-strategy' };

  ```
AntXlab/pyswagger: >+
  pyswagger

  =========


  [![Build
  Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage
  Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger)
  enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui).
  However, when it's time to **unittest**

  your API, the first option you find would be
  [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better
  option is us.


  This project is developed after
  [swagger-py](https://github.com/digium/swagger-py), which is a nicely
  implemented one, and inspired many aspects of this project. Another project is
  [flex](https://github.com/pipermerriam/flex), which focuses on parameter
  validation, try it if you can handle other parts by yourselves. For other
  projects related to Swagger tools in python, check
  [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't
  need to prepare a scala environment) and tries hard to **fully supports**
  [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from
  1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**,
  **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be
  organized into a group of App. And external document with self-describing
  resource is also supported (refer to
  [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data
  Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types)
  described in Swagger. You don't need to touch any json schema when using
  pyswagger. Limitations like **minimum/maximum** or **enum** are also checked.
  **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API
  definition according to spec.

  - builtin client implementation based on various http clients in python. For
  usage of these clients, please refer to `pyswagger.tests.contrib.client` for
  details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined
  primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted
  Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure
  [requests](https://github.com/kennethreitz/requests) is installed on your
  environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}',
  base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are
  going to access a remote/local web server, you must install
  [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready
  on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also
  required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about
  relations between
  components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported
  [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -
  %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc
  pyswagger/tests

  ```

RobWin/swagger2markup: >
  = Swagger2Markup

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup.svg?branch=master["Build
  Status", link="https://travis-ci.org/Swagger2Markup/swagger2markup"]
  image:https://coveralls.io/repos/Swagger2Markup/swagger2markup/badge.svg["Coverage
  Status", link="https://coveralls.io/r/Swagger2Markup/swagger2markup"]
  image:https://api.codacy.com/project/badge/grade/498a6a39d7d84ff687546359f58ee18d["Codacy
  code quality", link="https://www.codacy.com/app/robwin/swagger2markup"]
  image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup/_latestVersion"]
  image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2",
  link="http://www.apache.org/licenses/LICENSE-2.0.txt"]
  image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter",
  link="https://twitter.com/rbrtwnklr"]
  image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/RobWin/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]



  == Overview


  The primary goal of this project is to *simplify the generation of an
  up-to-date RESTful API documentation by combining documentation that's been
  hand-written with auto-generated API documentation* produced by
  https://github.com/swagger-api[Swagger]. The result is intended to be an
  *up-to-date, easy-to-read, on- and offline user guide*, comparable to
  https://developer.github.com/v3/[GitHub's API documentation]. The output of
  Swagger2Markup can be used as an alternative to
  https://github.com/swagger-api/swagger-ui[swagger-ui] and can be served as
  static content.

  NOTE: The Swagger Specification has been donated to to the
  https://openapis.org/[Open API Initiative (OAI)] and has been renamed to the
  https://github.com/OAI/OpenAPI-Specification[OpenAPI Specification].


  Swagger2Markup converts a Swagger JSON or YAML file into several *AsciiDoc* or
  *GitHub Flavored Markdown* documents which can be combined with hand-written
  documentation. The Swagger source file can be located locally or remotely via
  HTTP. Swagger2Markup supports the Swagger 1.2 and 2.0 specification.
  Internally it uses the _official_
  https://github.com/swagger-api/swagger-parser[swagger-parser] and my
  https://github.com/RobWin/markup-document-builder[markup-document-builder].


  You can use Swagger2Markup to convert your contract-first Swagger YAML file
  into a human-readable format and combine it with hand-written documentation.
  As an alternative, you can choose the code-first approach and use
  Swagger2Markup together with
  https://github.com/swagger-api/swagger-core/wiki/Swagger-Core-JAX-RS-Project-Setup-1.5.X[Swagger
  JAX-RS], https://github.com/springfox/springfox[springfox] or
  https://github.com/spring-projects/spring-restdocs[spring-restdocs]. If you
  are Gradle or Maven user, you can also use the
  https://github.com/RobWin/swagger2markup-gradle-plugin[Swagger2Markup Gradle
  Plugin] or
  https://github.com/redowl/swagger2markup-maven-plugin[Swagger2markup Maven
  Plugin].


  http://asciidoctor.org/docs/asciidoc-writers-guide/[AsciiDoc] is preferable to
  Markdown as it has more features. AsciiDoc is a text document format for
  writing documentation, articles, books, ebooks, slideshows, web pages and
  blogs. AsciiDoc files can be converted to *HTML*, *PDF* and *EPUB*. AsciiDoc
  is much better suited for describing public APIs than *JavaDoc* or
  *Annotations*.


  You can generate your HTML5, PDF and EPUB documentation via
  https://github.com/asciidoctor/asciidoctorj[asciidoctorj] or even better via
  the
  https://github.com/asciidoctor/asciidoctor-gradle-plugin[asciidoctor-gradle-plugin]
  or
  https://github.com/asciidoctor/asciidoctor-maven-plugin[asciidoctor-maven-plugin].


  The project requires at least JDK 8.


  == Example


  image::src/docs/asciidoc/images/Swagger2Markup.PNG[]


  image::src/docs/asciidoc/images/Swagger2Markup_definitions.PNG[]


  == Reference documentation

  - http://swagger2markup.github.io/swagger2markup/1.3.3/[Reference
  Documentation]

  -
  https://github.com/Swagger2Markup/swagger2markup/blob/master/RELEASENOTES.adoc[Release
  notes]

  - https://github.com/Swagger2Markup/spring-swagger2markup-demo[Demo using
  Swagger2Markup, Spring Boot, Springfox and spring-restdocs]


  == Contributing


  === Community contributions


  Pull requests are welcome.


  === Questions

  You can ask questions about Swagger2Markup in
  https://gitter.im/Swagger2Markup/swagger2markup[Gitter].


  === Bugs

  If you believe you have found a bug, please take a moment to search the
  existing issues. If no one else has reported the problem, please open a new
  issue that describes the problem in detail and, ideally, includes a test that
  reproduces it.


  === Enhancements

  If you’d like an enhancement to be made to Swagger2Markup, pull requests are
  most welcome. The source code is on GitHub. You may want to search the
  existing issues and pull requests to see if the enhancement is already being
  worked on. You may also want to open a new issue to discuss a possible
  enhancement before work on it begins.


  == Companies who use Swagger2Markup


  * Deutsche Telekom AG

  * https://restlet.com/[Restlet] -- Restlet offers an API platform, covering
  the https://restlet.com/products/restlet-studio/[design],
  https://restlet.com/products/dhc/[test] and
  https://restlet.com/products/apispark/[operation] of Web APIs, and uses
  Swagger2Markup to generate appealing HTML documentation from API definitions.

  * http://www.qaware.de/[QAware GmbH]

  * http://www.appdirect.com/[AppDirect] -- The leading commerce platform for
  selling cloud services.

  * http://www.wescale.com[wescale]

  * http://taskassure.com[TaskAssure] 

  * https://www.isaac.nl[ISAAC]

  * https://www.spreadshirt.de[Spreadshirt]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
OpenAPITools/openapi-generator: >
  <h1 align="center">OpenAPI Generator</h1>


  <div align="center">


  [Master](https://github.com/OpenAPITools/openapi-generator/tree/master)
  (`4.0.0`): [![Build
  Status](https://img.shields.io/travis/OpenAPITools/openapi-generator/master.svg?label=Integration%20Test)](https://travis-ci.org/OpenAPITools/openapi-generator)

  [![Integration
  Test2](https://circleci.com/gh/OpenAPITools/openapi-generator.svg?style=shield)](https://circleci.com/gh/OpenAPITools/openapi-generator)

  [![Run
  Status](https://api.shippable.com/projects/5af6bf74e790f4070084a115/badge?branch=master)](https://app.shippable.com/github/OpenAPITools/openapi-generator)

  [![Windows
  Test](https://ci.appveyor.com/api/projects/status/github/openapitools/openapi-generator?branch=master&svg=true&passingText=Windows%20Test%20-%20OK&failingText=Windows%20Test%20-%20Fails)](https://ci.appveyor.com/project/WilliamCheng/openapi-generator-wh2wu)


  </div>


  <div align="center">


  [![Join the chat at
  https://gitter.im/OpenAPITools/openapi-generator](https://badges.gitter.im/OpenAPITools/openapi-generator.svg)](https://gitter.im/OpenAPITools/openapi-generator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

  [![Stable releaases in the Maven
  store](https://img.shields.io/maven-metadata/v/http/central.maven.org/maven2/org/openapitools/openapi-generator/maven-metadata.xml.svg)](http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.openapitools%22%20AND%20a%3A%22openapi-generator%22)

  [![Follow OpenAPI Generator Twitter account to get the latest
  update](https://img.shields.io/twitter/follow/oas_generator.svg?style=social&label=Follow)](https://twitter.com/oas_generator)


  </div>


  <div align="center">


  :star::star::star: If you would like to contribute, please refer to
  [guidelines](CONTRIBUTING.md) and a list of [open
  tasks](https://github.com/openapitools/openapi-generator/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).:star::star::star:


  :bangbang: To migrate from Swagger Codegen to OpenAPI Generator, please refer
  to the [migration guide](docs/migration-from-swagger-codegen.md) :bangbang:


  :notebook_with_decorative_cover: For more information, please refer to the
  [Wiki page](https://github.com/openapitools/openapi-generator/wiki) and
  [FAQ](https://github.com/openapitools/openapi-generator/wiki/FAQ)
  :notebook_with_decorative_cover:


  :notebook_with_decorative_cover: The eBook [A Beginner's Guide to Code
  Generation for REST APIs](https://gumroad.com/l/swagger_codegen_beginner) is a
  good starting point for beginners :notebook_with_decorative_cover:


  :warning: If the OpenAPI spec, templates or any input (e.g. options,
  environment variables) is obtained from an untrusted source or environment,
  please make sure you've reviewed these inputs before using OpenAPI Generator
  to generate the API client, server stub or documentation to avoid potential
  security issues (e.g. [code
  injection](https://en.wikipedia.org/wiki/Code_injection)) :warning:


  :bangbang: Both "OpenAPI Tools" (https://OpenAPITools.org - the parent
  organization of OpenAPI Generator) and "OpenAPI Generator" are not affiliated
  with OpenAPI Initiative (OAI) :bangbang:


  </div>


  ## Sponsors


  If you find OpenAPI Generator useful for work, please consider asking your
  company to support this Open Source project by [becoming a
  sponsor](https://opencollective.com/openapi_generator). You can also
  individually sponsor the project by [becoming a
  backer](https://opencollective.com/openapi_generator).


  #### Thank you to our bronze sponsors!


  [![NamSor](https://openapi-generator.tech/img/companies/namsor.png)](https://www.namsor.com/?utm_source=openapi_generator&utm_medium=github_webpage&utm_campaign=sponsor)



  ## Overview

  OpenAPI Generator allows generation of API client libraries (SDK generation),
  server stubs,  documentation and configuration automatically given an [OpenAPI
  Spec](https://github.com/OAI/OpenAPI-Specification) (both 2.0 and 3.0 are
  supported). Currently, the following languages/frameworks are supported:


  |                                | Languages/Frameworks |

  |-|-|

  **API clients**                  | **ActionScript**, **Ada**, **Apex**,
  **Bash**, **C**, **C#** (.net 2.0, 3.5 or later), **C++** (cpprest, Qt5,
  Tizen), **Clojure**, **Dart (1.x, 2.x)**, **Elixir**, **Elm**, **Eiffel**,
  **Erlang**, **Go**, **Groovy**, **Haskell** (http-client, Servant), **Java**
  (Jersey1.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign, RestTemplate,
  RESTEasy, Vertx, Google API Client Library for Java, Rest-assured, Spring 5
  Web Client), **Kotlin**, **Lua**, **Node.js** (ES5, ES6, AngularJS with Google
  Closure Compiler annotations, Flow types) **Objective-C**, **Perl**, **PHP**,
  **PowerShell**, **Python**, **R**, **Ruby**, **Rust** (rust, rust-server),
  **Scala** (akka, http4s, scalaz, swagger-async-httpclient), **Swift** (2.x,
  3.x, 4.x), **Typescript** (AngularJS, Angular (2.x - 7.x), Aurelia, Axios,
  Fetch, Inversify, jQuery, Node, Rxjs)

  **Server stubs**                 | **Ada**, **C#** (ASP.NET Core, NancyFx),
  **C++** (Pistache, Restbed), **Erlang**, **Go** (net/http, Gin), **Haskell**
  (Servant), **Java** (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector,
  RestEasy, Play Framework,
  [PKMST](https://github.com/ProKarma-Inc/pkmst-getting-started-examples)),
  **Kotlin** (Spring Boot, Ktor), **PHP** (Laravel, Lumen, Slim, Silex,
  [Symfony](https://symfony.com/), [Zend
  Expressive](https://github.com/zendframework/zend-expressive)), **Python**
  (Flask), **NodeJS**, **Ruby** (Sinatra, Rails5), **Rust** (rust-server),
  **Scala** ([Finch](https://github.com/finagle/finch),
  [Lagom](https://github.com/lagom/lagom),
  [Play](https://www.playframework.com/), Scalatra)

  **API documentation generators** | **HTML**, **Confluence Wiki**

  **Configuration files**          | [**Apache2**](https://httpd.apache.org/)

  **Others**                       | **GraphQL**, **JMeter**, **MySQL Schema**


  ## Table of contents

    - [OpenAPI Generator](#openapi-generator)
    - [Overview](#overview)
    - [Table of Contents](#table-of-contents)
    - [1 - Installation](#1---installation)
      - [1.1 - Compatibility](#11---compatibility)
      - [1.2 - Artifacts on Maven Central](#12---artifacts-on-maven-central)
      - [1.3 - Download JAR](#13---download-jar)
      - [1.4 - Build Projects](#14---build-projects)
      - [1.5 - Homebrew](#15---homebrew)
      - [1.6 - Docker](#16---docker)
      - [1.7 - NPM](#17---npm)    
    - [2 - Getting Started](#2---getting-started)
    - [3 - Usage](#3---usage)
      - [3.1 - Customization](#31---customization)
      - [3.2 - Workflow Integration](#32---workflow-integration-maven-gradle-github-cicd)
      - [3.3 - Online Generators](#33---online-openapi-generator)
      - [3.4 - License Information on Generated Code](#34---license-information-on-generated-code)
    - [4 - Companies/Projects using OpenAPI Generator](#4---companiesprojects-using-openapi-generator)
    - [5 - Presentations/Videos/Tutorials/Books](#5---presentationsvideostutorialsbooks)
    - [6 - About Us](#6---about-us)
      - [6.1 - OpenAPI Generator Core Team](#61---openapi-generator-core-team)
      - [6.2 - OpenAPI Generator Technical Committee](#62---openapi-generator-technical-committee)
      - [6.3 - History of OpenAPI Generator](#63---history-of-openapi-generator)
    - [7 - License](#7---license)

  ## [1 - Installation](#table-of-contents)


  ### [1.1 - Compatibility](#table-of-contents)


  The OpenAPI Specification has undergone 3 revisions since initial creation in
  2010.  The openapi-generator project has the following compatibilities with
  the OpenAPI Specification:


  OpenAPI Generator Version    | Release Date | Notes

  ---------------------------- | ------------ | -----

  4.0.0 (upcoming release)
  [SNAPSHOT](https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/4.0.0-SNAPSHOT/)|
  20.12.2018 | Major release with breaking changes (with or without fallback)

  [3.3.4](https://github.com/OpenAPITools/openapi-generator/releases/tag/v3.3.4)
  (latest stable release) | 30.11.2018 | Bugfix release


  OpenAPI Spec compatibility: 1.0, 1.1, 1.2, 2.0, 3.0


  For old releases, please refer to the
  [**Release**](https://github.com/OpenAPITools/openapi-generator/releases)
  page.


  ## [1.2 - Artifacts on Maven Central](#table-of-contents)


  You can find our released artifacts on maven central:


  **Core:**

  ```xml

  <dependency>
      <groupId>org.openapitools</groupId>
      <artifactId>openapi-generator</artifactId>
      <version>${openapi-generator-version}</version>
  </dependency>

  ```

  See the different versions of the
  [openapi-generator](https://mvnrepository.com/artifact/org.openapitools/openapi-generator)
  artifact available on maven central.


  **Cli:**

  ```xml

  <dependency>
      <groupId>org.openapitools</groupId>
      <artifactId>openapi-generator-cli</artifactId>
      <version>${openapi-generator-version}</version>
  </dependency>

  ```

  See the different versions of the
  [openapi-generator-cli](https://mvnrepository.com/artifact/org.openapitools/openapi-generator-cli)
  artifact available on maven central.


  **Maven plugin:**

  ```xml

  <dependency>
      <groupId>org.openapitools</groupId>
      <artifactId>openapi-generator-maven-plugin</artifactId>
      <version>${openapi-generator-version}</version>
  </dependency>

  ```

  * See the different versions of the
  [openapi-generator-maven-plugin](https://mvnrepository.com/artifact/org.openapitools/openapi-generator-maven-plugin)
  artifact available on maven central.

  *
  [Readme](https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator-maven-plugin/README.md)


  **Gradle plugin:**

  ```xml

  <dependency>
      <groupId>org.openapitools</groupId>
      <artifactId>openapi-generator-gradle-plugin</artifactId>
      <version>${openapi-generator-version}</version>
  </dependency>

  ```

  * See the different versions of the
  [openapi-generator-gradle-plugin](https://mvnrepository.com/artifact/org.openapitools/openapi-generator-gradle-plugin)
  artifact available on maven central.

  *
  [Readme](https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator-gradle-plugin/README.adoc)


  ### [1.3 - Download JAR](#table-of-contents)


  If you're looking for the latest stable version, you can grab it directly from
  Maven.org (Java 8 runtime at a minimum):


  JAR location:
  `http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/3.3.4/openapi-generator-cli-3.3.4.jar`


  For **Mac/Linux** users:

  ```sh

  wget
  http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/3.3.4/openapi-generator-cli-3.3.4.jar
  -O openapi-generator-cli.jar

  ```


  For **Windows** users, you will need to install
  [wget](http://gnuwin32.sourceforge.net/packages/wget.htm) or you can use
  Invoke-WebRequest in PowerShell (3.0+), e.g.

  ```

  Invoke-WebRequest -OutFile openapi-generator-cli.jar
  http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/3.3.4/openapi-generator-cli-3.3.4.jar

  ```


  After downloading the JAR, run `java -jar openapi-generator-cli.jar help` to
  show the usage.


  For Mac users, please make sure Java 8 is installed (Tips: run `java -version`
  to check the version), and export `JAVA_HOME` in order to use the supported
  Java version:

  ```sh

  export JAVA_HOME=`/usr/libexec/java_home -v 1.8`

  export PATH=${JAVA_HOME}/bin:$PATH

  ```


  ### Launcher Script


  One downside to manual jar downloads is that you don't keep up-to-date with
  the latest released version. We have a Bash launcher script at
  [bin/utils/openapi-generator.cli.sh](./bin/utils/openapi-generator-cli.sh)
  which resolves this issue.


  To install the launcher script, copy the contents of the script to a location
  on your path and make the script executable.


  An example of setting this up (NOTE: Always evaluate scripts curled from
  external systems before executing them).


  ```

  mkdir -p ~/bin/openapitools

  curl
  https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh
  > ~/bin/openapitools/openapi-generator-cli

  chmod u+x ~/bin/openapitools/openapi-generator-cli

  export PATH=$PATH:~/bin/openapitools/

  ```


  Now, `openapi-generator-cli` is "installed". On invocation, it will query the
  GitHub repository for the most recently released version. If this matches the
  last downloaded jar,

  it will execute as normal. If a newer version is found, the script will
  download the latest release and execute it.


  If you need to invoke an older version of the generator, you can define the
  variable `OPENAPI_GENERATOR_VERSION` either ad hoc or globally. You can export
  this variable if you'd like to persist a specific release version.


  Examples:


  ```

  # Execute latest released openapi-generator-cli

  openapi-generator-cli version


  # Execute version 3.1.0 for the current invocation, regardless of the latest
  released version

  OPENAPI_GENERATOR_VERSION=3.1.0 openapi-generator-cli version


  # Execute version 3.1.0-SNAPSHOT for the current invocation

  OPENAPI_GENERATOR_VERSION=3.1.0-SNAPSHOT openapi-generator-cli version


  # Execute version 3.0.2 for every invocation in the current shell session

  export OPENAPI_GENERATOR_VERSION=3.0.2

  openapi-generator-cli version # is 3.0.2

  openapi-generator-cli version # is also 3.0.2


  # To "install" a specific version, set the variable in .bashrc/.bash_profile

  echo "export OPENAPI_GENERATOR_VERSION=3.0.2" >> ~/.bashrc

  source ~/.bashrc

  openapi-generator-cli version # is always 3.0.2, unless any of the above
  overrides are done ad hoc

  ```


  ### [1.4 - Build Projects](#table-of-contents)


  To build from source, you need the following installed and available in your
  `$PATH:`


  * [Java 8](http://java.oracle.com)


  * [Apache maven 3.3.4 or greater](http://maven.apache.org/)


  After cloning the project, you can build it from source with this command:

  ```sh

  mvn clean install

  ```


  If you don't have maven installed, you may directly use the included [maven
  wrapper](https://github.com/takari/maven-wrapper), and build with the command:

  ```sh

  ./mvnw clean install

  ```


  ### [1.5 - Homebrew](#table-of-contents)


  To install, run `brew install openapi-generator`


  Here is an example usage to generate a Ruby client:

  ```sh

  openapi-generator generate -i
  https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml
  -g ruby -o /tmp/test/

  ```


  To reinstall with the latest master, run `brew uninstall openapi-generator &&
  brew install --HEAD openapi-generator`


  ### [1.6 - Docker](#table-of-contents)


  #### Public Pre-built Docker images

   - [https://hub.docker.com/r/openapitools/openapi-generator-cli/](https://hub.docker.com/r/openapitools/openapi-generator-cli/) (official CLI)
   - [https://hub.docker.com/r/openapitools/openapi-generator-online/](https://hub.docker.com/r/openapitools/openapi-generator-online/) (official web service)


  #### OpenAPI Generator CLI Docker Image


  The OpenAPI Generator image acts as a standalone executable. It can be used as
  an alternative to installing via homebrew, or for developers who are unable to
  install Java or upgrade the installed version.


  To generate code with this image, you'll need to mount a local location as a
  volume.


  Example:


  ```sh

  docker run --rm -v ${PWD}:/local openapitools/openapi-generator-cli generate \
      -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml \
      -g go \
      -o /local/out/go
  ```


  The generated code will be located under `./out/go` in the current directory.


  #### OpenAPI Generator Online Docker Image


  The openapi-generator-online image can act as a self-hosted web application
  and API for generating code. This container can be incorporated into a CI
  pipeline, and requires at least two HTTP requests and some docker
  orchestration to access generated code.


  Example usage:


  ```sh

  # Start container at port 8888 and save the container id

  > CID=$(docker run -d -p 8888:8080 -e GENERATOR_HOST=http://localhost:8888
  openapitools/openapi-generator-online)


  # allow for startup

  > sleep 10


  # Get the IP of the running container (optional)

  GEN_IP=$(docker inspect --format '{{.NetworkSettings.IPAddress}}'  $CID)


  # Execute an HTTP request to generate a Ruby client

  > curl -X POST --header 'Content-Type: application/json' --header 'Accept:
  application/json' \

  -d '{"openAPIUrl":
  "https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml"}'
  \

  'http://localhost:8888/api/gen/clients/ruby'


  {"code":"c2d483.3.4672-40e9-91df-b9ffd18d22b8","link":"http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8"}


  # Download the generated zip file  

  > wget
  http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8


  # Unzip the file

  > unzip c2d483.3.4672-40e9-91df-b9ffd18d22b8


  # Shutdown the openapi generator image

  > docker stop $CID && docker rm $CID

  ```


  #### Development in docker


  You can use `run-in-docker.sh` to do all development. This script maps your
  local repository to `/gen`

  in the docker container. It also maps `~/.m2/repository` to the appropriate
  container location.


  To execute `mvn package`:


  ```sh

  git clone https://github.com/openapitools/openapi-generator

  cd openapi-generator

  ./run-in-docker.sh mvn package

  ```


  Build artifacts are now accessible in your working directory.


  Once built, `run-in-docker.sh` will act as an executable for
  openapi-generator-cli. To generate code, you'll need to output to a directory
  under `/gen` (e.g. `/gen/out`). For example:


  ```sh

  ./run-in-docker.sh help # Executes 'help' command for openapi-generator-cli

  ./run-in-docker.sh list # Executes 'list' command for openapi-generator-cli

  ./run-in-docker.sh /gen/bin/go-petstore.sh  # Builds the Go client

  ./run-in-docker.sh generate -i
  modules/openapi-generator/src/test/resources/2_0/petstore.yaml \
      -g go -o /gen/out/go-petstore -DpackageName=petstore # generates go client, outputs locally to ./out/go-petstore
  ```


  ##### Troubleshooting


  If an error like this occurs, just execute the **mvn clean install -U**
  command:


  > org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute
  goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test)
  on project openapi-generator: A type incompatibility occurred while executing
  org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test:
  java.lang.ExceptionInInitializerError cannot be cast to java.io.IOException


  ```sh

  ./run-in-docker.sh mvn clean install -U

  ```


  > Failed to execute goal org.fortasoft:gradle-maven-plugin:1.0.8:invoke
  (default) on project openapi-generator-gradle-plugin-mvn-wrapper:
  org.gradle.tooling.BuildException: Could not execute build using Gradle
  distribution 'https://services.gradle.org/distributions/gradle-4.7-bin.zip'


  Right now: no solution for this one :|


  #### Run Docker in Vagrant

  Prerequisite: install [Vagrant](https://www.vagrantup.com/downloads.html) and
  [VirtualBox](https://www.virtualbox.org/wiki/Downloads).
   ```sh
  git clone http://github.com/openapitools/openapi-generator.git

  cd openapi-generator

  vagrant up

  vagrant ssh

  cd /vagrant

  ./run-in-docker.sh mvn package

  ```


  ### [1.7 - NPM](#table-of-contents)


  There is also an [NPM package
  wrapper](https://www.npmjs.com/package/@openapitools/openapi-generator-cli)
  available for different platforms (e.g. Linux, Mac, Windows). (JVM is still
  required)

  Please see the [project's
  README](https://github.com/openapitools/openapi-generator-cli) there for more
  information.


  Install it globally to get the CLI available on the command line:


  ```sh

  npm install @openapitools/openapi-generator-cli -g

  openapi-generator version

  ```


  Or install a particualar OpenAPI Generator version (e.g. v3.3.4):


  ```sh

  npm install @openapitools/openapi-generator-cli@cli-3.3.4 -g

  ```


  Or install it as dev-dependency:


  ```sh

  npm install @openapitools/openapi-generator-cli -D

  ```


  ## [2 - Getting Started](#table-of-contents)


  To generate a PHP client for
  [petstore.yaml](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml),
  please run the following

  ```sh

  git clone https://github.com/openapitools/openapi-generator

  cd openapi-generator

  mvn clean package

  java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar
  generate \
     -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml \
     -g php \
     -o /var/tmp/php_api_client
  ```

  (if you're on Windows, replace the last command with `java -jar
  modules\openapi-generator-cli\target\openapi-generator-cli.jar generate -i
  https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml
  -g php -o c:\temp\php_api_client`)


  You can also download the JAR (latest release) directly from
  [maven.org](http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/3.3.4/openapi-generator-cli-3.3.4.jar)


  To get a list of **general** options available, please run `java -jar
  modules/openapi-generator-cli/target/openapi-generator-cli.jar help generate`


  To get a list of PHP specified options (which can be passed to the generator
  with a config file via the `-c` option), please run `java -jar
  modules/openapi-generator-cli/target/openapi-generator-cli.jar config-help -g
  php`


  ## [3 - Usage](#table-of-contents)


  ### To generate a sample client library

  You can build a client against the [Petstore
  API](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml)
  as follows:


  ```sh

  ./bin/java-petstore-okhttp-gson.sh

  ```


  (On Windows, run `.\bin\windows\java-petstore-okhttp-gson.bat` instead)


  This script uses the default library, which is `okhttp-gson`. It will run the
  generator with this command:


  ```sh

  java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar
  generate \
    -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/2_0/petstore.yaml \
    -g java \
    -o samples/client/petstore/java/okhttp-gson
  ```


  with a number of options. [The java options are documented
  here.](docs/generators/java.md)


  You can also get the options with the `help generate` command (below only
  shows partial results):


  ```

  NAME
          openapi-generator-cli generate - Generate code with the specified
          generator.

  SYNOPSIS
          openapi-generator-cli generate
                  [(-a <authorization> | --auth <authorization>)]
                  [--additional-properties <additional properties>...]
                  [--api-package <api package>] [--artifact-id <artifact id>]
                  [--artifact-version <artifact version>]
                  [(-c <configuration file> | --config <configuration file>)]
                  [-D <system properties>...]
                  [(-g <generator name> | --generator-name <generator name>)]
                  [--git-repo-id <git repo id>] [--git-user-id <git user id>]
                  [--group-id <group id>] [--http-user-agent <http user agent>]
                  (-i <spec file> | --input-spec <spec file>)
                  [--ignore-file-override <ignore file override location>]
                  [--import-mappings <import mappings>...]
                  [--instantiation-types <instantiation types>...]
                  [--invoker-package <invoker package>]
                  [--language-specific-primitives <language specific primitives>...]
                  [--library <library>] [--log-to-stderr]
                  [--model-name-prefix <model name prefix>]
                  [--model-name-suffix <model name suffix>]
                  [--model-package <model package>]
                  [(-o <output directory> | --output <output directory>)]
                  [--release-note <release note>] [--remove-operation-id-prefix]
                  [--reserved-words-mappings <reserved word mappings>...]
                  [(-s | --skip-overwrite)] [--skip-validate-spec]
                  [(-t <template directory> | --template-dir <template directory>)]
                  [--type-mappings <type mappings>...] [(-v | --verbose)]

  OPTIONS
          -a <authorization>, --auth <authorization>
              adds authorization headers when fetching the OpenAPI definitions
              remotely. Pass in a URL-encoded string of name:header with a comma
              separating multiple values

  ...... (results omitted)

          -v, --verbose
              verbose mode

  ```


  You can then compile and run the client, as well as unit tests against it:


  ```sh

  cd samples/client/petstore/java/okhttp-gson

  mvn package

  ```


  Other languages have petstore samples, too:

  ```sh

  ./bin/android-petstore-all.sh

  ./bin/java-petstore-all.sh

  ./bin/objc-petstore.sh

  ```


  ... and others. [Here is a list of all
  scripts.](https://github.com/OpenAPITools/openapi-generator/wiki/Samples-folder#scripts)


  ### [3.1 - Customization](#table-of-contents)


  Please refer to [customization.md](docs/customization.md) on how to customize
  the output (e.g. package name, version)


  ### [3.2 - Workflow Integration (Maven, Gradle, Github,
  CI/CD)](#table-of-contents)


  Please refer to [integration.md](docs/integration.md) on how to integrate
  OpenAPI generator with Maven, Gradle, Github and CI/CD.


  ### [3.3 - Online OpenAPI generator](#table-of-contents)


  Here are the public online services:


  - latest stable version: http://api.openapi-generator.tech

  - latest master: http://api-latest-master.openapi-generator.tech (updated with
  latest master every hour)


  The server is sponsored by [Linode](https://www.linode.com/) [![Linode
  Logo](https://www.linode.com/media/images/logos/standard/light/linode-logo_standard_light_small.png)](https://www.linode.com/)


  (These services are beta and do not have any guarantee on service level)


  Please refer to [online.md](docs/online.md) on how to run and use the
  `openapi-generator-online` - a web service for `openapi-generator`.


  ### [3.4 - License information on Generated Code](#table-of-contents)


  The OpenAPI Generator project is intended as a benefit for users of the Open
  API Specification.  The project itself has the [License](#license) as
  specified. In addition, please understand the following points:


  * The templates included with this project are subject to the
  [License](#license).

  * Generated code is intentionally _not_ subject to the parent project license


  When code is generated from this project, it shall be considered **AS IS** and
  owned by the user of the software.  There are no warranties--expressed or
  implied--for generated code.  You can do what you wish with it, and once
  generated, the code is your responsibility and subject to the licensing terms
  that you deem appropriate.
   
  ## [4 - Companies/Projects using OpenAPI Generator](#table-of-contents)

  Here are some companies/projects (alphabetical order) using OpenAPI Generator
  in production. To add your company/project to the list, please visit
  [README.md](README.md) and click on the icon to edit the page.


  - [Adaptant Solutions AG](https://www.adaptant.io/)

  - [Angular.Schule](https://angular.schule/)

  - [ASKUL](https://www.askul.co.jp)

  - [b<>com](https://b-com.com/en)

  - [BIMData.io](https://bimdata.io)

  - [Bithost GmbH](https://www.bithost.ch)

  - [Boxever](https://www.boxever.com/)

  - [Camptocamp](https://www.camptocamp.com/en)

  - [codecentric AG](https://www.codecentric.de/)

  - [Cupix](https://www.cupix.com/)

  - [FormAPI](https://formapi.io/)

  - [GenFlow](https://github.com/RepreZen/GenFlow)

  - [GMO Pepabo](https://pepabo.com/en/)

  - [GoDaddy](https://godaddy.com)

  - [JustStar](https://www.juststarinfo.com)

  - [Klarna](https://www.klarna.com/)

  - [Metaswitch](https://www.metaswitch.com/)

  - [Myworkout](https://myworkout.com)

  - [Prometheus/Alertmanager](https://github.com/prometheus/alertmanager)

  - [Raiffeisen Schweiz Genossenschaft](https://www.raiffeisen.ch)

  - [RepreZen API
  Studio](https://www.reprezen.com/swagger-openapi-code-generation-api-first-microservices-enterprise-development)

  - [REST United](https://restunited.com)

  - [Stingray](http://www.stingray.com)

  - [Suva](https://www.suva.ch/)

  - [Telstra](https://dev.telstra.com)

  - [TUI InfoTec GmbH](http://www.tui-infotec.com/)

  - [unblu inc.](https://www.unblu.com/)

  - [Veamly](https://www.veamly.com/)

  - [Xero](https://www.xero.com/)

  - [Zalando](https://www.zalando.com)


  ## [5 - Presentations/Videos/Tutorials/Books](#table-of-contents)


  - 2018/05/12 - [OpenAPI Generator - community
  drivenで成長するコードジェネレータ](https://ackintosh.github.io/blog/2018/05/12/openapi-generator/)
  by [中野暁人](https://github.com/ackintosh)

  - 2018/05/15 - [Starting a new open-source
  project](http://jmini.github.io/blog/2018/2018-05-15_new-open-source-project.html)
  by [Jeremie Bresson](https://github.com/jmini)

  - 2018/05/15 - [REST API仕様からAPIクライアントやスタブサーバを自動生成する「OpenAPI
  Generator」オープンソースで公開。Swagger
  Codegenからのフォーク](https://www.publickey1.jp/blog/18/rest_apiapiopenapi_generatorswagger_generator.html)
  by [Publickey](https://www.publickey1.jp)

  - 2018/06/08 - [Swagger Codegen is now OpenAPI
  Generator](https://angular.schule/blog/2018-06-swagger-codegen-is-now-openapi-generator)
  by [JohannesHoppe](https://github.com/JohannesHoppe)

  - 2018/06/21 - [Connect your JHipster apps to the world of APIs with OpenAPI
  and
  gRPC](https://fr.slideshare.net/chbornet/jhipster-conf-2018-connect-your-jhipster-apps-to-the-world-of-apis-with-openapi-and-grpc)
  by [Christophe Bornet](https://github.com/cbornet) at [JHipster Conf
  2018](https://jhipster-conf.github.io/)

  - 2018/06/27 - [Lessons Learned from Leading an Open-Source Project Supporting
  30+ Programming
  Languages](https://speakerdeck.com/wing328/lessons-learned-from-leading-an-open-source-project-supporting-30-plus-programming-languages)
  - [William Cheng](https://github.com/wing328) at [LinuxCon + ContainerCon +
  CloudOpen China 2018](http://bit.ly/2waDKKX)

  - 2018/07/19 - [OpenAPI Generator Contribution Quickstart - RingCentral Go
  SDK](https://medium.com/ringcentral-developers/openapi-generator-for-go-contribution-quickstart-8cc72bf37b53)
  by [John Wang](https://github.com/grokify)

  - 2018/08/22 - [OpenAPI Generatorのプロジェクト構成などのメモ](https://yinm.info/20180822/)
  by [Yusuke Iinuma](https://github.com/yinm)

  - 2018/09/12 - [RepreZen and OpenAPI 3.0: Now is the
  Time](https://www.reprezen.com/blog/reprezen-openapi-3.0-upgrade-now-is-the-time)
  by [Miles Daffin](https://www.reprezen.com/blog/author/miles-daffin)

  - 2018/10/31 - [A node package wrapper for
  openapi-generator](https://github.com/HarmoWatch/openapi-generator-cli)

  - 2018/11/03 - [OpenAPI Generator + golang + Flutter
  でアプリ開発](http://ryuichi111std.hatenablog.com/entry/2018/11/03/214005) by
  [Ryuichi Daigo](https://github.com/ryuichi111)

  - 2018/11/15 -
  [基于openapi3.0的yaml文件生成java代码的一次实践](https://blog.csdn.net/yzy199391/article/details/84023982)
  by [焱魔王](https://me.csdn.net/yzy199391)

  - 2018/11/19 - [OpenAPIs are everywhere](https://youtu.be/-lDot4Yn7Dg) by
  [Jeremie Bresson (Unblu)](https://github.com/jmini) at [EclipseCon Europe
  2018](https://www.eclipsecon.org/europe2018)

  - 2018/12/09 - [openapi-generator
  をカスタマイズする方法](https://qiita.com/watiko/items/0961287c02eac9211572) by
  [@watiko](https://qiita.com/watiko)

  - 2019/01/03 - [Calling a Swagger service from Apex using
  openapi-generator](https://lekkimworld.com/2019/01/03/calling-a-swagger-service-from-apex-using-openapi-generator/)
  by [Mikkel Flindt Heisterberg](https://lekkimworld.com)

  - 2019/01/13 - [OpenAPI GeneratorでRESTful
  APIの定義書から色々自動生成する](https://ky-yk-d.hatenablog.com/entry/2019/01/13/234108) by
  [@ky_yk_d](https://twitter.com/ky_yk_d)

  - 2019/01/30 - [Rapid Application Development With API First Approach Using
  Open-API
  Generator](https://dzone.com/articles/rapid-api-development-using-open-api-generator)
  by [Milan Sonkar](https://dzone.com/users/828329/milan_sonkar.html)  

  - 2019/02/02 - [平静を保ち、コードを生成せよ 〜 OpenAPI Generator誕生の背景と軌跡
  〜](https://speakerdeck.com/akihito_nakano/gunmaweb34) by
  [中野暁人](https://github.com/ackintosh) at [Gunma.web #34
  スキーマ駆動開発](https://gunmaweb.connpass.com/event/113974/)

  - 2019/02/20 - [An adventure in OpenAPI V3 code
  generation](https://mux.com/blog/an-adventure-in-openapi-v3-api-code-generation/)
  by [Phil Cluff](https://mux.com/blog/author/philc/)

  - 2019/02/26 - [Building API Services: A Beginner’s
  Guide](https://medium.com/google-cloud/building-api-services-a-beginners-guide-7274ae4c547f)
  by [Ratros Y.](https://medium.com/@ratrosy) in [Google Cloud Platofrm
  Blog](https://medium.com/google-cloud)

  - 2019/02/26 - [Building APIs with OpenAPI:
  Continued](https://medium.com/@ratrosy/building-apis-with-openapi-continued-5d0faaed32eb)
  by [Ratros Y.](https://medium.com/@ratrosy) in [Google Cloud Platofrm
  Blog](https://medium.com/google-cloud)

  - 2019-03-07 - [OpenAPI Generator で Spring Boot と Angular
  をタイプセーフに繋ぐ](https://qiita.com/chibato/items/e4a748db12409b40c02f) by [Tomofumi
  Chiba](https://github.com/chibat)

  - 2019-03-25 - [Access any REST service with the SAP S/4HANA Cloud
  SDK](https://blogs.sap.com/2019/03/25/integrate-sap-s4hana-cloud-sdk-with-open-api/)
  by [Alexander Duemont](https://people.sap.com/alexander.duemont)

  - 2019-03-25 - [OpenAPI
  generatorを試してみる](https://qiita.com/amuyikam/items/e8a45daae59c68be0fc8) by
  [@amuyikam](https://twitter.com/amuyikam)

  - 2019-03-27 -
  [OpenAPI3を使ってみよう！Go言語でクライアントとスタブの自動生成まで！](https://techblog.zozo.com/entry/openapi3/go)
  by [@gold_kou](https://twitter.com/gold_kou)

  - 2019-04-18 - [How to use OpenAPI3 for API developer (RubyKaigi
  2019)](https://speakerdeck.com/ota42y/how-to-use-openapi3-for-api-developer)
  by [@ota42y](https://twitter.com/ota42y) at [RubyKaigi
  2019](https://rubykaigi.org/2019)


  ## [6 - About Us](#table-of-contents)


  ### [6.1 - OpenAPI Generator Core Team](#table-of-contents)


  OpenAPI Generator core team members are contributors who have been making
  significant contributions (review issues, fix bugs, make enhancements, etc) to
  the project on a regular basis.


  #### Core Team Members

  * [@wing328](https://github.com/wing328) (2015/07)
  [:heart:](https://www.patreon.com/wing328)

  * [@jimschubert](https://github.com/jimschubert) (2016/05)
  [:heart:](https://www.patreon.com/jimschubert)

  * [@cbornet](https://github.com/cbornet) (2016/05)

  * [@ackintosh](https://github.com/ackintosh) (2018/02)
  [:heart:](https://www.patreon.com/ackintosh/overview)

  * [@jmini](https://github.com/jmini) (2018/04)


  :heart: = Link to support the contributor directly 


  #### Template Creator

  Here is a list of template creators:
   * API Clients:
     * Ada: @stcarrez
     * Akka-Scala: @cchafer
     * Apex: @asnelling
     * Bash: @bkryza
     * C: @PowerOfCreation @zhemant [:heart:](https://www.patreon.com/zhemant)
     * C++ REST: @Danielku15
     * C# (.NET 2.0): @who
     * C# (.NET Standard 1.3 ): @Gronsak
     * C# (.NET 4.5 refactored): @jimschubert [:heart:](https://www.patreon.com/jimschubert)
     * Clojure: @xhh
     * Dart: @yissachar
     * Dart (refactor): @joernahrens
     * Dart 2: @swipesight
     * Dart (Jaguar): @jaumard
     * Elixir: @niku
     * Elm: @eriktim
     * Eiffel: @jvelilla
     * Erlang: @tsloughter
     * Erlang (PropEr): @jfacorro @robertoaloi
     * Groovy: @victorgit
     * Go: @wing328 [:heart:](https://www.patreon.com/wing328)
     * Go (rewritten in 2.3.0): @antihax
     * Haskell (http-client): @jonschoning
     * Java (Feign): @davidkiss
     * Java (Retrofit): @0legg
     * Java (Retrofit2): @emilianobonassi
     * Java (Jersey2): @xhh
     * Java (okhttp-gson): @xhh
     * Java (RestTemplate): @nbruno
     * Java (Spring 5 WebClient): @daonomic
     * Java (RESTEasy): @gayathrigs
     * Java (Vertx): @lopesmcc
     * Java (Google APIs Client Library): @charlescapps
     * Java (Rest-assured): @viclovsky
     * Javascript/NodeJS: @jfiala
     * Javascript (Closure-annotated Angular) @achew22
     * Javascript (Flow types) @jaypea
     * JMeter: @davidkiss
     * Kotlin: @jimschubert [:heart:](https://www.patreon.com/jimschubert)
     * Lua: @daurnimator
     * Perl: @wing328 [:heart:](https://www.patreon.com/wing328)
     * PHP (Guzzle): @baartosz
     * PowerShell: @beatcracker
     * R: @ramnov
     * Rust: @farcaller
     * Rust (rust-server): @metaswitch
     * Scala (scalaz & http4s): @tbrown1979
     * Swift: @tkqubo
     * Swift 3: @hexelon
     * Swift 4: @ehyche
     * TypeScript (Angular1): @mhardorf
     * TypeScript (Angular2): @roni-frantchi
     * TypeScript (Angular6): @akehir 
     * TypeScript (Angular7): @topce
     * TypeScript (Axios): @nicokoenig
     * TypeScript (Fetch): @leonyu
     * TypeScript (jQuery): @bherila
     * TypeScript (Node):  @mhardorf
     * TypeScript (Rxjs): @denyo
   * Server Stubs
     * Ada: @stcarrez
     * C# ASP.NET5: @jimschubert [:heart:](https://www.patreon.com/jimschubert)
     * C# NancyFX: @mstefaniuk
     * C++ (Qt5 QHttpEngine): @etherealjoy
     * C++ Pistache: @sebymiano
     * C++ Restbed: @stkrwork
     * Erlang Server: @galaxie
     * Go Server: @guohuang
     * Go (Gin) Server: @kemokemo
     * GraphQL Express Server: @renepardon
     * Haskell Servant: @algas
     * Java MSF4J: @sanjeewa-malalgoda
     * Java Spring Boot: @diyfr
     * Java Undertow: @stevehu
     * Java Play Framework: @JFCote
     * Java PKMST: @anshu2185 @sanshuman @rkumar-pk @ninodpillai
     * JAX-RS RestEasy: @chameleon82
     * JAX-RS CXF: @hiveship
     * JAX-RS CXF (CDI): @nickcmaynard
     * JAX-RS RestEasy (JBoss EAP): @jfiala
     * Kotlin: @jimschubert [:heart:](https://www.patreon.com/jimschubert)
     * Kotlin (Spring Boot): @dr4ke616
     * PHP Laravel: @renepardon
     * PHP Lumen: @abcsun
     * PHP Slim: @jfastnacht
     * PHP Symfony: @ksm2
     * PHP Zend Expressive (with Path Handler): @Articus
     * Python AIOHTTP: @Jyhess
     * Ruby on Rails 5: @zlx
     * Rust (rust-server): @metaswitch
     * Scala Finch: @jimschubert [:heart:](https://www.patreon.com/jimschubert)
     * Scala Lagom: @gmkumar2005
     * Scala Play: @adigerber
   * Documentation
     * HTML Doc 2: @jhitchcock
     * Confluence Wiki: @jhitchcock
   * Configuration
     * Apache2: @stkrwork
   * Schema
     * GraphQL: @wing328 [:heart:](https://www.patreon.com/wing328)
     * MySQL: @ybelenko

  :heart: = Link to support the contributor directly


  #### How to join the core team


  Here are the requirements to become a core team member:

  - rank within top 50 in
  https://github.com/openapitools/openapi-generator/graphs/contributors
    - to contribute, here are some good [starting points](https://github.com/openapitools/openapi-generator/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22)
  - regular contributions to the project
    - about 3 hours per week
    - for contribution, it can be addressing issues, reviewing PRs submitted by others, submitting PR to fix bugs or make enhancements, etc
    - must be active in the past 3 months at the time of application

   To join the core team, please reach out to team@openapitools.org for more information.

   To become a Template Creator, simply submit a PR for new API client (e.g. Rust, Elixir) or server stub (e.g. Ruby Grape) generator.

  ### [6.2 - OpenAPI Generator Technical Committee](#table-of-contents)


  Members of the OpenAPI Generator technical committee shoulder the following
  responsibilities:


  - Provides guidance and direction to other users

  - Reviews pull requests and issues

  - Improves the generator by making enhancements, fixing bugs or updating
  documentations

  - Sets the technical direction of the generator


  Who is eligible? Those who want to join must have at least 3 PRs merged into a
  generator. (Exceptions can be granted to template creators or contributors who
  have made a lot of code changes with less than 3 merged PRs)


  If you want to join the committee, please kindly apply by sending an email to
  team@openapitools.org with your Github ID.


  #### Members of Technical Committee


  | Languages    | Member (join date) |

  |:-------------|:-------------|

  | ActionScript |      |

  | Ada       | @stcarrez (2018/02) @micheleISEP (2018/02) |

  | Android   | @jaz-ah (2017/09) |

  | Apex      |  |

  | Bash      | @frol (2017/07) @bkryza (2017/08) @kenjones-cisco (2017/09) |

  | C         | @zhemant (2018/11) |

  | C++       | @ravinikam (2017/07) @stkrwork (2017/07) @fvarose (2017/11)
  @etherealjoy (2018/02) @martindelille (2018/03) |

  | C#        | @mandrean (2017/08), @jimschubert (2017/09)
  [:heart:](https://www.patreon.com/jimschubert) |

  | Clojure   |  |

  | Dart      | @ircecho (2017/07) @swipesight (2018/09) @jaumard (2018/09) |

  | Eiffel    | @jvelilla (2017/09) |

  | Elixir    | @mrmstn (2018/12) |

  | Elm       | @eriktim (2018/09) |

  | Erlang    | @tsloughter (2017/11) @jfacorro (2018/10) @robertoaloi (2018/10)
  |

  | Go        | @antihax (2017/11) @bvwells (2017/12) @grokify (2018/07)
  @kemokemo (2018/09 |

  | GraphQL   | @renepardon (2018/12) |

  | Groovy    |  |

  | Haskell   |  |

  | Java      | @bbdouglas (2017/07) @sreeshas (2017/08) @jfiala (2017/08)
  @lukoyanov (2017/09) @cbornet (2017/09) @jeff9finger (2018/01) @karismann
  (2019/03) @Zomzog (2019/04) |

  | Kotlin    | @jimschubert (2017/09)
  [:heart:](https://www.patreon.com/jimschubert), @dr4ke616 (2018/08) @karismann
  (2019/03) @Zomzog (2019/04) |

  | Lua       | @daurnimator (2017/08) |

  | NodeJS/Javascript | @CodeNinjai (2017/07) @frol (2017/07) @cliffano
  (2017/07) |

  | ObjC      |  |

  | Perl      | @wing328 (2017/07) [:heart:](https://www.patreon.com/wing328) |

  | PHP       | @jebentier (2017/07), @dkarlovi (2017/07), @mandrean (2017/08),
  @jfastnacht (2017/09), @ackintosh (2017/09)
  [:heart:](https://www.patreon.com/ackintosh/overview), @ybelenko (2018/07),
  @renepardon (2018/12) |

  | PowerShell | |

  | Python    | @taxpon (2017/07) @frol (2017/07) @mbohlool (2017/07) @cbornet
  (2017/09) @kenjones-cisco (2017/11) @tomplus (2018/10) @Jyhess (2019/01) |

  | R         |  |

  | Ruby      | @cliffano (2017/07) @zlx (2017/09) @autopp (2019/02) |

  | Rust      | @frol (2017/07) @farcaller (2017/08) @bjgill (2017/12) |

  | Scala     | @clasnake (2017/07), @jimschubert (2017/09)
  [:heart:](https://www.patreon.com/jimschubert), @shijinkui  (2018/01),
  @ramzimaalej (2018/03) |

  | Swift     | @jgavris (2017/07) @ehyche (2017/08) @Edubits (2017/09) @jaz-ah
  (2017/09) @d-date  (2018/03) |

  | TypeScript | @TiFu (2017/07) @taxpon (2017/07) @sebastianhaas (2017/07)
  @kenisteward (2017/07) @Vrolijkx (2017/09) @macjohnny (2018/01) @nicokoenig
  (2018/09) @topce (2018/10) |


  :heart: = Link to support the contributor directly


  ### [6.3 - History of OpenAPI Generator](#table-of-contents)


  OpenAPI Generator is a fork of [Swagger
  Codegen](https://github.com/swagger-api/swagger-codegen). In view of the
  issues with the Swagger Codegen 3.0.0 (beta) release and the disagreement on
  the project's direction, more than 40 top contributors and template creators
  of Swagger Codegen decided to fork Swagger Codegen and maintain a
  community-driven version called "OpenAPI Generator". Please refer to the
  [Q&A](docs/qna.md) for more information.


  #### Founding Members (alphabetical order):


  - [Akihito Nakano](https://github.com/ackintosh)

  - [Artem Ocheredko](https://github.com/galaxie)

  - [Arthur Mogliev](https://github.com/Articus)

  - [Bartek Kryza](https://github.com/bkryza)

  - [Ben Wells](https://github.com/bvwells)

  - [Benjamin Gill](https://github.com/bjgill)

  - [Christophe Bornet](https://github.com/cbornet)

  - [Cliffano Subagio](https://github.com/cliffano)

  - [Daiki Matsudate](https://github.com/d-date)

  - [Daniel](https://github.com/Danielku15)

  - [Emiliano Bonassi](https://github.com/emilianobonassi)

  - [Erik Timmers](https://github.com/eriktim)

  - [Esteban Marin](https://github.com/macjohnny)

  - [Gustavo Paz](https://github.com/gustavoapaz)

  - [Javier Velilla](https://github.com/jvelilla)

  - [Jean-François Côté](https://github.com/JFCote)

  - [Jim Schubert](https://github.com/jimschubert)

  - [Jon Schoning](https://github.com/jonschoning)

  - [Jérémie Bresson](https://github.com/jmini)

  - [Jörn Ahrens](https://github.com/jayearn)

  - [Keni Steward](https://github.com/kenisteward)

  - [Marcin Stefaniuk](https://github.com/mstefaniuk)

  - [Martin Delille](https://github.com/MartinDelille)

  - [Masahiro Yamauchi](https://github.com/algas)

  - [Michele Albano](https://github.com/micheleISEP)

  - [Ramzi Maalej](https://github.com/ramzimaalej)

  - [Ravindra Nikam](https://github.com/ravinikam)

  - [Ricardo Cardona](https://github.com/ricardona)

  - [Sebastian Haas](https://github.com/sebastianhaas)

  - [Sebastian Mandrean](https://github.com/mandrean)

  - [Sreenidhi Sreesha](https://github.com/sreeshas)

  - [Stefan Krismann](https://github.com/stkrwork)

  - [Stephane Carrez](https://github.com/stcarrez)

  - [Takuro Wada](https://github.com/taxpon)

  - [Tomasz Prus](https://github.com/tomplus)

  - [Tristan Sloughter](https://github.com/tsloughter)

  - [Victor Orlovsky](https://github.com/viclovsky)

  - [Victor Trakhtenberg](https://github.com/victorgit)

  - [Vlad Frolov](https://github.com/frol)

  - [Vladimir Pouzanov](https://github.com/farcaller)

  - [William Cheng](https://github.com/wing328)

  - [Xin Meng](https://github.com/xmeng1)
  [:heart:](https://www.patreon.com/user/overview?u=16435385)

  - [Xu Hui Hui](https://github.com/xhh)

  - [antihax](https://github.com/antihax)

  - [beatcracker](https://github.com/beatcracker)

  - [daurnimator](https:/github.com/daurnimator)

  - [etherealjoy](https://github.com/etherealjoy)

  - [jfiala](https://github.com/jfiala)

  - [lukoyanov](https://github.com/lukoyanov)


  :heart: = Link to support the contributor directly


  ## [7 - License](#table-of-contents)

  -------


  Copyright 2018 OpenAPI-Generator Contributors
  (https://openapi-generator.tech)  

  Copyright 2018 SmartBear Software


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at
  [apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.


  ---
marshmallow-code/apispec: >
  *******

  apispec

  *******


  .. image:: https://badgen.net/pypi/v/apispec
      :target: https://pypi.org/project/apispec/
      :alt: PyPI version

  .. image:: https://badgen.net/travis/marshmallow-code/apispec/dev
      :target: https://travis-ci.org/marshmallow-code/apispec
      :alt: TravisCI build status

  .. image:: https://readthedocs.org/projects/apispec/badge/
     :target: https://apispec.readthedocs.io/
     :alt: Documentation

  .. image:: https://badgen.net/badge/marshmallow/2,3?list=1
      :target: https://marshmallow.readthedocs.io/en/latest/upgrading.html
      :alt: marshmallow 2/3 compatible

  .. image:: https://badgen.net/badge/OAS/2,3?list=1&color=cyan
      :target: https://github.com/OAI/OpenAPI-Specification
      :alt: OpenAPI Specification 2/3 compatible

  .. image:: https://badgen.net/badge/code%20style/black/000
      :target: https://github.com/ambv/black
      :alt: code style: black

  A pluggable API specification generator. Currently supports the `OpenAPI
  Specification <https://github.com/OAI/OpenAPI-Specification>`_ (f.k.a. the
  Swagger specification).


  Features

  ========


  - Supports the OpenAPI Specification (versions 2 and 3)

  - Framework-agnostic

  - Built-in support for `marshmallow <https://marshmallow.readthedocs.io/>`_

  - Utilities for parsing docstrings


  Example Application

  ===================


  .. code-block:: python

      from apispec import APISpec
      from apispec.ext.marshmallow import MarshmallowPlugin
      from apispec_webframeworks.flask import FlaskPlugin
      from flask import Flask, jsonify
      from marshmallow import Schema, fields


      # Create an APISpec
      spec = APISpec(
          title="Swagger Petstore",
          version="1.0.0",
          openapi_version="3.0.2",
          plugins=[FlaskPlugin(), MarshmallowPlugin()],
      )

      # Optional marshmallow support
      class CategorySchema(Schema):
          id = fields.Int()
          name = fields.Str(required=True)


      class PetSchema(Schema):
          category = fields.Nested(CategorySchema, many=True)
          name = fields.Str()


      # Optional Flask support
      app = Flask(__name__)


      @app.route("/random")
      def random_pet():
          """A cute furry animal endpoint.
          ---
          get:
            description: Get a random pet
            responses:
              200:
                content:
                  application/json:
                    schema: PetSchema
          """
          pet = get_random_pet()
          return jsonify(PetSchema().dump(pet).data)


      # Register entities and paths
      spec.components.schema("Category", schema=CategorySchema)
      spec.components.schema("Pet", schema=PetSchema)
      with app.test_request_context():
          spec.path(view=random_pet)


  Generated OpenAPI Spec

  ----------------------


  .. code-block:: python

      import json

      print(json.dumps(spec.to_dict(), indent=2))
      # {
      #   "paths": {
      #     "/random": {
      #       "get": {
      #         "description": "Get a random pet",
      #         "responses": {
      #           "200": {
      #             "content": {
      #               "application/json": {
      #                 "schema": {
      #                   "$ref": "#/components/schemas/Pet"
      #                 }
      #               }
      #             }
      #           }
      #         }
      #       }
      #     }
      #   },
      #   "tags": [],
      #   "info": {
      #     "title": "Swagger Petstore",
      #     "version": "1.0.0"
      #   },
      #   "openapi": "3.0.2",
      #   "components": {
      #     "parameters": {},
      #     "responses": {},
      #     "schemas": {
      #       "Category": {
      #         "type": "object",
      #         "properties": {
      #           "name": {
      #             "type": "string"
      #           },
      #           "id": {
      #             "type": "integer",
      #             "format": "int32"
      #           }
      #         },
      #         "required": [
      #           "name"
      #         ]
      #       },
      #       "Pet": {
      #         "type": "object",
      #         "properties": {
      #           "name": {
      #             "type": "string"
      #           },
      #           "category": {
      #             "type": "array",
      #             "items": {
      #               "$ref": "#/components/schemas/Category"
      #             }
      #           }
      #         }
      #       }
      #     }
      #   }
      # }

      print(spec.to_yaml())
      # components:
      #   parameters: {}
      #   responses: {}
      #   schemas:
      #     Category:
      #       properties:
      #         id: {format: int32, type: integer}
      #         name: {type: string}
      #       required: [name]
      #       type: object
      #     Pet:
      #       properties:
      #         category:
      #           items: {$ref: '#/components/schemas/Category'}
      #           type: array
      #         name: {type: string}
      #       type: object
      # info: {title: Swagger Petstore, version: 1.0.0}
      # openapi: 3.0.2
      # paths:
      #   /random:
      #     get:
      #       description: Get a random pet
      #       responses:
      #         200:
      #           content:
      #             application/json:
      #               schema: {$ref: '#/components/schemas/Pet'}
      # tags: []


  Documentation

  =============


  Documentation is available at https://apispec.readthedocs.io/ .


  Ecosystem

  =========


  A list of apispec-related libraries can be found at the GitHub wiki here:


  https://github.com/marshmallow-code/apispec/wiki/Ecosystem


  Support apispec

  ===============


  apispec is maintained by a group of

  `volunteers <https://apispec.readthedocs.io/en/latest/authors.html>`_.

  If you'd like to support the future of the project, please consider

  contributing to our Open Collective:


  .. image:: https://opencollective.com/marshmallow/donate/button.png
      :target: https://opencollective.com/marshmallow
      :width: 200
      :alt: Donate to our collective

  Professional Support

  ====================


  Professionally-supported apispec is available through the

  `Tidelift Subscription
  <https://tidelift.com/subscription/pkg/pypi-apispec?utm_source=pypi-apispec&utm_medium=referral&utm_campaign=readme>`_.


  Tidelift gives software development teams a single source for purchasing and
  maintaining their software,

  with professional-grade assurances from the experts who know it best,

  while seamlessly integrating with existing tools. [`Get professional
  support`_]


  .. _`Get professional support`:
  https://tidelift.com/subscription/pkg/pypi-apispec?utm_source=pypi-apispec&utm_medium=referral&utm_campaign=readme


  .. image::
  https://user-images.githubusercontent.com/2379650/45126032-50b69880-b13f-11e8-9c2c-abd16c433495.png
      :target: https://tidelift.com/subscription/pkg/pypi-apispec?utm_source=pypi-apispec&utm_medium=referral&utm_campaign=readme
      :alt: Get supported apispec with Tidelift

  Security Contact Information

  ============================


  To report a security vulnerability, please use the

  `Tidelift security contact <https://tidelift.com/security>`_.

  Tidelift will coordinate the fix and disclosure.


  License

  =======


  MIT licensed. See the bundled `LICENSE
  <https://github.com/marshmallow-code/apispec/blob/dev/LICENSE>`_ file for more
  details.
APIs-guru/awesome-openapi3: >+
  # awesome-openapi3
  [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

  A list of awesome projects related to OpenAPI 3.0.x.


  <div align="center">
    <img src="https://github.com/Mermade/awesome-openapi3/blob/master/openapi_awesome1.png?raw=true"/>
    <img src="https://raw.githubusercontent.com/APIs-guru/openapi-directory/master/branding/icon-96x96.png"/>
  </div>


  Why not make your project discoverable by using the topic
  [openapi3](https://github.com/search?utf8=%E2%9C%93&q=topic%3Aopenapi3&type=Repositories&ref=advsearch&l=&l=)
  on GitHub and using the hashtags **#openapi3** and **#OASv3** on social media?


  ## Tools


  * Please see [APIs.guru Awesome-OpenAPI3](https://apis.guru/awesome-openapi3/)


  ## Contributing


  The best way to get your project added to the list is to tag it with the
  github topic `openapi3`. 


  Pull requests should only be for visual / functional changes, or
  projects/products not hosted on GitHub.


  ## API Access


  * [categories.json](https://apis.guru/awesome-openapi3/api/categories.json)

  * [tools.json](https://apis.guru/awesome-openapi3/api/tools.json)


  The raw data contains OpenAPI 2.0 and Swagger 1.x-related projects.


  ## RSS Feed


  * [feed.xml](https://apis.guru/awesome-openapi3/rss/feed.xml)

Orange-OpenSource/angular-swagger-ui: "# angular-swagger-ui\n\n`angular-swagger-ui` is an angularJS implementation of OpenAPI UI\n\n[OpenAPI](https://www.openapis.org) (aka [Swagger](https://swagger.io)) helps you documenting your RESTful API.\n\nOpenAPI UI helps developers discovering your RESTful API by providing an online documentation with an integrated API explorer.\n\n### Warning \n> By default, only OpenAPI 2.0 is supported.\nTo handle OpenAPI 3.0.0 please add module `openapi3-converter` see [Enable OpenAPI 3.0.0](#enable-openapi-300).\nTo handle OpenAPI 1.2 please add module `swagger1-converter` see [Enable OpenAPI 1.2](#enable-openapi-12).\nTo handle authorization please add module `swagger-auth` see [Enable authorization](#enable-authorization)\nTo handle YAML please add module `swagger-yaml-parser` see [Enable YAML](#enable-yaml)\n\n## Demo\n\nA sample app using `angular-swagger-ui` is available here:\n\nhttp://orange-opensource.github.io/angular-swagger-ui\n\n## Quick Start\n\n### Install\n\n`npm install angular-swagger-ui`\n\n### Dependencies\n\n1. [angularJS](https://angularjs.org)\n2. [bootstrap CSS](http://getbootstrap.com)\n3. [angular-ui-bootstrap](https://angular-ui.github.io/bootstrap/) (required only if using [Authorization](#enable-authorization))\n\n## License\n\nAll code in this repository is covered by the [MIT license](http://opensource.org/licenses/MIT).\nSee LICENSE file for copyright details.\n\n## Getting Started\n\nInclude `angular-swagger-ui` as a dependency into your application\n\nAs some properties of OpenAPI specifications can be formatted as HTML:\n\n* You **SHOULD** include `ngSanitize` as a dependency into your application (avoids JS injection) if OpenAPI specifications are loaded from **untrusted** sources (see `dist/index.html` as an example)\n* You **CAN** add `trusted-sources=\"true\"` as directive parameter (avoids embedding `ngSanitize`) if OpenAPI specifications are loaded from **trusted** sources (see `src/index.html` as an example)\n* You **MUST** at least choose one of the two previous solutions\n\n```html\n<script type=\"text/javascript\">\n\t// If directive has parameter trusted-sources=\"true\"\n\tangular.module('yourApp', ['swaggerUi']);\n\t...\n\t// OR if you choosed to use \"ngSanitize\"\n\tangular.module('yourApp', ['ngSanitize', 'swaggerUi']);\n\t...\n</script>\n```\nCreate an HTML element in your angularJS application's template or in your HTML page\n```html\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" api-explorer=\"true\"></div>\n```\nAdd `swagger-ui.min.js` and `angular.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<!-- if you choosed to use \"ngSanitize\" -->\n \t<script src=\"yourPathToAngularSanitize/angular-sanitize.min.js\"></script>\n</body>\n```\nAdd `swagger-ui.min.css` and `bootstrap.min.css` to the head of the HTML page.\n```html\n<body>\n\t<head>\n\t\t...\n\t\t<link rel=\"stylesheet\" href=\"yourPathToBootstrapCSS/bootstrap.min.css\">\n\t\t<link rel=\"stylesheet\" href=\"yourPathToAngularSwaggerUI/dist/css/swagger-ui.min.css\">\n  \t</head>\n</body>\n```\n\n## Parameters\n\n#### API explorer\nDisplay or not API explorer, default is `false`\n```html\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" api-explorer=\"true/false\"></div>\n```\n\n#### OpenAPI specification loading indicator\n`yourScopeVariable` will be assigned to `true` or `false` depending on OpenAPI specification loading status\n```html\n<div ng-show=\"yourScopeVariable\">loading ...</div>\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" loading=\"yourScopeVariable\"></div>\n```\n\n#### Error handler\nDefine an error handler to catch errors, if none defined `console.error` is used\n```html\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" error-handler=\"yourErrorHandler\"></div>\n```\n```js\n$scope.yourErrorHandler = function(/*String or Object*/ message, /*Integer*/ code){\n\t\n}\n```\n\n#### Permalinks\nAllows having a URL direct access to a group of operations or to an operation and making it unfolded at startup\n```html\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" permalinks=\"true/false\"></div>\n```\n\n#### download\nDisplay or not a link to download swagger file. \n\n```html\n<!-- display link with url label -->\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" download></div>\n\n<!-- display link with specific key enter in swaggerTranslatorProvider -->\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" download=\"downloadLabel\"></div>\n```\n\n#### OpenAPI validator\nDisable OpenAPI validator or define a custom OpenAPI validator.\nIf parameter not defined, the validator will be 'http://online.swagger.io/validator'\n```html\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" validator-url=\"false or URL\"></div>\n```\n\n#### Parser type\nOpenAPI specification parser is chosen depending on the `Content-Type` of the specification response. If host serving your OpenAPI specification does not send `Content-Type: application/json` then you can force the parser to JSON:\n```html\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" parser=\"json\"></div>\n```\n\n#### Template URL\nDefine a custom template to be used by OpenAPIUI\n```html\n<div swagger-ui url=\"URLToYourOpenAPISpecification\" template-url=\"yourTemplatePath\"></div>\n```\n\n#### Input type and input\n##### Render an OpenAPI specification from JSON object\n```html\n<div swagger-ui input-type=\"json\" input=\"yourJsonObject\"></div>\n```\n\n##### Render an OpenAPI specification from YAML string\nMake sure to use module `swagger-yaml-parser`, see [Enable YAML](#enable-yaml)\n```html\n<div swagger-ui input-type=\"yaml\" input=\"yourYamlString\"></div>\n```\n\n##### Render an OpenAPI specification from URL (same behavior as using \"url\" parameter)\n```html\n<div swagger-ui input-type=\"url\" input=\"yourURL\"></div>\n```\n\n## i18n\n\n#### Built-in languages\n`angular-swagger-ui` is available in english and french, english is used by default\n\nTo use french, add `fr.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/i18/fr.min.js\"></script>\n</body>\n```\nSet language to french at startup\n```html\n<script type=\"text/javascript\">\n\tangular\n\t\t.module('yourApp', ['swaggerUi'])\n\t\t.config(function(swaggerTranslatorProvider) {\n\t\t\tswaggerTranslatorProvider.setLanguage('fr');\n\t\t});\n\t...\n</script>\n```\nSet language to french at runtime\n```html\n<script type=\"text/javascript\">\n\tangular\n\t\t.module('yourApp', ['swaggerUi'])\n\t\t.controller('yourController', function(swaggerTranslator) {\n\t\t\tswaggerTranslator.useLanguage('fr');\n\t\t});\n\t...\n</script>\n```\n\n#### Add languages\nYou can add your own languages, see `src/scripts/i18n/en.js` to find the keys you have to override\n```html\n<script type=\"text/javascript\">\n\tangular\n\t\t.module('yourApp', ['swaggerUi'])\n\t\t.config(function(swaggerTranslatorProvider) {\n\t\t\tswaggerTranslatorProvider.addTranslations('yourLangId', {\n\t\t\t\tkey: 'value'\n\t\t\t\t...\n\t\t\t});\n\t\t\tswaggerTranslatorProvider.setLanguage('yourLangId');\n\t\t});\n\t...\n</script>\n```\n\n#### Internationalize your app\nYou can also use `swaggerTranslator` to internationalize your app by using a service, a directive or a filter\n```html\n<body>\n \t...\n \t<div swagger-translate=\"yourKey\" swagger-translate-value=\"yourParam\"></div>\n \t<div ng-bind=\"yourDynamicKey|swaggerTranslate:yourDynamicParam\"></div>\n \t...\n\t<script type=\"text/javascript\">\n\t\tangular\n\t\t\t.module('yourApp', ['swaggerUi'])\n\t\t\t.config(function(swaggerTranslatorProvider) {\n\t\t\t\tswaggerTranslatorProvider.addTranslations('en', {\n\t\t\t\t\tyourKey: 'blablabla {{propertyNameOfYourParam}}'\n\t\t\t\t\t...\n\t\t\t\t});\n\t\t\t})\n\t\t\t.controller('yourController', function(swaggerTranslator) {\n\t\t\t\tvar localizedMessage = swaggerTranslator.translate('yourKey', yourParam);\n\t\t\t});\n\t\t...\n\t</script>\n</body>\n```\n\n## Customization\n\n#### Enable OpenAPI 3.0.0\nSee [OpenAPI 3.0.0 spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md).\nAdd `openapi3-converter.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/openapi3-converter.min.js\"></script>\n</body>\n```\n\n#### Enable authorization\n`oauth` is not implemented, only `basic` and `API key` authorizations are implemented.\nAdd `swagger-auth.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/swagger-auth.min.js\"></script><!-- without angular-ui-bootstrap modal embedded -->\n \tOR\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/swagger-auth-ui-boostrap-modal.min.js\"></script><!-- angular-ui-bootstrap modal embedded -->\n \t...\n\t<script type=\"text/javascript\">\n\t\tangular\n\t\t\t.module('yourApp', ['swaggerUi', 'swaggerUiAuthorization'])\n\t\t\t// what is below is required for oauth2 flows 'implicit' and 'accessCode' (ie. authorizationCode)\n\t\t\t// what is below can also be used to initialize apiKey or Basic authorizations\n      .config(function(swaggerUiAuthProvider) {\n          swaggerUiAuthProvider.configuration({\n              // required for oauth2 flow 'implicit' and 'accessCode' (ie. authorizationCode)\n             \tredirectUrl: 'yourPathToAngularSwaggerUI/oauth2-redirect.html' \n              // optional\n              yourSecurityName: {\n              \tapiKey: 'yourApiKeyValue' // optional, can be used to initialize api key value\n              },\n              // optional\n              yourSecurityName: {\n              \tlogin: 'yourLogin', // optional, can be used to initialize basic login\n              \tpassword: 'yourPassword' // optional, can be used to initialize basic password\n              },\n              // optional\n              yourSecurityName: {\n              \tclientId: 'yourClientId', // optional, can be used to initialize oauth2 credentials\n              \tclientSecret: 'yourClientSecret', // optional, can be used to initialize oauth2 credentials\n              \tlogin: 'yourLogin', // optional, can be used to initialize oauth2 credentials\n              \tpassword: 'yourPassword', // optional, can be used to initialize oauth2 credentials\n              \tscopeSeparator: 'scopeSeparator', // optional, can be used to configure oauth2 scopes separator, default value is space\n              \t// optional, can be used to configure oauth2 additional query params to tokenUrl and authorizationUrl\n              \tqueryParams: {\n              \t\t'yourQueryParamName': 'yourQueryParamValue'\n              \t\t...\n              \t}, \n              },\n          });\n      })\n\t\t\t...\n\t</script>\n</body>\n```\n\n#### Enable OpenAPI [aka Swagger] 1.2\nSee [OpenAPI 1.2 spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md).\nAdd `swagger1-converter.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/swagger1-converter.min.js\"></script>\n</body>\n```\n\n#### Enable OpenAPI external references\nSee [OpenAPI 2.0 spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#relative-schema-file-example).\nAdd `swagger-external-references.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/swagger-external-references.min.js\"></script>\n</body>\n```\n\n#### Enable XML formatter on API explorer responses\nAdd `swagger-xml-formatter.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/swagger-xml-formatter.min.js\"></script>\n</body>\n```\n\n#### Enable YAML\nAdd [js-yaml library](https://cdnjs.com/libraries/js-yaml).\nAdd `swagger-yaml-parser.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToJsYaml/js-yaml.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/swagger-yaml-parser.min.js\"></script>\n</body>\n```\n\n#### Enable markdown\nAdd [marked library](https://cdnjs.com/libraries/marked).\nAdd `swagger-markdown.min.js` at the end of the body\n```html\n<body>\n \t...\n \t<script src=\"yourPathToAngularJS/angular.min.js\"></script>\n \t<script src=\"yourPathToMarked/marked.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/swagger-ui.min.js\"></script>\n \t<script src=\"yourPathToAngularSwaggerUI/dist/scripts/modules/swagger-markdown.min.js\"></script>\n</body>\n```\n\n#### Writing your own modules\nModifying `angular-swagger-ui` can be achieved by writing your own modules. As an example your can have a look at the ones in `src/scripts/modules`.\nA module is an object (can be a service) having a function `execute` which must return a promise.\n\nYou can make your module modifying behaviours at different phases:\n\n* `BEFORE_LOAD`: allows modifying OpenAPI specification request before it is sent\n* `BEFORE_PARSE`: allows modifying OpenAPI specification after it has been loaded\n* `PARSE`: allows adding an OpenAPI parser for content types other than JSON\n* `BEFORE_DISPLAY`: allows modifying internal parsed OpenAPI specification before it is displayed\n* `BEFORE_EXPLORER_LOAD`: allows modifying API explorer request before it is sent\n* `AFTER_EXPLORER_LOAD`: allows modifying API explorer response before it is displayed\n\n```js\nangular\n\t.module('myApp', ['swaggerUi'])\n\t.service('myModule', function($q) {\n\n\t\tthis.execute = function(data) {\n\t\t\tvar deferred = $q.defer();\n\t\t\t// if nothing done: call deferred.resolve(false);\n\t\t\t// if success: call deferred.resolve(true);\n\t\t\t// if error: call deferred.reject({message: 'error message', code: 'error_code'});\n\t\t\treturn deferred.promise;\n\t\t}\n\n\t})\n\t.run(function(swaggerModules, myModule){\n\t\t// default priority is 1\n\t\t// higher is the priority, sooner the module is executed at the specified phase\n\t\tswaggerModules.add(swaggerModules.BEFORE_LOAD, myModule, priority);\n\t})\n\t...\n\n```\n"
Mermade/openapi-codegen: >+
  # OpenAPI-CodeGen


  [![Build
  status](https://travis-ci.org/Mermade/openapi-codegen.svg?branch=master)](https://travis-ci.org/Mermade/openapi-codegen)

  [![Greenkeeper
  badge](https://badges.greenkeeper.io/Mermade/openapi-codegen.svg)](https://greenkeeper.io/)


  Experimental port of
  [swagger-codegen](https://github.com/swagger-api/swagger-codegen) templates to
  Node.js. This project was initially a 24-hour hackathon. The model adaptor
  code is entirely original and has been reverse-engineered from the existing
  documentation and template usage.


  **Work in progress**


  Supports OpenAPI 3.0.x natively, and Swagger/OpenAPI 1.2 and 2.0 by internal
  conversion


  ## Usage


  ### Installing


  `npm i -g openapi-codegen`


  or


  * clone the repository, and

  * `npm i`


  or


  `npx -p openapi-codegen cg ...`


  ### CLI


  ```

  cg [options] {[path]configName} {openapi-definition}


  Options:
    --help           Show help                                           [boolean]
    --version        Show version number                                 [boolean]
    -d, --debug      Turn on debugging information in the model          [boolean]
    -f, --flat       Do not include config-name in output directory structure
                                                                         [boolean]
    -l, --lint       Lint input definition                               [boolean]
    -o, --output     Specify output directory         [string] [default: "./out/"]
    -s, --stools     Use swagger-tools to validate OpenAPI 2.0 definitions
                                                                         [boolean]
    -t, --templates  Specify templates directory                          [string]
    -v, --verbose    Increase verbosity                                  [boolean]
    -z, --zip        Create a .zip file instead of individual files      [boolean]
  ```


  e.g.


  ```

  node cg --verbose nodejs defs/generator.yaml

  ```


  In this case, the generated code will be written to the `.out/nodejs`
  directory.


  You can also load the OpenAPI definition from a URL.


  If you are using Node 6.x or lower, please specify the `--harmony` flag.


  ### API


  ```javascript

  const renderer = require('openapi-codegen');

  // load a config and a definition

  renderer.main(definition,config,configName);

  ```


  ## Templates


  Templates are taken directly from `swagger-codegen`. This project is also
  licensed under [Apache-2.0](LICENSE) for this reason. Generated code is
  explicitly covered by the [Unlicense](templates/_common/UNLICENSE). Code to
  downconvert OpenAPI 3.0 definitions is taken from
  [Angular-Swagger-UI](https://github.com/Orange-OpenSource/angular-swagger-ui)
  and is MIT licensed.


  ### Contributors


  See [here](https://github.com/swagger-api/swagger-codegen#template-creator)
  for a partial list of template contributors.


  ### Status of the template configurations


  The templates with a status have a working (if not necessarily tested)
  configuration in the **configs** directory.


  <details>

  <summary>Click here to expand...</summary>


  |Template|Type|Status|README|Authors (TODO)|Config Maintainer|

  |---|---|---|---|---|---|

  |**\_common**|meta| *contains Apache-2.0 and Unlicense licenses*||

  |**Ada**|client|**Untested**

  |akka-scala||

  |android||

  |**apache2**|configuration|**needs work**||

  |apex||

  |aspnetcore||

  |**bash**|client|**Syntax ok, needs testing**||@bkryza|@MikeRalphson

  |**clojure**|client|**Untested**|

  |**codegen**|meta|**Demo only**|||@MikeRalphson

  |**confluenceWikiDocs**|documentation|**Tested** with Docker
  [server](https://hub.docker.com/r/atlassian/confluence-server/)||

  |cpprest||

  |csharp||

  |**csharp-dotnet2**|client|**Untested**||

  |dart||

  |**debug**|meta|*used for dumping the model state*||@Mermade|@MikeRalphson

  |Eiffel||

  |elixir||

  |**erlang-client**|client|**Untested**||

  |erlang-server|server|

  |finch||

  |flash||

  |**flaskConnexion**|server|**Needs testing**||

  |**go**|client|**Builds, needs testing**||

  |**go-server**|server|**Builds and runs**||

  |**Groovy**|?|**untested**||

  |haskell-http-client|client||||

  |**haskell-servant**|server|**Untested**||

  |**htmlDocs**|documentation|*Appears to work*||

  |**htmlDocs2**|documentation|*Appears to work, no console errors logged*||

  |Java||

  |JavaInflector||

  |JavaJaxRS||

  |JavaPlayFramework||

  |**Javascript**|client|**Untested**||

  |**Javascript-Closure-Angular**|client|**Untested**

  |JavaSpring||

  |JavaVertXServer||

  |**JMeter**|meta|**Untested**||

  |kotlin-client||

  |**lua**|client|**Compiles OK**|

  |lumen||

  |MSF4J||

  |nancyfx||

  |**nodejs**|server|**tested** :white_check_mark:||@jfiala|@MikeRalphson|

  |objc||

  |**openapi**|meta|*outputs the input definition (in OpenAPI 3.0.x form)*
  :white_check_mark:||@Mermade|@MikeRalphson

  |perl||

  |php||

  |**php-silex**|?|**untested**||

  |php-symfony||

  |pistache-server||

  |powershell||

  |**python**|client|**needs testing**|||@mpnordland

  |qt5cpp||

  |r||

  |rails5||

  |**restbed**|server|**Untested**||

  |ruby||

  |rust||

  |rust-server||

  |scala||

  |scalatra||

  |scalaz|client|**Untested**||

  |**sinatra**|server|**Syntax checks OK**||

  |**slim**|server|**Untested**||

  |**swagger**|meta|*outputs the input definition (in original form if OpenAPI
  2.0)* :white_check_mark:||

  |**swagger-static**|documentation|**tested** *template modified to include
  partials*||

  |swift||

  |swift3||

  |swift4||

  |tizen||

  |typescript-angular||

  |typescript-angularjs||

  |**typescript-axios**|client|**tested**||jaredpalmer|

  |typescript-aurelia||

  |**typescript-fetch**|client|**compiles with tsc ok**||

  |typescript-jquery||

  |**typescript-node**|client|**compiles with tsc ok**||

  |undertow||

  |**validator**|meta|*uses swagger2openapi's OpenAPI 3.0 validator internally*
  :white_check_mark:||

  |ze-ph|


  ### New Templates


  These templates are examples of how features of OpenAPI Codegen may be used,
  and best-practices in naming model properties.


  |Template|Type|Status|README|Authors|Config Maintainer|

  |---|---|---|---|---|---|

  |testing.dredd|testing|**In
  progress**|[README](templates/testing.dredd/README.md.mustache)|@Mermade|@MikeRalphson|

  </details>


  ## Documentation


  * [See here](docs/README.md) - contributions welcome


  ## See also


  These projects use their own template model, not that of `swagger-codegen`


  * https://github.com/fmvilas/swagger-node-codegen

  * https://github.com/wcandillon/swagger-js-codegen

  * https://github.com/Cian-Chambliss/swagger-codegen-prepare

thomaxxl/safrs: >
  [![Latest
  Version](https://img.shields.io/pypi/v/safrs.svg)](https://pypi.python.org/pypi/safrs/)

  [![Supported Python
  versions](https://img.shields.io/pypi/pyversions/safrs.svg)](https://pypi.python.org/pypi/safrs/)

  [![License](https://img.shields.io/pypi/l/safrs.svg)](https://github.com/thomaxxl/safrs/blob/master/LICENSE)

  [![Downloads](https://pepy.tech/badge/safrs)](https://pepy.tech/project/safrs)


  # SAFRS: Python OpenAPI & JSON:API Framework


  ![demo](docs/images/safrs.gif)


  <a class="mk-toclify" id="table-of-contents"></a>


  - [Overview](#overview)

  - [Installation](#installation)

  - [JSON:API Interface](#http-methods)

  - [Resource Objects](#resource-objects)

  - [Relationships](#relationships)

  - [Methods](#methods)
      - [Custom Methods](#custom-methods)
      - [Class Methods](#class-methods)
  - [Initialization](#initialization)

  - [HTTP Status Codes](#http-status-codes)

  - [Security](security)

  - [Endpoint Naming](#endpoint-naming)

  - [Configuration](#configuration)

  - [Exposing Existing Databases](#expose-existing)

  - [More Examples and Use Cases](#more-examples-and-use-cases)

  - [Advanced Usage](#advanced-usage)
      - [Custom Serialization](#custom-serialization)
      - [Custom Decorators](#custom-decorators)
      - [API Methods](#api-methods)
      - [Custom Swagger](#custom-swagger)
  - [Limitations & TODOs](#limitations--todos)

  - [References](#references)

  - [Thanks](#thanks)



  <a class="mk-toclify" id="overview"></a>

  ## Overview


  SAFRS is an acronym for **S**ql**A**lchemy **F**lask-**R**estful **S**wagger.
  The purpose of this framework is to help python developers create a
  self-documenting JSON API for sqlalchemy database objects and relationships.
  These objects can be serialized to JSON and can be created, retrieved, updated
  and deleted through the JSON API. 

  Optionally, custom resource object methods can be exposed and invoked using
  JSON.

  Class and method descriptions and examples can be provided in yaml syntax in
  the code comments. The description is parsed and shown in the swagger web
  interface. 


  The result is an easy-to-use [swagger/OpenAPI](https://swagger.io/) and
  [JSON:API](https://jsonapi.org) compliant API implementation.


  A __[LIVE DEMO](http://thomaxxl.pythonanywhere.com) is available__,
  implementing the [relationship example](examples/demo_relationship.py).


  <a class="mk-toclify" id="installation"></a>

  ## Installation


  SAFRS can be installed as a [pip package](https://pypi.python.org/pypi/safrs/)
  or by downloading the latest version from github, for example:


  ```bash

  git clone https://github.com/thomaxxl/safrs

  cd safrs

  pip3 install -r requirements.txt --user

  python3 setup.py install --user

  ```


  The examples can then be started with 

  ```

  python3 examples/demo_relationship.py "your-interface-ip"

  ```


  <a class="mk-toclify" id="http-methods"></a>

  ## JSON:API Interface


  Exposed resource objects can be queried using the [JSON:API
  format](http://jsonapi.org/format/). The API supports following HTTP
  operations:


  - GET : Retrieve an object or a list of objects

  - PATCH : Update an object.

  - DELETE: Delete an object.

  - POST : Create an object. 


  Please check the [JSON:API spec](http://jsonapi.org/format/) for more
  implementation details. 

  You can also check the interface in the [live
  demo](http://thomaxxl.pythonanywhere.com/api).


  <a class="mk-toclify" id="resource-objects"></a>

  ## Resource Objects


  Database objects are implemented as subclasses of the SAFRSBase and SQLAlchemy
  model classes. The SQLAlchemy columns are serialized to JSON when the
  corresponding REST API is invoked. 


  Following example from [demo.py](examples/demo.py) illustrates how the API is
  built and documented:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = Column(String, primary_key=True)
      name = Column(String, default='')
      email = Column(String, default='')

  ```


  The User class is implemented as a subclass of 

  - db.Model: SQLAlchemy base

  - SAFRSBase: Implements JSON serialization for the object and generates
  (swagger) API documentation


  This User object is then exposed through the web interface using the Api
  object


  ```python 

  api.expose_object(User)

  ``` 


  The User object REST methods are available on /User, the swagger schema is
  available on /api/swagger.json and the UI is available on /api/:

  ![User Swagger](docs/images/USER_swagger.png)



  <a class="mk-toclify" id="relationships"></a>

  ## Relationships


  Database object such as the User class from the demo.py example can be
  extended to include relationships with other objects. The demo_relationship.py
  contains following extension of the User class where a relationship with the
  Book class is implemented:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      email = db.Column(db.String, default='')
      books = db.relationship('Book', back_populates="user")
  ...

  ``` 


  A many-to-one database association is declared by the back_populates
  relationship argument.

  The Book class is simply another subclass of SAFRSBase and db.Model, similar
  to the previous User class:


  ```python

  class Book(SAFRSBase, db.Model):
      '''
          description: Book description
      '''
      __tablename__ = 'Books'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      user_id = db.Column(db.String, db.ForeignKey('Users.id'))
      user = db.relationship('User', back_populates='books')
  ```


  The User.book relationship can be queried in the API through the following
  endpoints:

  ![Relations Swagger](docs/images/Relations_swagger.png)


  - POST adds an item to the relationship

  - DELETE removes an item from the relationship

  - GET retrieves a list of item ids


  The relationship REST API works similarly for one-to-many relationships. 


  <a class="mk-toclify" id="methods"></a>

  ## Methods


  <a class="mk-toclify" id="custom-methods"></a>

  ### Custom Methods


  Safrs allows the user to implement custom methods on the exposed objects. This
  methods can be invoked through the json API by sending an HTTP POST request to
  the method endpoint

  The following example implements a "send_mail" method fro example:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = Column(String, primary_key=True)
      name = Column(String, default='')
      email = Column(String, default='')

      # Following method is exposed through the REST API 
      # This means it can be invoked with a HTTP POST
      @jsonapi_rpc(http_methods=['POST','GET'])
      def send_mail(self, email):
          '''
              description : Send an email
              args:
                  email:
                      type : string 
                      example : test email
          '''
          content = 'Mail to {} : {}\n'.format(self.name, email)
          return { 'result' : 'sent {}'.format(content)}

  ```


  This method shows up in the swagger interface:


  ![Method Swagger](docs/images/method_swagger.PNG)


  The ```send_mail``` method is documented with the ```jsonapi_rpc```
  decorator. 

  This decorator generates a schema based on the function documentation. This
  documentation contains yaml specification of the API which is used by the
  swagger UI. 


  The yaml specification has to be in the first part of the function and class
  comments. These parts are delimited by four dashes ("----") . The rest of the
  comment may contain additional documentation.


  <a class="mk-toclify" id="class-methods"></a>

  ### Class Methods


  Two class-level methods have been defined to facilitate object retrieval:


  * **lookup** : retrieve a list of objects that match the argument list. For
  example, following HTTP POST request to a container will retrieve a list of
  itemswhere the name is "thomas"

  ```json

  {
    "method": "lookup",
    "args": {
      "name": "thomas"
    }
  }

  ```


  * **get_list** : retrieve a list of the items with the specified ID's


  <a class="mk-toclify" id="initialization"></a>

  ## Application Initialization

  The API can be initialized like this:

  ```python

  api = SAFRSAPI(app, host=HOST, port=PORT, prefix=API_PREFIX)

  ```

  Then you can expose objects with

  ```python

  api.expose_object(User)    

  ```


  An example that uses the flask app factory pattern is implement in
  [examples/mini_app.py](examples/mini_app.py)


  <a class="mk-toclify" id="http-status-codes"></a>

  ## HTTP Status Codes


  HTTP status codes are used to signal success or failure of a REST operation: 

  - 200 : OK 

  - 201 : The request has been fulfilled and resulted in a new resource being
  created.

  - 204 : No Content, DELETE operation was successful

  - 400 : The services raised an exception, for example in case of invalid input

  - 500 : Internal Server Error


  In case of errors( status codes 400+ ), the log file contains a stacktrace. 

  Two custom exceptions are defined in errors.py: ValidationError and
  GenericError. 

  In case of errors, the webservice will return a default HTTP status code 500
  and a customizable error message, for example


  ```

  {
    "error": "Failed to execute query Entity '<class 'C2_server.Image'>' has no property 'namex'"
  }

  ```


  <a class="mk-toclify" id="security"></a>

  ## Security


  ### Authorization


  Authorization can be implemented by applying decorators to the endpoints
  generated by the `expose_objects` method.

  Examples for flask_login and flask_jwt_extended can be found in the
  [examples/authentication](examples/authentication) directory.


  ### Logging


  The default logging is configured to not show verbose error messages, so not
  to reveal information of the backend to the user, which may also mitigate
  script injection attacks in case the log messages are reflected in the user
  output.

  In case you do want verbose logging, you can set the log level to DEBUG:


  ```python

  app.config.update(DEBUG=True)

  ```


  <a class="mk-toclify" id="endpoint-naming"></a>

  ## Endpoint Naming

  As can be seen in the swagger UI:

  - the endpoint collection path names are the SQLAlchemy \_\_tablename\_\_
  properties (e.g. /Users )

  - the parameter names are derived from the SAFRSBase class names (e.g.
  {UserId} )

  - the the relationship names are the SAFRSBase class relationship names (e.g
  /books )

  The URL path format is [configurable](#configuration)


  <a class="mk-toclify" id="configuration"></a>

  ## Configuration


  Some configuration parameters can be set in [config.py](safrs/config.py):

  - USE_API_METHODS: set this to false in case you want to disable the
  `jsonapi_rpc` functionality

  - INSTANCE_URL_FMT: This parameter declares the instance url path format

  - RELATIONSHIP_URL_FMT: This parameter declares the relationship endpoint path
  format


  <a class="mk-toclify" id="expose-existing"></a>

  ## Exposing Existing Databases

  Safrs allows you to Expose existing databases as jsona:api services with the
  [expose_existing.py](expose_existing/expose_existing.py) script, for example:


  ```bash

  python3 expose_existing.py mysql+pymysql://root:password@localhost/sakila
  --host localhost

  ```


  This script uses sqlacodegen to generate a source file containing the
  SQLAlchemy and `SAFRSBase` database models and starts the API webservice.


  More details [here](docs/ExposeDB.md)


  <a class="mk-toclify" id="more-examples-and-use-cases"></a>

  ## More Examples and Use Cases

  The [examples](examples) folder contains more example scripts:

  - Using a sha hash as primary key (id)

  - CORS usage

  - Flask-Admin integration example, eg.:

  ![demo](docs/images/flask-admin.png)


  <a class="mk-toclify" id="advanced-usage"></a>

  ## Advanced Usage


  <a class="mk-toclify" id="custom-serialization"></a>

  ### Custom Serialization

  Serialization and deserialization are implemented by the SAFRSBase `to_dict`
  and `__init__` : you can extend these methods as usual.

  For example, if you would like to add some attributes to the json payload of
  the User object, you can override the to_dict method:


  ```python

  class User(SAFRSBase, db.Model):
      '''
          description: User description
      '''
      __tablename__ = 'Users'
      id = db.Column(db.String, primary_key=True)
      name = db.Column(db.String, default='')
      email = db.Column(db.String, default='')
      books = db.relationship('Book', back_populates="user")

      def to_dict(self):
          result = SAFRSBase.to_dict(self)
          result['custom_field'] = 'custom'
          return result
  ``` 


  This will add the `custom_field` attribute to the result attributes:

  ```json

  "attributes": {
      "custom_field": "custom",
      "email": "reader_email0",
      "name": "Reader 0"
  }

  ```


  <a class="mk-toclify" id="custom-decorators"></a>

  ### Custom Decorators

  The `custom_decorators` class attribute list can be used to add custom
  decorators to the instance HTTP endpoint. An example of this functionality is
  implemented

  in the [authentication examples](examples/authentication).


  <a class="mk-toclify" id="api-methods"></a>

  ### API Methods

  Some additional API RPC methods are implemented in
  [api_methods.py](safrs/api_methods.py), e.g. mysql regex search. 


  <a class="mk-toclify" id="custom-swagger"></a>

  ### Custom swagger

  The swagger schema can be merged with a modified schema dictionary by
  supplying the to-be-merged dictionary as the `custom_swagger` argument to
  `SAFRSAPI`, e.g.

  ```python

  custom_swagger = {"info": {"title" : "New Title" }} # Customized swagger title
  will be merged

  api = SAFRSAPI(app, host=swagger_host, port=PORT, prefix=OAS_PREFIX,
  api_spec_url=OAS_PREFIX+'/swagger',
                 custom_swagger=custom_swagger, schemes=['http', 'https'], description=description)
  ```


  <a class="mk-toclify" id="limitations--todos"></a>

  ## Limitations & TODOs


  This code was developed for a specific use-case and may not be flexible enough
  for everyone's needs. A lot of the functionality is available but not
  documented for the sake of brevity.

  Performance is reasonable for regular databases, but once you start exposing
  really big tables you may run into problems, for example: the `count()` for
  mysql innodb is slow on large(1M rows) tables, a workaround can be implemented
  by querying the `sys` tables or using werkzeug caching. 

  Feel free to open an issue or drop
  [me](mailto:thomas.pollet+no+spam+@gmail.com) an email if you run into
  problems or something isn't clear!


  <a class="mk-toclify" id="references"></a>

  ## References


  - [JSON:API specification](http://jsonapi.org/format/)

  - [OpenApi (Swagger)](https://www.openapis.org/)

  - [Flask](http://flask.pocoo.org/)

  - [SQLAlchemy](https://www.sqlalchemy.org/)


  <a class="mk-toclify" id="thanks"></a>

  ## Thanks


  I developed this code when I worked at [Excellium
  Services](https://www.excellium-services.com/). They allowed me to open source
  it when I stopped working there.
cebe/php-openapi: >
  # php-openapi


  Read and write [OpenAPI](https://www.openapis.org/) 3.0.x YAML and JSON files
  and make the content accessible in PHP objects.


  It also provides a CLI tool for validating and converting OpenAPI 3.0.x YAML
  and JSON files.


  [![Latest Stable
  Version](https://poser.pugx.org/cebe/php-openapi/v/stable)](https://packagist.org/packages/cebe/php-openapi)

  [![Build
  Status](https://travis-ci.org/cebe/php-openapi.svg?branch=master)](https://travis-ci.org/cebe/php-openapi)

  [![License](https://poser.pugx.org/cebe/php-openapi/license)](https://packagist.org/packages/cebe/php-openapi)



  ## Install

      composer require cebe/php-openapi

  ## Requirements


  - PHP 7.1 or higher


  ## Used by


  This library provides a low level API for reading and writing OpenAPI files.
  It is used by higher level tools to

  do awesome work:


  - https://github.com/cebe/yii2-openapi Code Generator for REST API from
  OpenAPI spec, includes fake data generator.

  - https://github.com/cebe/yii2-app-api Yii framework application template for
  developing API-first applications

  - ... ([add
  yours](https://github.com/cebe/php-openapi/edit/master/README.md#L24))


  ## Usage


  ### CLI tool

      $ vendor/bin/php-openapi help
      PHP OpenAPI 3 tool
      ------------------
      by Carsten Brandt <mail@cebe.cc>

      Usage:
        php-openapi <command> [<options>] [input.yml|input.json] [output.yml|output.json]

        The following commands are available:

          validate   Validate the API description in the specified input file against the OpenAPI v3.0 schema.
                     Note: the validation is performed in two steps. The results is composed of
                      (1) structural errors found while reading the API description file, and
                      (2) violations of the OpenAPI v3.0 schema.

                     If no input file is specified input will be read from STDIN.
                     The tool will try to auto-detect the content type of the input, but may fail
                     to do so, you may specify --read-yaml or --read-json to force the file type.

                     Exits with code 2 on validation errors, 1 on other errors and 0 on success.

          convert    Convert a JSON or YAML input file to JSON or YAML output file.
                     References are being resolved so the output will be a single specification file.

                     If no input file is specified input will be read from STDIN.
                     If no output file is specified output will be written to STDOUT.
                     The tool will try to auto-detect the content type of the input and output file, but may fail
                     to do so, you may specify --read-yaml or --read-json to force the input file type.
                     and --write-yaml or --write-json to force the output file type.

          help       Shows this usage information.

        Options:

          --read-json   force reading input as JSON. Auto-detect if not specified.
          --read-yaml   force reading input as YAML. Auto-detect if not specified.
          --write-json  force writing output as JSON. Auto-detect if not specified.
          --write-yaml  force writing output as YAML. Auto-detect if not specified.


  ### Reading Specification information


  Read OpenAPI spec from JSON file:


  ```php

  use cebe\openapi\Reader;


  // realpath is needed for resolving references with relative Paths or URLs

  $openapi = Reader::readFromJsonFile(realpath('openapi.json'));

  ```


  Read OpenAPI spec from YAML:


  ```php

  use cebe\openapi\Reader;


  // realpath is needed for resolving references with relative Paths or URLs

  $openapi = Reader::readFromYamlFile(realpath('openapi.json'));

  // you may also specify the URL to your description file

  $openapi =
  Reader::readFromYamlFile('https://raw.githubusercontent.com/OAI/OpenAPI-Specification/3.0.2/examples/v3.0/petstore-expanded.yaml');

  ```


  Access specification data:


  ```php

  echo $openapi->openapi; // openAPI version, e.g. 3.0.0

  echo $openapi->info->title; // API title

  foreach($openapi->paths as $path => $definition) {
      // iterate path definitions
  }

  ```


  Object properties are exactly like in the [OpenAPI
  specification](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md#openapi-specification).

  You may also access additional properties added by specification extensions.


  ### Writing Specification files


  ```php

  // create base description

  $openapi = new \cebe\openapi\spec\OpenApi([
      'openapi' => '3.0.2',
      'info' => [
          'title' => 'Test API',
          'version' => '1.0.0',
      ],
      'paths' => [],
  ]);

  // manipulate description as needed

  $openapi->paths['/test'] = new \cebe\openapi\spec\PathItem([
      'description' => 'something'
  ]);

  // ...


  $json = \cebe\openapi\Writer::writeToJson($openapi);

  ```


  results in the following JSON data:


  ```json

  {
      "openapi": "3.0.0",
      "info": {
          "title": "Test API",
          "version": "1.0.0"
      },
      "paths": {
          "/test": {
              "description": "something"
          }
      }
  }

  ```


  ### Reading Specification Files and Resolving References


  In the above we have passed the raw JSON or YAML data to the Reader. In order
  to be able to resolve

  references to external files that may exist in the specification files, we
  must provide the full context.


  ```php

  use cebe\openapi\Reader;

  // an absolute URL or file path is needed to allow resolving internal
  references

  $openapi =
  Reader::readFromJsonFile('https://www.example.com/api/openapi.json');

  $openapi =
  Reader::readFromYamlFile('https://www.example.com/api/openapi.yaml');

  ```


  If data has been loaded in a different way you can manually resolve references
  like this by giving a context:


  ```php

  $openapi->resolveReferences(
      new \cebe\openapi\ReferenceContext($openapi, 'https://www.example.com/api/openapi.yaml')
  );

  ```


  > **Note:** Resolving references currently does not deal with references in
  referenced files, you have to call it multiple times to resolve these.


  ### Validation


  The library provides simple validation operations, that check basic OpenAPI
  spec requirements.

  This is the same as "structural errors found while reading the API description
  file" from the CLI tool.

  This validation does not include checking against the OpenAPI v3.0 JSON
  schema.


  ```

  // return `true` in case no errors have been found, `false` in case of errors.

  $specValid = $openapi->validate();

  // after validation getErrors() can be used to retrieve the list of errors
  found.

  $errors = $openapi->getErrors();

  ```


  > **Note:** Validation is done on a very basic level and is not complete. So a
  failing validation will show some errors,

  > but the list of errors given may not be complete. Also a passing validation
  does not necessarily indicate a completely

  > valid spec.



  ## Completeness


  This library is currently work in progress, the following list tracks
  completeness:


  - [x] read OpenAPI 3.0 JSON

  - [x] read OpenAPI 3.0 YAML

  - [ ] OpenAPI 3.0 Schema
    - [x] OpenAPI Object
    - [x] Info Object
    - [x] Contact Object
    - [x] License Object
    - [x] Server Object
    - [x] Server Variable Object
    - [x] Components Object
    - [x] Paths Object
    - [x] Path Item Object
    - [x] Operation Object
    - [x] External Documentation Object
    - [x] Parameter Object
    - [x] Request Body Object
    - [x] Media Type Object
    - [x] Encoding Object
    - [x] Responses Object
    - [x] Response Object
    - [x] Callback Object
    - [x] Example Object
    - [x] Link Object
      - [ ] [Runtime Expressions](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md#runtime-expressions)
    - [x] Header Object
    - [x] Tag Object
    - [x] Reference Object
    - [x] Schema Object
      - [x] load/read
      - [ ] validation
    - [x] Discriminator Object
    - [x] XML Object
    - [x] Security Scheme Object
    - [x] OAuth Flows Object
    - [x] OAuth Flow Object
    - [x] Security Requirement Object

  # Support


  Professional support, consulting as well as software development services are
  available:


  https://www.cebe.cc/en/contact


  Development of this library is sponsored by [cebe.:cloud: "Your Professional
  Deployment Platform"](https://cebe.cloud).
AresS31/swurg: >
  <p align="center">
    <img alt="logo" src="https://raw.githubusercontent.com/AresS31/swurg/dev/images/logo3.png" height="200">
    <p align="center">
        <a href="https://portswigger.net/bappstore/6bf7574b632847faaaa4eb5e42f1757c"><img alt="bapp store" src="https://img.shields.io/badge/BApp-Published-orange.svg"></a>
        <a href="https://www.java.com"><img alt="lang" src="https://img.shields.io/badge/Lang-Java-blue.svg"></a>
        <a href="https://opensource.org/licenses/Apache-2.0"><img alt="license" src="https://img.shields.io/badge/License-Apache%202.0-red.svg"></a>
        <img alt="version" src="https://img.shields.io/badge/Version-2.3-green.svg">
        <img alt="bitcoin" src="https://img.shields.io/badge/Bitcoin-15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p-yellow.svg">
        <img alt="bitcoin cash" src="https://img.shields.io/badge/Bitcoin%20Cash-qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3-yellow.svg">
        <img alt="ether" src="https://img.shields.io/badge/Ether-0x70bC178EC44500C17B554E62BC31EA2B6251f64B-yellow.svg">
    </p>
  </p>


  ## Swurg is a Burp Suite extension designed for OpenAPI testing.

  > The OpenAPI Specification (OAS) defines a standard, programming
  language-agnostic interface description for REST APIs, which allows both
  humans and computers to discover and understand the capabilities of a service
  without requiring access to source code, additional documentation, or
  inspection of network traffic. When properly defined via OpenAPI, a consumer
  can understand and interact with the remote service with a minimal amount of
  implementation logic. Similar to what interface descriptions have done for
  lower-level programming, the OpenAPI Specification removes guesswork in
  calling a service. 

  > 

  > Use cases for machine-readable API definition documents include, but are not
  limited to: interactive documentation; code generation for documentation,
  clients, and servers; and automation of test cases. OpenAPI documents describe
  an API's services and are represented in either YAML or JSON formats. These
  documents may either be produced and served statically or be generated
  dynamically from an application.

  > 

  > \- [OpenAPI Initiative](https://github.com/OAI/OpenAPI-Specification)


  Performing security assessment of OpenAPI-based APIs can be a tedious task due
  to Burp Suite (industry standard) lacking native OpenAPI parsing capabilities.
  A solution to this situation, is to use third-party tools (e.g. `SOAP-UI`) or
  to implement custom scripts (often on a per engagement basis) to handle the
  parsing of OpenAPI documents and integrate/chain the results to Burp Suite to
  use its first class scanning capabilities.


  Swurg is an OpenAPI parser that aims to streamline this entire process by
  allowing security professionals to use Burp Suite as a standalone tool for
  security assessment of OpenAPI-based APIs.


  ## Supported Features

  * Parse OpenAPI documents, formerly known as the `Swagger specification`,
  fully compliant with OpenAPI 2.0/3.0 Specifications (OAS). Supports both JSON
  and YAML formats.

  * OpenAPI documents can be parsed either from a supplied file or URL. The
  extension can fetch OpenAPI documents directly from a URL using the `Send to
  Swagger Parser` feature under the `Target -> Site map` context menu.

  * Requests can be sent to the `Comparer, Intruder, Repeater, Scanner and Site
  map` Burp tools.


  ## Installation

  ### Compilation 

  #### Windows & Linux

  1. Install gradle (<https://gradle.org/>)

  2. Download the repository.

  ```console

  $ git clone https://github.com/AresS31/swurg

  $ cd .\swurg\

  ```

  3. Create the swurg jarfile:

  ```console

  $ gradle fatJar

  ```


  ### Burp Suite settings

  In Burp Suite, under the `Extender/Options` tab, click on the `Add` button and
  load the `swurg-all` jarfile. 


  ## Possible Improvements

  - [ ] Beautify the graphical user interface.

  - [ ] Enable cells editing to change API calls directly from the GUI.

  - [x] Further optimise the source code.

  - [ ] Implement support for authenticated testing (via user-supplied
  API-keys).

  - [ ] Improve the Param column by adding the type of parameters (e.g. inquery,
  inbody, etc.).

  - [ ] Increase the extension verbosity (via the bottom panel).


  ## Dependencies

  ### Third-party libraries

  #### Swagger Parser:

  The [Swagger
  Parser](https://mvnrepository.com/artifact/io.swagger.parser.v3/swagger-parser)
  library is required and automatically imported in this project.


  ## Project information

  In July 2016, after posting a request for improvement on the [PortSwigger
  support
  forum](https://support.portswigger.net/customer/portal/questions/16358278-swagger-parser-and-wsdler-improvement),
  I decided to take the initiative and to implement a solution myself.


  The extension is still in development, feedback, comments and contributions
  are therefore much appreciated.


  ## One-time donation

  * Donate via Bitcoin      : **15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p**

  * Donate via Bitcoin Cash : **qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3**

  * Donate via Ether        : **0x70bC178EC44500C17B554E62BC31EA2B6251f64B**


  ## License

  Copyright (C) 2016 - 2018 Alexandre Teyar


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at


  <http://www.apache.org/licenses/LICENSE-2.0>


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.
danielgtaylor/apisprout: >
  <img
  src="https://user-images.githubusercontent.com/106826/43119494-78be9224-8ecb-11e8-9d1a-9fc6f3014b91.png"
  width="300" alt="API Sprout"/>


  [![Go Report
  Card](https://goreportcard.com/badge/github.com/danielgtaylor/apisprout)](https://goreportcard.com/report/github.com/danielgtaylor/apisprout)
  [![Build
  Status](https://travis-ci.org/danielgtaylor/apisprout.svg?branch=master)](https://travis-ci.org/danielgtaylor/apisprout)
  [![GitHub tag (latest
  SemVer)](https://img.shields.io/github/tag/danielgtaylor/apisprout.svg)](https://github.com/danielgtaylor/apisprout/releases)
  [![Docker
  Pulls](https://img.shields.io/docker/pulls/danielgtaylor/apisprout.svg)](https://hub.docker.com/r/danielgtaylor/apisprout/)


  A simple, quick, cross-platform API mock server that returns examples
  specified in an API description document. Features include:


  - OpenAPI 3.x support
    - Uses operation `examples` or generates examples from `schema`
  - Load from a URL or local file (auto reload with `--watch`)

  - CORS headers enabled by default

  - Accept header content negotiation
    - Example: `Accept: application/*`
  - Prefer header to select response to test specific cases
    - Example: `Prefer: status=409`
  - Server validation (enabled with `--validate-server`)
    - Validates scheme, hostname/port, and base path
    - Supports `localhost` out of the box
  - Request parameter & body validation (enabled with `--validate-request`)

  - Configuration via:
    - Files (`/etc/apisprout/config.json|yaml`)
    - Environment (prefixed with `SPROUT_`, e.g. `SPROUT_VALIDATE_SERVER`)
    - Commandline flags

  Usage is simple:


  ```sh

  # Load from a local file

  apisprout my-api.yaml


  # Validate server name and use base path

  apisprout --validate-server my-api.yaml


  # Load from a URL

  apisprout
  https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/api-with-examples.yaml

  ```


  ## Docker Image


  A hosted [API Sprout Docker
  image](https://hub.docker.com/r/danielgtaylor/apisprout/) is provided that
  makes it easy to deploy mock servers or run locally. For example:


  ```sh

  docker pull danielgtaylor/apisprout

  docker run -p 8000:8000 danielgtaylor/apisprout http://example.com/my-api.yaml

  ```


  Configuration can be passed via environment variables, e.g. setting
  `SPROUT_VALIDATE_REQUEST=1`, or by passing commandline flags. It is also
  possible to use a local API description file via [Docker
  Volumes](https://docs.docker.com/storage/volumes/):


  ```

  # Remember to put the full path to local archive YAML in -v

  docker run -p 8000:8000 -v $FULLPATH/localfile.yaml:/api.yaml
  danielgtaylor/apisprout /api.yaml

  ```


  ## Installation


  Download the appropriate binary from the
  [releases](https://github.com/danielgtaylor/apisprout/releases) page.


  Alternatively, you can use `go get`:


  ```sh

  go get github.com/danielgtaylor/apisprout

  ```


  ## Contributing


  Contributions are very welcome. Please open a tracking issue or pull request
  and we can work to get things merged in.


  ## Release Process


  The following describes the steps to make a new release of API Sprout.


  1. Merge open PRs you want to release.

  1. Select a new semver version number (major/minor/patch depending on
  changes).

  1. Update `CHANGELOG.md` to describe changes.

  1. Create a commit for the release.

  1. Tag the commit with `git tag -a -m 'Tagging x.y.z release' vx.y.z`.

  1. Build release binaries with `./release.sh`.

  1. Push the commit and tags.

  1. Upload the release binaries.


  ## License


  Copyright &copy; 2018-2019 Daniel G. Taylor


  http://dgt.mit-license.org/
tobilg/api2html: >
  # api2html

  A CLI tool to transform Swagger/OpenAPI/AsyncAPI docs to beautiful HTML pages
  via
  [Shins](https://github.com/mermade/shins)/[Widdershins](https://github.com/mermade/widdershins).


  You can find an example generated page at
  [http://tobilg.github.io/api2html/petstore/](http://tobilg.github.io/api2html/petstore/).


  ## Installation


  To install `api2html` globally, use


  ```bash

  $ npm i api2html -g

  ```


  You can also install it to use as `devDependencies`, and use it locally via a
  `npm run` task in your `package.json`:


  ```bash

  $ npm i api2html --save-dev

  ```


  Usage in `package.json`:


  ```javascript

  {
    "scripts": {
      "api-docs": "node_modules/.bin/api2html -o docs/api.html -l shell,javascript--nodejs docs/openapi/api.yml"
    }
  }

  ```


  ## Usage


  ### Available commands


  ```bash

  $ api2html --help 

  Usage: api2html [options] <sourcePath>
    
    Options:
      -V, --version                   output the version number
      -r, --resolve <source>          resolve external dependencies, source should be a url or a path
      -o, --out <outputPath>          output path for the resulting HTML document
      -t, --theme <themeName>         theme to use (see https://highlightjs.org/static/demo/ for a list)
      -c, --customLogo <logoPath>     use custom logo at the respective path
      -C, --customCss                 use custom css
      -P, --customCssPath <cssPath>   use custom css file
      -i, --includes <includesList>   comma-separated list of files to include
      -l, --languages <languageList>  comma-separated list of languages to use for the language tabs (out of shell, http, javascript, javascript--nodejs, ruby, python, java, go)
      -s, --search                    enable search
      -S, --summary                   use summary instead of operationId for TOC
      -b, --omitBody                  Omit top-level fake body parameter object
      -R, --raw                       Show raw schemas in samples, not example values
      -h, --help                      output usage information
  ```


  ### Usage examples


  #### Render OpenAPI v3 file as HTML


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the current directory.


  ```bash

  $ api2html -o myapi.html myapi.yml

  ```


  #### Use custom logo


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use the custom logo `mylogo.png`.


  ```bash

  $ api2html -o myapi.html -c mylogo.png myapi.yml

  ```


  #### Define which language examples should be generated


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use `go` and `javascript` examples.


  ```bash

  $ api2html -o myapi.html -l go,javascript myapi.yml

  ```


  #### Use different syntax highlighter


  This will render the `api.yml` file in the current directory as `myapi.html`
  file in the same directory, and use `go` and `javascript` examples, as well as
  a different syntax higlighter from
  [highlight.js](https://highlightjs.org/static/demo/).


  ```bash

  $ api2html -o myapi.html -l go,javascript -t arta myapi.yml

  ```


  #### Resolve external dependencies


  If you add refs to external files in your source file, you can enable them by
  using `-r <source>`. The following command will resolve all your relative
  imports from the current directory.


  ```bash

  $ api2html -o myapi.html -r ./ myapi.yml

  ```
epiphone/routing-controllers-openapi: >
  # routing-controllers-openapi

  [![Build
  Status](https://travis-ci.org/epiphone/routing-controllers-openapi.svg?branch=master)](https://travis-ci.org/epiphone/routing-controllers-openapi)
  [![codecov](https://codecov.io/gh/epiphone/routing-controllers-openapi/branch/master/graph/badge.svg)](https://codecov.io/gh/epiphone/routing-controllers-openapi)
  [![npm
  version](https://badge.fury.io/js/routing-controllers-openapi.svg)](https://badge.fury.io/js/routing-controllers-openapi)


  Runtime OpenAPI v3 schema generation for
  [routing-controllers](https://github.com/typestack/routing-controllers).


  ## Installation


  `yarn add routing-controllers-openapi`


  ## Usage


  ```typescript

  import { getMetadataArgsStorage } from 'routing-controllers'

  import { routingControllersToSpec } from 'routing-controllers-openapi'


  // Define your controllers as usual:


  @JsonController('/users')

  class UsersController {
    @Get('/:userId')
    getUser(@Param('userId') userId: string) {
      // ...
    }

    @HttpCode(201)
    @Post('/')
    createUser(@Body() body: CreateUserBody) {
      // ...
    }
  }


  // Generate a schema:


  const storage = getMetadataArgsStorage()

  const spec = routingControllersToSpec(storage)

  console.log(spec)

  ```


  prints out the following specification:


  ```json

  {
    "components": {
      "schemas": {}
    },
    "info": {
      "title": "",
      "version": "1.0.0"
    },
    "openapi": "3.0.0",
    "paths": {
      "/users/{userId}": {
        "get": {
          "operationId": "UsersController.getUser",
          "parameters": [
            {
              "in": "path",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {}
              },
              "description": "Successful response"
            }
          },
          "summary": "List users",
          "tags": [
            "Users"
          ]
        }
      },
      "/users/": {
        "post": {
          "operationId": "UsersController.createUser",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserBody"
                }
              }
            },
            "description": "CreateUserBody",
            "required": false
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {}
              },
              "description": "Successful response"
            }
          },
          "summary": "Create user",
          "tags": [
            "Users"
          ]
        }
      }
    }
  }

  ```


  Check [`/sample`](/sample) for a complete sample application.


  ### Configuration


  `routingControllersToSpec` has the following type signature:


  ```typescript

  export function routingControllersToSpec(
    storage: MetadataArgsStorage,
    routingControllerOptions: RoutingControllersOptions = {},
    additionalProperties: Partial<OpenAPIObject> = {}
  ): OpenAPIObject

  ```


  `routingControllerOptions` refers to the options object used to configure
  routing-controllers. Pass in the same options here to have your
  [`routePrefix`](https://github.com/typestack/routing-controllers/#prefix-all-controllers-routes)
  and
  [`defaults`](https://github.com/typestack/routing-controllers/#default-settings)
  options reflected in the resulting OpenAPI spec.


  `additionalProperties` is a partial [OpenAPI
  object](https://swagger.io/specification/#openapi-object-17) that gets merged
  into the result spec. You can for example set your own
  [`info`](https://swagger.io/specification/#openapi-object-19) or
  [`components`](https://swagger.io/specification/#components-object-33)
  keywords here.


  ### Validation classes


  Use
  [class-validator-jsonschema](https://github.com/epiphone/class-validator-jsonschema)
  to convert your validation classes into OpenAPI-compatible schemas:


  ```typescript

  import { validationMetadatasToSchemas } from 'class-validator-jsonschema'


  // ...


  const schemas = validationMetadatasToSchemas(metadatas, {
    refPointerPrefix: '#/components/schemas'
  })


  const spec = routingControllersToSpec(storage, routingControllerOptions, {
    components: { schemas },
    info: { title: 'My app', version: '1.2.0' }
  })

  ```


  ### Decorating with additional keywords


  Use the `@OpenAPI` decorator to supply your actions with additional keywords:


  ```typescript

  import { OpenAPI } from 'routing-controllers-openapi'


  @JsonController('/users')

  export class UsersController {

    @Get('/')
    @OpenAPI({
      description: 'List all available users',
      responses: {
        '400': {
          description: 'Bad request'
        }
      }
    })
    listUsers() {
      // ...
    }
  }

  ```


  The parameter object consists of any number of properties from the [Operation
  object](https://swagger.io/specification/#operationObject). These properties
  are then merged into the spec, overwriting any existing values.


  Alternatively you can call `@OpenAPI` with a function of type `(source:
  OperationObject, route: IRoute) => OperationObject`, i.e. a function receiving
  the existing spec as well as the target route, spitting out an updated spec.
  This function parameter can be used to implement for example your own merging
  logic or custom decorators.


  #### Multiple `@OpenAPI` decorators


  A single handler can be decorated with multiple `@OpenAPI`s. Note though that
  since decorators are applied top-down, any possible duplicate keys are
  overwritten by subsequent decorators:


  ```typescript
    @OpenAPI({
      summary: 'This value will be overwritten!',
      description: 'This value will remain'
    })
    @OpenAPI({
      summary: 'This value will remain'
    })
    listUsers() {
      // ...
    }
  ```


  Multiple `@OpenAPI`s are merged together with
  [`lodash/merge`](https://lodash.com/docs/4.17.11#merge) which has [a few
  interesting properties](https://github.com/lodash/lodash/issues/1313) to keep
  in mind when it comes to arrays. Use the function parameter described above
  when strict control over merging logic is required.


  #### Class `@OpenAPI` decorator


  Using `@OpenAPI` on the controller class effectively applies given spec to
  each class method. Method-level `@OpenAPI`s are merged into class specs, with
  the former having precedence:


  ```typescript

  @OpenAPI({
    security: [{ basicAuth: [] }] // Applied to each method
  })

  @JsonController('/users')

  export class UsersController {
    // ...
  }

  ```


  ### Annotating response schemas


  Extracting response types automatically in runtime isn't currently allowed by
  Typescript's reflection system. Specifically the problem is that
  `routing-controllers-openapi` can't unwrap generic types like Promise<MyModel>
  or Array<MyModel>: see e.g.
  [here](https://github.com/Microsoft/TypeScript/issues/10576) for discussion.
  As a workaround you can use the `@ResponseSchema` decorator to supply the
  response body schema:


  ```typescript

  import { ResponseSchema } from 'routing-controllers-openapi'


  @JsonController('/users')

  export class UsersController {

    @Get('/:id')
    @ResponseSchema(User)
    getUser() {
      // ...
    }
  }

  ```


  `@ResponseSchema` takes as an argument either a class-validator class or a
  plain string schema name. You can also supply an optional secondary `options`
  argument:


  ```typescript
    @Post('/')
    @ResponseSchema(User, {
      contentType: 'text/csv',
      description: 'A list of created user objects',
      isArray: true
      statusCode: '201'})
    createUsers() {
      // ...
    }
  ```


  `contentType` and `statusCode` default to routing-controller's `@ContentType`
  and `@HttpCode` values. To specify a response schema of an array, set
  `options.isArray` as `true`. You can also annotate a single handler with
  multiple `ResponseSchema`s to specify responses with different status codes.


  Note that when using `@ResponseSchema` together with `@JSONSchema`, the outer
  decorator will overwrite keys of inner decorators. So in the following
  example, information from `@ResponseSchema` would be overwritten by
  `@JSONSchema`:


  ```typescript

  @JSONSchema({responses: {
    '200': {
      'content': {
        'application/json': {
          schema: {
            '$ref': '#/components/schemas/Pet'
          }
        }
      ]
    }
  }})

  @ResponseSchema(SomeResponseObject)

  handler() { ... }

  ```


  ## Supported features


  - `@Controller`/`@JsonController` base route and default content-type

  - `options.routePrefix`

  - `@Get`, `@Post` and other action decorators

  - Parse path parameters straight from path strings and optionally supplement
  with `@Param` decorator
    - Regex and optional path parameters (e.g. `/users/:id(\d+)/:type?`) are also supported
  - `@QueryParam` and `@QueryParams`

  - `@HeaderParam` and `@HeaderParams`

  - `@Body` and `@BodyParam`

  - Parse response keywords from `@HttpCode` and `@ContentType` values

  - Global `options.defaults.paramOptions.required` option and local override
  with `{required: true}` in decorator params

  - Parse `summary`, `operationId` and `tags` keywords from controller/method
  names


  ## Future work


  - Support for routing-controller's [authorization
  features](https://github.com/typestack/routing-controllers#using-authorization-features)


  Feel free to submit a PR!


  ## Related projects


  - Inspired by [tsoa](https://github.com/lukeautry/tsoa) and
  [trafficlight](https://github.com/swimlane/trafficlight)

  - Include your Mongoose models in the spec with
  [mongoose-schema-jsonschema](https://github.com/DScheglov/mongoose-schema-jsonschema)

  - Generate JSON schema from your Typescript sources with
  [typescript-json-schema](https://github.com/YousefED/typescript-json-schema)

  - [openapi3-ts](https://github.com/metadevpro/openapi3-ts/) provides handy
  OpenAPI utilities for Typescript

  - Convert OpenAPI 3 spec to **Swagger 2** with
  [api-spec-converter](https://github.com/LucyBot-Inc/api-spec-converter)

  - Generate Typescript interface definitions from SQL database schema with
  [schemats](https://github.com/SweetIQ/schemats)
koumoul-dev/vue-openapi: >
  # OpenAPI viewer component for VueJS


  This [Vue.js](https://vuejs.org/) component is designed to easily browse and
  test a REST API described

  with the [OpenAPI 3.0
  Specification](https://github.com/OAI/OpenAPI-Specification) (formerly known
  as Swagger Specification). This component follows Google [Material
  Design](https://material.google.com/) principles and relies on the [Vue
  Material](https://github.com/marcosmoura/vue-material) framework. It also
  relies on [vue-resource](https://github.com/pagekit/vue-resource) to perform
  API requests.


  See it in action :
   * https://koumoul.com/openapi-viewer/

  ## Install


  npm :

  ```console

  $ npm install --save vue-openapi

  ```


  yarn:

  ```console

  $ yarn add vue-openapi

  ```


  ## Usage

  ```js

  import Vue from 'vue'

  import VueMaterial from 'vue-material'

  import OpenApi from 'vue-openapi'

  import 'vue-material/dist/vue-material.css'

  import VueResource from 'vue-resource'


  import jsonApi from './swagger.json'


  Vue.use(VueMaterial)

  Vue.use(VueResource)


  new Vue({
    el: '#app',
    template: '<open-api v-if="jsonApi" :api="jsonApi" md-theme="\'default\'" :query-params="queryParams" :headers="headers"></open-api>',
    data: () => ({
      jsonApi: jsonApi,
      queryParams: {
        userId: 'john_doe'
      },
      headers: {
        api_key: 'my_api_key'
      }
    }),
    components: {
      OpenApi
    }
  })

  ```


  ## Develop


  Run webpack in watch mode:

      npm run dev

  Then open test/index.html in your browser.


  To switch between examples, modify the import "jsonApi" in test/app.js.


  ## License


  [MIT License](license.md)


  ## Resources


  * [Awesome OpenApi 3](https://github.com/Mermade/awesome-openapi3) lists
  various projects related to OpenApi 3.0.x

  * [swagger2openapi](https://github.com/Mermade/swagger2openapi) lets you
  convert Swagger 2.0 definitions into OpenApi 3.0.x


  ## Similar projects


  This project has been inspired by the following projects :

   * [angular-swagger-ui](https://github.com/Orange-OpenSource/angular-swagger-ui)
   * [angular-swagger-ui-material](https://github.com/darosh/angular-swagger-ui-material)
sanjayvacharya/sleeplessinslc: >
  # sleeplessinslc

  Demonstration and Tutorial code from the BLOG
  http://sleeplessinslc.blogspot.com. If you clone this repo, fork this repo,
  share a star to show how awesome it is! Cheers!
epiphone/class-validator-jsonschema: >
  # class-validator-jsonschema

  [![Build
  Status](https://travis-ci.org/epiphone/class-validator-jsonschema.svg?branch=master)](https://travis-ci.org/epiphone/class-validator-jsonschema)
  [![codecov](https://codecov.io/gh/epiphone/class-validator-jsonschema/branch/master/graph/badge.svg)](https://codecov.io/gh/epiphone/class-validator-jsonschema)
  [![npm
  version](https://badge.fury.io/js/class-validator-jsonschema.svg)](https://badge.fury.io/js/class-validator-jsonschema)


  Convert
  [class-validator](https://github.com/typestack/class-validator)-decorated
  classes into OpenAPI-compatible JSON Schema. The aim is to provide a
  best-effort conversion: since some of the `class-validator` decorators lack a
  direct JSON Schema counterpart, the conversion is bound to be somewhat
  opinionated. To account for this multiple extension points are available.


  ## Installation


  `yarn add class-validator-jsonschema`


  ## Usage


  ```typescript

  import { getFromContainer, IsOptional, IsString, MaxLength, MetadataStorage }
  from 'class-validator'

  import { validationMetadatasToSchemas } from 'class-validator-jsonschema'


  class BlogPost {
    @IsString() id: string

    @IsOptional()
    @MaxLength(20, { each: true })
    tags: string[]
  }


  const metadatas = (getFromContainer(MetadataStorage) as
  any).validationMetadatas

  const schemas = validationMetadatasToSchemas(metadatas)

  console.log(schemas)

  ```


  which prints out:


  ```json

  {
    "BlogPost": {
      "properties": {
        "id": {
          "type": "string"
        },
        "tags": {
          "items": {
            "maxLength": 20,
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    }
  }

  ```


  `validationMetadatasToSchemas` takes an `options` object as an optional second
  parameter. Check available configuration objects and defaults at
  [`options.ts`](src/options.ts).


  ### Adding and overriding default converters


  With `options.additionalConverters` you can add new validation metadata
  converters or override [the existing ones](src/defaultConverters.ts). Let's
  say we want to, for example, add a handy `description` field to each
  `@IsString()`-decorated property:


  ```typescript

  import { ValidationTypes } from 'class-validator'


  // ...


  const schemas = validationMetadatasToSchemas(metadatas, {
    additionalConverters: {
      [ValidationTypes.IS_STRING]: {
        description: 'A string value',
        type: 'string'
      }
    }
  })

  ```


  which now outputs:


  ```json

  {
    "BlogPost": {
      "properties": {
        "id": {
          "description": "A string value",
          "type": "string"
        },
        // ...
      }
    }
  }

  ```


  An additional converter can also be supplied in form of a function that
  receives the validation metadata item and global options, outputting a JSON
  Schema property object (see below for usage):


  ```typescript

  type SchemaConverter = (meta: ValidationMetadata, options: IOptions) =>
  SchemaObject | void

  ```


  ### Custom validation classes


  `class-validator` allows you to define [custom validation
  classes](https://github.com/typestack/class-validator#custom-validation-classes).
  You might for example validate that a string's length is between given two
  values:


  ```typescript

  import { Validate, ValidationArguments, ValidatorConstraint,
  ValidatorConstraintInterface } from 'class-validator'


  // Implementing the validator:


  @ValidatorConstraint()

  export class CustomTextLength implements ValidatorConstraintInterface {
    validate(text: string, validationArguments: ValidationArguments) {
      const [min, max] = validationArguments.constraints
      return text.length >= min && text.length <= max
    }
  }


  // ...and putting it to use:


  class Post {
    @Validate(CustomTextLength, [0, 11])
    title: string
  }

  ```


  Now to handle your custom validator's JSON Schema conversion include a
  `customValidation` converter in `options.additionalConverters`:


  ```typescript

  const schemas = validationMetadatasToSchemas(
    validationMetadatas,
    {
      additionalConverters: {
        [ValidationTypes.CUSTOM_VALIDATION]: meta => {
          if (meta.constraintCls === CustomTextLength) {
            return {
              maxLength: meta.constraints[1],
              minLength: meta.constraints[0],
              type: 'string'
            }
          }
        }
      }
    }
  )

  ```


  ### Decorating with additional properties


  Validation classes can also be supplemented with the `JSONSchema` decorator.
  `JSONSchema` can be applied both to classes and individual properties; any
  given keywords are then [merged](https://lodash.com/docs/4.17.4#merge) into
  the JSON Schema derived from class-validator decorators:


  ```typescript

  import { JSONSchema } from 'class-validator-jsonschema'


  @JSONSchema({
    description: 'A User object',
    example: { id: '123' }
  })

  class BlogPost {
    @IsString()
    @JSONSchema({
      description: 'User primary key',
      format: 'custom-id'
    })
    id: string
  }

  ```


  Results in the following schema:


  ```json

  {
    "BlogPost": {
      "description": "A User object",
      "example": { "id": "123" },
      "properties": {
        "id": {
          "description": "User primary key",
          "format": "custom-id",
          "type": "string"
        }
      },
      "required": ["id"],
      "type": "object"
    }
  }

  ```


  `JSONSchema` decorators also flow down from parent classes into [inherited
  validation
  decorators](https://github.com/typestack/class-validator#inheriting-validation-decorators).
  Note though that if the inherited class uses `JSONSchema` to redecorate a
  property from the parent class, the parent class `JSONSchema` gets overwritten
  - i.e. there's no merging logic.


  #### Custom handlers


  Alternatively `JSONSchema` can take a function of type `(existingSchema:
  SchemaObject, options: IOptions) => SchemaObject`. The return value of this
  function is then **not** automatically merged into existing schema (i.e. the
  one derived from `class-validator` decorators). Instead you can handle merging
  yourself in whichever way is preferred, the idea being that removal of
  existing keywords and other more complex overwrite scenarios can be
  implemented here.


  ### @ValidateNested and arrays


  `class-validator` supports validating nested objects via the
  [`@ValidateNested`
  decorator](https://github.com/typestack/class-validator#validating-nested-objects).
  Likewise JSON Schema generation is supported out-of-the-box for nested
  properties such as


  ```typescript

  @ValidateNested()

  user: UserClass

  ```


  However, due to [limitations in Typescript's reflection
  system](https://github.com/Microsoft/TypeScript/issues/10576) we cannot infer
  the inner type of a generic class. In effect this means that properties like


  ```typescript

  @ValidateNested({ each: true })

  users: UserClass[]


  @ValidateNested()

  user: Promise<UserClass>

  ```


  would resolve to classes `Array` and `Promise` in JSON Schema. To work around
  this limitation we can use `@Type` from `class-transformer` to explicitly
  define the nested property's inner type:


  ```typescript

  import { Type } from 'class-transformer'

  import { defaultMetadataStorage } from 'class-transformer/storage'

  import { validationMetadatasToSchemas } from 'class-validator-jsonschema'


  class User {
    @ValidateNested({ each: true })
    @Type(() => BlogPost)  // 1) Explicitly define the nested property type
    blogPosts: BlogPost[]
  }


  const schemas = validationMetadatasToSchemas(metadatas, {
    classTransformerMetadataStorage: defaultMetadataStorage // 2) Define class-transformer metadata in options
  })

  ```


  Note also how the `classTransformerMetadataStorage` option has to be defined
  for `@Type` decorator to take effect.



  ## Limitations


  There's no handling for `class-validator`s **validation groups** or
  **conditional decorator** (`@ValidateIf`) out-of-the-box. The above-mentioned
  extension methods can be used to fill the gaps if necessary.


  The OpenAPI spec doesn't currently support the new JSON Schema **draft-06
  keywords** `const` and `contains`. This means that constant value decorators
  such as `@IsEqual()` and `@ArrayContains()` translate to quite [complicated
  schemas](https://github.com/sahava/gtm-datalayer-test/issues/4). Hopefully [in
  a not too distant
  future](https://github.com/OAI/OpenAPI-Specification/issues/1313#issuecomment-335893062)
  these keywords are adopted into the spec and we'll be able to provide neater
  conversion.


  Handling **null values** is also tricky since OpenAPI doesn't support JSON
  Schema's `type: null`, providing its own `nullable` keyword instead. The
  default `@IsEmpty()` converter for example opts for `nullable` but you can use
  `type: null` instead via `options.additionalConverters`:


  ```typescript

  // ...

  additionalConverters: {
    [ValidationTypes.IS_EMPTY]: {
      anyOf: [
        {type: 'string', enum: ['']},
        {type: 'null'}
      ]
    }
  }

  ```


  ## TODO


  - [x] handle `skipMissingProperties` and `@isDefined()`

  - [x] decorators for overwriting prop schemas

  - [ ] optional property descriptions (e.g. `A Base64-encoded string`)

  - [ ] optional draft-06 keywords
apisyouwonthate/openapi.tools: >
  # openapi.tools

  A collection of Editors, Linters, Parsers, Code Generators,  Documentation,
  Testing


  ## Contributing

  Please fix _data/tools.yml


  We use [jekyll](https://jekyllrb.com/) so you should use ruby and install it
  using bundler.


  ```

  $ bundle install

  ```


  If you want to check changes, execute jekyll server and open browser.

  ```

  $ bundle exec jekyll serve

  ```
fsprojects/OpenAPITypeProvider: >
  <img src="https://github.com/Dzoukr/OpenAPITypeProvider/raw/master/logo.jpg"
  alt="drawing" width="100px"/>



  # OpenAPI Type Provider

  *Erased netstandard2.0 type provider for web API providers.*


  ## Why to use this type provider?

  If you write F# backend for some application providing JSON API, you probably
  want to document this using [OpenAPI v3
  specification](https://www.openapis.org/) (previously called Swagger). This
  documentation can be created basically two ways:


  1) Generate it from code (code first approach)

  2) Write it manually (document first approach)


  This type provider is focused on second option when you already got existing
  documentation (e.g. from frontend developer) and you want to be 100% sure that
  your API follows it correctly, which mostly means two things: Validation of
  requests payload is in correct form (as described in API documentation) and
  creating responses. Both things can be quite tedious and error-prone. It is
  common in web API development that after some time that server behavior is not
  what is written in documentation. This type provider is here to help with
  that.


  ## Goals of OpenAPITypeProvider

  When I started to think about writing this type provider, I set few goals:


  1. Netstandard2.0 support

  2. Erased type

  3. Tightly connected to Newtonsoft.Json

  4. Based on the latest OpenAPI specification (no support for Swagger)


  ## Version 2.0.0 change

  In versions < 2.0, the Schemas were created based on simplified logic: If the
  schema is the same (having same structure), it is considered to be the same
  schema no matter name you use (actually the first parsed named is used for all
  others). This approach had good intentions - to minimize amount of created
  Schemas - however shown to be wrong for complex scenarios. This could easily
  lead to situation where change in one Schema breaks your other Schema, even if
  they were not directly linked using `$ref`.


  Since version **2.0.0** the Schemas are created based on logic:

  1. Root inline schemas are always created as separated one

  2. Root `$ref` schemas are created as separated one but with structure
  "copied" from referenced schema

  3. Nested inline schemas are created as separated one

  4. Nested `$ref` schemas are linked to referenced schema


  ## Instalation


  First install [NuGet
  package](https://www.nuget.org/packages/OpenAPITypeProvider/)

      Install-Package OpenAPITypeProvider

  or using Paket

      nuget OpenAPITypeProvider

  ## How to use


  First open correct namespace and create basic type based on your YAML
  documentation


  ```fsharp

  open OpenAPITypeProvider


  type PetStore = OpenAPIV3Provider<"PetStore.yaml">

  ```


  Now you can use defined Schemas in your specification like F# types.


  ### Parsing from JSON


  Each Schema type can be created from JSON string using static method `Parse`.


  ```fsharp

  let json = """{"name":"Roman"}"""

  let pet = PetStore.Schemas.NewPet.Parse(json)

  let name = pet.Name // contains Roman

  let tag = pet.Tag // contains Option value None

  ```


  Sometimes you need to use parse JSON with custom date format.


  ```fsharp

  let json = """{"date1":"31. 12. 2018 12:34:56","date2":"31. 12. 2017
  12:34:56"}"""

  let customDateFormat = "dd. MM. yyyy HH:mm:ss"

  let twoDates = PetStore.Schemas.TwoDates.Parse(json, customDateFormat)

  ```


  Method `Parse` throws an exception in case JSON does not fit to definition:


  ```fsharp

  // fails with exception that property 'name' is not present,

  // but should be based on Schema definition

  let json = """{"notExistingProperty":"Roman"}"""

  let pet = PetStore.Schemas.NewPet.Parse(json) 


  // fails with exception that property 'name' not convertible

  // to string value

  let json = """{"name":123456}"""

  let pet = PetStore.Schemas.NewPet.Parse(json) 

  ```


  ### Instantiation of Schema types


  Schema types has constructors based on definition so you can instantiate them
  as you need.


  ```fsharp

  let pet = new PetStore.Schemas.NewPet(name = "Roman")

  ```


  ### Converting to JSON


  Each Schema instance has method `ToJson` with few overloads.


  ```fsharp

  let pet = new PetStore.Schemas.NewPet(name = "Roman")

  pet.ToJson() // returns '{"name":"Roman"}' - no indenting

  pet.ToJson(Newtonsoft.Json.Formatting.Indented) // return json with fancy
  formatting

  ```


  ### Converting to JSON with custom serializer


  Each `ToJson` method has overload with supporting `JsonSerializerSettings` as
  parameter.


  ```fsharp

  let pet = new PetStore.Schemas.NewPet(name = "Roman")


  let settings = JsonSerializerSettings()

  settings.NullValueHandling <- NullValueHandling.Include


  pet.ToJson(settings, Formatting.None) // returns '{"name":"Roman","tag":null}'

  ```


  ### Converting to Newtonsoft JToken


  If you need `JToken` instead of string with JSON, method `ToJToken` is here
  for you.


  ```fsharp

  let pet = new PetStore.Schemas.NewPet(name = "Roman")

  let jtoken = pet.ToJToken()

  ```


  Again, you can customize how to handle optional values.


  ```fsharp

  let pet = new PetStore.Schemas.NewPet(name = "Roman")

  let jtoken = pet.ToJToken(NullValueHandling.Include) // this now contains
  JNull value inside JObject

  ```


  ### Simple values


  By specification you are allowed to have Schema types not an objects, but
  simple values like strings or integers. This type provider supports them as
  well.


  ```yaml

  SimpleString:
      type: string    
      
  SimpleArray:
      type: array
      items:
          type: string
  ```


  ```fsharp

  let simpleString = PetStore.Schemas.SimpleString("ABC")

  simpleString.Value // contains "ABC"


  let simpleArray = PetStore.Schemas.SimpleArray(["A";"B"])

  simpleArray.Values // contains List<string> ["A";"B"]

  ```


  ### Requests & ResponseBodies


  Using Schema types directly is quite handy and straightforward, but it doesn't
  say anything about routes, requests and responses. If you want to be 100% sure
  that you are fullfilling specification, go for `Parse` on Requests and
  `ToJson` / `ToJToken` methods on ResponseBodies.


  ```fsharp

  let petStoreAPI = new PetStore() // Note! Instance of PetStore type is needed
  here.

  let pet = new PetStore.Schemas.NewPet("Roman")


  // this route returns NewPet schema by definition so ToJson allows only NewPet
  schema as parameter

  petStoreAPI.Paths.``/pets/{id}``.Get.Responses.``200``.``application/json``.ToJson(pet)


  // this route expects NewPet schema by definition so Parse method returns
  NewPet

  let parsedPet =
  petStoreAPI.Paths.``/pets``.Post.RequestBody.``application/json``.Parse(jsonFromRequest)

  ```


  In case you have any doubts, you can always have a look [at unit
  tests](https://github.com/Dzoukr/OpenAPITypeProvider/blob/master/tests/OpenAPITypeProvider.Tests/BasicTests.fs)


  ## Known issues & Limitations

  1. No support for `OneOf` and `ManyOf` since they are basically union types
  which is quite difficult (or maybe impossible) to generate from type provider


  ## Contribution


  You are more than welcome to send a [pull
  request](https://github.com/Dzoukr/OpenAPITypeProvider/pulls) if you find some
  bug or missing functionality.
outofcoffee/vertx-oas: >
  # vertx-oas


  Generates a Swagger/OpenAPI specification from a Vert.x Web Router.


  ## Usage


  Assuming you're using Vert.x Web, use it with your `Router` as follows:


  ```java

  // your normal Vert.x Web Router with paths etc.

  Router router = Router.router(vertx);

  router.post("/users").handler( routingContext -> { /* etc... */ });

  router.get("/users/:userId").handler( routingContext -> { /* etc... */ });


  // publish the Swagger/OpenAPI specification to a URL

  RouterSpecGenerator.publishApiDocs(router, "/api/spec");

  ```


  In this example, the specification is published to `/api/spec`.


  You can obtain YAML or JSON versions of the specification by adding the
  appropriate file extension.


  ---


  For example, fetching `/api/spec.yaml` would produce:


  ```yaml

  openapi: "3.0.1"

  info:
    title: "Vert.x APIs"
    description: "This specification was generated from a Vert.x Web Router."
  paths:
    /users:
      post:
        parameters: []
    /users/{userId}:
      get:
        parameters:
        - name: "userId"
          required: true
          allowEmptyValue: false
  ```


  ## Limitations


  - Doesn't understand regex paths

  - Doesn't know the type of path parameters

  - Doesn't know about request or response body models


  ## Use in your project


  ### Maven


  Add repository:


  ```xml

  <project>

  ...
    <repositories>
      <repository>
        <id>gatehillsoftware-snapshots</id>
        <name>Gatehill Software Snapshots</name>
        <url>https://s3-eu-west-1.amazonaws.com/gatehillsoftware-maven/snapshots</url>
      </repository>
      <repository>
        <id>sonatype-snapshots</id>
        <name>Sonatype OSS Snapshots</name>
        <url>https://oss.sonatype.org/content/repositories/snapshots</url>
      </repository>
    </repositories>
  ...

  </project>

  ```
      
  Add dependency:


  ```xml

  <dependencies>
      ...
      <dependency>
          <groupId>com.gatehill.vertx-oas</groupId>
          <artifactId>vertx-oas</artifactId>
          <version>1.0.1</version>
      </dependency>
      ...
  </dependencies>

  ```


  ### Gradle


  Add repository:

      repositories {
          maven {
              url 'https://s3-eu-west-1.amazonaws.com/gatehillsoftware-maven/snapshots'
          }
          maven {
              url 'https://oss.sonatype.org/content/repositories/snapshots'
          }
      }
      
  Add dependency:

      compile 'com.gatehill.vertx-oas:vertx-oas:1.0.1'  

  ## Build


  If you'd like to build the code locally, follow these instructions.


  ### Prerequisites


  - JDK8


  ### Compile and test

      ./gradlew clean build

  ### Publish


  Publish to local Maven repository:

      ./gradlew publishToMavenLocal

  Publish to remote Maven repository:

      ./gradlew publish

  ## Contributing


  * Pull requests are welcome.

  * Please run `ktlint` on your branch.


  ## Author


  Pete Cornish (outofcoffee@gmail.com)
cdimascio/openapi-spring-webflux-validator: "# openapi-spring-webflux-validator\n\n![](https://travis-ci.org/cdimascio/openapi-spring-webflux-validator.svg?branch=master)[![Maven Central](https://img.shields.io/maven-central/v/io.github.cdimascio/openapi-spring-webflux-validator.svg?label=Maven%20Central)](https://search.maven.org/search?q=g:%22io.github.cdimascio%22%20AND%20a:%22openapi-spring-webflux-validator%22)[![Codacy Badge](https://api.codacy.com/project/badge/Grade/f78b72ca90104e42b111723a7720adf3)](https://www.codacy.com/app/cdimascio/openapi-spring-webflux-validator?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=cdimascio/openapi-spring-webflux-validator&amp;utm_campaign=Badge_Grade)![](https://img.shields.io/badge/license-Apache%202.0-blue.svg)\n\nA friendly kotlin library to validate API endpoints using an _OpenApi 3.0.0_ or _Swagger 2.0_ specification. Great with webflux functional. \nIt **works happily with any JVM language including Java >=8**. \n<p align=\"center\">\n\t<img src=\"https://raw.githubusercontent.com/cdimascio/openapi-spring-webflux-validator/master/assets/openapi-spring5-webflux-validator.png\" width=\"600\"/>\n</p>\n\nSupports specifications in _YAML_ and _JSON_\n\nSee this [complete Spring 5 Webflux example that uses openapi-spring-webflux-validator](https://github.com/cdimascio/kotlin-swagger-spring-functional-template).\n\n## Prequisites\n\nJava 8 or greater\n\n## Install\n\n### Maven\n\n```xml\n<dependency>\n    <groupId>io.github.cdimascio</groupId>\n    <artifactId>openapi-spring-webflux-validator</artifactId>\n    <version>2.1.0</version>\n</dependency>\n```\n\n### Gradle\n\n```groovy\ncompile 'io.github.cdimascio:openapi-spring-webflux-validator:2.1.0'\n```\n\nFor sbt, grape, ivy and more, see [here](https://search.maven.org/#artifactdetails%7Cio.github.cdimascio%7Copenapi-spring-webflux-validator%7C2.0.0%7Cjar)\n\n## Usage (Kotlin)\n\nThis section and the next describe usage with Kotlin and Java respectively.\n\n### Configure (Kotlin)\n\nThis one-time configuration requires you to provide the _location of the openapi/swagger specification_ and an optional _custom error handler_.\n\nSupports `JSON` and `YAML`\n\n```kotlin\nimport io.github.cdimascio.swagger.Validate\nval validate = Validate.configure(\"static/api.yaml\")\n```\n\nwith custom error handler\n\n```kotlin\ndata class MyError(val id: String, val messages: List<String>)\nval validate = Validate.configure(\"static/api.json\") { status, messages ->\n   Error(status.name, messages)\n}\n```\n\nwith custom ObjectMapper factory:\n\n```kotlin\nval validate = Validate.configure(\n   openApiSwaggerPath = \"api.yaml\",\n   errorHandler = { status, message -> ValidationError(status.value(), message[0]) },\n   objectMapperFactory = { ObjectMapper()\n       .registerKotlinModule()\n       .registerModule(JavaTimeModule())\n       .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false) }\n)\n```\n\n### Validate a request (Kotlin)\n\nUsing the `validate` instance created above, you can now validate a request:\n\nwithout a body\n\n```kotlin\nvalidate.request(req) {\n    // Do stuff e.g. return a list of names \n    ok().body(Mono.just(listOf(\"carmine\", \"alex\", \"eliana\")))\n}\n```\n\nwith body\n\n```kotlin\nvalidate.request(req).withBody(User::class.java) { body ->\n    // Note that body is deserialized as User!\n    // Now you can do stuff. \n    // For example, lets echo the request as the response \n    ok().body(Mono.just(body))\n}\n```\n\n## Usage (Java 8 _or greater_)\n\n### Configure (Java)\nThis one-time configuration requires you to provide the _location of the openapi/swagger specification_ and an optional _custom error handler_.\n\n```java\nimport io.github.cdimascio.swagger.Validate;\nValidate<ValidationError> validate = Validate.configure(\"static/api.json\")\n```\n\nwith custom error handler\n\n```java\nclass MyError {\n    private String id;\n    private  String messages;\n    public MyError(String id, List<String> messages) {\n        this.id = id;\n        this.messages = messages;\n    }\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n    public List<String> getMessages() {\n        return messages;\n    }\n    public void setMessages(List<String> messages) {\n        this.messages = messages;\n    }     \n}\n```\n\n```java\nValidate<ValidationError> validate = Validate.configure(\"static/api.json\", (status, messages) ->\n    new MyError(status.getName(), messages)\n);\n```\n\n### Validate a request (Java)\n\nUsing the `validate` instance created above, you can now validate a request:\n\nwithout a body\n\n```java\nArrayList<String> users = new ArrayList<String>() {{\n    add(\"carmine\");\n    add(\"alex\");\n    add(\"eliana\");\n}};\n\nvalidate.request(null, () -> {\n    // Do stuff e.g. return a list of user names\n    ServerResponse.ok().body(fromObject(users));\n});\n```\n\nwith body\n\n```java\nvalidate\n    .request(null)\n    .withBody(User.class, user -> \n        // Note that body is deserialized as User!\n        // Now you can do stuff. \n        // For example, lets echo the request as the response\n        return ServerResponse.ok().body(fromObject(user))\n    );\n```\n\n## Example Valiation Output\n\nLet's assume a `POST` request to create a user requires the following request body:\n\n```json\n{\n  \"firstname\": \"carmine\",\n  \"lastname\": \"dimasico\"\n}\n```\n\nLet's now assume an API user misspells `lastname` as `lastnam`\n\n```shell\ncurl -X POST http://localhost:8080/api/users -H \"Content-Type: application/json\" -d'{ \n  \"firstname\": \"c\", \n  \"lastnam\": \"d\" \n}'\n```\n\n`openapi-spring-webflux-validator` automatically validates the request against a Swagger spect and returns:\n\n```json\n{\n  \"code\": 400,\n  \"messages\":[\n\t  \"Object instance has properties which are not allowed by the schema: [\\\"lastnam\\\"]\",\n\t  \"Object has missing required properties ([\\\"lastname\\\"])\"\n  ]\n} \n```\n\n**Woah! Cool!!** :-D \n\n## Example\n\nLet's say you have an endpoint `/users` that supports both `GET` and `POST` operations.\n\nYou can create those routes and validate them like so:\n\n**Create the routes:**\n\n```kotlin\npackage myproject.controllers\n\nimport org.springframework.core.io.ClassPathResource\nimport org.springframework.http.MediaType.*\nimport org.springframework.web.reactive.function.server.ServerResponse.permanentRedirect\nimport org.springframework.web.reactive.function.server.router\nimport java.net.URI\n\nclass Routes(private val userHandler: UserHandler) {\n\tfun router() = router {\n        \"/api\".nest {\n            accept(APPLICATION_JSON).nest {\n                POST(\"/users\", userHandler::create)\n            }\n            accept(TEXT_EVENT_STREAM).nest {\n                GET(\"/users\", userHandler::findAll)\n            }\n        }\n    }\n}\n```\n\n```kotlin\npackage myproject\n\nimport io.github.cdimascio.swagger.Validate\nval validate = Validate.configure(\"static/api.yaml\")\n```\n\n**Validate with openapi-spring-webflux-validator**\n\n```kotlin\npackage myproject.controllers\n\nimport myproject.models.User\nimport myproject.validate\nimport org.springframework.web.reactive.function.server.ServerRequest\nimport org.springframework.web.reactive.function.server.ServerResponse\nimport org.springframework.web.reactive.function.server.ServerResponse.ok\nimport org.springframework.web.reactive.function.server.body\nimport reactor.core.publisher.Flux\nimport reactor.core.publisher.Mono\n\nclass UserHandler {\n\t\n    fun findAll(req: ServerRequest): Mono<ServerResponse> {\n        return validate.request(req) {\n            ok().body(Mono.just(listOf(\"carmine\", \"alex\", \"eliana\")))\n        }\n    }\n\t \n    fun create(req: ServerRequest): Mono<ServerResponse> {\n        return validate.request(req).withBody(User::class.java) {\n            // it is the request body deserialized as User\n            ok().body(Mono.just(it))\n       }\n    }\n}\n```\n\n## License\n\n[Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0)\n"
fmvilas/openapi3-generator: >
  <h1 align="center">OpenAPI 3 Generator</h1>

  <p align="center">
    Use your API OpenAPI 3 definition to generate code, documentation, and literally anything you need.
  </p>


  ## Install


  To use it from the CLI:


  ```bash

  npm install -g openapi3-generator

  ```


  ## Requirements


  * Node.js v7.6+


  ## Usage


  ### From the command-line interface (CLI)


  ```bash
    Usage: og [options] <openapiFileOrURL> <template>


    Options:

      -V, --version                  output the version number
      -o, --output <outputDir>       directory where to put the generated files (defaults to current directory)
      -t, --templates <templateDir>  directory where templates are located (defaults to internal templates directory)
      -b, --basedir <baseDir>        directory to use as the base when resolving local file references (defaults to OpenAPI file directory)
      -h, --help                     output usage information
  ```


  #### Examples


  The shortest possible syntax:

  ```bash

  og openapi.yaml markdown

  ```


  Specify where to put the generated code:

  ```bash

  og -o ./my-docs openapi.yaml markdown

  ```


  ## Templates


  ### Creating your own templates

  Templates are the sources where the result will be generated from. There are
  already some templates

  you can use to generate code and documentation.


  The files in your template can be of the following types:

  1. Static: This kind of files will be simply copied to the output directory.

  2. Templates: This kind of files will be compiled using
  [Handlebars](http://handlebarsjs.com/), and copied to the output directory.

  3. Path templates: This kind of files will be compiled using
  [Handlebars](http://handlebarsjs.com/), but it will generate one file per
  OpenAPI path.


  Assuming we have the following OpenAPI Spec:

  ```yaml

  openapi: "3.0.0"

  info:
    version: 1.0.0
    title: OpenAPI Petstore
    license:
      name: MIT
  servers:
    - url: http://petstore.openapi.io/v1
  paths:
    /pet:
      get:...
      post:...
    /pet/{petId}:
      get:...
    /user/login:
      post:...
    /user/{username}:
      get:...
      put:...
      delete:...
  ...

  ```

  And some template files like this:

  ```

  |- index.js            // This file contains static code, e.g. starting a
  webserver and including ./api/index.js

  |+ api/
   |- index.js.hbs       // This is a static template, it contains placeholders that will be filled in, e.g. includes for each file in routes
   |+ routes/
    |- $$path$$.route.js.hbs      // This file will be generated for each operation and contains skeleton code for each method for an operation.
  ```

  The first important thing to notice here is the variable notation in
  `$$path$$.route.js.hbs`. It will be replaced by the name of the path.


  In this example the generated directory structure will be like this:

  ```

  |- index.js            // This file still contains static code like before.

  |+ api/
   |- index.js           // This file will now e.g. have included the two files in routes.
   |+ routes/
    |- pet.route.js      // This file contains the code for methods on pets.
    |                    // (e.g. getPet, postPet, getPetByPetId).
    |- user.route.js     // This file will contain the code for methods on users.
                         // (e.g. postUserLogin, getUserByUsername, putUserByUsername, deleteUserByUsername).
  ```


  ### Template file extensions

  You can (optionally) name your template files with `.hbs` extensions, which
  will be removed when writing the generated

  file. e.g. `index.js.hbs` writes `index.js`. `index.js` would also write to
  `index.js`, if you prefer to omit the hbs

  extension.


  The only case where the `.hbs` extension isn't optional would be if you are
  writing handlebars templates with the

  templates. In that case the the template would need the extension `.hbs.hbs`.
  `usertpl.hbs.hbs` writes `usertpl.hbs`

  (but `usertpl.hbs` as a source would write `usertpl` with no extension).


  ### Template file content

  The generator passes the OpenAPI spec to template files, so all information
  should be available there.

  In addition to that, the code generator adds a bit [more
  data](#data-passed-to-handlebars-templates) that can be helpful.


  #### Examples:

  ##### Dynamically require files in JavaScript

  ```mustache

  {{#each @root.openapi.endpoints}}

  const {{.}} = require('./routes/{{.}}.route.js')

  {{/each}}

  ```

  will produce (using the OAS Spec example from above):

  ```js

  const pet = require('./routes/pet.route.js')

  const user = require('./routes/user.route.js')

  ```


  ### Data passed to Handlebars templates

  | Param | Type | Description |

  | --- | --- | --- |

  |openapi|object|The OpenAPI spec.|

  |openapi.endpoints| object | All first level endpoints (e.g  `pet` and `user`)
  |


  ### Custom handlebars helpers

  If your template needs Handlebars helpers, you can define them in a directory
  called `.helpers` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.helpers)
  template.


  ### Using handlebars partials

  If you want to use partials in your template, define them in a directory
  called `.partials` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.partials)
  template.


  > The name of the partial will be obtained from the file name, converted to
  camel case. So, for instance, if the file name is `my-partial.js`, you can use
  the partial with `{{> myPartial}}`.


  ## Authors


  * Fran Méndez ([@fmvilas](http://twitter.com/fmvilas))

  * Richard Klose ([@richardklose](http://github.com/richardklose))
atlassian/oas3-chow-chow: >
  # oas3-chow-chow


  > Request and response validator against OpenAPI Specification


  [![Build
  Status](https://travis-ci.org/atlassian/oas3-chow-chow.svg?branch=master)](https://travis-ci.org/atlassian/oas3-chow-chow)

  [![npm](https://img.shields.io/npm/v/oas3-chow-chow.svg?style=flat)](https://www.npmjs.com/package/oas3-chow-chow)


  ## Notes


  If you are looking for framework specific middleware, you might want to look
  at following libraries that use oas3-chow-chow under the hood.


  [koa-oas3](https://github.com/atlassian/koa-oas3)

  [openapi3-middleware](https://github.com/naugtur/openapi3-middleware)


  ## Installation


  ```bash

  $ yarn add oas3-chow-chow

  $ # Or

  $ npm i oas3-chow-chow

  ```


  ## Usage


  ```typescript

  import ChowChow from "oas3-chow-chow";

  import * as fs from "fs";

  import * as yaml from "js-yaml";


  var doc = yaml.safeLoad(fs.readFileSync("./openapi.yml", "utf8"));

  const chow = new ChowChow(doc);


  chow.validateRequest("./books", {
    method: "post",
    query: {
      expand: ["document", "author"]
    },
    body: {
      name: "a nice book",
      author: "me me me"
    }
  });


  chow.validateResponse("./books", {
    method: "post",
    header: {
      "content-type": "application/json"
    },
    body: {
      name: "a nice book",
      author: "me me me"
    }
  });

  ```


  ## Config


  You could optionally provide configs to the constructor

  ```typescript

  const chow = new ChowChow(doc, {
    headerAjvOptions: {},
    cookieAjvOptions: {},
    pathAjvOptions: { coerceTypes: true },
    queryAjvOptions: { coerceTypes: 'array' },
    requestBodyAjvOptions: {},
    responseBodyAjvOptions: {},
  });

  ```


  * **headerAjvOptions**: Ajv options that pass to header ajv instance

  * **cookieAjvOptions**: Ajv options that pass to cookie ajv instance

  * **pathAjvOptions**: Ajv options that pass to path ajv instance, default `{
  coerceTypes: true }`

  * **queryAjvOptions**: Ajv options that pass to query ajv instance, default `{
  coerceTypes: 'array' }`

  * **requestBodyAjvOptions**: Ajv options that pass to request body ajv
  instance

  * **responseBodyAjvOptions**: Ajv options that pass to response body ajv
  instance
mrTimofey/vue-admin: "## What is it?\n\nThis is the last package you will ever need to build your custom dashboard or administrative panel. It includes:\n* AdminLTE (only styles)\n* Vue.js based ready-to-use out of the box SPA\n* Simple but flexible customization system\n* OpenAPI 3 (formerly known as Swagger) specification for a compatible server API implementation\n* Big variety of built-in field types\n* Big variety of built-in data display format types\n* Type-safe by design\n* Suitable for a fast prototyping\n\n## Why?\n\nI was so tired of looking for a robust solution for dashboards and administrative panels.\nFor they are many and still all of them are a piece of something bad.\nAnd I made this module with all the love my heart can give and I am confident you will feel that love after typing\n`npm i -S vue-admin-front` in the console.\n\n## Docs?\n\nYes, [click here](https://mr-timofey.gitbooks.io/vue-admin).\n\n## Demo?\n\n[Demo with Laravel 5.6 backend](http://admin.shit-free.space).\n\n## What about server solutions?\n\nOnly [PHP7.1/Laravel based solution](https://github.com/mrTimofey/laravel-admin-api) exists at the moment.\nMaking more of them will be very appreciated.\n[Read the docs](https://mr-timofey.gitbooks.io/vue-admin/server-api-prerequisities.html) for more info.\n\n## How to use?\n\nInstall:\n```bash\nnpm i -S vue-admin-front cross-env rimraf webpack-command\n```\n\nAdd this to package.json scripts:\n```json\n{\n\t\"admin:dev\": \"node node_modules/vue-admin-front/index.js\",\n\t\"admin:build\": \"rimraf public/admin-dist && cross-env NODE_ENV=production webpack --config node_modules/vue-admin-front/webpack.config.js\"\n}\n```\n\nUse `npm run admin:dev` to start dev server, `npm run admin:build` to make a static build within `public/admin-dist` directory.\n\nMore info [here](https://mr-timofey.gitbooks.io/vue-admin/quick-start.html).\n"
Microsoft/OpenAPI.NET.OData: >

  VSTS Build  | Status

  --------|---------

  Rolling | <img
  src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/410/badge"/>

  Nightly | <img
  src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/427/badge"/>


  # Convert OData to OpenAPI.NET [Preview]


  [**Disclaimer:This library is in a preview state. Feedback and contribution is
  welcome!**]


  ## Introduction


  The **Microsoft.OpenAPI.OData.Reader** library helps represent an OData
  service metadata as an OpenApi description. It converts
  [OData](http://www.odata.org)
  [CSDL](http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html),
  the XML representation of the Entity Data Model (EDM) describing an OData
  service into [Open API](https://github.com/OAI/OpenAPI-Specification) based on
  [OpenAPI.NET](http://aka.ms/openapi) object model.


  The conversion is based on the mapping doc from [OASIS OData OpenAPI
  v1.0](https://www.oasis-open.org/committees/document.php?document_id=61852&wg_abbrev=odata)
  and uses the following :


  1. Capabilities annotation

  2. Authorization annotation

  3. HttpRequest annotation

  4. Navigation property path

  5. Edm operation and operation import path


  ## Overview


  The image below is generic overview of how this library can convert the EDM
  model to an [OpenAPI.NET
  document](https://github.com/Microsoft/OpenAPI.NET/blob/master/src/Microsoft.OpenApi/Models/OpenApiDocument.cs)
  object.


  ![Convert OData CSDL to OpenAPI](docs/images/odata-2-openapi.png "Map ///
  OData CSDL --> OpenAPI.NET")


  For more information on the CSDL and Entity Data model, please refer to
  [http://www.odata.org/documentation](http://www.odata.org/documentation).

  For more information about the Open API object of model, please refer to
  [http://github.com/microsoft/OpenAPI.NET](http://github.com/microsoft/OpenAPI.NET)


  ## Sample code


  The following sample code illustrates the use of the library


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiDocument document = model.ConvertToOpenApi();
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  Or with the convert settings:


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiConvertSettings settings = new OpenApiConvertSettings
      {
          // configuration
      };
      OpenApiDocument document = model.ConvertToOpenApi(settings);
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  The `GetEdmModel()` method can load a model in 3 ways:


  1. Create the Edm model from scratch. For details refer [building a basic
  model](http://odata.github.io/odata.net/#02-01-build-basic-model)


  2. Load the Edm model from CSDL file. The following shows a code sample that
  loads a model from a csdl file.

      ```csharp
      public static IEdmModel GetEdmModel()
      {
          string csdlFilePath = @"c:\csdl.xml";
          string csdl = System.IO.File.ReadAllText(csdlFilePath);
          IEdmModel model = CsdlReader.Parse(XElement.Parse(csdl).CreateReader());
          return model;
      }
      ```

  3. Create the Edm model using Web API OData model builder. For details refer
  to the [web api model builder
  article](http://odata.github.io/WebApi/#02-01-model-builder-abstract)


  ## Nightly builds


  The nightly build process will upload a Nuget package for OpenAPI.OData.reader
  to [OpenAPIOData MyGet gallery](https://www.myget.org/gallery/openapiodata).


  To connect to OpenAPI.OData.reader feed, use
  [this](https://www.myget.org/F/openapiodata/api/v3/index.json) URL source.


  ## Nuget packages


  The OpenAPI.OData.reader nuget package is at:
  [https://www.nuget.org/packages/Microsoft.OpenApi.OData/](https://www.nuget.org/packages/Microsoft.OpenApi.OData)


  ---


  # Contributing


  This project welcomes contributions and suggestions.  Most contributions
  require you to agree to a

  Contributor License Agreement (CLA) declaring that you have the right to, and
  actually do, grant us

  the rights to use your contribution. For details, visit
  [https://cla.microsoft.com](https://cla.microsoft.com).


  When you submit a pull request, a CLA-bot will automatically determine whether
  you need to provide

  a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow
  the instructions

  provided by the bot. You will only need to do this once across all repos using
  our CLA.


  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/).

  For more information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or

  contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any
  additional questions or comments.
Mermade/openapi-lint-vscode: >
  # openapi-lint README


  This extension can be used to validate and
  [lint](https://en.wikipedia.org/wiki/Lint_(software)) OpenAPI 3.0.x documents,
  and convert between OpenAPI 2.0 and 3.0.0. It provides 11 Visual Studio Code
  commands:


  * OpenAPI Validate - which fully validates your OpenAPI document against the
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md)

  * OpenAPI Lint - which additionally applies a lightly-opinionated set of
  best-practices

  * OpenAPI Resolve and Validate - which pulls in external `$ref`s before
  validating

  * OpenAPI Resolve and Lint - which pulls in external `$ref`s before linting

  * OpenAPI Resolve (Bundle) - which resolves external `$ref`s to a new window

  * OpenAPI 2.0 to 3.0.0 (YAML) - which converts the current OpenAPI 2.0
  document to 3.0.0 in YAML

  * OpenAPI 2.0 to 3.0.0 (JSON) - which converts the current OpenAPI 2.0
  document to 3.0.0 in JSON

  * OpenAPI 2.0 to 3.0.0 (YAML/Resolved) - like the above but resolving external
  `$ref`s

  * OpenAPI 2.0 to 3.0.0 (JSON/Resolved) - like the above but resolving external
  `$ref`s

  * OpenAPI to JSON - which simply translates the current document to JSON

  * OpenAPI to YAML - which simply translates the current document to YAML


  The validator enforces semantic restrictions which cannot be expressed by the
  JSON Schema which drives the intellisense features, so it will pick up on many
  more errors.


  The linter applies a lightly opinionated set of 'best practices' to your API
  document, making it complete and comprehensive, as opposed to merely minimally
  valid.


  The best documentation currently for the linter rules is that of
  [Speccy](http://speccy.io/rules/1-rulesets), which shares code with this
  project. The linter [rules
  format](https://mermade.github.io/oas-kit/linter-rules.html) is also
  documented.


  ## Features


  * Validation using
  [oas-validator](https://github.com/Mermade/oas-kit/tree/master/packages/oas-validator)
  from [OAS-Kit](https://mermade.github.io/oas-kit/)

  * Linting using
  [oas-linter](https://github.com/Mermade/oas-kit/tree/master/packages/oas-linter)
  also from OAS-Kit

  * Resolution using
  [oas-resolver](https://github.com/Mermade/oas-kit/tree/master/packages/oas-resolver)
  also from OAS-Kit

  * Conversion using
  [swagger2openapi](https://github.com/Mermade/oas-kit/tree/master/packages/swagger2openapi)
  also from OAS-Kit

  * OAS v3 intellisense for files named `*openapi.json`, `*openapi.yaml`,
  `*openapi.yml`, `*oas3.json`, `*oas3.yaml`, `*oas3.yml`

  * OAS v2 intellisense for files named `*swagger.json`, `*swagger.yaml`,
  `*swagger.yml`, `*oas2.json`, `*oas2.yaml`, `*oas2.yml`

  * Conversion between JSON and YAML

  * Snippets (minimal valid openapi/swagger JSON and YAML documents)

  * AsyncAPI v1.2.0 intellisense for files named `*asyncapi.json`,
  `*asyncapi.yaml`, `*asyncapi.yml`


  ## Coming soon


  * More snippets

  * Integration with [APIs.guru OpenAPI
  directory](https://github.com/apis-guru/openapi-directory)

  * Integration with [APIs.guru AsyncAPI
  directory](https://github.com/apis-guru/asyncapi-directory)

  * Extract default linter rules to new tab to allow saving as overrides


  ## Screenshots


  ![screenshot](./images/vscode-lint.png)


  ## Requirements


  The extension should work as-is


  ## Extension Settings


  No configuration is currently possible or needed.


  ## Known Issues


  * Messages need better formatting

  * Jump-to-error functionality not implemented yet

  * No way to override/amend linter rules yet


  ## Credits


  * Icon based upon [Icons8](http://icons8.com/)


  ## Release Notes


  See the [CHANGELOG](./CHANGELOG.md)
tavis-software/Tavis.OpenApi: >
  # Tavis.OpenAPI


  **Note: This library has been superceded by
  [Microsoft.OpenAPI.NET](https://github.com/Microsoft/OpenAPI.NET).  I don't
  expect any further development on this project.**


  This library is a parser for the [OpenAPI
  Specification](https://openapis.org/).  The model is based around OpenAPI 3.0
  specification.


  ## Simple Example


  ```csharp
              var parsingContext = OpenApiParser.Parse(@"
                      openapi: 3.0.0
                      info:
                          title: A simple inline example
                          version: 1.0.0
                      paths:
                        /api/home:
                          get:
                            responses:
                              200:
                                description: A home document
                      ");

              Assert.Equal("3.0.0", parsingContext.OpenApiDoc.Version);
              Assert.Equal(0, parsingContext.ParsingErrors.Count());
  ```


  ## Goals


  - Import OpenAPI V3 definitions in both YAML and JSON formats.

  - Export OpenAPI definition in YAML format

  - Import OpenAPI V2 definitions

  - Provide comprehensive syntax and semantic error reporting 

  - Enable constructing of OpenAPI descriptions via a document object model
rafaelcaricio/sticker: >
  .. image::
  https://github.com/rafaelcaricio/sticker/raw/master/docs/images/sticker_logo.png
      :align: center
      :alt: Sticker
      :target: https://github.com/rafaelcaricio/sticker

  |


  .. image:: https://img.shields.io/pypi/v/sticker.svg
      :target: https://pypi.python.org/pypi/sticker

  .. image:: https://img.shields.io/pypi/l/sticker.svg
      :target: https://pypi.python.org/pypi/sticker

  .. image:: https://img.shields.io/pypi/pyversions/sticker.svg
      :target: https://pypi.python.org/pypi/sticker

  .. image::
  https://img.shields.io/github/contributors/rafaelcaricio/sticker.svg
      :target: https://github.com/rafaelcaricio/sticker/graphs/contributors

  Write boilerplate-free Python functions and use them as your API handlers.

  Sticker allows you to choose Flask, bottle.py, Sanic, or Tornado as your

  application runtime.


  **Highlights**:


  * Community created and maintained

  * Support for `OpenAPI 3.0 <https://swagger.io/specification/>`_

  * Multi-framework support: `Flask <http://flask.pocoo.org/>`_, `bottle.py
  <https://github.com/bottlepy/bottle>`_, `Sanic
  <https://github.com/channelcat/sanic>`_, and `Tornado
  <http://www.tornadoweb.org/en/stable/>`_

  * Support for **pure Python handlers** (no boilerplate code)


  It's Easy to Write

  ==================


  You need a little bit of Python.


  .. code-block:: python

      def say_hello(params):
          return {"contents": "Hello World!"}

  Plus bits of your API description.


  .. code-block:: YAML

      openapi: "3.0.0"
      paths:
        /:
          get:
            operationId: hello.say_hello

  Now the fun part, you choose which web framework you want to use.


  Run with Flask:


  .. code-block:: python

      from sticker import FlaskAPI
      api = FlaskAPI('hello.yml')
      api.get_app(__name__).run()

  Run with Bottle.py:


  .. code-block:: python

      from sticker import BottleAPI
      api = BottleAPI('hello.yml')
      api.run()

  Run with Sanic:


  .. code-block:: python

      from sticker import SanicAPI
      api = SanicAPI('hello.yml')
      api.get_app(__name__).run()

  Run with Tornado:


  .. code-block:: python

      from sticker import TornadoAPI
      import tornado.ioloop
      api = TornadoAPI('hello.yml')
      api.get_app().listen(8888)
      tornado.ioloop.IOLoop.current().start()

  The framework setup, validation, types conversion, and mocking is handled at
  runtime by Sticker.


  ✨


  Installation

  ============


  Sticker is published at PyPI, so you can use ``pip`` to install:


  .. code-block:: bash

      $ pip install sticker

  Requirements

  ============


  Sticker was developed for **Python >=3.6** and **OpenAPI 3.0**. Support for
  Python 2.7 is not present nor planned for this project.


  Documentation

  =============


  Sticker is a flexible metaframework for Web API development and execution. The
  OpenAPI 3.0 standard is used as

  description format for Sticker powered APIs. You provide the API specification
  and choose one of the

  Sticker's runtimes to have a webserver up and running.


  In this document we will describe a few different ways to write code that
  works well with Sticker.


  Pure Python Handlers

  --------------------


  Sticker supports the use of pure Python functions as handlers. Your code will
  be free of any framework

  specific boilerplate code, including Sticker's itself. This allows you to swap
  between different frameworks

  as you wish. Sticker will take care of putting together your code, your API,
  and the framework you choose.


  .. code-block:: python

      def myhandler(params):
          return {
              "content": f"Hello {params.get("name", "World")}!",
              "status": 200
          }

  Writing tests for pure Python handles is easy and also

  free of boilerplate code.


  .. code-block:: python

      def test_myhandler():
          params = {
              "name": "John Doe"
          }
          response = myhandler(params)
          assert response["content"] == "Hello John Doe!"

  As you could see in the example above, no imports from Sticker were necessary
  to define the API handler function.

  This is only possible because Sticker expects your handlers to follow a code
  convention.


  Anatomy Of An API Handler Function

  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


  Write this part.


  Responses

  ^^^^^^^^^


  API handlers are expected to return a Python dictionary (``dict``) object. The
  returned dictionary defines how a response

  will look like. All keys in the dictionary are optional. The expected keys are
  described in the table bellow.


  =========== ======================== ===========

  Key         Type                     Description

  =========== ======================== ===========

  content     str                      Body of HTTP request. No
  treatment/parsing of this value is done. The value is passed directly to the
  chosen framework.

  json        Union[dict, List[dict]]  JSON value to be used in the body of the
  request. This is a shortcut to having the header "Content-Type:
  application/json" and serializing this value using the most common way done by
  the chosen framework.

  file        Union[IO[AnyStr], str]   Data to be returned as byte stream. This
  is a shortcut for having the header "Content-Type: application/octet-stream".
  Uses the most common way to stream files with the chosen framework.

  redirect    str                      The path or full URL to be redirected.
  This is a shortcut for having the header "Location:" with HTTP status `301`.

  status      int                      The HTTP status code to be used in the
  response. This value overrides any shortcut default status code.

  headers     Dict[str, str]           The HTTP headers to be used in the
  response. This value is merged with the shortcut values with priority.

  =========== ======================== ===========



  We have exposed here some examples of using different configurations of the
  ``dict`` we've defined above to describe the

  HTTP response of API handlers. The actual HTTP response value generated will
  vary depending on the framework chosen as

  runtime. The examples are a minimal illustration of what to expect to be the
  HTTP response.


  The "content" key can be used when it's desired to return a "Hello world!"
  string with status ``200``.


  .. code-block:: python

      def say_hello(params):
          return {"content": "Hello world!"}

  Results in the HTTP response similar to:


  .. code-block::

      HTTP/1.1 200 OK
      Content-Type: text/plain

      Hello world!

  The "json" key can be used when desired to return an JSON response with status
  ``201``.


  .. code-block:: python

      def create(params):
          data = {
              "id": "uhHuehuE",
              "value": "something"
          }
          return {"json": data, "status": 201}

  The HTTP response generated will be similar to:


  .. code-block::

      HTTP/1.1 201 Created
      Content-Type: application/json

      {"id":"uhHuehuE","value":"something"}

  The "file" key is used to return file contents.


  .. code-block:: python

      def homepage(params):
          return {
              "file": open('templates/home.html', 'r'),
              "headers": {
                  "Content-Type": "text/html"
              }
          }

  The HTTP response will be similar to:


  .. code-block::

      HTTP/1.1 200 OK
      Content-Type: text/html

      <html><title>My homepage</title><body><h1>Welcome!</h1></body></html>

  When necessary to redirect request, the "redirect" key can be used.


  .. code-block:: python

      def old_endpoint(params):
          return {'redirect': '/new-path'}

  The HTTP response will be similar to:


  .. code-block::

      HTTP/1.1 301 Moved Permanently
      Location: https://example.com/new-path

  The usage of keys "status" and "headers" were shown in the previous examples.
  The "status" and "headers" keys, when set,

  override the values set by default when using the shortcut keys ("json",
  "file", and "redirect").


  Error Handling

  --------------


  Sticker expects you to define the error format to be returned by your API. A
  error handler is configurable,

  and called every time validation for the endpoint fails.


  .. code-block:: python

      def error_handler(error):
          return {
              "content": {
                  "error": error["message"]
              },
              "headers": {
                  "Content-Type": "application/json"
              },
              "status_code": 400
          }

  Developing

  ==========


  We follow `Semantic Versioning <https://semver.org/spec/v2.0.0.html>`_.


  Contributing

  ============


  Sticker is developed under the `Apache 2.0 license
  <https://github.com/rafaelcaricio/sticker/blob/master/LICENSE>`_

  and is publicly available to everyone. We are happy to accept contributions.


  How to Contribute

  -----------------


  #. Check for open issues or open a fresh issue to start a discussion around a
  feature idea or a bug. There is a `Good First Issue`_ tag for issues that
  should be ideal for people who are not very familiar with the codebase yet.

  #. Fork `the repository`_ on GitHub to start making your changes to the
  **master** branch (or branch off of it).

  #. Write a test which shows that the bug was fixed or that the feature works
  as expected.

  #. Send a pull request and bug the maintainer until it gets merged and
  published. :) Make sure to add yourself to AUTHORS_.


  .. _`the repository`: https://github.com/rafaelcaricio/sticker

  .. _AUTHORS: https://github.com/rafaelcaricio/sticker/blob/master/AUTHORS.rst

  .. _Good First Issue:
  https://github.com/rafaelcaricio/sticker/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22
cdimascio/kotlin-spring-mvc-template: >
  # kotlin-spring-mvc-template


  Spring 5 MVC template with *Kotlin* and *OpenAPI 3.0*. (Also Supports *Swagger
  2.0*)


  Features automatic request/response validation and interactive API doc


  <p align="left">

  <img
  src="https://raw.githubusercontent.com/cdimascio/kotlin-spring-mvc-template/master/assets/spring-mvc-openapi.png"
  width="600"/>

  </p>


  **Features**:


  - Automatic request and response validation via atlassian [OpenApi
  3.0](https://swagger.io/docs/specification/about/)

  - Automatic documentation generation via [Swagger
  UI](https://swagger.io/tools/swagger-ui/)

  - 12 factor compliant configuration via
  [java-dotenv](https://github.com/cdimascio/java-dotenv)

  - Automatic code formatting and linting via [ktlint](https://ktlint.github.io)

  - Fully operational sample REST API

  - API integration tests with [Unirest](http://unirest.io/java.html) REST
  client

  - Simple HTTP errors via
  [japi-errors](https://github.com/cdimascio/japi-errors)

  - Dockerfile


  ## Setup


  - Clone this repo

  - copy `.env.template` to `src/main/resources/.env`




  ## Build


  ```shell

  ./gradlew build

  ```


  ## Format/Lint 


  ```shell

  ./gradlew lintKotlin # see lint errors

  ./gradlew formatKotlin # attempt to automatically fix lint errors

  ```


  ## Run

  ```shell

  ./gradlew bootRun

  ```


  ## Test


  ```shell

  ./gradlew test

  ```


  ## Package / Dist


  ```shell

  ./gradlew jar


  # Run the dist

  java -jar ./build/libs/example-service-1.0.0.jar  

  ```


  ## Try It


  Navigate to
  [http://localhost:8080/api_explorer/index.html](http://localhost:8080/api_explorer/index.html)


  ## Validate Example



  ```shell

  curl -X POST "http://localhost:8080/users" -H "accept: application/json" -H
  "Content-Type: application/json" -d "{\"me\":\"carmine\"}"


  {
    "error": " Object instance has properties which are not allowed by the schema: [\"me\"]",
    "code": 400
  }

  ```

  ## Interactive Api doc


  ![](https://raw.githubusercontent.com/cdimascio/kotlin-spring-mvc-template/master/assets/swagger-ui.png)


  ## License

  Apache 2.0
wzshiming/gen: >
  # Gen - Tools for generating source code for microservices


  Just write normal functions, and Gen generates efficient routing source code
  and documentation for it

  Because the source code is generated, none of this affects runtime
  performance  

  The differences caused by each change in the tool are shown directly in the
  generated source code  

  generating clients is also supported  


  [![Build
  Status](https://travis-ci.org/wzshiming/gen.svg?branch=master)](https://travis-ci.org/wzshiming/gen)

  [![Go Report
  Card](https://goreportcard.com/badge/github.com/wzshiming/gen)](https://goreportcard.com/report/github.com/wzshiming/gen)

  [![GitHub
  license](https://img.shields.io/github/license/wzshiming/gen.svg)](https://github.com/wzshiming/gen/blob/master/LICENSE)


  - [English](https://github.com/wzshiming/gen/blob/master/README.md)

  - [简体中文](https://github.com/wzshiming/gen/blob/master/README_cn.md)


  ## Examples


  1. Install gen tool `go get -v github.com/wzshiming/gen/cmd/gen`

  2. Add gen tool to $PATH

  3. Start it `gen run github.com/wzshiming/gen-examples/service/...`

  4. Open
  [http://127.0.0.1:8080/swagger/?url=./openapi.json#](http://127.0.0.1:8080/swagger/?url=./openapi.json#)
  with your browser


  [Examples](https://github.com/wzshiming/gen-examples/)  


  Or try to quickly build services from scratch


  1. Make a directory `mkdir -p $(go env GOPATH)/src/gentest`

  2. Change directory `cd $(go env GOPATH)/src/gentest/`

  3. Define models

  ``` shell

  cat > models.go <<EOF

  package gentest

  type Gentest struct {
      Name string \`json:"name"\`
      Age  int    \`json:"age"\`
  }

  EOF

  ```

  4. Generated from CRUD template `gen crud -t mock -n Gentest`

  5. Start it `gen run gentest`


  ## Supported


  - [X] Generate documentation
    - [X] [OpenAPI 3](https://github.com/OAI/OpenAPI-Style-Guide)
    - [X] [SwaggerUI](https://github.com/swagger-api/swagger-ui)
    - [X] [ReDoc](https://github.com/Rebilly/ReDoc)
  - [X] RESTful
    - [X] Generate Go router
      - [X] Security
        - [X] apiKey
        - [X] http
          - [X] basic
          - [ ] bearer
        - [ ] oauth2
        - [ ] openIdConnet
      - [X] Content
        - [X] Query
        - [X] Path
        - [X] Header
        - [X] Cookie
        - [X] Body
          - [X] JSON
          - [ ] XML
          - [ ] Formdata
            - [X] File
            - [ ] Value
          - [ ] URLEncode
    - [X] Generate Go client
      - [X] Security
        - [X] apiKey
        - [X] http
          - [X] basic
          - [X] bearer
        - [ ] oauth2
        - [ ] openIdConnet
      - [X] Content
        - [X] Query
        - [X] Path
        - [X] Header
        - [X] Cookie
        - [X] Body
          - [X] JSON
          - [X] XML
          - [X] Formdata
            - [X] File
            - [X] Value
          - [ ] URLEncode
    - [Javascript client](https://github.com/swagger-api/swagger-js)
    - [Other language client](https://github.com/swagger-api/swagger-codegen/tree/3.0.0)
  - [ ] gRPC & Proto3


  ## License


  Pouch is licensed under the MIT License. See
  [LICENSE](https://github.com/wzshiming/gen/blob/master/LICENSE) for the full
  license text.
technocreatives/openapi-eller: >
  <p align="center">
    <img width="256" height="256" src="https://user-images.githubusercontent.com/279099/39677264-396f9568-5178-11e8-9afc-b845fdd2218f.png" alt="Eller logo"/>
  </p>


  [![Build
  Status](https://travis-ci.org/technocreatives/openapi-eller.svg?branch=master)](https://travis-ci.org/technocreatives/openapi-eller)


  # OpenAPI Generator, eller?


  Generate OpenAPI v3 clients and servers from the command line with nothing
  more

  than Node.js.



  Just run:


  ```

  npm i -g openapi-eller

  ```


  See `openapi-eller --help` for usage details.


  - [Documentation](https://technocreatives.github.io/openapi-eller)


  ---


  Looking for an easy way to generate a mock server from an OpenAPI v3 spec?
  We've got you covered.


  Try
  [openapi-mock-eller](https://github.com/technocreatives/openapi-mock-eller)
  today!


  ---


  **PLEASE NOTE: This codebase is still a work-in-progress, but it does produce
  production-grade code

  for those targets listed as supported. Behaviour is subject to change between
  variants until 1.0.0.**


  ## Features


  - Supports* the full OpenAPI v3 specification

  - Uses an interceptor pattern for handling security schemas in clients

  - OAuth 2 clients comply with [RFC6749](https://tools.ietf.org/html/rfc6749)
  and 
    [RFC6750](https://tools.ietf.org/html/rfc6750) (Bearer Token Usage)
  - Targets can be configured with a JSON or YAML file for simple, reproducable
  generations

  - Easily extensible Handlebars templates for core structure of files, with
  TypeScript 
    target-specific code for handling with pointy bits

  ## Supported targets


  - Clients:
    - Kotlin (Android)
    - Swift
    - TypeScript
  - Servers:
    - ASP.NET (MVC Framework 4.5)

  There are other targets in the tree, though they are a work-in-progress.


  ## Roadmap to 0.4


  - [ ] Generating platform-conformant API documentation

  - [ ] Handle returning headers, status codes and raw response objects where
  necessary

  - [ ] Handle mandatory configuration for targets

  - [ ] Generate documentation for target configuration


  ## Users


  - The Techno Creatives


  ## Contributing


  We happily accept contributions! We simply ask that you please make sure that
  any dependencies 

  of your targets use a permissive license compatible with the ISC license
  (which means no AGPL or 

  GPL dependencies, unfortunately.)


  If you're unsure, open an issue and we can help you out!


  ## License


  ISC license - see LICENSE file.


  Any code outputted by this generator is the license of your choice.
go-courier/oas: >+
  # OpenAPI Spec Builder


  [![GoDoc
  Widget](https://godoc.org/github.com/go-courier/oas?status.svg)](https://godoc.org/github.com/go-courier/oas)

  [![Build
  Status](https://travis-ci.org/go-courier/oas.svg?branch=master)](https://travis-ci.org/go-courier/oas)

  [![codecov](https://codecov.io/gh/go-courier/oas/branch/master/graph/badge.svg)](https://codecov.io/gh/go-courier/oas)

  [![Go Report
  Card](https://goreportcard.com/badge/github.com/go-courier/oas)](https://goreportcard.com/report/github.com/go-courier/oas)



  [OpenAPI Spec](https://swagger.io/specification) 3.0.1 builder for Golang


  ## Usage


  ```bash

  go get github.com/go-courier/oas

  ```

koumoul-dev/data-fair: >
  # <img alt="Data FAIR logo"
  src="https://cdn.rawgit.com/koumoul-dev/data-fair/master/public/assets/logo.svg"
  width="40"> Data FAIR


  *Findable, Accessible, Interoperable and Reusable Data*


  [![Build
  Status](https://travis-ci.org/koumoul-dev/data-fair.svg?branch=master)](https://travis-ci.org/koumoul-dev/data-fair)

  [![Coverage
  Status](https://coveralls.io/repos/github/koumoul-dev/data-fair/badge.svg?branch=master)](https://coveralls.io/github/koumoul-dev/data-fair?branch=master)


  [Visit documentation website
  (french)](https://koumoul-dev.github.io/data-fair/)


  ## Development environment


  This project uses the following stack : Mongo, ElasticSearch, NodeJS, Express,
  VueJS, NUXT and Docker. The primary language used is javascript with the ES7
  syntax.


  We use [eslint]() both as a linter an a formatter (thanks to its fix mode). It
  also works on .vue files thanks to
  [vue-eslint-plugin](https://github.com/vuejs/eslint-plugin-vue). We strongly
  suggest integrating these tools in your editor, this
  [article](https://alligator.io/vuejs/vue-eslint-plugin/) can be useful to
  configure vue-eslint-plugin in your editor.


  Install dependencies, run bundler and launch service dependencies with
  docker-compose:

      npm install
      npm run build
      docker-compose up -d

  Run the 2 development servers with these commands et separate shells:

      npm run dev-server
      npm run dev-client

  When both servers are ready, go to
  [http://localhost:5600](http://localhost:5600) and chose an account in
  `test/resources/users.json` to login with its email.


  ## Embedded documentation


  Documentation is maintained in ./doc as a small separate nuxt project. Its
  content is built and pushed on gitlab-pages by the Travis build.


  The pages are also linked to the main nuxt project, so that any Simple
  Directory instance embeds its full documentation.


  Run the documentation development server:


  ```

  npm install

  npm run doc

  ```


  Then open http://localhost:3000/data-fair/
Mermade/openapi3-examples: >-
  {"message":"Not
  Found","documentation_url":"https://developer.github.com/v3/repos/contents/#get-the-readme"}
Rots/n26-api: >+
  # n26-api

  Unofficial N26 API documentation


  It is a collection of observed API calls and methods. No guarantees are
  provided that they are complete, correct or that they are still functioning as
  specified.


  The OpenAPI specification is provided in the `openapi.yml` file.

  For testing the spec, it is also published at
  https://app.swaggerhub.com/apis/Rots/N26



  # Client wrapper generation


  The OpenAPI specification allows for generating client wrappers to access the
  data.


  Example:


  ```

  docker run --rm -v ${PWD}:/local korchasa/swagger-codegen-openapi generate -i
  /local/openapi.yml -l java -o /local/out/java

  ```


  # Security warning!


  Do not type in your bank credentials to an untrusted software!

  Once you have given full access to a third party, they can indefinitely "keep
  the bank API session alive" by refreshing their access token and make
  transactions on your behalf (and change any details on the banking app).

  N26 haven't enabled a way to revoke access of third party apps (as far as I
  know, you can't securely sign in to the bank without giving your password in
  plain text to the third party).


  If you think that your credentials may have been compromised, immidiately
  change your login password in the official N26 app and notify the bank of any
  relevant information.


  # Other known software for N26


  * https://github.com/guitmz/n26 Go API

  * https://github.com/PierrickP/n26 JSON API

isa-group/oas-tools: "# oas-tools\n\n[![Build Status](https://travis-ci.org/isa-group/oas-tools.svg?branch=master)](https://travis-ci.org/isa-group/oas-tools)\n[![dependencies Status](https://david-dm.org/isa-group/oas-tools/status.svg)](https://david-dm.org/isa-group/oas-tools)\n[![codecov](https://codecov.io/gh/isa-group/oas-tools/branch/master/graph/badge.svg)](https://codecov.io/gh/isa-group/oas-tools)\n[![Known Vulnerabilities](https://snyk.io/test/github/isa-group/oas-tools/badge.svg?targetFile=package.json)](https://snyk.io/test/github/isa-group/oas-tools?targetFile=package.json)\n[![Greenkeeper badge](https://badges.greenkeeper.io/isa-group/oas-tools.svg)](https://greenkeeper.io/)\n\n[![NPM](https://nodei.co/npm/oas-tools.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/oas-tools/)\n\nThis module supports the management of RESTfull APIs defined with OpenAPI 3.0 Specs over express servers.\n\nIf you are creating an API from scratch we recommend you to take a look at [oas-generator](https://github.com/isa-group/oas-generator)\n\nWe have a 3 min. tutorial:\n\n<a href=\"https://youtu.be/1R0K2smpBt0\" alt=\"oas-tools (v2.0.3) introduction - Click to Watch!\"><img src=\"https://i.imgur.com/DFJx5LK.jpg\" align=\"center\" width=\"300\" alt=\"oas-tools introduction (v2.0.3)- Click to Watch!\"></a>\n\n## 1. Install oas-tools\n```bash\nnpm install oas-tools --save\n```\n\n## 2. Use oas-tools\n\nRequire the installed module in your app's index file, just like:\n\n```javascript\nvar oasTools = require('oas-tools');\n```\n\nThe module oas-tools requires the specification file of the NodeJS application, therefore load it as follow using fs and jsyaml:\n\n```javascript\nvar jsyaml = require('js-yaml');\nvar fs = require('fs');\n\nvar spec = fs.readFileSync(path.join('path/to/spec/file'), 'utf8');\nvar oasDoc = jsyaml.safeLoad(spec);\n```\n\n[Note: you might want to use the module ‘path’ for loading the specification file, that way your app will work on any OS]\n\n\n__It is also possible to set configuration variables, these are them:__\n\n| Name\t| Type\t| Explanation / Values |\n| ------------- | ------------- | ------------- |\n|`logLevel` | `String` | Possible values from less to more level of verbosity are: error, warning, custom, info and debug. Ignored if `customLogger` is used. Default is info. |\n|`logFile` | `String` | Logs file path. Ignored if `customLogger` is used. |\n|`customLogger` | `Object` | Replaces the included logger with the one specified here, so that you can reuse your own logger. `logLevel` and `logFile` will be ignored if this variable is used. Null by default. |\n|`controllers` | `String` | Controllers location path. |\n|`checkControllers` | `Boolean` | Checks if controllers exist for all specified methods. True by default. |\n|`strict`\t| `Boolean` | Indicates whether validation must stop the request process if errors were found when validating according to specification file. false by default. |\n|`router`\t| `Boolean` | Indicates whether router middleware should be used. True by default. |\n|`validator` | `Boolean` | Indicates whether validator middleware should be used. True by default. |\n|`docs` | `Object` | Settings used for Swagger UI, detailed in the following four rows. If you do not want to use the default values, you must specify values for all four settings, even if you only want to change one of them. |\n|`docs.apiDocs` | `String` | Indicates the path where the OAS specification will be available. `/api-docs` by default. |\n|`docs.apiDocsPrefix` | `String` | Indicates a prefix to be prepended to `docs.apiDocs`. Empty by default. |\n|`docs.swaggerUi` | `String` | Indicates the path where Swagger UI will be available. Ignored if `docs.apiDocs` is not set. `/docs` by default. |\n|`docs.swaggerUiPrefix` | `String` | Indicates a prefix to be prepended to `docs.swaggerUi`. Empty by default. |\n|`oasSecurity` | `Boolean` | Indicates whether security components defined in the spec file will be handled based on `securityFile` settings. `securityFile` will be ignored if this is set to false. Refer to [oasSecurity](#2-oassecurity) for more information. False by default. |\n|`securityFile` | `Object`| Defines the settings that will be used to handle security. Ignored if `oasSecurity` is set to false. Null by default. |\n|`oasAuth` | `Boolean` | Indicates whether authorization will be automatically handled based on `grantsFile` settings. `grantsFile` will be ignored if this is set to false. Refer to [oasAuth](#3-oasauth) for more information. False by default. |\n|`grantsFile` | `Object` | Defines the settings that will be use to handle automatic authorization. Ignored if `oasAuth` is set to false. Null by default. |\n|`ignoreUnknownFormats` | `Boolean`\t| Indicates whether z-schema validator must ignore unknown formats when validating requests and responses. True by default. |\n\nFor setting these variables you can use the function configure and pass to it either a JavaScript object or a yaml/json file containing such object.\n\n```javascript\nvar options_object = {\n  controllers: '/path/to/controllers',\n  checkControllers: true,\n  loglevel: 'info',\n  logfile: '/path/to/logs/file',\n  // customLogger: myLogger,\n  strict: false,\n  router: true,\n  validator: true,\n  docs: {\n    apiDocs: '/api-docs',\n    apiDocsPrefix: '',\n    swaggerUi: '/docs',\n    swaggerUiPrefix: ''\n  }\n  oasSecurity: true,\n  securityFile: {\n    // your security settings\n  },\n  oasAuth: true,\n  grantsFile: {\n    // your authorization settings\n  },\n  ignoreUnknownFormats: true\n};\n\noasTools.configure(options_object);\n```\n\n[Note: it is not mandatory to set all configuration variables when using this functions, oas-tools will set the other ones by default]\n\n\nFinally for initializing the middlewares right before your app is up and running, the function ‘initialize’ must be used. It receives the specification file, the express server object and a callback function where you must start your server:\n\n```javascript\noasTools.initialize(oasDoc, app, function() {\n  http.createServer(app).listen(8080, function() {\n    console.log(\"App up and running!\");\n  });\n});\n```\n\n### 1. Migrate from swagger-tools to oas-tools\n\nOas-tools works with Express while swagger-tools works with Connect, therefore in order to use your swagger-codegen generated NodeJS server with oas-tools you have to leave connect behind and use express and an openapi version 3 file. This can be easily achievable by following just 4 simple steps:\n\n\n__1.Change from connect to express:__\n\nOas-tools needs express module to work, connect doesn’t have the needed features.\nTherefore you must install express:\n\n```bash\nnpm install express --save\n```\n\nThen change the require on your app’s index file, get rid of connect!\n\n```javascript\nvar express = require('express');\nvar app = express();\n```\n\n\n__2.Require oas-tools instead of swagger-tools:__\n\nChange from swagger-tools to oas-tools by just installing it and modifying the require:\n\n```bash\nnpm install oas-tools --save\n```\n\n```javascript\nvar swaggerTools = require('oas-tools');\n```\n\n\n __3.\tConvert your specification file from version 2 to version 3:__\n\nAs you may know oas-tools works only with the version 3 of the specification, therefore you should update you specification file.\nUse [this tool](https://mermade.org.uk/openapi-converter) to do so. Once you get the translation simply copy-past it to you former specification file.\n\n[Note: Minor adjustment on the translated specification may be required. Validate it using [swagger validator](https://editor.swagger.io//?_ga=2.51587887.728712022.1527179832-1439038723.1495297764#/) ]\n\n __4.\tProvide express server object to initialize method:__\n\nFinally give the server object to oas-tools. It needs it to manage routes the right way. Just place it as a second parameter for the initializeMiddleware function.\n\n```javascript\nswaggerTools.initializeMiddleware(swaggerDoc, app, function(middleware) {\n  // Configuration of usage of swagger middlewares with app.use()\n  ...\n\n  // Start the server\n  ...\n});\n```\n\n__5.\tAdd name property to request bodies:__\n\nOpenAPI Specification version 3 defines request's body in a different way, it is not a parameter as it is in Swagger version 2. Now requests bodies are defined in a section 'requestBody' which doesn't have name property, therefore it needs this property to work with your swagger-codegen generated controllers. Simply add to each requestBody secction the property 'x-name:' and the name of the resource. Check out this example:\n\n```yaml\npost:\n  summary: Create a pet\n  operationId: createPets\n  tags:\n    - pets\n  requestBody:\n    description: Pet to add to the store\n    x-name: pet\n    required: true\n    content:\n      application/json:\n        schema:\n          $ref: '#/components/schemas/Pet'\n```\n\n__6.\t(optional) use `multer` for binary uploads:__\n\nThe default middleware for handling file uploads in `express` via `multipart/form-data` is [`multer`](https://github.com/expressjs/multer). Use it in addition to the json body parser when initializing the server:\n```js \nconst bodyParser = require('body-parser');\nconst multer = require('multer');\nconst upload = multer();\n\nconst app = express();\napp.use(bodyParser.json({\n  strict: false\n}));\napp.use(upload.any());\n``` \n\nAlso make sure that the application consuming the openAPI server sends the file input form name according to the openAPI spec:\n```yaml\n/endPoint:\n    post:\n      requestBody:\n        required: true\n        x-name: endPointPost\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              required:\n                - file\n                - id\n                - name\n              properties:\n                file: # <- this is the form field name that needs to be present in the POST payload\n                  type: string\n                  format: binary\n                  description: a binary file uploaded via openAPI spec\n                id:\n                  type: string # it's a form field, so will always be a string\n                name:\n                  type: string\n```\n\n\nOnce you have done all this, leave the rest the way it is and just run your appliaction with ‘node index.js’ or any other command you have specified at your package.json for running the application.\n\n## 2. oasSecurity\n\nThe configuration variables `oasSecurity` and `securityFile` allow the use of handlers to manage authentication. This works similarly to the swagger-security middleware found in [swagger-tools](https://github.com/apigee-127/swagger-tools). In fact, most of our code is reused from that same middleware. We have only adapted it to work with OAS 3.0 and made some changes to allow automatic validation of JWTs (more on that later).\n\nTo start using oasSecurity, you should include some [security schemes](https://swagger.io/docs/specification/authentication/) in your specification file. For example, to define a scheme named Bearer that will use JWTs:\n\n```yaml\ncomponents:\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n```\n\nThen you need to bind the different schemes to your endpoints. You can bind a scheme to the whole API, or to specific paths and methods. Refer to the previous link for more information.\n\nNow you need to define the handlers that will take care of the validation of the requests made to your API. To do this, simply create a function that takes the express req object, the security scheme, the value that will be validated, and a callback as inputs. Inside this function, perform all the checks and validations that you need, and finally call the callback function. Following the previous example, if we want to validate a JWT signed with the key 'secretKey' and check that the issuer is 'ISA Auth', we would define the following function:\n\n```javascript\nvar jwt = require('jsonwebtoken');\n\nfunction verifyToken(req, secDef, token, next) {\n  const bearerRegex = /^Bearer\\s/;\n  \n  if (token && bearerRegex.test(token)) {\n    var newToken = token.replace(bearerRegex, '');\n    jwt.verify(newToken, 'secretKey',\n      {\n        issuer: 'ISA Auth'\n      },\n      (error, decoded) => {\n        if (error === null && decoded) {\n          return next();\n        }\n        return next(req.res.sendStatus(403));\n      }\n    );\n  } else {\n    return next(req.res.sendStatus(403));\n  }\n}\n```\n\nFinally, you must link the defined functions to their corresponding security schemes. In order to do that, you need to pass an object to the `securityFile` configuration variable containing these relationships. For example, to specify that our `verifyToken` function should be used to handle our previously defined Bearer scheme:\n\n```javascript\noasTools.configure({\n  // other configuration variables\n  oasSecurity: true,\n  securityFile: {\n    Bearer: verifyToken\n  }\n});\n```\n\nAfter following these steps, your validating function will be executed each time a request to any of the endpoints you applied the corresponding security scheme to is made. Please note that any schemes without a linked function will be ignored, except for the ones based on JWTs where configuration is included in the specification file (explained later).\n\nMoreover, since JWT ([JSON Web Token](https://jwt.io/)) validations are almost always the same, oas-tools can do them automatically, that is, you just need to specify some simple parameters instead of a whole function. However, only the issuer, the expiration date and the key are validated, so if you want to check something else, you will need to create a function.\n\nTo automatically validate a JWT, first ensure that your security scheme defines that its type is 'http', its scheme is 'bearer' and its bearerFormat is 'JWT'. Then, simply specify the issuer, the supported algorithms (optional, defaults to only HS256) and the key in the `securityFile` configuration variable. In our previous example, this would be:\n\n```javascript\noasTools.configure({\n  // other configuration variables\n  oasSecurity: true,\n  securityFile: {\n    Bearer: {\n      issuer: 'ISA Auth',\n      algorithms: ['HS256'],\n      key: 'secretKey'\n  }\n});\n```\n\nYou can also pass a file path (absolute or relative) or a URL containing the JSON representation of an object containing these parameters. For example, we have this grants.json file:\n```json\n{\n  \"issuer\": \"ISA Auth\",\n  \"algorithms\": [\"HS256\"],\n  \"key\": \"secretKey\"\n}\n```\n\nOur corresponding configuration would be as follows:\n\n```javascript\noasTools.configure({\n  // other configuration variables\n  oasSecurity: true,\n  securityFile: {\n    Bearer: 'path/to/grants.json'\n  }\n});\n```\n\nYou can also include these parameters directly in your specification file. Simply add an additional attribute in your security scheme definition called 'x-bearer-config' containing the parameters to be used during validation. For example:\n\n```yaml\ncomponents:\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearer-config:\n        issuer: ISA Auth\n        algorithms:\n          - HS256\n        key: secretKey\n```\n\nSimilarly to the `securityFile` variable, you could specify a path or a URL with a JSON representation of an object with these parameters instead. Remember that even if 'x-bearer-config' is defined in a security scheme, it will be ignored if the `oasSecurity` variable is set to false. Moreover, if a security scheme has been configured in the `securityFile` variable, that configuration will take preference over the one included in 'x-bearer-config'.\n\n## 3. oasAuth\n\nWhen using JWTs in your API, oas-tools also allows you to automatically manage authorization to a certain degree. This is achieved through simple configuration files, and using the modules [accesscontrol](https://github.com/onury/accesscontrol) and [accesscontrol-middleware](https://github.com/pawangspandey/accesscontrol-middleware).\n\nFirst, create a security scheme which uses JWTs in your specification file, ensuring that the type is 'http', the scheme is 'bearer' and the bearerFormat is 'JWT':\n\n```yaml\ncomponents:\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n```\n\nThen, you need to create an object containing the access restrictions. This object is based on the one used in the module 'accesscontrol', so refer to its GitHub page if you need more information. We will create an example and further explain what it defines below:\n\n```javascript\nvar grants = {\n  user: {\n    \"$extend\": [\"anonymous\"],\n    \"pets/cats\": {\n      \"update:own\": [\"*\"]\n    },\n    \"users\": {\n      \"read:any\": [\"*\"]\n    }\n  },\n  anonymous: {\n    \"pets/cats\": {\n      \"read:any\": [\"*\"]\n    }\n  }\n};\n```\n\nIn this object, we have defined two roles: 'user' and 'anonymous'. 'anonymous' can read any cat in the system. 'user' extends 'anonymous', so it inherits the same access restrictions from its parent. Moreover, a 'user' can update its own cats, and it can also read any user in the system. Now, we will take a closer look at the syntax to see what everything means:\n\n- The '$extend' attribute is a list, that means that a role can extend multiple roles.\n- 'pets/cats' means that the defined restriction will be applied to every endpoint that includes 'pets' and 'cats' in its path, in that same order. For example, 'api/pets/{petstoreId}/cats/{catId}' or simply 'pets/cats' will count.\n- 'update' means that the restriction applies to PUT requests. Similarly, you can use 'read' for GET requests, 'create' for POST, and 'delete' for DELETE.\n- 'own' specifies that the role can only access one cat, based on a parameter that we will explain later. 'any' means that the role can access any cat in the whole API.\n- '\\[\"\\*\"\\]' means that the role can access every resource attribute. oas-tools does not use this, but since you can reuse this restrictions in your controllers along with the 'accesscontrol' module, it may be interesting to take it into account. For example, '\\[\"id\", \"breed\"\\]' would mean that the role can only access these two attributes from a cat.\n\nTo use this grants object in your API, simply provide it while configuring oas-tools, linking it to a JWT scheme definition:\n\n```javascript\noasTools.configure({\n  // other configuration variables\n  oasAuth: true,\n  grantsFile: {\n    Bearer: grants\n  }\n});\n```\n\nYou can also pass a file path (absolute or relative) or a URL containing a JSON representation of your access restrictions. Additionally, you can specify the restrictions directly in the security scheme definition in your specification file, including the 'x-acl-config' attribute:\n\n```yaml\ncomponents:\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-acl-config:\n        anonymous:\n          pets:\n            \"read:any\":\n              - \"*\"\n```\n\nYou can use a file path or a URL here too. Please note that even if you define 'x-acl-config' here, it will be ignored if the `oasAuth` configuration variable is set to false. Additionally, if a scheme was already linked to a grants object in the `grantsFile` variable, that configuration will take precedence over the one in 'x-acl-config'.\n\nThe role of a client will be taken from the provided JWT. This JWT should contain an attribute called 'role'. If this attribute is not defined, oas-tools will assume the default role of 'anonymous'. Moreover, the parameters used to check ownership should also be present in the JWT, and must be named in a specific way. For example, if a request is made to 'api/pets/{petstoreId}/cats/{catId}' and you want to check 'catId' for ownership, there must be a 'catId' attribute in the JWT. If it is not provided and no 'any' restriction was defined, the client will not have access to this resource. However, if you want to match the path 'catId' parameter to another attribute from the JWT, you can do that in the specification file adding a 'x-acl-binding' attribute to the corresponding parameter:\n\n```yaml\npaths:\n  api/pets/{petstoreId}/cats/{catId}:\n    put:\n      parameters:\n        - name: catId\n          in: path\n          x-acl-binding: customAttribute\n    # ...\n```\n\nThis example will look for a 'customAttribute' attribute in the JWT.\n\n## 4. Errors\n\nSince oas-tools reports validation errors with a common structure, we provide a JSON Schema so that you can validate this errors accordingly in your API implementation. You can use [speccy](https://www.npmjs.com/package/speccy) to convert this JSON Schema into an OpenAPI file.\n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"message\"\n    ],\n    \"properties\": {\n      \"message\": {\n        \"type\": \"string\",\n        \"examples\": [\n          \"Wrong data in the response.\"\n        ]\n      },\n      \"error\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"code\",\n            \"params\",\n            \"message\",\n            \"path\"\n          ],\n          \"properties\": {\n            \"code\": {\n              \"type\": \"string\",\n              \"examples\": [\n                \"INVALID_TYPE\"\n              ]\n            },\n            \"params\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\",\n                \"examples\": [\n                  \"array\",\n                  \"object\"\n                ]\n              }\n            },\n            \"message\": {\n              \"type\": \"string\",\n              \"examples\": [\n                \"Expected type array but found type object\"\n              ]\n            },\n            \"path\": {\n              \"type\": \"string\",\n              \"examples\": [\n                \"#/\"\n              ]\n            }\n          }\n        }\n      },\n      \"content\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"message\"\n        ],\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\",\n            \"examples\": [\n              \"This is the mockup controller for findPets\"\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## License\n\nCopyright 2018, [ISA Group](http://www.isa.us.es), [University of Sevilla](http://www.us.es)\n\nFor technical inquiry please contact to [engineering team](./extra/team.md).\n\n[![ISA Group](http://www.isa.us.es/2.0/assets/img/theme/logo2.png)](http://www.isa.us.es)\n\nLicensed under the **Apache License, Version 2.0** (the \"[License](./LICENSE)\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n"
ckaratzas/vertx-openapi-spec-generator: >+
  # Vertx-OpenApi-Spec-Generator

  The purpose of this repository is to facilitate the automatic generation of
  OpenAPI 3 spec from "rest-like" vertx routes. The functional nature of vertx

  makes this job difficult thus no serious official tool exists at the moment.
  In order to mitigate the problem we try to describe the 

  general algorithm and assumptions made:


  1. Generation of OpenAPI 3 Spec is generated at runtime by introspection of
  the vertx Router Object which contains the routes. If someone wishes

  to perform generation at build time, a possible solution is to generate the
  route in a unit test and create the spec during test execution.

  2. Each vertx route that needs to take part in the spec must contain at most
  one handler that delegates to a method that is decorated with

  an 'io.swagger.v3.oas.annotations.Operation' annotation. The handler itself
  must not close in nothing but the routing context. This will aid

  the introspection of the actual type located in the JVM synthetic class of the
  handler which actually contains the annotated method.

  That implies that a route can have many intermediate handlers depending on the
  use case and still express the overall result through an

  'io.swagger.v3.oas.annotations.Operation' annotation from the selected
  handler.

  3. All io.swagger.v3.oas.annotations.Operation' annotations must contain the
  'method' attribute in order to be able to be cross-matched with the route

  definition (e.g route.head(....) -> annotation in method must have the 'HEAD'
  value)

  4. The generator at the moment tries to focus on Operations and just provide
  the basics for other parts of the spec (Info, Contacts, Serves) since

  most of them are configuration specific.

  5. Mappings between annotations and OpenAPI 3 model are missing but the
  overall concept makes extensions easily adjusted.

  6. NO JAX-RS annotations must be used.


  # Example Case

  An actual application of these functions can be found at:


  https://github.com/ckaratzas/tus-server-implementation/blob/master/src/main/java/com/tus/oss/server/core/ServerVerticle.java
  for generating the spec

  and

  https://github.com/ckaratzas/tus-server-implementation/blob/master/src/main/java/com/tus/oss/server/core/*Handler.java
  for the usage of annotations in handlers.


  # Current Status

  By no means the whole OpenAPI 3 spec is covered. The current codebase can be
  extended based on the actual use cases and support more OpenAPI specification.

  This repository can be used as a basis to inspire the design of official vertx
  "openapi-enabled" vertx routes in order to make the introspection easier and

  more effective. 
   

OpenAPITools/openapi-petstore: >-
  # OpenAPI petstore


  This is an implementation of the OpenAPI pet store based on Spring-Boot.


  ## Overview


  Start your server as a simple Spring-Boot application

  ```

  mvn spring-boot:run

  ```

  Or package it then run it as a Java application

  ```

  mvn package

  java -jar target/openapi-petstore-{VERSION}.jar

  ```


  You can view the api documentation in swagger-ui by pointing to  

  http://localhost:8080/


  ## Docker


  To start the server via docker, please run the following commands:

  ```sh

  docker pull openapitools/openapi-petstore

  docker run -d -e OPENAPI_BASE_PATH=/v3 -p 80:8080
  openapitools/openapi-petstore

  ```


  Ref: https://hub.docker.com/r/openapitools/openapi-petstore/


  ## Security


  ### API key

  Use `special-key` for endpoints protected by the API key


  ### OAuth2

  By default the server supports the implicit and the password flow (even though
  only the implicit flow is described in the OAI spec)

  The default credentials are:

  * client-id: sample-client-id

  * client-secret: secret

  * username: user

  * password: user


  ## Configuration


  Spring parameters in application.properties:

  * Server port : `server.port` (default=8080)

  * API base path : `openapi.openAPIPetstore.base-path` (default=/v3). In the
  docker image the base path can also be set with the `OPENAPI_BASE_PATH`
  environment variable.


  Environment variables:

  * `DISABLE_API_KEY` : if set to "1", the server will not check the api key for
  the relevant endpoints.

  * `DISABLE_OAUTH` : if set to "1", the server will not check for an OAuth2
  access token.


  ## License


  [Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0)
technocreatives/openapi-mock-eller: >
  # OpenAPI v3 Mock Server


  A very alpha server for generating mock data from an OpenAPI v3 spec.


  The codebase is very small, contributions are very welcome. :smile:


  ## Usage


  No npm module yet, sorry. You can clone this repo though and execute it from
  wherever you like:


  ```

  node server.js <spec.yaml> [--port=8001] [--host=localhost]

  ```


  Your server is now running on <http://localhost:8001>.

  You can find the rendered documentation for your spec at
  <http://localhost:8001/docs>,

  and, if you ever need it, the JSON source of your spec at
  <http://localhost:8001/docs/schema.json>.


  ## License


  ISC license - see LICENSE file.
serafin-labs/serafin: >+
  <p align="center"><img
  src="https://serafin-labs.github.io/images/logo-serafin-with-text-1080.png"
  width="300"/></p>


  **Serafin** is an *API framework* designed to quickly set up a robust
  **self-descriptive REST API** written in *nodeJS/Typescript*.


  It is based on **Open API 3**, **JSON Schema** and **GraphQL** standards.


  [![Greenkeeper
  badge](https://badges.greenkeeper.io/serafin-labs/serafin.svg)](https://greenkeeper.io/)

  [![Dependencies](https://img.shields.io/david/serafin-labs/serafin.svg)](https://david-dm.org/serafin-labs/serafin)

  [![Maintainability](https://api.codeclimate.com/v1/badges/beba161ae0e5f4f69c79/maintainability)](https://codeclimate.com/github/serafin-labs/serafin/maintainability)

  [![Test
  Coverage](https://api.codeclimate.com/v1/badges/beba161ae0e5f4f69c79/test_coverage)](https://codeclimate.com/github/serafin-labs/serafin/test_coverage)


  ## Installation

  There's no npm package yet! We are close to the alpha release and we will
  produce packages for this version.

  If you want to test **serafin** you can clone the repo and run it locally or
  you can include a direct git reference to your ```package.json``` :


  ```json

  "@serafin/api": "git+ssh://git@github.com/serafin-framework/serafin.git"

  ```


  ## Concepts


  If you want to know more about Serafin concepts and features, go to our
  [overview document](./misc/doc/OVERVIEW.md)


  ## Getting started


  If you just want to get started and write some code, go to our [walkthrough
  document](./misc/doc/WALKTHROUGH.md)


  ## What does it look like ?


  A very simple example looks like that :


  ```typescript

  import * as express from 'express';

  import * as bodyParser from 'body-parser';

  import { SchemaBuilder } from '@serafin/schema-builder';

  import { Api, PipelineSourceInMemory, RestTransport } from '@serafin/api';


  // express initialization

  let app = express();

  app.use(bodyParser.json());


  // Declare our Api with its general information

  let api = new Api(app, {
      "openapi": "3.0.0",
      "info": {
          "version": "1.0.0",
          "title": "An API"
      },
      paths: {}
  });

  api.configure(new RestTransport());


  // Declare a Schema for our "entity"

  let aModelSchema =
  SchemaBuilder.emptySchema().addString("id").addString("data");


  // Define the pipeline, it stores data into memory directly

  let aPipeline = (new PipelineSourceInMemory(aModelSchema))
    //.pipe(...) // Add a pipeline to extend the behavior

  // Use the pipeline in the api. It will add all the routes and compute Open
  Api spec

  api.use(aPipeline, "model");


  // Start the server

  app.listen(process.env.PORT || 80);

  ```


  With this basic example you now have the following endpoints:


  - GET /api.json which contains Open Api spec for this API

  - GET /models

  - POST /models

  - GET /models/:id

  - PUT /models/:id

  - PATCH /models/:id

  - DELETE /models/:id


  The important point is that the **Api** react to the **pipeline** behaviour.
  When you define new constraints on your **schema** or new options in a
  **pipeline**, the **Api** will react accordingly.


  If you want to see more complex examples, take a look at the ```src/example```
  folder.



  ## Contributing


  The project interests you ? Read our [contributer guide](./CONTRIBUTING.md) so
  you can get involved.






yayoc/swagger-to-mock: >
  # swagger-to-mock
  [![travis-ci](https://travis-ci.org/yayoc/swagger-to-mock.svg?branch=master)](https://travis-ci.org/yayoc/swagger-to-mock)
  [![Greenkeeper
  badge](https://badges.greenkeeper.io/yayoc/swagger-to-mock.svg)](https://greenkeeper.io/)


  Mock data generator CLI for Swagger3 (OpenAPI 3)


  ## Install


  ```shell

  npm i -g swagger-to-mock

  ```


  ## Generate mock data


  ```shell

  swagger-to-mock <YOUR SWAGGER FILE>

  ```


  will generate **JSON file** per each API response.  

  JSON data values should be example values on your swagger if you specified
  examples.  

  Otherwise, `swagger-to-mock` follows [data type
  rules](https://github.com/yayoc/swagger-to-mock/#data-type-support) and
  generate arbitrary values.  

  If there is no rule like `format`, values should be below.


  ```yaml

  string: ""

  number: 0

  integer: 0

  boolean: true

  array: []

  object: {}

  ```


  ## Example


  If we pass [an example YAML
  file](https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v3.0/petstore-expanded.yaml)


  ```yaml

  responses:
    '200':
      description: pet response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Pet'
  ```


  `swagger-to-mock` will generate file named `pets_get_200.json` and the body
  should be below


  ```json

  [
    {
      "name": "",
      "tag": "",
      "id": 0
    }
  ]

  ```


  ## File Name


  Naming JSON file will follow the format below. 

  `${API_PATH}_${HTTP_METHOD}_${RESPONSE_STATUS}.json`


  ## Data Type Support [In Progress]


  `swagger-to-mock` will follow rules based on [OpenAPI 3
  specification](https://swagger.io/docs/specification/data-models/data-types/)
  for each data type, If the example value is not specified.


  ### Mixed Types


  If you specify `oneOf` or `anyOf`, The value should be at the top type.


  ### Numbers


  - format

  - Minimum and Maximum

  - Multiples


  ### String


  - format

  - pattern


  ### Boolean


  value should be `true` or `false`.


  ### Null


  ### Arrays


  - Mixed-Type Arrays

  - Array Length


  ### Objects


  - Free-Form Object


  ### Files


  ### Any Type
rinold/Steamer: >
  # Steamer


  Command line tool for [Vapor](https://vapor.codes) stub (template) server
  generator from the [OpenAPI](https://openapis.org/) (Swagger) specification
  written in Swift.


  ### Targeted supported versions:

  - Vapor 3

  - OpenAPI 3.0.* ([Current latest - 3.0.1
  Spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md))


  ### Concept

  The OpenAPI definition of API design is a great base that could allow to
  create autogenerated code that:

  - Would **be well-documented** - as the OpenAPI definition by itself ideally
  should be a 'documentation' for client developers it could be automatically
  brought to the Swift code definitions.

  - Would **share the generated Models and Request/Response code**  as much as
  possible **between** the RESTful **server and client** application which
  automatically would ensure serialisation of data passed between server and
  client is SAME:
    - No more typos-error debugging of failed requests (e.g. when one side sends 'licence' instead of 'license')
    - No more tricky errors of data types conversions (like Int64 vs Int32, the Date formats, etc.)
    - Shared models would be a SINGLE place you need to change if required
  - Would **be extensible**, ideally allowing incremental updates of code from
  the updated OpenAPI definition with minimal impact on manually added code.

  - Would **be simple and Swifty**, created so that thoughts like 'it would be
  easier to delete and rewrite it' should never appear in developer head when he
  sees it.


  ### Goals

  - Encourage the [API design
  first](https://swaggerhub.com/blog/api-design/design-first-or-code-first-api-development/)
  if it suits your needs!

  - Make implementation and prototyping of RESTful servers using Vapor event
  more easier by minimising boilerplate coding

  - Meet incredible and amazing Swift professionals who would like to join and
  contribute to this project! :)


  ### Features - TBD, starting list to think of...

  - Generation of stubbed API server from OpenAPI document:
    - Models
    - Controllers
    - Routing
    - everything else needed to run
  - Use Security Scheme definitions for authorization and authentification
  support

  - Mock responses with data examples if provided

  - Comments / documentation generation

  - ...


  ### Contribution

  Is welcome! Join and be the first one commiting real code!  

  Your can contact me via email:
  [mihail.churbanov@gmail.com](mailto:mihail.churbanov@gmail.com)


  ### Dependencies (Potential)

  - [SwaggerParser](https://github.com/AttilaTheFun/SwaggerParser) - Swift
  library for parsing OpenAPI 2.0 (f.k.a. Swagger) documents into native
  structures (OpenAPI 3.0 support is "alpha"-ready, currently on
  [fork](https://github.com/rinold/SwaggerParser/tree/openapi-3)).

  - [?] [Yams](https://github.com/jpsim/Yams) - A Sweet and Swifty YAML parser.

  - [?] [Stencil](https://github.com/kylef/Stencil) /
  [Leaf](https://github.com/vapor/leaf) or ... - need to choose something for
  templating.
wzshiming/openapi: >-
  # OpenAPI


  [![GoDoc](https://godoc.org/github.com/wzshiming/openapi?status.svg)](https://godoc.org/github.com/wzshiming/openapi)

  [![GitHub
  license](https://img.shields.io/github/license/wzshiming/openapi.svg)](https://github.com/wzshiming/openapi/blob/master/LICENSE)


  The object model for [OpenAPI specification
  documents](https://github.com/OAI/OpenAPI-Specification)
isa-group/oas-generator: >
  # oas-generator


  [![Build
  Status](https://travis-ci.org/isa-group/oas-generator.svg?branch=master)](https://travis-ci.org/isa-group/oas-generator)

  [![dependencies
  Status](https://david-dm.org/isa-group/oas-generator/status.svg)](https://david-dm.org/isa-group/oas-generator)

  [![codecov](https://codecov.io/gh/isa-group/oas-generator/branch/master/graph/badge.svg)](https://codecov.io/gh/isa-group/oas-generator)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/oas-generator/badge.svg)](https://snyk.io/test/npm/oas-generator)

  [![Greenkeeper
  badge](https://badges.greenkeeper.io/isa-group/oas-generator.svg)](https://greenkeeper.io/)


  [![NPM](https://nodei.co/npm/oas-generator.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/oas-generator/)


  This module provides NodeJS RESTfull APIs scaffolding based OpenAPI 3.x specs
  using [oas-tools](https://github.com/isa-group/oas-tools) and
  [express](https://github.com/expressjs/express). It is compatible with servers
  generated with the swagger-tool suite to help in the transition from
  pre-existing servers based on 2.x specs.


  We have a 2 min. tutorial:


  <a href="https://youtu.be/OZhtoXP2Gi4" alt="oas-generator introduction
  (v2.0.6) - Click to Watch!"><img src="https://i.imgur.com/fcqaWCq.jpg"
  align="center" width="300" alt="oas-generator introduction (v2.0.6) - Click to
  Watch!"></a>



  ## 1\. Install oas-generator


  ```bash

  npm install oas-generator -g

  ```


  ## 2\. Use oas-generator command


  ### 2.1\. Help


  ```bash

  $ oas-generator --help


  Usage:  oas-generator <OAS v3 file in YAML or JSON>

    Options:

      -n, --projectName <projectName>  Name for the generated folder
      -z, --generateZip                Indicate whether the generated folder must be deleted after compression
      -h, --help                       output usage information
  ```


  ### 2.2 Examples


  Generate a NodeJS project: The following command wil create the code of a
  NodeJS application based on the OpenAPI Spec 3.x `docker-engine.yaml` and
  place its code in a folder by the name `generatedServer`.


  ```bash

  $ oas-generator specs/docker-engine.yaml -n generatedServer

  ```


  Once the folder is created locate into it. Install dependencies and run it by
  doing npm start:


  ```bash

  $ cd generatedServer

  $ npm start

  ```


  Now your app is running on port 8080.

  You can try the url
  [http://localhost:8080/v1.33/volumes](http://localhost:8080/v1.33/volumes)


  In the folder `controllers` there will be a set of js files with the templates
  for each method specified in the spec that should be completed to have a fully
  working API.


  Happy coding! 



  ## License


  Copyright 2018, [ISA Group](http://www.isa.us.es), [University of
  Sevilla](http://www.us.es)


  For technical inquiry please contact to [engineering team](./extra/team.md).


  [![ISA
  Group](http://www.isa.us.es/2.0/assets/img/theme/logo2.png)](http://www.isa.us.es)


  Licensed under the **Apache License, Version 2.0** (the
  "[License](./LICENSE)"); you may not use this file except in compliance with
  the License. You may obtain a copy of the License at
  apache.org/licenses/LICENSE-2.0


  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
erasys/openapi-php: >
  # openapi-php


  [![Latest Version on Packagist][ico-version]][link-releases]

  [![Software License][ico-license]](LICENSE)

  [![Build Status][ico-travis]][link-travis]

  [![Coverage Status][ico-coverage]][link-coverage]

  [![Quality Score][ico-scrutinizer]][link-scrutinizer]

  [![Total Downloads][ico-downloads]][link-downloads]


  Open API 3.0 builder and validation library for PHP that helps you write valid
  specs.


  [PSR-1]:
  https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md

  [PSR-2]:
  https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md

  [PSR-4]:
  https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md



  This project is compliant with [PSR-1], [PSR-2] and [PSR-4].

  If you notice compliance oversights, please send a patch via pull request.


  ## Features


  - Fully documented object-oriented representation of the 

  [Open API
  3.0+](https://github.com/OAI/OpenAPI-Specification/tree/master/versions)
  specification with helper methods

  to write valid documents.

  - Supports Illuminate (Laravel)
  [`Jsonable`](https://github.com/illuminate/contracts/blob/v5.4.0/Support/Jsonable.php) 

  and
  [`Arrayable`](https://github.com/illuminate/contracts/blob/v5.4.0/Support/Arrayable.php).

  - Generates an specification in plain PHP arrays, plain objects, JSON or YAML.

  - Validates Open API documents against the Open API 3.0.x JSON Schema.



  ## Install


  Via Composer


  ``` bash

  $ composer require erasys/openapi-php

  ```


  Via Git


  ``` bash

  $ git clone https://github.com/erasys/openapi-php.git

  ```


  ## Usage


  Basic example:


  ```php

  <?php


  use erasys\OpenApi\Spec\v3 as OASv3;


  $doc = new OASv3\Document(
      new OASv3\Info('My API', '1.0.0', 'My API description'),
      [
          '/foo/bar' => new OASv3\PathItem(
              [
                  'get' => new OASv3\Operation(
                      [
                          '200' => new OASv3\Response('Successful response.'),
                          'default' => new OASv3\Response('Default error response.'),
                      ]
                  ),
              ]
          ),
      ]
  );


  $yaml = $doc->toYaml();

  $json = $doc->toJson();

  $arr  = $doc->toArray();

  $obj  = $doc->toObject();


  ```


  ## Testing


  ``` bash

  $ composer test

  ```


  or


  ``` bash

  $ vendor/bin/phpunit

  $ vendor/bin/phpcs

  ```


  ## Contributing


  Please see
  [CONTRIBUTING](https://github.com/erasys/openapi-php/blob/master/CONTRIBUTING.md)
  for details.


  ## License


  The MIT License (MIT).

  Please see [License
  File](https://github.com/erasys/openapi-php/blob/master/LICENSE) for more
  information.



  [ico-version]:
  https://img.shields.io/packagist/v/erasys/openapi-php.svg?style=flat-square

  [ico-license]:
  https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square

  [ico-travis]:
  https://img.shields.io/travis/erasys/openapi-php/master.svg?style=flat-square

  [ico-downloads]:
  https://img.shields.io/packagist/dt/erasys/openapi-php.svg?style=flat-square

  [ico-coverage]:
  https://img.shields.io/scrutinizer/coverage/g/erasys/openapi-php.svg?style=flat-square

  [ico-scrutinizer]:
  https://img.shields.io/scrutinizer/g/erasys/openapi-php.svg?style=flat-square

  [link-releases]: https://packagist.org/packages/erasys/openapi-php

  [link-travis]: https://travis-ci.org/erasys/openapi-php

  [link-downloads]: https://packagist.org/packages/erasys/openapi-php

  [link-coverage]:
  https://scrutinizer-ci.com/g/erasys/openapi-php/code-structure

  [link-scrutinizer]: https://scrutinizer-ci.com/g/erasys/openapi-php
SkeLLLa/fastify-oas: >
  # fastify-oas


  <div align="center">
    <img src="https://gitlab.com/m03geek/fastify-oas/raw/master/logo.png" alt="fastify-oas logo"/>
  </div>


  [![NPM
  Version](https://img.shields.io/npm/v/fastify-oas.svg)](https://www.npmjs.com/package/fastify-oas)

  [![Downloads
  Count](https://img.shields.io/npm/dm/fastify-oas.svg)](https://www.npmjs.com/package/fastify-oas)

  [![Vunerabilities
  Count](https://snyk.io/test/npm/fastify-oas/badge.svg)](https://www.npmjs.com/package/fastify-oas)

  [![Build
  Status](https://gitlab.com/m03geek/fastify-oas/badges/master/pipeline.svg)](https://gitlab.com/m03geek/fastify-oas/commits/master)

  [![Coverage
  Status](https://gitlab.com/m03geek/fastify-oas/badges/master/coverage.svg)](https://gitlab.com/m03geek/fastify-oas/commits/master)

  [![License](https://img.shields.io/npm/l/fastify-oas.svg)](https://gitlab.com/m03geek/fastify-oas/blob/master/LICENSE)


  [OpenAPI 3.0+ (OAS3)](https://swagger.io/docs/specification/about/)
  documentation generator for Fastify.

  It uses the schemas you declare in your routes to generate an OpenAPI
  (swagger) compliant doc.


  This plugin based on
  [fastify-swagger](https://github.com/fastify/fastify-swagger/) that generates
  swagger 2.0 docs.


  This plugin designed in such way to be compatible with it's predcessor and in
  most cases if you already use `fastify-swagger` you may just replace it with
  current plugin and it should work.


  ## ToC

  - [fastify-oas](#fastify-oas)
    - [ToC](#toc)
    - [Fastify support](#fastify-support)
    - [Installation](#installation)
    - [Features and requirements](#features-and-requirements)
    - [Usage](#usage)
      - [Docs](#docs)
      - [Plugin options](#plugin-options)
      - [Additional schema options](#additional-schema-options)
      - [OpenAPI](#openapi)
      - [Swagger 2.0](#swagger-20)
    - [UI](#ui)
    - [Development](#development)
    - [See also](#see-also)
    - [License](#license)

  ## Fastify support


  - v0.X.X - v1.X.X - supports fastify v1.X.X

  - v2.X.X - will support fastify v2.X.X


  ## Installation


  ```sh

  npm i fastify-oas --save

  ```


  <sub>[Back to top](#toc)</sub>


  ## Features and requirements


  * Supports OpenAPI 3+.

  * Supports [fastify-swagger](https://github.com/fastify/fastify-swagger/)
  module configs.

  * Supports swagger 2.0 fastify schemas.

  * Supports fastify named schemas convertion to swaagger/openapi models.


  --- 


  * Requires fastify `>=1.9.0`.

  * Node.js `>=8.9.0`.


  NOTE: If you need to generate fastify routes from your swagger document -
  please refer to plugins in [See also](#see-also) like fastify-swaggergen or
  fastify-openapi-glue.


  <sub>[Back to top](#toc)</sub>


  ## Usage


  Add it to your project like regular fastify plugin. Use `register` method and
  pass it swagger options, then call the api constructor.


  ```js

  const fastify = require('fastify');

  const oas = require('fastify-oas');

  const app = fastify();


  app.register(oas, {
    routePrefix: '/documentation',
    swagger: {
      info: {
        title: 'Test openapi',
        description: 'testing the fastify swagger api',
        version: '0.1.0',
      },
      externalDocs: {
        url: 'https://swagger.io',
        description: 'Find more info here',
      },
      consumes: ['application/json'],
      produces: ['application/json'],
    },
  });


  // put some routes and schemas


  app.ready(err => {
    if (err) throw err;
    app.oas();
  });

  ```


  <sub>[Back to top](#toc)</sub>


  ### Docs


  See [Docs](/docs/README.md) for more details. 


  ### Plugin options


  |  parameter  |  type  |  description   |  default  |

  |-------------|--------|----------------|-----------|

  | `routePrefix` | String | Documentation endpoint | `/documentation` |

  | `exposeRoute` | Boolean | If `true` the plugin will expose the documentation
  with the following apis: `/<routePrefix>`, `/<routePrefix>/json`,
  `/<routePrefix>/yaml` | `false` |

  | `addModels` | Boolean | If `true` adds fastify schemas as openapi models |
  `false` |

  | `openapi` | String | Openapi version | '3.0.0' |

  | `yaml` | Boolean | If `true` returns yaml instead of json | `false` |

  | `hideUntagged` | Boolean | If `true` remove routes without tags in schema
  from resulting swagger file | `false` |

  | `swagger` | Object | Swagger object except paths | `{}` |


  <sub>[Back to top](#toc)</sub>


  ### Additional schema options


  In order to remove some endpoints from Swagger/OpenAPI document you may add
  `{hide: true}` option to route schema.


  ```js

  const fastify = require('fastify')()

  fastify.get('/some-secrete-route/:id', {
    schema: {
      hide: true,
      params: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'user id'
          }
        }
      },
      response: {
        201: {
          description: 'Successful response',
          type: 'object',
          properties: {
            hello: { type: 'string' }
          }
        }
      },
    }
  }, (req, reply) => {})


  ```


  <sub>[Back to top](#toc)</sub>


  ### OpenAPI


  Unlike regular OpenAPI spec you'll still need some options from swagger 2.0.


  ```js

  const fastify = require('fastify');

  const oas = require('fastify-oas');

  const app = fastify();


  app.register(oas, {
    routePrefix: '/documentation',
    swagger: {
      info: {
        title: 'Test openapi',
        description: 'testing the fastify swagger api',
        version: '0.1.0',
      },
      externalDocs: {
        url: 'https://swagger.io',
        description: 'Find more info here',
      },
      consumes: ['application/json'], // app-wide default media-type
      produces: ['application/json'], // app-wide default media-type
      servers: [{
        url: 'http://api.example.com/v1',
        description: 'Optional server description, e.g. Main (production) server',
      }],
      components: {
        // see https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.0.md#componentsObject for more options
        securitySchemes: {
          BasicAuth: {
            type: 'http',
            scheme: 'basic',
          },
        },
      }, 
    },
  });

  ```


  <sub>[Back to top](#toc)</sub>


  ### Swagger 2.0


  This will not generate swagger 2.0 docs. It will generate openapi 3.0 docs,
  but from swagger 2.0 (and fastify-swagger) compatible configuration.

  It will allow easily migrate from fastify-swagger.


  The example below is taken from fastify-swagger repo to show the differences .


  ```js

  const fastify = require('fastify')()


  // before: fastify.register(require('fastify-swagger'), {

  fastify.register(require('fastify-oas'), { // after
    routePrefix: '/documentation',
    swagger: {
      info: {
        title: 'Test swagger',
        description: 'testing the fastify swagger api',
        version: '0.1.0'
      },
      externalDocs: {
        url: 'https://swagger.io',
        description: 'Find more info here'
      },
      host: 'localhost',
      schemes: ['http'],
      consumes: ['application/json'],
      produces: ['application/json'],
      tags: [
        { name: 'user', description: 'User related end-points' },
        { name: 'code', description: 'Code related end-points' }
      ],
      securityDefinitions: {
        apiKey: {
          type: 'apiKey',
          name: 'apiKey',
          in: 'header'
        }
      }
    }
  })


  fastify.put('/some-route/:id', {
    schema: {
      description: 'post some data',
      tags: ['user', 'code'],
      summary: 'qwerty',
      params: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'user id'
          }
        }
      },
      body: {
        type: 'object',
        properties: {
          hello: { type: 'string' },
          obj: {
            type: 'object',
            properties: {
              some: { type: 'string' }
            }
          }
        }
      },
      response: {
        201: {
          description: 'Successful response',
          type: 'object',
          properties: {
            hello: { type: 'string' }
          }
        }
      },
      security: [
        {
          "api_key": []
        }
      ]
    }
  }, (req, reply) => {})


  fastify.ready(err => {
    if (err) throw err
    fastify.oas()
  })

  ```


  <sub>[Back to top](#toc)</sub>


  ## UI


  Swagger UI is available via `/<routePrefix>/index.html`. By default it's
  `/documentation/index.html`.


  ReDoc UI is available via `/<routePrefix>/redoc.html`. By default it's
  `/documentation/redoc.html`.


  <sub>[Back to top](#toc)</sub>


  ## Development


  In order to start development run:


  ```sh

  npm i

  npm run prepare

  ```


  So that [swagger-ui](https://github.com/swagger-api/swagger-ui) static folder
  will be generated for you.


  <sub>[Back to top](#toc)</sub>


  ## See also


  * [fastify-swagger](https://github.com/fastify/fastify-swagger) - swagger 2.0
  docs generation plugin.

  * [fastify-swaggergen](https://github.com/seriousme/fastify-swaggergen) -
  fastify routes generation from swagger 2.0 docs.

  * [fastify-openapi-glue](https://github.com/seriousme/fastify-openapi-glue) -
  fastify-swaggergen successor, generates fastify routes from swagger 2.0 and
  openapi 3.0 docs (just like this module, but in opposite direction).


  <sub>[Back to top](#toc)</sub>


  ## License


  Licensed under [MIT](./LICENSE).


  <sub>[Back to top](#toc)</sub>
SabzCity/go-library: >-
  # go-library

  It was deprecated in favor of
  [ChaparKhane](https://github.com/SabzCity/ChaparKhane)
lendingblock/aio-openapi: >
  # aio-openapi


  [![PyPI
  version](https://badge.fury.io/py/aio-openapi.svg)](https://badge.fury.io/py/aio-openapi)

  [![Python
  versions](https://img.shields.io/pypi/pyversions/aio-openapi.svg)](https://pypi.org/project/aio-openapi)

  [![CircleCI](https://circleci.com/gh/quantmind/aio-openapi.svg?style=svg)](https://circleci.com/gh/quantmind/aio-openapi)

  [![codecov](https://codecov.io/gh/quantmind/aio-openapi/branch/master/graph/badge.svg)](https://codecov.io/gh/quantmind/aio-openapi)


  This library is an asynchronous web middleware for [aiohttp][] for serving
  Rest APIs with [OpenAPI][] v 3

  specification and with optional [PostgreSql][] database.


  <!-- START doctoc generated TOC please keep comment here to allow auto update
  -->

  <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->


  **Table of Contents**


  - [Installation](#installation)

  - [Development](#development)

  - [Features](#features)

  - [Web App](#web-app)

  - [OpenAPI Documentation](#openapi-documentation)

  - [Database Integration](#database-integration)

  - [Websockets](#websockets)
    - [RPC protocol](#rpc-protocol)
    - [Publish/Subscribe](#publishsubscribe)
  - [Environment Variables](#environment-variables)


  <!-- END doctoc generated TOC please keep comment here to allow auto update
  -->


  ## Installation


  ```

  pip install aio-openapi

  ```


  ## Development


  Clone the repository and create a virtual environment `venv`.


  Install dependencies by running the install script


  ```

  ./dev/install.sh

  ```


  To run tests


  ```

  pytest --cov

  ```


  ## Features


  - Asynchronous web routes with
  [aiohttp](https://aiohttp.readthedocs.io/en/stable/)

  - Data validation, serialization and unserialization with python
  [dataclasses](https://docs.python.org/3/library/dataclasses.html)

  - [OpenApi][] v 3 auto documentation

  - [SqlAlchemy][] expression language

  - Asynchronous DB interaction with [asyncpg][]

  - Migrations with [alembic][]

  - SqlAlchemy tables as python dataclasses

  - Support [click][] command line interface

  - Optional [sentry](https://sentry.io) middleware


  ## Web App


  To create an openapi RESTful application follow this schema (lets call the
  file `main.py`)


  ```python

  from openapi.rest import rest


  def create_app():
      return rest(
          openapi=dict(
              title='A REST API',
              ...
          ),
          base_path='/v1',
          allowed_tags=[...],
          validate_docs=True,
          setup_app=setup_app,
          commands=[...]
      )


  def setup_app(app):
      app.router.add_routes(...)
      return app


  if __name__ == '__main__':
      create_app().main()
  ```


  The `create_app` function creates the [aiohttp][] server application by
  invoking the `rest` function.

  This function adds the [click][] command in the `cli` mapping entry and add

  documentation for routes which support OpenAPI docs.

  The `setup_app` function is used to actually setup the custom application,
  usually by adding middleware, routes,

  shutdown callbacks, database integration and so forth.


  ## OpenAPI Documentation


  The library provide tools for creating OpenAPI v 3 compliant endpoints and

  auto-document them.


  An example from test `tests/example` directory


  ```python

  from aiohttp import web


  from openapi.db.path import SqlApiPath

  from openapi.spec import op



  routes = web.RouteTableDef()



  @routes.view('/tasks')

  class TasksPath(SqlApiPath):
      """
      ---
      summary: Create and query Tasks
      tags:
          - Task
      """
      table = 'tasks'

      @op(query_schema=TaskOrderableQuery, response_schema=[Task])
      async def get(self):
          """
          ---
          summary: Retrieve Tasks
          description: Retrieve a list of Tasks
          responses:
              200:
                  description: Authenticated tasks
          """
          paginated = await self.get_list()
          return paginated.json_response()

      @op(response_schema=Task, body_schema=TaskAdd)
      async def post(self):
          """
          ---
          summary: Create a Task
          description: Create a new Task
          responses:
              201:
                  description: the task was successfully added
              422:
                  description: Failed validation
          """
          data = await self.create_one()
          return self.json_response(data, status=201)
  ```


  ## Database Integration


  This library provides integration with [asyncpg][], an high performant
  asynchronous

  connector with [PostgreSql][] database.

  To add the database extension simply use the `get_db` function in the
  applicatiuon `setup_app` function:


  ```python

  from openapi.db import get_db


  def setup_app(app):
      db = get_db(app)
      meta = db.metadata

  ```


  This will enable database connection and command line tools (most of them from
  [alembic][]):


  ```

  python main.py db --help

  ```


  The database container is available at the `db` app key:


  ```python

  app['db']

  ```


  ## Websockets


  This library provides a simple distributed websocket utility for creating

  websocket remote procedure calls (RPC) and pub/sub.


  ```python

  from aiohttp import web


  from openapi.ws import Sockets


  app = web.Application()

  ...

  app['web_sockets'] = Sockets(app)

  ```


  ### RPC protocol


  The RPC protocol has the following structure for incoming messages


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "payload": {
          ...
      }
  }

  ```


  The `id` is used by clients to link the request with the corresponding
  response.

  The response for an RPC call is eitrher a success


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "response": {
          ...
      }
  }

  ```


  or error


  ```

  {
      "id": "abc",
      "method": "rpc_method_name":
      "error": {
          ...
      }
  }

  ```


  ### Publish/Subscribe


  To subscribe to messages, one need to use the `Subscribe` mixin with the
  subscribe RPC handler.

  Messages take the form:


  ```javascript

  {
      "channel": "channel_name",
      "event": "event_name",
      "data": {
          ...
      }
  }

  ```


  ## Environment Variables


  Several environment variables are used by the library to support testing and
  deployment.


  - `DATASTORE`: PostgreSql connection string (same as [SqlAlchemy][] syntax)

  - `DBPOOL_MIN_SIZE`: minimum size of database connection pool (default is 10)

  - `DBPOOL_MAX_SIZE`: maximum size of database connection pool (default is 10)


  [aiohttp]: https://aiohttp.readthedocs.io/en/stable/

  [openapi]: https://www.openapis.org/

  [postgresql]: https://www.postgresql.org/

  [sqlalchemy]: https://www.sqlalchemy.org/

  [click]: https://github.com/pallets/click

  [alembic]: http://alembic.zzzcomputing.com/en/latest/

  [asyncpg]: https://github.com/MagicStack/asyncpg
Mermade/swaggerplusplus: >
  # swaggerplusplus


  ### A proposal for transitioning between Swagger 2.0 and OpenAPI 3.0.x


  #### Version 1.0.0-rc4


  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
  "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [BCP
  14](https://tools.ietf.org/html/bcp14)
  [RFC2119](https://tools.ietf.org/html/rfc2119)
  [RFC8174](https://tools.ietf.org/html/rfc8174) when, and only when, they
  appear in all capitals, as shown here.


  To aid the transition between Swagger 2.0 and OpenAPI 3.0.x, it is proposed to
  back-port the following features from the OpenAPI 3.0.0 specification
  (currently version 3.0.0) as [specification
  extensions](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#vendorExtensions)
  (formerly known as vendor extensions).


  Tooling MAY make use of these features now, with minimal work required to
  support them in OpenAPI 3.0.x, definition authors MAY also use these features,
  knowing their API definition can be losslessly converted from
  **swaggerplusplus** to OpenAPI 3.0.x by any **swaggerplusplus**-compatible
  converter.


  ## Features


  Path|Version 3.0.x Object|New Extension|Type|Description

  ---|---|---|---|---|

  #/|servers|x-servers|[[Server
  Objects](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#server-object)]|When
  converting to OpenAPI 3.0.x, this array is used in place of any `servers`
  array converted from Swagger 2.0 metadata

  #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}|servers|x-servers|[[Server
  Objects](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#server-object)]|

  #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}/{[operation](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)}|servers|x-servers|[[Server
  Objects](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#server-object)]|

  #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}/{[Operation](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)}|trace|x-trace|[V2
  Operation
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)|This
  MUST be a Swagger 2.0 Operation Object, it MUST be treated as per any other
  Operation Object, for the `TRACE` HTTP method

  #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}|summary|x-summary|String|Also
  as per [Apiary
  extension](https://help.apiary.io/api_101/swagger-extensions/#x-summary-and-x-description)

  #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}|description|x-description|String|Also
  as per [Apiary
  extension](https://help.apiary.io/api_101/swagger-extensions/#x-summary-and-x-description)

  #/[parameters](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameters-definitions-object)
  **OR** #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}/parameters
  **OR** #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}/{[Operation](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)}/parameters|deprecated|x-deprecated|Boolean|Indicates
  the parameter is deprecated and SHOULD be transitioned out of use

  #/paths/{[Path
  Item](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#path-item-object)}/[{Operation}](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)|callbacks|x-callbacks|[[Callback
  Objects](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#server-object)]|

  \* within [Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object)|anyOf|x-anyOf|[[Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject)]|Schema
  MUST be extracted and post-processed before being used for validation

  \* within [Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object)|oneOf|x-oneOf|[[Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject)]|Schema
  MUST be extracted and post-processed before being used for validation

  \* within [Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object)|not|x-not|[Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject)|Schema
  MUST be extracted and post-processed before being used for validation

  \* within [Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object)|required|x-required|Array|Where
  a property has been removed from `required` due to use of `x-anyOf`, `x-oneOf`
  or `x-not`, converters MUST merge these arrays when converting from
  **swaggerplusplus** to OpenAPI 3.0.x. When a converter converts from 3.0.x to
  **swaggerplusplus** it MUST remove any `required` properties hidden by
  `x-anyOf`, `x-oneOf` or `x-not` and move them into this array.

  \* within [Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object)|nullable|x-nullable|Boolean|Indicates
  whether the property is nullable or not.

  \* within [Schema
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object)|discriminator|x-discriminator|[Discriminator
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#discriminator-object)|A
  version 3.0.x `discriminator object` to replace the version 2.0
  `discriminator` property.

  \* within [Response
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#response-object)|links|x-links|Map
  {[Link
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#link-object)}|Links
  or references to reusable Link Objects

  #/|components/links|x-links|Map {[Link
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#link-object)}|Contains
  reusable Link Objects

  #/|components/callbacks|x-callbacks|Map {[Callback
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#callback-object)}|Contains
  reusable Callback Objects


  ## Conversion


  Converters MUST validate the specification extensions are of the expected
  type, and that mandatory properties (if any) are present. Failing that, they
  MUST leave the specification extension unchanged.


  ## swaggerplusplus Tools


  * [Converter/validator](https://github.com/mermade/swagger2openapi)

  * [Rebilly Redoc](https://github.com/Rebilly/ReDoc) - supports a
  [subset](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md)
  of **swaggerplusplus**


  ## swaggerplusplus in the wild


  [Zappiti API](http://zappiti.com/api/zappiti-player-4k/swagger/)
niteoweb/pyramid_openapi3: >
  ## Validate [Pyramid](https://trypyramid.com) views against an [OpenAPI
  3.0](https://swagger.io/specification/) document


  > **Warning: This project is currently in beta. Stable release planned in May
  2019. If you're curious about the progress, ping `zupo` on
  [irc.freenode.net](https://webchat.freenode.net/?channels=niteo).**


  <p align="center">
    <img height="200" src="https://github.com/niteoweb/pyramid_openapi3/blob/master/header.jpg?raw=true" />
  </p>


  <p align="center">
    <a href="https://circleci.com/gh/niteoweb/pyramid_openapi3">
      <img alt="CircleCI for pyramid_openapi3 (master branch)"
           src="https://circleci.com/gh/niteoweb/pyramid_openapi3.svg?style=shield">
    </a>
    <a href="https://github.com/niteoweb/pyramid_openapi3/blob/master/Makefile#L56">
      <img alt="Test coverage (master branch)"
           src="https://img.shields.io/badge/coverage-100%25-brightgreen.svg">
    </a>
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="latest version of pyramid_openapi3 on PyPI"
           src="https://img.shields.io/pypi/v/pyramid_openapi3.svg">
    </a>
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="Supported Python versions"
           src="https://img.shields.io/pypi/pyversions/pyramid_openapi3.svg">
    </a>
    <a href="https://github.com/niteoweb/pyramid_openapi3/blob/master/LICENSE">
      <img alt="License: MIT"
           src="https://img.shields.io/badge/License-MIT-yellow.svg">
    </a>
    <a href="https://github.com/niteoweb/pyramid_openapi3/graphs/contributors">
      <img alt="Built by these great folks!"
           src="https://img.shields.io/github/contributors/niteoweb/pyramid_openapi3.svg">
    </a>
    <a href="https://webchat.freenode.net/?channels=pyramid">
      <img alt="Talk to us in #pyramid on Freenode IRC"
           src="https://img.shields.io/badge/irc-freenode-blue.svg">
    </a>
  </p>


  ## Peace of Mind


  The reason this package exists is to give you peace of mind when providing a
  RESTful API with your Pyramid app. Instead of chasing down preventable bugs
  and saying sorry to consumers, you can focus on more important things in life.


  - Your **API documentation is never out-of-date**, since it is generated out
  of the API document that you write.

  - The documentation comes with **_try-it-out_ examples** for every endpoint in
  your API. You don't have to provide (and maintain) `curl` commands to showcase
  how your API works. Users can try it themselves, right in their browsers.

  - Your **API document is always valid**, since your Pyramid app won't even
  start if the document is not according to OpenAPI 3.0 specification.

  - Automatic request **payload validation and sanitization**. Your views do not
  require any code for validation and input sanitation. Your view code only
  deals with business logic. Tons of tests never need to be written since every
  request, and its payload, is validated against your API document before it
  reaches your view code.

  - Your API **responses always match your API document**. Every response from
  your view is validated against your document and a `500 Internal Server Error`
  is returned if the response does not exactly match what your document says the
  output of a certain API endpoint should be.

  - **A single source of truth**. Because of the checks outlined above you can
  be sure that whatever your API document says is in fact what is going on in
  reality. You have a single source of truth to consult when asking an API
  related question, such as "Remind me again, which fields does the endpoint
  /user/info return?".


  ## Features


  - Validates your API document (for example, `openapi.yaml` or `openapi.json`)
  against the OpenAPI 3.0 specification using the
  [openapi-spec-validator](https://github.com/p1c2u/openapi-spec-validator).

  - Generates and serves the [Swagger try-it-out
  documentation](https://swagger.io/tools/swagger-ui/) for your API.

  - Validates incoming requests *and* outgoing responses against your API
  document using [openapi-core](https://github.com/p1c2u/openapi-core).



  ## Getting started


  1. Declare `pyramid_openapi3` as a dependency in your Pyramid project.


  2. Include the following lines:


  ```python

  config.include("pyramid_openapi3")

  config.pyramid_openapi3_spec('openapi.yaml', route='/api/v1/openapi.yaml')

  config.pyramid_openapi3_add_explorer(route='/api/v1/')

  ```


  3. Use the `openapi` [view
  predicate](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/viewconfig.html#view-configuration-parameters)
  to enable request/response validation:


  ```python

  @view_config(route_name="foobar", openapi=True, renderer='json')

  def myview(request):
      return request.openapi_validated.parameters
  ```


  For requests, `request.openapi_validated` is available with two fields:
  `parameters` and `body`.

  For responses, if the payload does not match the API document, an exception is
  raised.


  ## Demo / Examples


  There are two examples provided with this package:

  * A fairly simple [single-file app providing a Hello World
  API](https://github.com/niteoweb/pyramid_openapi3/tree/master/examples/singlefile).

  * A slightly more [built-out app providing a TODO app
  API](https://github.com/niteoweb/pyramid_openapi3/tree/master/examples/todoapp).


  All examples come with tests that exhibit pyramid_openapi's error handling and
  validation capabilities.



  ## Design defense


  The authors of pyramid_openapi3 believe that the approach of validating a
  manually-written API document is superior to the approach of generating the
  API document from Python code. Here are the reasons:


  a) Both generation and validation against a document are lossy processes. The
  underlying libraries running the generation/validation will always have
  something missing. Either a feature from the latest OpenAPI specification, or
  an implementation bug. Having to fork the underlying library in order to
  generate the part of your API document that might only be needed for the
  frontend is unfortunate.

     Validation on the other hand allows one to skip parts of validation that are not supported yet, and not block a team from shipping the document.

  b) Validation approach does sacrifice DRY-ness, one has to write the API
  document and then the (view) code in Pyramid. Feels a bit redundant at first.
  However, this provides a clear separation between the intent and the
  implementation.


  c) Generation approach has the drawback of having to write Python code even
  for parts of the API document that the Pyramid backend does not handle, as it
  might be handled by a different system, or be specific only to documentation
  or only to the client side of the API. This bloats your Pyramid codebase with
  code that does not belong there.


  ## Running tests


  You need to have [pipenv](https://pipenv.readthedocs.io/) and Python 3.7
  installed on your machine. Then you can run:

      $ make tests

  ## Related packages


  These packages tackle the same problem-space:


  - [pyramid_swagger](https://github.com/striglia/pyramid_swagger) does a
  similar
    thing, but for Swagger 2.0 documents
  - [pyramid_apispec](https://github.com/ergo/pyramid_apispec) uses generation
  with
    help of apispec and marshmallow validation library. See above [why we prefer validation instead of generation](#why---design-defense).

  ## Use in the wild


  A couple of projects that use pyramid_openapi3 in production:


  - [WooCart API](https://app.woocart.com/api/v1/) - Users' control panel for
  WooCart Managed WooCommerce service.


  ## TODO


  - [x] Makefile.

  - [x] Flake8.

  - [x] Black.

  - [x] mypy.

  - [x] codespell.

  - [x] pre-commit.

  - [x] Testing framework.

  - [x] CircleCI integration.

  - [x] Beta PyPI release.

  - [x] Go through all docstrings.

  - [x] Automatic PyPI releases for tags, via CircleCI.

  - [x] 100% test coverage.

  - [x] How to contribute.

  - [x] Add Changelog.

  - [x] How to release

  - [ ] Document that `pyramid_openapi3_validation_error_view()` is [registered
  without
  permissions](https://github.com/niteoweb/pyramid_openapi3/pull/6#discussion_r272651906).

  - [x] Move demo.py into examples/singlefile/

  - [x] Move https://github.com/zupo/minimal_openapi into examples/minimal/

  - [ ] Move this repo to https://github.com/Pylons organization.

  - [ ] Documentation how to validate Enums, Dataclases, PyDantic models against
  schema.

  - [ ] Create a https://realworld.io/ example.

  - [ ] Add to https://trypyramid.com/extending-pyramid.html.

  - [x] Add to https://github.com/p1c2u/openapi-core.

  - [ ] Add to https://github.com/uralbash/awesome-pyramid.

  - [ ] Add to https://github.com/vinta/awesome-python.

  - [ ] Announcement blog post.
OverSpeedIO/koa2-oas3: >
  # OpenAPI 3 Koa 2 Request Validation Middleware


  [![JavaScript Style
  Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)


  ## Requirements


  ```

  Node.js Version 8+

  OpenAPI 3

  Koa2

  ```


  ## Usage

  ```javascript

  const koa2OA3 = require('@overspeed/koa2-oas3');

  const _ = require('koa-route');

  const Koa = require('koa');

  const app = new Koa();


  const specUri =
  'https://api.swaggerhub.com/apis/overspeedio/Koa2Oas3Example/1.0.0';


  // default options

  const koa2OA3Options = {
    mergeRemoteRefs: false,
    renderDocs: true,
    docsPath: '/docs'
  };


  // apply middleware

  koa2OA3(app, specUri, koa2OA3Options)
    .then(() => {
      app.use(_.get('/pet/:id', (ctx, id) => {
        ctx.body = {
          id,
          name: 'tobi'
        };
      }));

      app.listen(3000);

      console.log('listening');
    })
    .catch((e) => {
      console.error(e);
    });
  ```


  ## koa2OA3 Function Params


  | Name      | Type              | Required |
  Description                                                                                                                                
  |

  |-----------|-------------------|----------|---------------------------------------------------------------------------------------------------------------------------------------------|

  | app       | Koa2 App Instance | true     | A Koa2 app instance you want the
  middleware to be applied
  to.                                                                              
  |

  | specOrUri | String / Object   | true     | Either a URI to a swagger
  specification Koa2-OAS3 can grab down and apply, or a JavaScript object that
  contains the OpenAPI3 specification. |

  | options   | Object            | false    | Custom options to pass to the
  middleware, see all options
  below.                                                                           
  |


  ## Allowed Options and Defaults


  | Option                      | Type     |
  Default                                   |
  Description                                                                                                                                                                             
  |

  |-----------------------------|----------|-------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

  | mergeRemoteRefs             | Boolean  |
  false                                     | OpenAPI 3 allows you to reference
  from other api specifications based on a URI. This option will reach out to
  these different refs and merge the definitions into the provided API spec. |

  | renderDocs                  | Boolean  |
  true                                      | This renders a UI to visualize the
  OpenAPI
  specification.                                                                                                                               
  |

  | docsPath                    | String   |
  /docs                                     | What path should the docs be
  rendered at. In addition a second route will be rendered {docsPath}/spec that
  responds with the api specification in JSON format.                          
  |

  | docsSuupportedSubmitMethods | Array    | ['get', 'post', 'put', 'delete',
  'patch'] | In the DOC's interactive interface example requests can be
  submitted to the configured API spec remotes. This allows adding limitations
  on the feature.                                  |

  | docsJsonEditor              | Boolean  |
  false                                     | Should the JSON editor be visible
  in the render documentation
  view.                                                                                                                     
  |

  | docsShowRequestHeaders      | Boolean  |
  false                                     |
  https://www.npmjs.com/package/koa2-swagger-ui                                                                                                                                           
  |

  | docsHideTopbar              | Boolean  |
  true                                      |
  https://www.npmjs.com/package/koa2-swagger-ui                                                                                                                                           
  |

  | docsAuthOptions             | Object   |
  {}                                        |
  https://www.npmjs.com/package/koa2-swagger-ui                                                                                                                                           
  |

  | docDdefaultModelRendering   | String   |
  schema                                    |
  https://www.npmjs.com/package/koa2-swagger-ui                                                                                                                                           
  |

  | handleError                 | Function | See below code
  snippet                   
  |                                                                                                                                                                                         
  |


  ## Default Error Handle


  ```javascript

  const handleError = ({ code, location, message }) => {
    return {
      errors: [{
        status: `${code}`,
        title: 'Request Validation Error',
        detail: message,
        source: location
      }]
    };
  }

  ```
Mermade/openapi-webconverter: >
  # Online Swagger 2.0 to OpenAPI 3.0.x converter


  [Convert](https://mermade.org.uk/openapi-converter) Swagger 2.0 definitions or
  [validate](https://mermade.org.uk/openapi-converter) OpenAPI 3.0.x definitions


  Conversions and validations are performed by
  [OAS-Kit](https://github.com/mermade/oas-kit)


  You may also use the
  [API](http://petstore.swagger.io/?url=https://mermade.org.uk/openapi-converter/contract/swagger.json)
  to convert Swagger 2.0 definitions or validate a 3.0.x definition

  <p>

  <ul>
     <li><i>POST</i> <b>/api/v1/convert</b> - with a source or filename parameter, optionally with validate=on</li>
     <li><i>POST</i> <b>/api/v1/validate</b> - with a source or filename parameter</li>
     <li><i>GET</i> <a href="https://mermade.org.uk/openapi-converter/api/v1/status">/api/v1/status</a></li>
     <li><i>GET</i> <b>/api/v1/convert?url=...</b> optionally with a <b>validate</b> parameter</li>
     <li><i>GET</i> <b>/api/v1/validate?url=...</b></li>
     <li><i>GET</i> <b>/api/v1/badge?url=...</b> returns a redirect to an SVG badge</li>
  </ul>


  [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)
zweidenker/OpenAPI: >
  # OpenAPI


  [![Build
  Status](https://travis-ci.org/zweidenker/OpenAPI.svg?branch=master)](https://travis-ci.org/zweidenker/OpenAPI)
denismakogon/fn-openapi-v3: "OpenAPI v3 spec generator tool for Fn applications\n==================================================\n\nIdea\n----\nThe Fn application is nothing but set of function where each has its own HTTP route for execution.\n\nWhat if there's a way to build client binding for the particular serverless application?\n\nThis library and tool are designed to provide necessary API to generate OpenAPI v3.0.0 specification using Function spec language.\n\n\nFunction spec language\n----------------------\n\nThis tool relies on improved Swagger API 2.0 plus additional inline referencing features \nthat are missing in both Swagger 2.0 and OpenAPI 3.0 that are allowing developers to structure their application in more modular way.\n\n\nFunction spec example\n---------------------\n\n```yaml\nversion: 0.0.1\ndescription: Functions spec that describes Fn-powered serverless application\nfunctions:\n  createUser:\n    handler: handler.create\n    events:\n      - http:\n          method: post\n          fn: ${file(models/func.yml):first}\n          documentation:\n            summary: Create User\n            description: Creates a user and then sends a generated password email\n            requestBody:\n              schema: ${file(models/request.json)}\n            parameters:\n              - name: username\n                description: The username for a user to create\n                required: true\n                in: path\n                schema:\n                  type: string\n                  pattern: \"^[-a-z0-9_]+$\"\n              - name: membershipType\n                description: The user's Membership Type\n                required: true\n                in: query\n                schema:\n                  type: string\n                  enum:\n                    - premium\n                    - standard\n            responses:\n              200:\n                description: create a user\n                content:\n                  application/json:\n                    schema: ${file(models/request.json)}\n              500:\n                description: error\n                content:\n                  application/json:\n                    schema: ${file(models/error.json)}\n```\nThis sample you can find [here](examples/fn.yml)\n\nusing the following code:\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/denismakogon/fn-openapi/models\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc main() {\n\n\tyamlFile, err := ioutil.ReadFile(os.Args[1])\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n\n\tvar fn models.Fn\n\n\terr = fn.Unmarshal(yamlFile, os.Stdout)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n\n\tvar oai models.OpenAPISpec\n\terr = oai.FromFnSpec(\"http://localhost:8080\", &fn)\n\terr = oai.Marshal(os.Stdout)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n}\n```\n\nit is possible to turn Function spec into valid OpenAPI v3 specification.\nTo confirm that spec is valid use the following command:\n```bash\ndocker run --rm -i -v `pwd`:/go fnproject/openapiv3-validator:0.0.1 /go/examples/openapi.yml\n```\n"
nasa9084/go-openapi: >
  OpenAPI Specification object model

  ===


  [![GoDoc](https://godoc.org/github.com/nasa9084/go-openapi?status.svg)](https://godoc.org/github.com/nasa9084/go-openapi)

  [![Build
  Status](https://travis-ci.org/nasa9084/go-openapi.svg?branch=master)](https://travis-ci.org/nasa9084/go-openapi)

  [![codecov](https://codecov.io/gh/nasa9084/go-openapi/branch/master/graph/badge.svg)](https://codecov.io/gh/nasa9084/go-openapi)


  ---


  **This package is still under development, so the API will be changed without
  any notification**


  ## Overview


  This is an implementation of [OpenAPI Specification
  3.0](https://github.com/OAI/OpenAPI-Specification) object model with some
  usable functions.


  ## Synopsis


  ``` go

  package main


  import (
      "fmt"

      "github.com/nasa9084/go-openapi"
  )


  func main() {
      doc, _ := openapi.LoadFile("path/to/spec")
      fmt.Print(doc.Version)
  }

  ```


  ## Status


  * [x] Model definition

  * [x] Load OpenAPI 3.0 spec file

  * [ ] Resolve Reference object
    * [x] Resolve #/component reference
    * [ ] Resolve other file reference
  * [ ] Validation
    * [x] Validate spec values
      * [ ] test for validation
        * [x] Document
        * [x] Info
        * [x] Contact
        * [x] License
        * [x] Server
        * [x] ServerVariable
        * [x] Paths
        * [x] PathItem
        * [x] Operation
        * [x] Parameter
        * [x] RequestBody
        * [x] Responses
        * [x] Response
        * [ ] Callbacks
        * [ ] Callback
        * [ ] Schema
        * [ ] Example
        * [ ] MediaType
        * [ ] Header
        * [ ] Link
        * [ ] Encoding
        * [x] Discriminator
        * [x] XML
        * [ ] Components
        * [x] SecurityScheme
        * [x] OAuthFlows
        * [x] OAuthFlow
        * [ ] SecurityRequirement
        * [x] Tag
        * [x] ExternalDocumentation
    * [ ] Validate HTTP Request
    * [ ] Validate HTTP Response
foxel/openapi3-typescript-codegen: >
  # openapi3-typescript-codegen


  TypeScript code generator for OpenAPI 3.0.0


  Inspired by problems with
  [openapi-codegen](https://github.com/Mermade/openapi-codegen)


  Idea is to provide native OpenAPI 3 generator with all language-specific code
  being put into templates with help of generic helpers.


  Currently only TypeScript language and Angular frameworks are supported.


  **Work in progress**


  ## Usage


  ### Installing


  `npm i -g openapi3-typescript-codegen`


  ### CLI


  ```

  op3-codegen {openapi-definition.yaml} [options]


  Options:
    -o, --output     Specify output directory         [string] [default: "./out/"]
    -t, --templates  Specify templates directory (pro only)               [string]
  ```


  ## Limitations in OpenAPI support (to be removed)


  * support only for 'http' ('basic' and 'bearer') and 'apiKey' Security
  schemas,

  * parameters encoder supports only style='form',explode=false encoding scheme,

  * only GET, POST, PUT, DELETE operations code is generated 
muskratjs/muskrat: |
  # muskrat

  Runtime API schema generation
kinecosystem/ecosystem-api: "# Kin Ecosystem SDK API\n\n## marketplace API\nThe `openapi.yaml` file contains definitions of the services and models that will be available for our client to access on the server.\n\nTo edit the file you can use the [online editor](http://editor.swagger.io/?url=https://raw.githubusercontent.com/kinfoundation/ecosystem-api/master/openapi.yaml)\n\n### JWT specs and examples:\n#### JWT encoded messages\n##### JWT header format\n\nFor all 3 JWTs we will use the following template:\n```\n{\n\talg: string; // ES256 but can be discussed\n\ttyp: string; // JWT\n\tkid: string; // identifier of the keypair that was used to sign the JWT. identifiers and public keys will be provided by signer authority. This enables using multiple private/public key pairs (a list of public keys and their ids need to be provided by signer authority to verifier in advanced)\n}\n```\n\n#### Register payload\n```\n{\n\t// common/ standard fields\n\tiat: number;  // issued at - seconds from epoc\n\tiss: string; // issuer\n\texp: number; // expiration\n\tsub: string; // subject - \"register\"\n\n\t// application fields\n\tuser_id: string; // id of the user - or a deterministic unique id for the user (hash)\n}\n```\n##### [Example (viewable on jwt.io)](https://jwt.io/?token=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6InJlZ2lzdGVyIiwidXNlcl9pZCI6ImFfaGFzaF9vbl9raWtfdXNlcl9pZCJ9.6DwojspQ46inlwYwn3NNH0bmQIzKd7mL0VX8V2ZmlH8aZqWF2UbK_Md5kcxgnXgq0P6tExVTr1vxpwhfj7_3dg)\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6InJlZ2lzdGVyIiwidXNlcl9pZCI6ImFfaGFzaF9vbl9raWtfdXNlcl9pZCJ9.6DwojspQ46inlwYwn3NNH0bmQIzKd7mL0VX8V2ZmlH8aZqWF2UbK_Md5kcxgnXgq0P6tExVTr1vxpwhfj7_3dg\n```\n\n#### Spend payload\n```\n{\n\tiat: number;  // issued at - seconds from epoc\n\tiss: string; // issuer\n\texp: number; // expiration\n\tsub: string; // subject - \"spend\"\n\n\tnonce: string; // optional, to create a unique pair for offer id per user\n\toffer: {\n\t\tid: string; // offer id - id is decided by digital service\n\t\tamount: number; // amount of kin for this offer - price\n\t};\n\tsender: {\n\t\tuser_id: string; // optional: user_id who will perform the\n\t\ttitle: string; // order title - appears in order history\n\t\tdescription: string; // order description - appears in order history\n\t};\n}\n```\n##### [Example (viewable on jwt.io)](https://jwt.io/?token=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6InNwZW5kIiwib2ZmZXIiOnsiaWQiOiJPMTIzMTIzMTIzIiwiYW1vdW50Ijo1MDAwfSwic2VuZGVyIjp7InRpdGxlIjoiQmx1ZSBUaGVtZSIsImRlc2NyaXB0aW9uIjoiT2NlYW4gQmx1ZSIsInVzZXJfaWQiOiJzb21lX3VzZXIifX0.BRacJ37zbbaKivWD_uhC2JXozzrHDN5B9VeG7d1BXjkpPYEfpaEy_kKF6xqp7oUMjEG2ltrOQPJ-UkFcFl6H-g)\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6InNwZW5kIiwib2ZmZXIiOnsiaWQiOiJPMTIzMTIzMTIzIiwiYW1vdW50Ijo1MDAwfSwic2VuZGVyIjp7InRpdGxlIjoiQmx1ZSBUaGVtZSIsImRlc2NyaXB0aW9uIjoiT2NlYW4gQmx1ZSIsInVzZXJfaWQiOiJzb21lX3VzZXIifX0.BRacJ37zbbaKivWD_uhC2JXozzrHDN5B9VeG7d1BXjkpPYEfpaEy_kKF6xqp7oUMjEG2ltrOQPJ-UkFcFl6H-g\n```\n#### Earn payload\n```\n{\n\tiat: number;  // issued at - seconds from epoc\n\tiss: string; // issuer\n\texp: number; // expiration\n\tsub: string; // subject - \"earn\"\n\n\tnonce: string; // optional, to create a unique pair for offer id per user\n\toffer: {\n\t\tid: string; // offer id - id is decided by digital service\n\t\tamount: number; // amount of kin for this offer - price\n\t};\n\trecipient: {\n\t\tuser_id: string; // user_id who will perform the order\n\t\ttitle: string; // order title - appears in order history\n\t\tdescription: string; // order description - appears in order history\n\t};\n}\n```\n##### [Example (viewable on jwt.io)](https://jwt.io/?token=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6ImVhcm4iLCJvZmZlciI6eyJpZCI6Ik8xMjMxMjMxMjMiLCJhbW91bnQiOjUwMDB9LCJyZWNpcGllbnQiOnsidGl0bGUiOiJCbHVlIFRoZW1lIiwiZGVzY3JpcHRpb24iOiJPY2VhbiBCbHVlIiwidXNlcl9pZCI6InNvbWVfdXNlciJ9fQ.R7OpvaZQIAzjQ0MSi5nC1c39oC9oN08NVKwricMyWnuMbK5FD9Qn6ecmol4JnMGE5IZA7j_LR-EEbVhhEYi57g)\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6ImVhcm4iLCJvZmZlciI6eyJpZCI6Ik8xMjMxMjMxMjMiLCJhbW91bnQiOjUwMDB9LCJyZWNpcGllbnQiOnsidGl0bGUiOiJCbHVlIFRoZW1lIiwiZGVzY3JpcHRpb24iOiJPY2VhbiBCbHVlIiwidXNlcl9pZCI6InNvbWVfdXNlciJ9fQ.R7OpvaZQIAzjQ0MSi5nC1c39oC9oN08NVKwricMyWnuMbK5FD9Qn6ecmol4JnMGE5IZA7j_LR-EEbVhhEYi57g\n```\n#### PayToUser payload\n```\n{\n\tiat: number;  // issued at - seconds from epoc\n\tiss: string; // issuer\n\texp: number; // expiration\n\tsub: string; // subject - \"pay_to_user\"\n\n\tnonce: string; // optional, to create a unique pair for offer id per user\n\toffer: {\n\t\tid: string; // offer id - id is decided by digital service\n\t\tamount: number; // amount of kin for this offer - price\n\t};\n\tsender: {\n\t\tuser_id: string; // optional: user_id who will perform the order\n\t\ttitle: string; // offer title - appears in order history\n\t\tdescription: string; // offer description - appears in order history\n\t};\n\trecipient: {\n\t\tuser_id: string; // user_id who will receive the order\n\t\ttitle: string; // offer title - appears in order history\n\t\tdescription: string; // offer description - appears in order history\n\t};\n}\n```\n##### [Example (viewable on jwt.io)](https://jwt.io/?tokeneyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6InBheV90b191c2VyIiwib2ZmZXIiOnsiaWQiOiJPMTIzMTIzMTIzIiwiYW1vdW50Ijo1MDAwfSwic2VuZGVyIjp7InRpdGxlIjoiVGlwIEZyb20gRG9vZHkiLCJkZXNjcmlwdGlvbiI6IkRvb2R5IHRpcHBlZCB5b3UiLCJ1c2VyX2lkIjoidXNlcjpuaXR6YW4ifSwicmVjaXBpZW50Ijp7InRpdGxlIjoiVGlwIFRvIE5pdHphbiIsImRlc2NyaXB0aW9uIjoiWW91IHRpcHBlZCBOaXR6YW4iLCJ1c2VyX2lkIjoidXNlcjpkb29keSJ9fQ.GVufyAI2UkpzzLlSL7a_kb5JcdSkgBb1PnzdL7wUkIGx-IUUu_pgTecElwTbZvWrCSr_GkJ4leD1MnXHSUb_QQ)\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayBzZXJ2ZXIiLCJleHAiOjE1MjYyMzkwMjIsInN1YiI6InBheV90b191c2VyIiwib2ZmZXIiOnsiaWQiOiJPMTIzMTIzMTIzIiwiYW1vdW50Ijo1MDAwfSwic2VuZGVyIjp7InRpdGxlIjoiVGlwIEZyb20gRG9vZHkiLCJkZXNjcmlwdGlvbiI6IkRvb2R5IHRpcHBlZCB5b3UiLCJ1c2VyX2lkIjoidXNlcjpuaXR6YW4ifSwicmVjaXBpZW50Ijp7InRpdGxlIjoiVGlwIFRvIE5pdHphbiIsImRlc2NyaXB0aW9uIjoiWW91IHRpcHBlZCBOaXR6YW4iLCJ1c2VyX2lkIjoidXNlcjpkb29keSJ9fQ.GVufyAI2UkpzzLlSL7a_kb5JcdSkgBb1PnzdL7wUkIGx-IUUu_pgTecElwTbZvWrCSr_GkJ4leD1MnXHSUb_QQ\n```\n#### PaymentConfirmation payload\n```\n{\n\tiat: number;  // issued at - seconds from epoc\n\tiss: string; // issuer\n\texp: number; // expiration\n\tsub: string; // subject - \"payment_confirmation\"\n\n\tsender_user_id: string; // user identifier - same value as given by register\n\trecipient_user_id: string; // user identifier - same value as given by register\n\toffer_id: string; // offer id - id is decided by digital service\n\tnonce: string; // the same as was send in the order JWT, or a default value in case none was used\n\tpayment: {\n\t\tblockchain: string; // identifier of the blockchain network the transaction was made on\n\t\ttransaction_id: string; // stellar identifier of the blockchain transaction\n\t};\n}\n```\n##### [Example (viewable on jwt.io)](https://jwt.io/?token=eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayIsImV4cCI6MTUyNjIzOTAyMiwic3ViIjoicGF5bWVudF9jb25maXJtYXRpb24iLCJvZmZlcl9pZCI6Ik8xMjMxMjMxMjMiLCJzZW5kZXJfdXNlcl9pZCI6InVzZXI6ZG9vZHkiLCJyZWNpcGllbnRfdXNlcl9pZCI6InVzZXI6bml0emFuIiwicGF5bWVudCI6eyJibG9ja2NoYWluIjoic3RlbGxhci1tYWlubmV0IiwidHJhbnNhY3Rpb25faWQiOiJ0cmFuc2FjdGlvbjoxMjM0NSJ9fQ.-AbZOfC69eY1It43RccOXluY-sjWSi4JFvQkVKO9D2UgYU3jNPbEcBERLrqBHPSpS6f26LVpIsg5A81UQNoukw)\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNvbWVfaWQifQ.eyJpYXQiOjE1MTYyMzkwMjIsImlzcyI6ImtpayIsImV4cCI6MTUyNjIzOTAyMiwic3ViIjoicGF5bWVudF9jb25maXJtYXRpb24iLCJvZmZlcl9pZCI6Ik8xMjMxMjMxMjMiLCJzZW5kZXJfdXNlcl9pZCI6InVzZXI6ZG9vZHkiLCJyZWNpcGllbnRfdXNlcl9pZCI6InVzZXI6bml0emFuIiwicGF5bWVudCI6eyJibG9ja2NoYWluIjoic3RlbGxhci1tYWlubmV0IiwidHJhbnNhY3Rpb25faWQiOiJ0cmFuc2FjdGlvbjoxMjM0NSJ9fQ.-AbZOfC69eY1It43RccOXluY-sjWSi4JFvQkVKO9D2UgYU3jNPbEcBERLrqBHPSpS6f26LVpIsg5A81UQNoukw\n```\n\n#### Key Pair used in Examples\nPublic:\n```\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9\nq9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==\n-----END PUBLIC KEY-----\n```\nPrivate:\n```\n-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgevZzL1gdAFr88hb2\nOF/2NxApJCzGCEDdfSp6VQO30hyhRANCAAQRWz+jn65BtOMvdyHKcvjBeBSDZH2r\n1RTwjmYSi9R/zpBnuQ4EiMnCqfMPWiZqB4QdbAd0E7oH50VpuZ1P087G\n-----END PRIVATE KEY-----\n```\n\n## internal payment\n\nTo edit the file you can use the [online editor](http://editor.swagger.io/?url=https://raw.githubusercontent.com/kinfoundation/ecosystem-api/master/payment.yaml)\n\n## creating client stubs\n\nopenapi3 code generation is supported by a few projects\n\n### java\n\nusing `github.com:swagger-api/swagger-codegen` on branch `v3.0.0-rc0` compile the maven project and run the following:\n```\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i ~/Workspace/ecosystem-api/openapi.yaml -l java  -o java_client\n```\n"
microprofile-extensions/openapi-ext: >
  [Extensions for MicroProfile](https://www.microprofile-ext.org/)


  # OpenApi Extensions


  [![build_status](https://travis-ci.com/microprofile-extensions/openapi-ext.svg?branch=master)](https://travis-ci.com/microprofile-extensions/openapi-ext)

  [![License](https://img.shields.io/badge/license-Apache%202-blue.svg)](https://github.com/microprofile-extensions/openapi-ext/blob/master/LICENSE)

  ___________

  Here you will find some extra tools for Open API


  * [Swagger
  UI](https://github.com/microprofile-extensions/openapi-ext/blob/master/swagger-ui/README.md)


  ## Example


  Also look at the [example
  application](https://github.com/microprofile-extensions/openapi-ext/blob/master/openapi-example/README.md)
  to see how this is used
philosowaffle/vs-openapi-designer: >
  # vs-openapi-designer [Preview]

   VS Code extension for previewing [OpenApi Schema's](https://github.com/OAI/OpenAPI-Specification) within VS Code.

   Find it in the [VS Code MarketPlace](https://marketplace.visualstudio.com/items?itemName=philosowaffle.openapi-designer).

  ## Features


  - Preview OpenApi specs in side panel in VS Code or in Browser

  - Swagger 2.0 Spec previewing and validation
    - YAML/JSON
    - Single and Multi-File (both local and remote references)
  - OpenApi 3.0 Spec previewing and validation
    - YAML/JSON
    - Single and Multi-File (both local and remote references)

  ## Usage


  - Open the root of your schema

  - `ctrl-shft-p` > `OpenApi Designer: Preview`

  - Other Available Commands
    - `OpenApi Designer: Preview` - opens preview using your default view preference
    - `OpenApi Designer: Preview In Side Panel` - open preview in side panel
    - `OpenApi Designer: Preview In Browser` - open preivew in browser
    - `OpenApi Designer: Compile Schema` - Compiles a unified schema and dereferences all `$refs` into a single file

  ## Requirements


  - None


  ## Extension Settings


  This extension contributes the following settings:


  - `openApiDesigner.defaultPort`: default port for serving the Swagger UI,
  default `9005`

  - `openApiDesigner.previewInBrowser`: whether to open preview in the Browser
  or in VS Code side panel, default `false`


  ## Known Issues


  See known issues
  [here](https://github.com/philosowaffle/vs-openapi-designer/issues).  If your
  issue is not already listed there please log a new one.


  ## Release Notes


  See
  [CHANGELOG](https://github.com/philosowaffle/vs-openapi-designer/blob/master/CHANGELOG.md).


  -----------------------------------------------------------------------------------------------------------


  ## Contributing


  ### Development


  - cd dir, `npm install` to install needed dependencies

  - F5 to launch extension and validate

  - `npm install -g vsce` For packaging and publishing
      - `vsce package` - To build pre-release pacakages
      - To side load in VS Code `ctrl-shft-p`, `Install From VSIX`, locate output from `package`
ckaratzas/tus-server-implementation: >
  # TUS Server Java Implementation

  An implementation of the Tus Resumable Upload protocol
  [https://tus.io/protocols/resumable-upload.html] in java. Vertx-Web is used
  for the http stack part

  and redis as the backend for upload information management.

  Extensions supported are creation,checksum,termination,concatenation. The
  purpose of this repository is to provide a Tus protocol implementation
  agnostic

  of the underlying storage provider thus allowing implementors to focus on
  their business logic and specific needs.

  An issue that is not a concern of the protocol but could be an extension is
  the handling of the locks during a patch operation. So when a patch is
  initiated

  a lock is acquired (for most obvious cases) to ensure consistency. If the
  process triggered from patch fails and lock is not released there is a 

  phantom lock remaining. This edge case could be mitigated by either making the
  server sticky and keeping the locks in-process or by perhaps issuing a 

  release request with a lock token obtained by the initiator of the upload.

  No authentication valves are implemented here also.


  # Instructions

  To just build the tus-server-implementation just:


  ```cd <root>```


  ```mvn clean install```


  To build the docker image for the tus-server-implementation just (docker edge
  release [https://docs.docker.com/edge/] is required!):


  ```cd <root>```


  ```docker build -t tus_server .```


  In order to run tus-server-implementation along with all dependencies just
  (assuming you already have the docker image built from above):


  ```cd <root>```


  ```docker-compose -f tus-server.yml up```


  In order to setup the tus-server-implementation for development from your
  favorite IDE redis running is required:


  ```cd <root>```


  ```docker-compose -f redis.yml up```


  After that in order to run the tus-server-implementation from inside your
  favorite IDE just:

  Run the com.tus.oss.server.application.Application main class 

  with program arguments:
   -c <root>/configuration/ -b tus-server-beans.xml
  and VM parameters: -Dlogging.config=file:<root>/configuration/logback.xml

  Redis must be live also (see above how to run it)


  # Testing

  In the test folder:

  There is a very simple upload test that uses tus-java-client
  [https://github.com/tus/tus-java-client]. 

  There are also curl tests that test simple upload and partial uploads
  (concatenation extension)
Dzoukr/OpenAPIParser: >-
  <img src="https://github.com/Dzoukr/OpenAPITypeProvider/raw/master/logo.jpg"
  alt="drawing" width="100px"/>


  # Open API F# Parser


  Simple library for parsing YAML/JSON Open API (previously called as Swagger)
  specification (version 3.0.1). Originally part of my type provider, but I will
  probably never finish it, so at least community can use part of it for own
  projects. :)


  ## Installation

  First install NuGet package

      Install-Package OpenAPIParser

  or using [Paket](http://fsprojects.github.io/Paket/getting-started.html)

      nuget OpenAPIParser

  ## How to use


  Typically, you would use some existing specification (see [official examples
  for version
  3](https://github.com/OAI/OpenAPI-Specification/tree/master/examples/v3.0)):


  ```fsharp

  open OpenAPIParser.Version3.Parser

  let openAPI = Document.loadFromYamlFile "mySpec.yaml" 

  ```


  Then you have basic F# record filled


  ```fsharp

  let version = openAPI.Info.Version

  let title = openAPI.Info.Title

  let paths = openAPI.Paths

  ...

  ```


  Please check [test
  project](https://github.com/Dzoukr/OpenAPIParser/tree/master/tests/OpenAPIParser.Tests)
  for more examples.


  ## Limitations


  Not all properties from [3.0.1
  specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md)
  are implemented. Especially `anyOf` and `oneOf` Schema objects, which will be
  probably implemented in future versions. Please check [Specification record
  definition](https://github.com/Dzoukr/OpenAPIParser/blob/master/src/OpenAPIParser/Version3/Specification.fs)
  for already implemented properties.


  ## Contribution


  You know the drill. Code + Tests = Good PR. Any contribution more than
  welcome!
confuser/exegesis-koa: >
  # exegesis-koa


  [![Build
  Status](https://api.travis-ci.org/confuser/exegesis-koa.svg?branch=master)](https://travis-ci.org/confuser/exegesis-koa)

  [![Coverage
  Status](https://coveralls.io/repos/github/confuser/exegesis-koa/badge.svg?branch=master)](https://coveralls.io/github/confuser/exegesis-koa?branch=master)

  [![Known
  Vulnerabilities](https://snyk.io/test/github/confuser/exegesis-koa/badge.svg?targetFile=package.json)](https://snyk.io/test/github/confuser/exegesis-koa?targetFile=package.json)


  > ## *exegesis*

  >

  > *n.* An explanation or critical interpretation of a text, especially an

  > API definition document.

  >

  > -- No dictionary ever


  This library implements a Koa middleware for

  [OpenAPI
  3.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#requestBodyObject).


  ##

  ```

  npm install exegesis-koa

  ```


  ## Tutorial


  Check out the tutorial
  [here](https://github.com/exegesis-js/exegesis/blob/master/docs/Tutorial.md).


  ## Usage

  ```js

  const Koa = require('koa')

  const path = require('path')

  const exegesisKoa = require('exegesis-koa')


  async function createServer() {
      // See https://github.com/exegesis-js/exegesis/blob/master/docs/Options.md
      const options = {
          controllers: path.resolve(__dirname, './controllers')
      }
      const exegesisMiddleware = exegesisKoa(path.resolve(__dirname, './openapi.yaml'), options)

      const app = new Koa()

      // If you have any body parsers, this should go before them.
      app.use(async (ctx, next) => {
        try {
          await next()
        } catch (err) {
          ctx.status = 500
          ctx.body = `Internal error: ${err.message}`
        }
      })
      app.use(exegesisMiddleware)
      app.use(async (ctx) => {
        if (ctx.status === 404) {
          ctx.status = 404
        }
      })

      app.listen()
  }

  ```


  Calling `exegesiskoa(openApiFile, options)` will return a Promise

  which resolves to a koa middleware.


  `openApiFile` is either a path to your openapi.yaml or openapi.json file,

  or it can be a JSON object with the contents of your OpenAPI document.  This

  should have the
  [`x-exegesis-controller`](https://github.com/exegesis-js/exegesis/blob/master/docs/OAS3%20Specification%20Extensions.md)

  extension defined on any paths you want to be able to access.


  `options` can be [anything you can pass to
  exegesis](https://github.com/exegesis-js/exegesis/blob/master/docs/Options.md). 
  At a

  minimum, you'll probably want to provide `options.controllers`, a path to
  where

  your [controller
  modules](https://github.com/exegesis-js/exegesis/blob/master/docs/Exegesis%20Controllers.md)

  can be found.  If you have any security requirements defined, you'll also

  want to pass in some
  [authenticators](https://github.com/exegesis-js/exegesis/blob/master/docs/OAS3%20Security.md).

  To enable response validation, you'll want to provide a validation callback

  function via
  [`onResponseValidationError()`](https://github.com/exegesis-js/exegesis/blob/master/docs/Options.md#onresponsevalidationerror).

  Exegesis's functionality can also be extended using
  [plugins](https://github.com/exegesis-js/exegesis/tree/master/docs),

  which run on every request.  Plugins let you add functionality like

  [role base
  authorization](https://github.com/exegesis-js/exegesis-plugin-roles),

  or CORS.
unifysell/unifysell-sdk-php: >
  # Official Unifysell API SDK


  This packages combines the group of packages needed.


  ## Installation


  ### Include the package via composer


  to use in composer add to the require section:
      
      "require": {
          "unifysell/unifysell-sdk-php": "*"
      }

  ### Installing composer


  see https://getcomposer.org/download/


  ## Usage


  You can have a look at the `example/complete-example.php` file for a basic
  usage example.


  ### Authenticate

      $keycloakClient = new \Unifysell\OAuth2\Client\Keycloak();
      $accessToken = $keycloakClient->createAccessToken();

  ### Make your first request

      $config = Unifysell\SDK\Configuration::getDefaultConfiguration()->setApiKey(
          'Authorization', 
          $keycloakClient->getAccessToken()->getToken()
      );
      $config->setApiKeyPrefix('Authorization', 'Bearer');
      
      $apiInstance = new Unifysell\SDK\Api\OrdersApi(
          new GuzzleHttp\Client(),
          $config
      );
      
      $result = $apiInstance->getOrder(1);
kumuluz/kumuluzee-openapi: >
  # KumuluzEE OpenAPI

  [![Build
  Status](https://img.shields.io/travis/kumuluz/kumuluzee-openapi/master.svg?style=flat)](https://travis-ci.org/kumuluz/kumuluzee-openapi)


  > KumuluzEE OpenAPI project provides powerful tools to incorporate and
  visualize the OpenAPI 3 specification to your microservice.


  KumuluzEE OpenAPI project allows you to document microservice APIs using
  OpenAPI v3 compliant annotations. Project will automatically hook-up servlet
  that will 

  serve your API specifications on endpoint ```/api-specs/<jax-rs
  application-base-path>/openapi.[json|yaml]```. Furthermore, project allows you
  to integrate Swagger-UI into your

  microservice that will visualize APIs documentation and allow you to interact
  with your API resources.
   
  More details: [OpenAPI v3
  Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md).


  ## Usage


  You can enable KumuluzEE OpenAPI support by adding the following dependency:

  ```xml

  <dependency>
      <groupId>com.kumuluz.ee.openapi</groupId>
      <artifactId>kumuluzee-openapi</artifactId>
      <version>${kumuluzee-openapi.version}</version>
  </dependency>

  ```


  ## OpenAPI configuration


  When kumuluzee-openapi dependency is included in the project, you can start
  documenting your REST API using [Swagger-Core
  Annotations](https://github.com/swagger-api/swagger-core/wiki/Annotations-2.X).


  ### Documenting application class

  ```java

  @SecurityScheme(name = "openid-connect", type =
  SecuritySchemeType.OPENIDCONNECT, 
                  openIdConnectUrl = "http://auth-server-url/.well-known/openid-configuration")
  @OpenAPIDefinition(info = @Info(title = "Rest API", version = "v1", contact =
  @Contact(), license = @License(), description = "JavaSI API for managing
  conference."), security = @SecurityRequirement(name = "openid-connect"),
  servers = @Server(url ="http://localhost:8080/v1"))

  @ApplicationPath("v1")

  public class JavaSiApplication extends Application {...}

  ```


  ### Documenting resource class and operations

  ```java

  @Path("sessions")

  @Consumes(MediaType.APPLICATION_JSON)

  @Produces(MediaType.APPLICATION_JSON)

  public class SessionsResource {

      @Operation(description = "Returns list of sessions.", summary = "Sessions list", tags = "sessions", responses = {
              @ApiResponse(responseCode = "200",
                      description = "List of sessions",
                      content = @Content(
                              array = @ArraySchema(schema = @Schema(implementation = Session.class))),
                      headers = {@Header(name = "X-Total-Count", schema = @Schema(type = "integer"))}
                      )})
      @SecurityRequirement(name = "openid-connect")
      @GET
      public Response getSessions() {...} 
      ...
  }

  ```


  ## Accessing API specification


  Build and run project using:


  ```bash

  mvn clean package

  java -jar target/${project.build.finalName}.jar

  ```


  After startup API specification will be available at:


  **http://<-hostname-:<-port->/api-specs/<-application-base-path->/openapi.[json,yaml]**


  Example:


  http://localhost:8080/api-specs/v1/openapi.json


  Serving OpenAPI specification can be disabled by setting property
  **kumuluzee.openapi.spec.enabled** to false. By default serving API spec is
  enabled.


  ## Adding OpenAPI UI


  To serve API specification in visual form and to allow API consumers to
  interact with API resources you can add OpenAPI UI by including dependency:
    
  ```xml

  <dependency>
      <groupId>com.kumuluz.ee.openapi</groupId>
      <artifactId>kumuluzee-openapi-ui</artifactId>
      <version>${kumuluzee-openapi.version}</version>
  </dependency>

  ```


  Dependency will include OpenAPI UI artifacts, in case you want to temporarily
  disable OpenAPI UI you can do so by setting configuration property:
   
  ```yaml

  kumuluzee:
    openapi:
      ui:
        enabled: false
  ```


  After startup OpenAPI UI is available at: http://localhost:8080/api-specs/ui.


  If you want to disable OpenAPI Dependency you can set the following property:
   
  ```yaml

  kumuluzee:
    openapi:
      enabled: false
  ```


  ## Changelog


  Recent changes can be viewed on Github on the [Releases
  Page](https://github.com/kumuluz/kumuluzee-openapi/releases)



  ## Contribute


  See the [contributing
  docs](https://github.com/kumuluz/kumuluzee-openapi/blob/master/CONTRIBUTING.md)


  When submitting an issue, please follow the 

  [guidelines](https://github.com/kumuluz/kumuluzee-openapi/blob/master/CONTRIBUTING.md#bugs).


  When submitting a bugfix, write a test that exposes the bug and fails before
  applying your fix. Submit the test 

  alongside the fix.


  When submitting a new feature, add tests that cover the feature.


  ## License


  MIT
koumoul-dev/soas: >
  # Semantic Open API Specification library

  Holds utility functions to manipulate an API described with [OpenAPI 3.0
  specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  and [semantically
  annotated](http://www.intelligence.tuc.gr/~petrakis/publications/SOAS4.pdf).


  ## Quick start

  ```

  npm install --save

  ```


  ```javascript

  import soasLoader from 'soas'

  import apiDoc from 'path-to/my-api.json'


  const soas = soasLoader(apiDoc)


  const endPoints = soas.endPoints()

  const actions = soas.actions()


  const input1 = {
    "http://schema.org/streetAddress": "7 Rue Victor Schoelcher",
    "http://rdf.insee.fr/def/geo#codeCommune":"22050"
  }

  const output1 = await soas.execute('getCoord', input1)

  // output1 is :

  // {"http://schema.org/identifier":"1",

  // "http://schema.org/latitude":"48.3",

  // "http://schema.org/longitude":"-3.4"}


  // works with streams too

  const input2 = fs.createReadStream(path.join(__dirname, 'addresses.ndjson'))
                    .pipe(mimeTypeStream('application/x-ndjson').parser())
  const output2 = await soas.execute('postCoords', input)

  output2.pipe(mimeTypeStream('application/x-ndjson').serializer()).pipe(process.stdout)

  ...

  ```

  ## Documentation


  ### Constructor

  See the [OpenAPI 3.0
  specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)
  for the correct format of the API description.


  ```javascript

  import soasLoader from 'soas'

  import apiDoc from 'path-to/my-api.json'


  // apiDoc is a JSON describing an API with the OpenApi 3.0 specification

  // To keep this library light, schema validation is not handled

  const soas = soasLoader(apiDoc)

  ```


  ### endPoints()

  List API endpoints. Return an array of objects with the following properties :
   * **method** : the HTTP method
   * **path** : the path this endpoint refers to
   * **operation** : the operation described by this endpoint. See the [Operation Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#operationObject)

  ### actions()

  List all actions. An action is an API endpoint semantized with [annotations
  described
  here](http://www.intelligence.tuc.gr/~petrakis/publications/SOAS4.pdf). It has
  the followings properties :
   * **id** : the identifier of the action
   * **type** : the type of action. This should be a subtype of [schema.org Action](http://schema.org/Action), or something similar.
   * **operation** : path and method
   * **input** : an map of concepts => parameters location
   * **inputCollection** : boolean indicating if the action takes a collection as input
   * **inputBodyTypes** : the possible mime-types for the request body, if there is one
   * **output** : an map of concepts => object fields
   * **outputSchema**: The JSON schema of output
   * **outputCollection** : boolean indicating if the action outputs a collection
   * **outputBodyTypes** : the possible mime-types for the response body, if there is one
   * **summary** : the summary of the operation this action refers to
   * **canUse** : a boolean indicating if this library is able to use the action or not

  ### execute(actionId [, input, server])

  Return a promise. Once resolved, can be an object or a stream of objects which
  are maps of concepts and their value.


  **actionId** is the id of an action listed with `actions()`. **input** is is a
  map of concepts and their value. It can be a stream of objects too. **server**
  is an url to query, if not provided it will be resolved to the url of the
  first [Server
  Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#serverObject)
  of the `servers` property of the API description.
entrepreneur-interet-general/open_api_schemas_to_markdown: >
  [![Software
  License](https://img.shields.io/badge/License-MIT-orange.svg?style=flat-square)](https://github.com/entrepreneur-interet-general/open_api_schemas_to_markdown/blob/master/LICENSE.md)

  ![CircleCI](https://img.shields.io/circleci/project/github/entrepreneur-interet-general/open_api_schemas_to_markdown.svg?style=flat-square)

  ![PyPI](https://img.shields.io/pypi/open_api_schemas_to_markdown.svg?style=flat-square)



  # OpenAPI Components Schemas to Markdown

  The goal of this package is to generate [Github Flavored
  Markdown](https://github.github.com/gfm/) documentation of Components Schemas
  from the [OpenAPI 3
  specification](https://github.com/OAI/OpenAPI-Specification).


  Say you've got a YAML file:

  ```yml

  openapi: "3.0.0"

  info:
    version: "0"
    title: Demo
  paths:
    /demo:
      get:
        summary: Demo
        responses:
          '200':
            description: OK
  components:
    schemas:
      ResultatHumain:
        properties:
          operation_id:
            type: integer
            format: int64
            description: Le numéro unique de l'opération
            example: 1119920371
          categorie_personne:
            type: string
            description: Indique la catégorie de personne impliquée dans le bilan humain
            example: Pêcheur français
          resultat_humain:
            type: string
            description: Description du bilan humain
            example: Personne secourue
          nombre:
            type: number
            format: int32
            minimum: 0
            description: Nombre de personnes impliquées dans ce bilan
            example: 3
          dont_nombre_blesse:
            type: number
            format: int32
            minimum: 0
            description: Indique le nombre de personnes blessées dans le bilan
            example: 1

  ```


  The package will produce a Markdown file from the YAML specification file with
  the following content:

  ```markdown

  ## ResultatHumain

  |Field|Type|Description|Example|Properties|

  |---|---|---|---|---|

  |operation_id|integer($int64)|Le numéro unique de l'opération|1119920371||

  |categorie_personne|string|Indique la catégorie de personne impliquée dans le
  bilan humain|Pêcheur français||

  |resultat_humain|string|Description du bilan humain|Personne secourue||

  |nombre|number($int32)|Nombre de personnes impliquées dans ce bilan|3|minimum:
  0|

  |dont_nombre_blesse|number($int32)|Indique le nombre de personnes blessées
  dans le bilan|1|minimum: 0|

  ```


  And if you render it:

  ## ResultatHumain

  |Field|Type|Description|Example|Properties|

  |---|---|---|---|---|

  |operation_id|integer($int64)|Le numéro unique de l'opération|1119920371||

  |categorie_personne|string|Indique la catégorie de personne impliquée dans le
  bilan humain|Pêcheur français||

  |resultat_humain|string|Description du bilan humain|Personne secourue||

  |nombre|number($int32)|Nombre de personnes impliquées dans ce bilan|3|minimum:
  0|

  |dont_nombre_blesse|number($int32)|Indique le nombre de personnes blessées
  dans le bilan|1|minimum: 0|


  ## Installation

  ```

  pip install open-api-schemas-to-markdown

  ```


  ## Usage

  The package provides a command line tool.

  ```

  $ oa-to-md -h

  usage: oa-to-md [-h] input_filepath output_filepath [locale]


  positional arguments:
    input_filepath   The OpenAPI 3 YAML filepath
    output_filepath  The desired output filepath of the Markdown file
    locale           Locale to use when generating the Markdown file. Available:
                     en, fr

  optional arguments:
    -h, --help       show this help message and exit
  ```


  Example:

  ```

  oa-to-md open_api.yml documentation.md

  ```


  ## Notice

  This software is available under the MIT license and was developed as part of
  the [Entrepreneur d'Intérêt Général
  program](https://entrepreneur-interet-general.etalab.gouv.fr) by the French
  government.


  Projet développé dans le cadre du programme « [Entrepreneur d’intérêt
  général](https://entrepreneur-interet-general.etalab.gouv.fr) ».
brreg/openAPI: |
  Repository for OpenAPI spesifikasjoner fra Brønnøysundregistrene
funa1g/multi-file-oas-example: |
  # multi-file-oas-example
  An example of multi file OpenAPI Specification 3.0

  ## Usage
  If you check this example, use docker environment.

  ```
  docker-compose up
  ```

  And show `localhost:8080`

  ## Details
  This sample uses `multi-file-swagger`.

  # Copyright
  This software includes the work that is distributed in the Apache License 2.0
koshevy/oapi3codegen: "# Code generation from OpenAPI 3 to TypeScript\n\nLightweight and simple. Can be used for *browser's* and for Node.js ecosystems.\nNow supports converting from **OpenAPI 3** to **TypeScript** types (OpenAPI 2 and below are not supported).\n\n<details>\n<summary>For example, creates constructions such as (click to expand):</summary>\n\n```typescript\n/**\n * Typical 401 response\n */\nexport interface HttpErrorUnauthorized {\n  /**\n   * Error message\n   */\n  message: string;\n\n  /**\n   * Data appropriate to\n   * [WWW-Authenticate](https://tools.ietf.org/html/rfc7235#section-3.1).\n   */\n  wwwAuthenticate?: {\n    /**\n     * Prompt to authenticate\n     */\n    title: string;\n\n    /**\n     * Kind of authorization user has to use\n     */\n    type: string;\n\n    /**\n     * Type of authority (\"barrier\" or etc.)\n     */\n    realm: string;\n  };\n}\n\nexport interface GetParametersMeta_response401\n  extends HttpErrorUnauthorized {\n\n  /**\n   * Error message\n   */\n  message: string;\n\n  /**\n   * Data appropriate to\n   * [WWW-Authenticate](https://tools.ietf.org/html/rfc7235#section-3.1).\n   */\n  wwwAuthenticate?: {\n    /**\n     * Prompt to authenticate\n     */\n    title: string;\n\n    /**\n     * Kind of authorization user has to use\n     */\n    type: string;\n\n    /**\n     * Type of authority (\"barrier\" or etc.)\n     */\n    realm: string;\n  };\n}\n\n/**\n * Kind of request error: syntax or semantic. Syntax error means the\n * application logic error, semantics — error of data, that contragent\n * inputs.\n */\nexport enum HttpErrorBadRequestTypeEnum {\n  Syntax = \"syntax\",\n  Semantic = \"semantic\"\n}\n\n/**\n * Typical response one Bad Request Error (400)\n */\nexport interface HttpErrorBadRequest {\n  /**\n   * Common error message\n   */\n  message: string;\n\n  /**\n   * Kind of request error: syntax or semantic. Syntax error means the\n   * application logic error, semantics — error of data, that contragent\n   * inputs.\n   */\n  type?: HttpErrorBadRequestTypeEnum;\n\n  /**\n   * Explained description of error\n   */\n  description?: string;\n\n  /**\n   * Additional list of errors with JSON-pointers\n   */\n  errors?: Array<{\n    originalMessage: string;\n\n    message?: string;\n\n    jsonPointer: string;\n  }>;\n}\n\n/**\n * ## MetaDataView\n * MetaData helps decide what the method has to use to\n * interpret and render parameter or category of parameters.\n */\nexport type GetParametersMeta_response200 = Array<Category | Parameter>;\n\n```\n</details>\n\n-----\n\n> #### \U0001F6A6 Status of project\n> - **Stabilization:** ready to use in non-production projects (see Road Map).\n> - **Not supported YML (only JSON)**. *Will be supported soon. Now, you can use something like [js-yaml](https://www.npmjs.com/package/js-yaml)*\n> - ***\U0001F41E UPDATE:*** Fixed problem with infinity loop in recursive types!\n>\n> Please, if it possible: send me your schemas that not converts properly.\n\n### Online demo\n\nWork in progress! Now, see how to use.\n\n### Road map\n\nWork is just started, and current functionality (creating TypeScript types) —\nIt's just a first part of the supposed functionality.\nWith time, it's supposed, possibilities of this plugin will be extended by:\n\n- *Make project well documented [in progress]*\n- *YAML support [in progress]*\n- *Stabilization [in progress]*\n- *Playground site [in progress]*\n- Plugins support\n- Generation classes (now creates only interfaces) with internal validation [ *concept description is coming soon* ]\n- Generation API Classes\n    - Solutions for AngularX based on *Assured requests idea* with internal validation [ *concept description is coming soon* ]\n    - *May be, something else...*\n- **DDD-tools** (Start kit for OpenAPI3-projects):\n    - Bundler for complex files structure. Need fo organization complex API-libraries.\n    - [Dredd](https://www.npmjs.com/package/dredd)\n    - Most populars doc-generators (at least, [Redoc](https://www.npmjs.com/package/redoc) and [SwaggerUI](https://www.npmjs.com/package/swagger-ui))\n    - Convention for working with DDD OpenAPI3\n- **Other languages** (is there are need for it?): Kotlin, Java, PHP, \n\n### Ideology\n\n- **Data format loyalty:** it's should be as useful as it possible regardless validity of source data.\n- **Integration**: solution should be able to be integrated to any system (at least, based on NPM). It's mean, should have CLI and API.\n\n### Why not swagger-codegen?\n\n- Uses NPM instead Java (install via npm and easy-integratable)\n- Lightweight ([swagger-codegen](https://github.com/swagger-api/swagger-codegen) solution — it's about a 14mb for ready JAR)\n- Supports OpenAPI3\n- Above all, intended for TypeScript \n\n## Install\n\n##### 1. Install TypeScript\n\n```sh\nnpm install typescript@latest -g\n``` \n\n##### 2. Install oapi3codegen global (for CLI using)\n\n```sh\nnpm install oapi3codegen -g\n``` \n\n##### 3. Install oapi3codegen for local project\n\n```sh\nnpm install oapi3codegen --save\n``` \n\n## Using via CLI\n\n```sh\noapi3codegen --srcPath /PATH/TO/SRC/open-api-file.json --destPath /PATH/TO/DEST --separatedFiles true\n```\n\n#### CLI arguments\n\n| CLI Argument       | Description                                                                   |\n|--------------------|-------------------------------------------------------------------------------|\n| **srcPath**        | Path of url of JSON file with OpenAPI3 specification                          |\n| **destPath**       | Path for destination directory                                                |\n| **separatedFiles** | Whether should converted types be saved in separated files, or in single file |\n\nAlso, you can set some of options for convertor's [configuration](https://github.com/koshevy/oapi3codegen/blob/master/core/config.ts#L99)\nconfig via CLI:\n\n| Option                          | Description                                                                   |\n|---------------------------------|-------------------------------------------------------------------------------|\n| **defaultContentType**          | Default content-type contains no prefixes/suffixes in type names.             |\n| **implicitTypesRefReplacement** | Mode when models that refer to any models via `$ref` are replacing implicitly even if firsts have names |\n\n## Using via API (TypeScript)\n\nYou can convert whole OpenAPI3-specification:\n\n```typescript\nimport { Convertor } from 'oapi3codegen';\n\nconst convertor: Convertor = new Convertor();\n\n/**\n * Base models of specification:\n *  - Requests bodies models\n *  - Requests params sets models\n *  - Responses models\n *\n * Converting starts from entry points and extracts\n * referred types and dependencies. It s why we need\n * to get \"entry points\". \n */\nconst entryPoints = convertor.getOAPI3EntryPoints(context);\n\n/**\n * Rendering each type: every entry point and each of\n * theirs related types.\n */\nConvertor.renderRecursive(\n    entryPoints,\n    (descriptor: DataTypeDescriptor, text) => {\n        // Here your code: you get text and type descriptor.\n        // You can see how oapi3codegen's CLI uses this calback here:\n        // https://github.com/koshevy/oapi3codegen/blob/master/cli.ts#L73\n    }\n);\n```\n\nAnd also, you can convert stand-alone JSON-schema into type descriptor,\nthat could be rendered:\n\n```typescript\nimport { Convertor } from 'oapi3codegen';\n// you need prettier to beautify result of rendering\nimport * as prettier from 'prettier';\n// provides `_.each(...)` for our example\nimport * as _ from 'lodash';\n\nconst convertor: Convertor = new Convertor();\n\nconst anotherJsonSchemaObject = {\n    \"title\": \"Person\",\n    \"description\": \"Information about person you have to register in your system.\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"firstName\": {\n            \"type\": \"string\"\n        },\n        \"lastName\": {\n            \"type\": \"string\"\n        },\n        \"age\": {\n            \"description\": \"Age in years\",\n            \"type\": \"integer\",\n            \"minimum\": 0\n        }\n    },\n    \"required\": [\"firstName\", \"lastName\"]\n};\n\nconst convertResult = convertor.convert(\n    anotherJsonSchemaObject,\n    {},\n    'AnotherType'\n);\n\n_.each(convertResult, typeDescriptor => {\n    const typeCode = prettier.format(\n        typeDescriptor.render([]),\n        {parser: 'typescript'}\n    );\n\n    console.log(typeCode);\n});\n\n```\n\nAnd this code will print result:\n\n```typescript\n/**\n * ## Person\n * Information about person you have to register in your system.\n */\nexport interface AnotherType {\n  firstName: string;\n\n  lastName: string;\n\n  /**\n   * Age in years\n   */\n  age?: number;\n}\n```\n\n## API (TypeScript)\n\nComing soon...\n\n## How to extend?\n\nComing soon..."
acme-software/typeswagger: >-
  TypeSwagger - A Swagger / OpenApi Spec DSL for Scala

  ====================================================


  [![License:
  MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
  [![Build
  Status](https://travis-ci.org/acme-software/typeswagger.svg?branch=master)](https://travis-ci.org/acme-software/typeswagger)
  [![Codacy
  Badge](https://api.codacy.com/project/badge/Grade/1a2d0c493bd9416996a8436871a17b01)](https://www.codacy.com/app/frne/typeswagger?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=acme-software/typeswagger&amp;utm_campaign=Badge_Grade)


  **TypeSwagger provides a typesafe Scala DSL to build OpenApi (Swagger)
  Specifications. It can be used within any Scala 

  project to generate HTTP API documentations.**


  ## Example


  The following example defines a simple api with two endpoints (`GET` and
  `DELETE`) on one path (`/user/{id}`). The 

  example contains mandatory information, and also some, but not all optional
  fields. For better readability, optional 

  fields are calld by value.


  ```scala

  import ch.acmesoftware.typeswagger.v3.OpenApi

  import ch.acmesoftware.typeswagger.v3.OpenApi._

  import ch.acmesoftware.typeswagger.v3.Implicits._


  OpenApi.create("ApiDoc", "1.0.0").
    // add global information
    withInfo(license = "MIT", licenseUrl = "https://opensource.org/licenses/MIT").
    // add a tag
    withTag("testtag", "A tag description", externalDocs = doc("http://link.to.doc")).
    // define an api path
    path("/user/{id}", summary = "Path summary") {
      // http GET operation  on the path
      (GET >> op("A summary", "GET operation for this route").
        withParameter("id", PATH, Schema.int, description = "The id...", required = true).
        withParameter("comment", QUERY, Schema.string, description = "Some deprecated comment", 
                      deprecated = true).
        withTag("testtag")) ~
      // http DELETE operation on the path
      (DELETE >> op("Delete operation").
        withParameter("id", PATH, Schema.int, description = "The id...", required = true))
    }.
    // add endpoint server(s)
    withServer("http://localhost:9000/api").
    withServer("https://production.tld/api", Some("Production Server")).
    // build json string
    toJson()
  ```


  ## Usage


  Install the Ivy depenency via SBT:


  ```scala

  "ch.acmesoftware" %% "typeswagger" % "{version}"

  ```


  Add imports:


  ```scala

  import ch.acmesoftware.typeswagger.v3.OpenApi

  import ch.acmesoftware.typeswagger.v3.OpenApi._


  // syntactic sugar for convenient DSL, but optional

  import ch.acmesoftware.typeswagger.v3.Implicits._ 

  ```


  ### Info


  Add global information using the `withInfo` function. All parameters are
  optional. If not using the implicits, 

  use `Some("str")` as parameter value:


  ```scala

  import ch.acmesoftware.typeswagger.v3.OpenApi

  import ch.acmesoftware.typeswagger.v3.OpenApi._

  import ch.acmesoftware.typeswagger.v3.Implicits._


  OpenApi.create("ApiDoc", "1.0.0", description = "API Doc built with
  TypeSwagger", termsOfService = "/tos").
    withInfo(license = "MIT", licenseUrl = "https://opensource.org/licenses/MIT", 
             contactName = "John Doe", contactEmail = "info@server.tld", contactUrl = "https://webpage.tld")
  ```


  ## Features


  * Convenient, typesafe DSL to define OpenApi v3 specifications

  * Integrated JSON rendering

  * Integrated YAML rendering (TODO)

  * Java API (TODO)

  * Integration with common HTTP-Frameworks (TODO)


  ## Contributions


  Please use the GitHub issue tracking and PullRequests. Any help is very
  welcome.


  ## License


  This project is licensed under the MIT license. See [LICENSE](./LICENSE) for
  more information.
unjello/openapi-mockk: "[![npm version][npm_badge]][npm_link] [![Build Status][travis_badge]][travis_link] [![downloads][npm_dl_badge]][npm_dl_link] [![js-standard-style][js_standard_badge]][js_standard_link]\r\n\r\n# openapi-mockk\r\n\r\n- *alpha version* of a library providing mock data for Open API 3.0 specifications. Created due to [swagger-parser](https://github.com/BigstickCarpet/swagger-parser) dragging behind, and entire node-swagger ecosystem put on-hold, with no forseeable replacement. This is way simpler implementation, but enables specific use-case.\r\n\r\n## Example\r\n\r\n```javascript\r\nconst Mock = require('openapi-mockk')\r\n\r\nMock(args.api).responses({\r\n  path,\r\n  operation,\r\n  response: '200',\r\n  content,\r\n}).then(mock => {\r\n  console.log(mock[path][operation].responses)\r\n})\r\n```\r\n\r\n## License\r\n\r\n- Unlicense (~Public Domain)\r\n\r\n## Related Work\r\n\r\n- https://github.com/subeeshcbabu/swagmock/ - way more advanced mock, but for swagger 2.0 schema\r\n- https://github.com/BigstickCarpet/swagger-parser - swagger 2.0 parser\r\n\r\n\r\n[npm_badge]: https://img.shields.io/npm/v/openapi-mockk.svg?style=flat-square\r\n[npm_link]:  https://npmjs.org/package/openapi-mockk\r\n[js_standard_badge]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\r\n[js_standard_link]:  https://github.com/feross/standard\r\n[travis_badge]: https://travis-ci.org/unjello/openapi-mockk.svg?branch=master\r\n[travis_link]:  https://travis-ci.org/unjello/openapi-mockk\r\n[npm_dl_badge]: http://img.shields.io/npm/dm/openapi-mockk.svg?style=flat-square\r\n[npm_dl_link]: https://npmjs.org/package/openapi-mockk"
Bankdata/gradle-swagger-plugin: >-
  # Overview


  [![Build
  Status](https://travis-ci.org/Bankdata/gradle-swagger-plugin.svg?branch=master)](https://travis-ci.org/Bankdata/gradle-swagger-plugin)

  [![Known
  Vulnerabilities](https://snyk.io/test/github/Bankdata/gradle-swagger-plugin/badge.svg)](https://snyk.io/test/github/Bankdata/gradle-swagger-plugin) 



  This Gradle plugin is created to generate OpenAPI documentation from a JAX-RS
  based project using

  [Swagger](https://github.com/swagger-api/swagger-core).



  # Usage


  Applying the plugin to your project the generation will run Swagger to
  generate OpenAPI documentation

  after classes are compiled. Applying this plugin will also imply applying the
  Java plugin. A minimal

  configuration is as follows.


  ```groovy

  buildscript {
      dependencies {
          classpath (group: 'dk.bankdata.gradle.swagger', name: 'gradle-swagger-plugin', version: '2.0.0')
      }
  }


  apply plugin: 'dk.bankdata.swagger'


  swagger {
      resourcePackages = ['dk.bankdata.service.example']
  }

  ```


  It is possible to configure most of the general properties of the OpenAPI
  document with

  the configuration in the build file. This implies using variable from the
  build file

  if applicable.


  ```groovy

  buildscript {
      dependencies {
          classpath (group: 'dk.bankdata.gradle.swagger', name: 'gradle-swagger-plugin', version: '2.0.0')
      }
  }


  apply plugin: 'dk.bankdata.swagger'


  swagger {
      resourcePackages = ['dk.bankdata.gradle.swagger.example']
      servers = [
              {
                  url = "https://api.bankdata.dk"
                  description = "production"
              }
      ]
      info {
          title = 'Swagger Plugin Full'
          version = '1.0.0'
          description = 'This service does...'
          termsOfService = 'Terms'
          contact {
              name = 'Bankdata'
              url = 'https://www.bankdata.dk'
              email = 'bankdata@e.mail'
          }
          license {
              name = 'MIT'
              url = 'http://mit'
          }
      }
  }

  ```




  # Acknowledgements


  The Gradle Swagger Plugin is inspired by the [Swagger Maven
  Plugin](https://github.com/openapi-tools/swagger-maven-plugin)

  and also the [Swagger Gradle
  Plugin](https://github.com/gigaSproule/swagger-gradle-plugin). However this
  plugin

  was created with the specific purpose of using as much of the core Swagger
  modules as possible.
chrisdostert/listener-from-oas3-js: >
  [![Build
  Status](https://travis-ci.org/chrisdostert/listener-from-oas3-js.svg?branch=master)](https://travis-ci.org/chrisdostert/listener-from-oas3-js)

  [![Coverage](https://codecov.io/gh/chrisdostert/listener-from-oas3-js/branch/master/graph/badge.svg)](https://codecov.io/gh/chrisdostert/listener-from-oas3-js)


  > *Be advised: this project is currently at Major version zero. Per the

  > semantic versioning spec: "Major version zero (0.y.z) is for initial

  > development. Anything may change at any time. The public API should

  > not be considered stable."*


  Javascript library which generates a native http server listener from a v3
  open api spec


  # Installation


  ## NPM

  ```shell

  npm install --save listener-from-oas3

  ```


  ## Yarn

  ```shell

  yarn add listener-from-oas3

  ```


  # Handlers


  The signature for handlers is

  `async myHandler(ctx)`


  The ctx object is the same as the koa ctx object but also includes:


  ### ctx.parameters.path

  Object where each property is the name of a path parameter applicable to the
  operation and it's provided value.


  ### ctx.parameters.query

  Object where each property is the name of a query parameter applicable to the
  operation and it's provided value.


  parameters declared w/ application/json content will be deserialized


  ## ctx.security

  Object where each property is the name of a security definition applicable to
  the operation and it's provided value.


  for oauth2, value will be the bearer token string  


  for http bearer, value will be the bearer token string  


  for http basic, value will be a `{userId, password}` object


  # Examples


  # Basic usage


  ```javascript

  const getRequestListener = require('listener-from-oas3')

  const http = require('http')


  async function listen(port) {
    const requestListener = await getRequestListener(
      `${__dirname}/openapi.yaml`,
      // resolve handlers from `${__dirname}/${operation-path}/${operation-method}`
      __dirname
    )

    http
      .createServer(requestListener)
      .listen(port)
  }

  ```


  # Support


  [open an issue](https://github.com/chrisdostert/listener-from-oas3-js/issues)


  # Releases


  releases are versioned according to

  [![semver
  2.0.0](https://img.shields.io/badge/semver-2.0.0-brightgreen.svg)](http://semver.org/spec/v2.0.0.html)

  and [tagged](https://git-scm.com/book/en/v2/Git-Basics-Tagging); see

  [CHANGELOG.md](CHANGELOG.md) for release notes


  # Contributing


  see [CONTRIBUTING.md](CONTRIBUTING.md)
smartrecruiters/openapi-schemas-validator: >+
  # @smartrecruiters/openapi-schemas-validator


  [![NPM Version][npm-image]][npm-url]

  [![NPM Downloads][downloads-image]][downloads-url]

  [![Node.js Version][node-version-image]][node-version-url]

  [![Licence][license-image]][license-url]

  [![Build][travis-image]][travis-url]


  Create schema validators for api documentation in OpenAPI Specification 3.x
  format.


  ## tv4


  This module uses [tv4](https://www.npmjs.com/package/tv4) validator,
  additionally

  configured with [tv4-formats](https://www.npmjs.com/package/tv4-formats).


  This module uses tv4
  [`validateMultiple`](https://www.npmjs.com/package/tv4#usage-3-multiple-errors)
  function,

  with
  [`checkRecursive`](https://github.com/geraintluff/tv4#cyclical-javascript-objects)
  param always passed as `true`.


  You can configure tv4 validator with following options: 
   * customFormats - will be passed to [`tv4.addFormat`](https://www.npmjs.com/package/tv4#addformatformat-validationfunction) function 
   * banUnknownProperties - will be passed to validating function ([The banUnknownProperties flag](https://www.npmjs.com/package/tv4#the-banunknownproperties-flag))
   
  ## OpenAPI Specification 3.0 specific features


  Currently @smartrecruiters/openapi-schemas-validator supports `nullable`
  field.


  Please refer to
  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#fixed-fields-20.


  ## License


  [MIT](LICENSE)


  [npm-image]:
  https://img.shields.io/npm/v/@smartrecruiters/openapi-schemas-validator.svg

  [npm-url]:
  https://www.npmjs.com/package/@smartrecruiters/openapi-schemas-validator

  [downloads-image]:
  https://img.shields.io/npm/dm/@smartrecruiters/openapi-schemas-validator.svg

  [downloads-url]:
  https://www.npmjs.com/package/@smartrecruiters/openapi-schemas-validator

  [node-version-image]:
  https://img.shields.io/node/v/@smartrecruiters/openapi-schemas-validator.svg

  [node-version-url]: https://nodejs.org/en/download/

  [license-url]:
  https://github.com/smartrecruiters/openapi-schemas-validator/blob/master/LICENSE

  [license-image]:
  https://img.shields.io/npm/l/@smartrecruiters/openapi-schemas-validator.svg

  [travis-url]: https://travis-ci.org/smartrecruiters/openapi-schemas-validator

  [travis-image]:
  https://api.travis-ci.org/smartrecruiters/openapi-schemas-validator.svg?branch=master

  ## API



  ### Modules


  <dl>

  <dt><a
  href="#module_@smartrecruiters/openapi-schemas-validator">@smartrecruiters/openapi-schemas-validator</a></dt>

  <dd></dd>

  </dl>


  ### Classes


  <dl>

  <dt><a href="#SchemaValidator">SchemaValidator</a></dt>

  <dd></dd>

  </dl>


  <a name="module_@smartrecruiters/openapi-schemas-validator"></a>


  ### @smartrecruiters/openapi-schemas-validator

  <a
  name="module_@smartrecruiters/openapi-schemas-validator.SchemaValidator"></a>


  #### @smartrecruiters/openapi-schemas-validator.SchemaValidator

  SchemaValidator class


  **Kind**: static property of
  [<code>@smartrecruiters/openapi-schemas-validator</code>](#module_@smartrecruiters/openapi-schemas-validator)  

  <a name="SchemaValidator"></a>


  ### SchemaValidator

  **Kind**: global class  


  * [SchemaValidator](#SchemaValidator)
      * [new SchemaValidator(spec, [options])](#new_SchemaValidator_new)
      * [.validate(entity, schema)](#SchemaValidator+validate) ⇒ <code>Array.&lt;Object&gt;</code>

  <a name="new_SchemaValidator_new"></a>


  #### new SchemaValidator(spec, [options])

  Create schema validator for schemas defined in spec at `#/components/schemas`



  | Param | Type | Default | Description |

  | --- | --- | --- | --- |

  | spec | <code>Object</code> |  | API specification in OpenAPI Specification
  3.0 format |

  | [options] | <code>Object</code> | <code>{}</code> | options |

  | [options.customFormats] | <code>Object</code> |  | custom format validators
  |

  | [options.banUnknownProperties] | <code>boolean</code> | <code>false</code> |
  disallow extra properties in validated objects |


  <a name="SchemaValidator+validate"></a>


  #### schemaValidator.validate(entity, schema) ⇒
  <code>Array.&lt;Object&gt;</code>

  Validate object against schema. Schema can be passed explicitly or reference a
  schema from spec.


  **Kind**: instance method of
  [<code>SchemaValidator</code>](#SchemaValidator)  

  **Returns**: <code>Array.&lt;Object&gt;</code> - An array with errors when
  object is invalid, `undefined` otherwise  


  | Param | Type | Description |

  | --- | --- | --- |

  | entity | <code>Object</code> | object to validate |

  | schema | <code>Object</code> \| <code>string</code> | object schema |

kazuki/pyramid-oas3: >
  pyramid_oas3

  ============


  [Pyramid](https://trypyramid.com/) Webアプリケーションに対して、

  [OpenAPI](https://www.openapis.org/)
  [3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md)を利用した、

  リクエストの検証・パースを実施するライブラリです。


  [pyramid_swagger](https://github.com/striglia/pyramid_swagger)のOpenAPI
  3.0対応版の様な位置づけです。


  設定項目

  --------


  * pyramid_oas3.validate_response: bool
    * レスポンスのJSONも検証するかを設定します(デフォルト: False)
  * pyramid_oas3.fill_by_default: bool
    * リクエストデータに対してOpenAPI定義で設定されたdefault値で埋めるかを設定します(デフォルト: False)
  * pyramid_oas3.response_reviver: Optional[Callable[[Union[int, str],
  JSON_TYPES], Union[JSON_TYPES, pyramid_oas3.UNDEFINED]]]
    * JSON_TYPES: Union[int, float, str, bool, None, list, dict]
    * [JSON.parse](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)のreviverと同様の処理を、
      レスポンススキーマ検証実行前に適用するようにします
    * デフォルト: None (reviverを適用しない)

  使い方

  ------


  以下のように設定してpyramidに組み込みます


  ```

  settings = {
      'pyramid.includes': 'pyramid_oas3',
      'pyramid_oas3.schema': yaml.load(open('schema.yaml').read()),
      'pyramid_oas3.validate_response': True,
      'pyramid_oas3.fill_by_default': True,
  }

  ```


  検証失敗時は以下の例外が返却されるので、

  適宜exception_view_configを設定してください


  * pyramid_oas3.ValidationErrors: リクエストデータのスキーマ検証失敗時

  * pyramid_oas3.ResponseValidationError: レスポンスデータのスキーマ検証失敗時

  * pyramid.httpexceptions.HTTPBadRequest: クエリ文字列のパース失敗時

  * pyramid.httpexceptions.HTTPNotAcceptable: リクエストのContentTypeに対応するものがスキーマにない

  ＊pyramid.httpexceptions.HTTPUnauthorized: リクエストに認証情報がない


  以下にexception_view_configの例を示します


  ```

  from pyramid.view import exception_view_config



  @exception_view_config(ValidationErrors)

  def failed_request_validation(exc, request):
      res = Response(str(exc))
      res.status_int = 400
      return res


  @exception_view_config(ResponseValidationError)

  def failed_response_validation(exc, request):
      res = Response(str(exc))
      res.status_int = 500
      return res
  ```
vivek-26/koa-openapi3-router: '### This library is in alpha stage'
tandfgroup/schema-oas: |
  # OpenAPI Specifications for Schema.org

  ## Table of Contents

  - [About the Service](#about)
    - [Features](#features)
  - [Usage](#usage)
  - [Contributing](CONTRIBUTING.md)
  - [License](#license)

  ---

  ## About the Service <a id="about"></a>

  This is a collection of OpenAPI Specs for all the Schema.org entities.

  ## Usage <a id="usage"></a>

  TBD...

  > :point_up: _more instructions coming soon._

  ---

  ## License <a id="license"></a>

  Copyright 2018 Taylor & Francis Group

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  <http://www.apache.org/licenses/LICENSE-2.0>

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
data-studio/data-studio: >
  # Data Studio by Eviratec


  WP export in: `./doc/db/datastudiobyeviratec...xml`


  ## Special notes, further reading, and thanks to ...


  Please note **this project is in NO WAY affiliated with; or supported, or
  endorsed by; any of the following people or organisations.**


  They have special mention here as I feel they deserve it :)


  ### CQRS


  Command Query Responsibility Segregation


  - [Martin Fowler](https://martinfowler.com) for this guide on
  [CQRS](https://martinfowler.com/bliki/CQRS.html)

  - [Greg Young](https://twitter.com/gregyoung) as he is mentioned on
  https://martinfowler.com/bliki/CQRS.html

  - [Douglas Reith](https://www.linkedin.com/in/douglas-reith/) for introducing
  me to CQRS and explaining it in a way I could understand


  ### OpenAPI


  - [OpenAPI Initiative](https://github.com/OAI): https://openapis.org and it's
  contributors.


  ### Missing someone/something?


  Let me know :)


  ## Models


  ```

  app           App           Apps           app           apps

  logic_group   LogicGroup    Logic Groups   logic group   logic groups

  model         Model         Models         model         models

  attribute     Attribute     Attributes     attribute     attributes

  command       Command       Commands       command       commands

  query         Query         Queries        query         queries

  ```


  ## Query


  ```

  getApp

  getLogicGroup

  getModel

  getAttribute

  getCommand

  getQuery


  getApps

  getLogicGroupsByApp

  getModelsByLogicGroup

  getAttributesByModel

  getCommandsByLogicGroup

  getQueriesByLogicGroup

  ```


  ## CMD


  ```

  createApp

  createLogicGroup

  createModel

  createAttribute

  createCommand

  createQuery


  deleteApp

  deleteLogicGroup

  deleteModel

  deleteAttribute

  deleteCommand

  deleteQuery


  updateAppName

  updateLogicGroupName

  updateModelName

  updateAttributeName

  updateCommandName

  updateQueryName

  ```


  ### Requires WordPress Plugins

  - Advanced Custom Fields

  - Profile Builder


  ## Based on [HTML5 Blank](http://html5blank.com)


  HTML5 Blank is a powerful shell for rapidly deploying your WordPress projects.


  * Project:
  [github.com/toddmotto/html5blank](https://github.com/toddmotto/html5blank)

  * Website: [html5blank.com](http://html5blank.com)

  * Twitter: [@html5blank](http://twitter.com/html5blank)

  * Author : [Todd Motto](http://toddmotto.com) //
  [@toddmotto](http://twitter.com/toddmotto)


  ### Contributors (in order of pull request)

  [David Munn](https://github.com/Munnday), [Patrick
  Zeinert](https://github.com/CoeusCC), [J-Rabe](https://github.com/J-Rabe),
  [Steve Steiner](https://github.com/ssteinerx), [Kyle
  Hudson](https://github.com/diskhub), [chrisdl](https://github.com/chrisdl),
  [Marcel Miranda](https://github.com/reaktivo), [Fx
  Bénard](https://github.com/fxbenard), Ioan Virag, [Mohamed
  Elkebir](https://github.com/elkebirmed), [lregla](https://github.com/lregla),
  Carlos Pinar, [Joshua Lyman](https://github.com/jlyman), [Kevin
  Plattret](https://github.com/kevinplattret), [Wesllei
  Henrique](https://github.com/wesllei), [Stacey
  Cordoni](https://github.com/staceycordoni).


  ## More info about HTML5 Blank


  Download the latest version from [html5blank.com](http://html5blank.com), or
  [github.com/toddmotto/html5blank](https://github.com/toddmotto/html5blank).


  ## MIT License


  Copyright &copy; 2018 Callan Peter Milne


  Built by Callan Milne // @eviratec

  Based on work ([HTML5 Blank](http://html5blank.com)) by Todd Motto //
  @toddmotto


  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
unjello/openapi-parser: "# openapi-parser\r\n\r\n-  Abandoned. [Swagger Parser](https://github.com/BigstickCarpet/swagger-parser) finally implemented OpenAPI 3.0 support in 5.x"
joar/py-openapilib: >
  .. vim:tabstop=4:shiftwidth=4:softtabstop=4:


  .. |name| replace:: ``openapilib``

  .. |description| replace:: OpenAPI 3 Object Model


  ################################################################################
                               |name| - |description|
  ################################################################################


  ================================================================================

  Status

  ================================================================================


  -   |name| is in development.

  -   |name| implements the majority of the fields.


  Compatibility

  ================================================================================


  -   |name| aims to implement the `OpenAPI 3.0.0 Specification`_.

  -   |name| is compatible with Python >= 3.6, due to it's usage of f-strings.


  ================================================================================

  References

  ================================================================================


  -   `OpenAPI 3.0.0 Specification
  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md>`_
SensibleWood/swaggerui-webpack-boilerplate: >+
  Overview

  ===


  This is boilerplate project for running Swagger UI with Webpack. It exists
  because:


  * I wanted an easy way of slamming multiple API specifications into a Swagger
  UI-based project and running it locally.

  * I didn't wanted to manually change the Javascript every time I added an API
  specification.

  * Using NPM/Webpack means my dependencies can be kept up-to-date easily.


  Sure there's other ways of doing this, but still...


  ~There's also a Redoc page - although this is CDN-based as I am lazy.~ I
  removed the Redoc version for the time being.


  Usage

  ===


  To use this project clone and cd into it then:


  ```bash

  npm i

  cp [your Swagger/OpenAPI specifications as YAML] src/specs

  npm run dev

  ```


  :thumbsup:


  Improvements

  ===


  * [ ] Parameterise API specification document name.

  * [ ] Refactor `scripts/rewrite-urls.js` as a Webpack plugin.

pglass/py-openapi-schema-to-json-schema: >
  Overview

  --------


  [![Build
  Status](https://travis-ci.org/pglass/py-openapi-schema-to-json-schema.svg?branch=master)](https://travis-ci.org/pglass/py-openapi-schema-to-json-schema)

  [![PyPI](https://img.shields.io/pypi/v/py-openapi-schema-to-json-schema.svg)](https://pypi.org/project/py-openapi-schema-to-json-schema/)

  [![PyPI - Python
  Version](https://img.shields.io/pypi/pyversions/py-openapi-schema-to-json-schema.svg)](https://pypi.org/project/py-openapi-schema-to-json-schema/)



  **This is a straight Python port of the MIT-licensed

  [mikunn/openapi-schema-to-json-schema](https://github.com/mikunn/openapi-schema-to-json-schema)

  ([v2.1.0](https://github.com/mikunn/openapi-schema-to-json-schema/tree/v2.1.0))**.

  This port is similarly MIT-licensed.


  It converts from [OpenAPI 3.0](

  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md) to

  [JSON Schema Draft
  4](http://json-schema.org/specification-links.html#draft-4).


  ## Why?


  OpenAPI 3 Schemas and JSON Schemas are mostly similar. However, JSON Schema

  validators are unaware of the differences between the two formats. This means

  that validating request/response JSON using a standard JSON Schema validator

  with OpenAPI 3 Schemas will result in incorrect validations in certain common

  cases.


  One way to solve this problem is to translate the OpenAPI 3 schema to JSON

  Schema, which is the purpose of this library.


  See
  [here](https://github.com/mikunn/openapi-schema-to-json-schema/tree/v2.1.0#why)

  for more rationale, as well as [Phil Sturgeon's blog post](

  https://philsturgeon.uk/api/2018/03/30/openapi-and-json-schema-divergence/)

  about the problem.


  ## Features


  * converts OpenAPI 3.0 Schema Object to JSON Schema Draft 4

  * deletes `nullable` and adds `"null"` to `type` array if `nullable` is `true`

  * supports deep structures with nested `allOf`s etc.

  * removes [OpenAPI specific
    properties](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#fixed-fields-20)
  such as `discriminator`, `deprecated` etc. unless specified otherwise

  * optionally supports `patternProperties` with `x-patternProperties` in the
    Schema Object

  **NOTE**: `$ref`s are not dereferenced. You will need another library to

  read the spec and follow `$ref` fields.



  ## Installation


  ```bash

  $ pip install py-openapi-schema-to-json-schema

  ```



  ## Usage


  ```python

  import json

  from openapi_schema_to_json_schema import to_json_schema


  openapi_schema = {
      "type": "object",
      "properties": {
          "name": {
              "type": "string",
              "nullable": True,
          }
      },
      "x-patternProperties": {
          "^[a-z]+$": {
              "type": "number",
          }
      }
  }


  options = {"supportPatternProperties": True}

  converted = to_json_schema(openapi_schema, options)


  print(json.dumps(converted, indent=2))

  ```


  This outputs the following JSON schema. This shows the conversion of

  `nullable: True` to `type: ["string", "null"]`, and the enablement of

  unsupported JSON Schema features using OpenAPI extension fields

  (`x-patternProperties` -> `patternProperties`).


  ```json

  {
    "patternProperties": {
      "^[a-z]+$": {
        "type": "number"
      }
    },
    "properties": {
      "name": {
        "type": [
          "string",
          "null"
        ]
      }
    },
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object"
  }

  ```


  ### Options


  The `to_json_schema` function accepts an `options` dictionary as the second

  argument.


  ```python

  # Defaults

  options = {
      'cloneSchema': True,
      'dateToDateTime': False,
      'supportPatternProperties': False,
      'keepNotSupported': [],
      'patternPropertiesHandler':
          openapi_schema_to_json_schema.patternPropertiesHandler,
      'removeReadOnly': False,
      'removeWriteOnly': True,
  }

  ```


  #### `cloneSchema` (bool)


  If set to `False`, converts the provided schema in place. If `True`, clones
  the

  schema using `copy.deepcopy`. Defaults to `True`.


  #### `dateToDateTime` (bool)


  This is `False` by default and leaves `date` format as is. If set to `True`,

  sets `format: 'date'` to `format: 'date-time'`.


  For example


  ```python

  import json

  from openapi_schema_to_json_schema import to_json_schema


  schema = {
    'type': 'string',
    'format': 'date',
  }


  converted = to_json_schema(schema, {'dateToDateTime': True})


  print(json.dumps(converted, indent=2))

  ```


  prints


  ```json

  {
    "format": "date-time",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "string"
  }

  ```


  #### `keepNotSupported` (list)


  By default, the following fields are removed from the result schema:

  `nullable`, `discriminator`, `readOnly`, `writeOnly`, `xml`, `externalDocs`,

  `example` and `deprecated` as they are not supported by JSON Schema Draft 4.

  Provide a list of the ones you want to keep (as strings) and they won't be

  removed.


  #### `removeReadOnly` (bool)


  If set to `True`, will remove properties set as `readOnly`. If the property is

  set as `required`, it will be removed from the `required` list as well. The

  property will be removed even if `readOnly` is set to be kept with

  `keepNotSupported`.


  #### `removeWriteOnly` (bool)


  Similar to `removeReadOnly`, but for `writeOnly` properties.


  #### `supportPatternProperties` (bool)


  If set to `True` and `x-patternProperties` property is present, change

  `x-patternProperties` to `patternProperties` and call

  `patternPropertiesHandler`. If `patternPropertiesHandler` is not defined, call

  the default handler. See `patternPropertiesHandler` for more information.


  #### `patternPropertiesHandler` (function)


  Provide a function to handle pattern properties and set

  `supportPatternProperties` to take effect. The function takes the schema where

  `x-patternProperties` is defined on the root level. At this point

  `x-patternProperties` is changed to `patternProperties`. It must return the

  modified schema.


  If the handler is not provided, the default handler is used. If

  `additionalProperties` is set and is an object, the default handler sets it to

  false if the `additionalProperties` object has deep equality with a pattern

  object inside `patternProperties`. This is because we might want to define

  `additionalProperties` in OpenAPI spec file, but want to validate against a

  pattern. The pattern would turn out to be useless if `additionalProperties` of

  the same structure were allowed. Create you own handler to override this

  functionality.


  See `tests/to_jsonschema/test_pattern_properties.py` for examples of this.



  Credits

  -------


  - [mikunn](https://github.com/mikunn) for the [original

  openapi-schema-to-json-schema](https://github.com/mikunn/openapi-schema-to-json-schema)

  - [Phil Sturgeon](https://github.com/philsturgeon) for his great 

  [blog
  post](https://philsturgeon.uk/api/2018/03/30/openapi-and-json-schema-divergence/)

  about the issue (and his [reverse
  implementation](https://github.com/wework/json-schema-to-openapi-schema))
riddhi89/simple-flask-project: "# simple-flask-project\n\nSetup: create a python virtual environment and install the requirements:\n\n\tvirtualenv --python=python3.6 .venv\n\tsource .venv/bin/activate\n\tpip install -r requirements.txt\n\n\nGenerate OpenAPI spec from Flask routes:\n\n\tpython generate_openapi_spec.py\n\n    \nView the OpenAPI spec using Swagger-UI:\n\n    docker run --rm -p 9000:8080 --name swagger-ui -e SWAGGER_JSON=/api_docs/openapi.json -v $(PWD)/api_docs:/api_docs swaggerapi/swagger-ui\n"
Mermade/openapi-gui: >+
  OpenAPI-GUI

  ===========


  OpenAPI-GUI is a GUI for creating and editing OpenAPI version 3.0.x JSON/YAML
  definitions. In its current form it is most useful as a tool for starting off
  and editing simple OpenAPI definitions. Imported OpenAPI 2.0 definitions are
  automatically converted to v3.0.


  ![Screenshot](https://github.com/Mermade/openapi-gui/blob/master/img/screenshot.png?raw=true)


  For the previous Swagger / OpenAPI 2.0-only version see
  [here](https://mikeralphson.github.io/openapi-gui). This version is currently
  **unmaintained** apart from security fixes.


  This project was initially a fork of [Daryl Kuhn's
  IODoctor](https://github.com/darrylkuhn/iodoctor/tree/angular-port), which in
  turn was inspired by [IODoctor by Brandon
  West](https://github.com/brandonmwest/iodoctor) which was written in Ruby. The
  complete history of the project is maintained on GitHub.


  Description

  -----------

  ### How It Works


  Select an existing OpenAPI 2.0 or 3.0.x definition to upload, or create a new
  definition and start adding Paths, Operations, and Parameters. When an
  existing definition is used, it is parsed and forms for editing each Path,
  Operation and Parameter will be created.


  You can load an existing definition by appending a `?url=` query parameter to
  the initial start page.


  Click an item from the menu on the left to begin editing. View the JSON/YAML
  output at any time by selecting one of the "Export" tabs. When finished,
  download the output to save it locally or copy it your clipboard. OpenAPI-GUI
  only stores one definition at a time, and this is in your browser's
  local-storage. Make sure you save your JSON/YAML output locally.


  Before performing a destructive action, OpenAPI-GUI saves the current state of
  the definition. At all other times you must remember to select Save manually.


  ### Technology


  OpenAPI-GUI runs entirely client-side using a number of Javascript frameworks
  including [Vue.JS](https://vuejs.org/), [jQuery](https://jquery.com/) and
  [Bulma](http://bulma.io/) for CSS.


  To get the app up and running just browse to [the live version on GitHub
  pages](https://mermade.github.io/openapi-gui), deploy a clone to GitHub pages,
  deploy to Heroku using the button below, or clone the repo and point a browser
  at `index.html` or host it yourself - couldn't be simpler. More [technical
  information here](docs/technical.md).


  You only need to `npm install` the Node.js modules if you wish to use the
  `openapi-gui` embedded web server (i.e. not if you are running your own
  web-server), otherwise they are only there for PaaS deployments.


  [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)


  #### CLI options


  ```

  -d, --definition    serve the given OAS definition

  -l, --launch        start a web-browser pointing to the GUI

  -p, --port          specify the port to run on, defaults to $PORT or 3000

  -w, --write         enable writing back to the source definition

  ```


  #### Running with Docker


  If you don't have a local Node development environment, or if you would prefer
  to run OpenAPI-GUI in a Docker container, you can do in with a few simple
  steps:


  1. Clone the repository.

  2. Run `docker build -t mermade/openapi-gui .` to build the Docker image
  (`mermade/openapi-gui`)

  3. Run `docker run --name openapi-gui -p 8080:3000 -d mermade/openapi-gui` to
  run the server on port 8080.

  4. Navigate to `http://localhost:8080` in your favorite browser.

  5. When you're done, shut down the server by running `docker stop openapi-gui
  && docker rm openapi-gui`


  Or you can pull the pre-built Docker image:


  * `docker pull mermade/openapi-gui`


  ### Limitations


  * OpenAPI-GUI will de-reference shared parameters.

  * The definition must be self-contained with no external `$ref`s. **This is
  likely to be resolved (ho-ho) soon**.

  * Editing a response / example / body schema will dereference it.

  * OpenAPI-GUI will not always preserve vendor-extensions, e.g. if a parameter
  is deleted and recreated.

  * OpenAPI-GUI will not preserve comments from definitions imported in YAML
  format.


  TODO

  ----


  * See the [TODO list](/docs/TODO.md) and the current status of [OpenAPI 3.0
  specification support](docs/openapi3-support.md).

Mermade/widdershins: >
  # widdershins

  OpenAPI / Swagger / AsyncAPI / Semoasa definition to
  [Slate](https://github.com/lord/slate) /

  [Shins](https://github.com/mermade/shins) compatible markdown


  ![Build](https://img.shields.io/travis/Mermade/widdershins/master.svg)
  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru)
  [![Tested on Mermade
  OpenAPIs](https://img.shields.io/badge/Additional%20Specs-419-brightgreen.svg)](https://github.com/mermade/OpenAPI_specifications)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/widdershins/badge.svg)](https://snyk.io/test/npm/widdershins)


  <img src="http://mermade.github.io/widdershins/logo.png" width="247px"
  height="250px" />


  ### Widdershins *adverb*:

  * In a direction contrary to the sun's course;

  * anticlockwise;

  * helping you produce static documentation from your OpenAPI 3.0 / Swagger 2.0
  / AsyncAPI 1.x / Semoasa 0.1.0 definition


  ![Widdershins
  screenshot](https://mermade.github.io/widdershins/screenshot.png)


  ### News


  * As of v3.0.0 Widdershins no longer expands the definition of OpenAPI body
  parameters / requestBodies by default, unless they have an inline schema. You
  can restore the old behaviour by using the `--expandBody` option.

  * You may limit the depth of schema examples using the `--maxDepth` option.
  The default is 10.

  * To omit schemas entirely, please copy and customise the `main.dot` template.

  * As of v3.1.0 Widdershins includes a generated `Authorization` header in
  OpenAPI code samples. If you wish to omit this, see
  [here](/templates/openapi3/README.md).

  * If you are using Node.js 6 or lower, please specify the `--harmony` flag.


  ### To install


  * Clone the git repository, or

  * `npm install [-g] widdershins`


  ### Examples


  Command-line use looks like this:

  ```

  node widdershins [options] {input-file|url} [[-o] output markdown]

  ```


  For example:

  ```

  node widdershins --search false --language_tabs 'ruby:Ruby' 'python:Python'
  --summary defs/petstore3.json -o petstore3.md

  ```


  ### Options


  | CLI parameter name | JavaScript parameter name | Type | Default value |
  Description |

  | --- | --- | --- | --- | --- |

  | --customApiKeyValue | options.customApiKeyValue | string | ApiKey | Set a
  custom API key value |

  | --expandBody | options.expandBody | boolean | false | Expand the requestBody
  parameter to show all properties in the request body |

  | --headings | options.headings | integer | 2 | The number of headings to show
  in the table of contents. Currently supported only by Shins, not by Slate,
  which lacks this feature. |

  | --omitBody | options.omitBody | boolean | false | Omit the top-level fake
  body parameter object |

  | --resolve | options.resolve | boolean | false | Resolve external $refs,
  using the `source` parameter or the input file as the base location |

  | --shallowSchemas | options.shallowSchemas | boolean | false | Don't expand
  schemas past $refs |

  | N/A | options.source | string | | The absolute location or URL of the source
  file to use as the base to resolve relative references ($refs) from; required
  if options.resolve is set to true. For CLI commands, Widdershins uses the
  input file as the base for the $refs. |

  | --summary | options.tocSummary | boolean | false | Use the operation summary
  as the TOC entry instead of the ID |

  | --verbose | options.verbose | boolean | false | Increase verbosity |

  | -h, --help | options.help | boolean | false | Show help |

  | --version | options.version | boolean | false | Show version number |

  | -c, --code | options.codeSamples | boolean | false | Turn generic code
  samples off |

  | --httpsnippet | options.httpsnippet | boolean | false | Use httpsnippet to
  generate code samples |

  | -d, --discovery | options.discovery | boolean | false | Include schema.org
  WebAPI discovery data |

  | -e, --environment | options.environment | string | None | Load
  config/override options from file |

  | -i, --includes | options.includes | string | None | List of files to
  include, comma separated |

  | -l, --lang | options.lang | boolean | false | Automatically generate list of
  languages for code samples |

  | --language_tabs | options.language_tabs | string | (Differs for each input
  type) | List of language tabs for code samples using language[:label[:client]]
  format |

  | -m, --maxDepth | options.maxDepth | integer | 10 | Maximum depth for schema
  examples |

  | -o, --outfile | options.outfile | string | (If left blank, output to stdout)
  | File to write output markdown to |

  | -r, --raw | options.raw | boolean | false | Output raw schemas not example
  values |

  | -s, --search | options.search | boolean | true | Whether to enable search or
  not |

  | -t, --theme | options.theme | string | darkula | Syntax-highlighter theme to
  use |

  | -u, --user_templates | options.user_templates | string | None | Directory to
  load override templates from |

  | -x, --experimental | options.experimental | boolean |  | For backwards
  compatibility only, ignored |

  | -y, --yaml | options.yaml | boolean | false | Display JSON schemas in YAML
  format |

  |  | options.templateCallback | function | None | A function that is called
  before and after each template (JavaScript code only) |


  In Node.JS code, create an options object and pass it to the Widdershins
  `convert` function, as in this example:


  ```javascript

  const converter = require('widdershins');

  let options = {}; // defaults shown

  options.codeSamples = true;

  options.httpsnippet = false;

  //options.language_tabs = [];

  //options.language_clients = [];

  //options.loadedFrom = sourceUrl; // only needed if input document is relative

  //options.user_templates = './user_templates';

  options.templateCallback = function(templateName,stage,data) { return data };

  options.theme = 'darkula';

  options.search = true;

  options.sample = true; // set false by --raw

  options.discovery = false;

  options.includes = [];

  options.shallowSchemas = false;

  options.tocSummary = false;

  options.headings = 2;

  options.yaml = false;

  //options.resolve = false;

  //options.source = sourceUrl; // if resolve is true, must be set to full path
  or URL of the input document

  converter.convert(apiObj,options,function(err,str){
    // str contains the converted markdown
  });

  ```


  To only include a subset of the pre-defined language-tabs, or to rename their
  display-names, you can override the `options.language_tabs`:


  ```javascript

  options.language_tabs = [{ 'go': 'Go' }, { 'http': 'HTTP' }, { 'javascript':
  'JavaScript' }, { 'javascript--nodejs': 'Node.JS' }, { 'python': 'Python' }, {
  'ruby': 'Ruby' }];

  ```


  The `--environment` option specifies a JSON or YAML-formatted `options`
  object, for example:


  ```json

  {
    "language_tabs": [{ "go": "Go" }, { "http": "HTTP" }, { "javascript": "JavaScript" }, { "javascript--nodejs": "Node.JS" }, { "python": "Python" }, { "ruby": "Ruby" }],
    "verbose": true,
    "tagGroups": [
      {
        "title": "Companies",
        "tags": ["companies"]
      },
      {
        "title": "Billing",
        "tags": ["invoice-create", "invoice-close", "invoice-delete"]
      }
    ]
  }

  ```


  You can also use the environment file to group OAS/Swagger tagged paths
  together to create a more elegant table of contents, and overall page
  structure.


  If you need to support a version of Slate \<v1.5.0 (or a renderer which also
  doesn't support display-names for language-tabs, such as `node-slate`,
  `slate-node` or `whiteboard`), you can use the `--environment` option with the
  included `whiteboard_env.json` file to simply achieve this.


  If you are using the `httpsnippet` option to generate code samples, you can
  specify the client library used to perform the requests for each language by
  overriding the `options.language_clients`:


  ```javascript

  options.language_clients = [{ 'shell': 'curl' }, { 'node': 'request' }, {
  'java': 'unirest' }];

  ```


  To see the list of languages and clients supported by httpsnippet, [click
  here](https://github.com/Kong/httpsnippet/tree/master/src/targets).


  The `loadedFrom` option is only needed where the OpenAPI / Swagger definition
  does not specify a host, and (as per the OpenAPI
  [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields))
  the API endpoint is deemed to be based on the source URL

  the definition was loaded from.


  Note that the list of included files is simply passed into the header of the
  markdown file, they are actually included by Slate or the alternative you use.


  To see the list of highlight-js syntax highlighting themes, [click
  here](https://highlightjs.org/static/demo/).


  Schema.org WebAPI discovery data is included if the `discovery` option above
  is set `true`. See the W3C [WebAPI Discovery Community
  Group](https://www.w3.org/community/web-api-discovery/) for more information.


  ## Language tabs


  Widdershins supports the `x-code-samples`
  [vendor-extension](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#operation-object-vendor-extensions)
  to completely customise your documentation. Alternatively, you can edit the
  default code-samples in the `templates` sub-directory, or override them using
  the `user_templates` option to specify a directory containing your templates.


  Widdershins supports the use of multiple language tabs with the same language
  (i.e. plain Javascript and Node.Js). To use this support you must be using
  Slate (or one of its ports compatible with) version 1.5.0 or higher.
  [Shins](https://github.com/mermade/shins) versions track Slate version
  numbers.


  ## Template parameters


  Templates are compiled with [doT.js](https://github.com/olado/doT#readme).


  Templates have access to a `data` object with a range of properties based on
  the document context.


  If you specify an `options.templateCallback` function, it will be called
  before and after each template, with three parameters, the template name, the
  stage, (`'pre'` or `'post'`) and the current `data` object. You can mutate the
  `data` object in any way you see fit, as long as you `return` it. Content in
  the `data.append` property will be appended to the current output stream.


  * [Swagger 2.0 / OpenAPI 3.0.x template
  parameters](/templates/openapi3/README.md)

  * [AsyncAPI 1.x template parameters](/templates/asyncapi1/README.md)

  * [Semoasa 0.1.0 template parameters](/templates/semoasa/README.md)


  ## User templates


  To override a `.dot` template, you need to copy over the child `.def` partials
  as well.


  To override a `.def` partial, you need to copy over the parent `.dot` template
  as well. For OpenAPI 3 this will be `main.dot`

  except for `parameters`, `responses` and `callbacks`, which are children of
  the `operation.dot` template.


  This means it is usually easiest to copy all `.dot` and `.def` files to your
  user templates directory. A visual `diff` tool

  which can run across two directories (such as [Meld](http://meldmerge.org/) or
  [WinMerge](http://winmerge.org)) may be useful

  in bringing in changes from Widdershins updates.


  ## Tests


  To run a test-suite:


  ```

  node testRunner {path-to-APIs}

  ```


  The test harness currently expects `.yaml` or `.json` files and has been
  tested against


  * [APIs.guru](https://github.com/APIs-guru/OpenAPI-directory)

  * [Mermade OpenAPI definitions
  collection](https://github.com/mermade/OpenAPI-definitions)


  ### Comparison between this and other OpenAPI / Swagger to Slate tools


  [Blog
  posting](https://dev.to/mikeralphson/comparison-of-various-openapiswagger-to-slate-conversion-tools)
  by the author of Widdershins.


  ### Acknowledgements


  * [@latgeek](https://github.com/LatGeek) for the logo.

  * [@vfernandestoptal](https://github.com/vfernandestoptal) for the httpsnippet
  support.


  ### Widdershins in the wild


  Please feel free to add a link to your API documentation here.


  * [GOV.UK Content API
  v1.0.0](https://content-api.publishing.service.gov.uk/reference.html)

  * [GOV UK Digital Marketplace API
  v1.0.0](https://alphagov.github.io/digitalmarketplace-api-docs/#digital-marketplace-api-v1-0-0)

  * [Capital One API](https://www.capitalone.co.uk/developer/api/)

  * [Cognite Data API](http://doc.cognitedata.com/)

  * [SpeckleWorks API](https://speckleworks.github.io/SpeckleSpecs)

  * [Bank by API](https://tbicr.github.io/bank-api/bank-api.html)

  * [Open EO
  API](https://open-eo.github.io/openeo-api-poc/apireference/index.html)

  * [Split Payments API](http://docs.split.cash/)

  * [LeApp daemon API](https://leapp-to.github.io/shins/index.html)

  * [Shutterstock API](https://api-reference.shutterstock.com/)


  ## Widdershins and Shins


  If you need a wrapper around both Widdershins and Shins, why not consider the
  following third-party projects:


  * [api2html](https://github.com/tobilg/api2html)

  * [shinner](https://github.com/jantoniucci/shinner)
Mermade/oas-kit: >
  # OAS-Kit


  This is the mono-repo for the following related projects


  * [swagger2openapi](packages/swagger2openapi/README.md)

  * [oas-validator](packages/oas-validator/README.md)

  * [oas-linter](packages/oas-linter/README.md)

  * [oas-resolver](packages/oas-resolver/README.md)

  * [oas-schema-walker](packages/oas-schema-walker/README.md)

  * [oas-kit-common](packages/oas-kit-common/README.md)

  * [reftools](packages/reftools/README.md)


  ## Documentation


  * [Main site](https://mermade.github.io/oas-kit)

  *
  [CHANGELOG](https://github.com/Mermade/oas-kit/blob/master/CHANGELOG.md#change-log)


  ## Online converter/validator


  * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


  ## Supported Node.js versions


  Any LTS version from 8.4.0 (with `--expose-http2`) or 8.8.1 without flags,
  onwards.


  ## Development


  * clone the repository

  * `npm i` in the top level directory

  * `npx lerna bootstrap`


  Please try and keep commits related to a single package or piece of
  functionality. PR in the usual way.


  ## Supporting development


  * [APIs.guru open-collective](https://opencollective.com/openapi-directory)

  * [Linode VPS referral
  link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
OpenAPITools/openapi-generator-cli: >
  # @openapitools/openapi-generator-cli


  [![Join the chat at
  https://gitter.im/OpenAPITools/openapi-generator](https://badges.gitter.im/OpenAPITools/openapi-generator.svg)](https://gitter.im/OpenAPITools/openapi-generator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  [![Renovate
  enabled](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovateapp.com/)

  [![Build
  Status](https://travis-ci.org/openapitools/openapi-generator-cli.svg?branch=master)](https://travis-ci.org/OpenAPITools/openapi-generator-cli)

  [![HitCount](http://hits.dwyl.io/openapitools/openapi-generator-cli.svg)](http://hits.dwyl.com/openapitools/openapi-generator-cli)


  OpenAPI Generator allows generation of API client libraries (SDK generation),
  server stubs, documentation and 

  configuration automatically given an OpenAPI Spec (both 2.0 and 3.0 are
  supported). Please see

  [OpenAPITools/openapi-generator](https://github.com/OpenAPITools/openapi-generator)


  ---


  This project checks the [maven
  repository](https://mvnrepository.com/artifact/org.openapitools/openapi-generator-cli) 

  once a day for a new version and will publish this new version automatically
  as an npm package.


  **Thanks [openapitools.org](https://openapitools.org) for this awesome CLI!**


  ## Installation


  There are several ways to install the package.


  #### Global Mode


  In global mode (ie, with -g or --global appended to the command), it installs
  the package as a global package. This 

  means that you'll get the `openapi-generator` command available on your
  command line interface (CLI) as well.


  ```sh

  # install the latest version of "openapi-generator-cli"

  npm install @openapitools/openapi-generator-cli -g


  # install a specific version of "openapi-generator-cli"

  npm install @openapitools/openapi-generator-cli@cli-3.0.0 -g

  ```


  After the installation has finished you can type for example:


  ```sh

  # this shall print the correct version number

  openapi-generator version

  ```


  #### Package Mode


  It is recommended to install the package as development dependency, because
  normally you only need this dependency

  during the development process. To do that you can type the following:


  ```sh

  # install the latest version of "openapi-generator-cli"

  npm install @openapitools/openapi-generator-cli -D


  # install a specific version of "openapi-generator-cli"

  npm install @openapitools/openapi-generator-cli@cli-3.0.0 -D

  ```


  After the installation has finished you can add a script like this:


  ```json

  {
    "name": "my-cool-package",
    "version": "0.0.0",
    "scripts": {
      "my-awesome-script-name": "openapi-generator generate -i docs/openapi.yaml -g typescript-angular -o generated-sources/openapi --additional-properties=\"ngVersion=6.1.7\"",
    }
  }

  ```


  ## Further Documentation


  Please refer to the [official openapi-generator
  docs](https://github.com/OpenAPITools/openapi-generator#3---usage) for

  more information about the possible arguments and a detailed usage manual of
  the command line interface.


  ## You like the package?


  Please leave a star.
stoplightio/spectral: >
  ![Spectral logo](img/spectral-banner.png)


  [![Test
  Coverage](https://api.codeclimate.com/v1/badges/1aa53502913a428f40ac/test_coverage)](https://codeclimate.com/github/stoplightio/spectral/test_coverage)

  [![Maintainability](https://api.codeclimate.com/v1/badges/1aa53502913a428f40ac/maintainability)](https://codeclimate.com/github/stoplightio/spectral/maintainability)


  A flexible JSON object linter with out of the box support for OpenAPI v2 and
  v3


  ## Features


  - Create custom rules to lint _any JSON object_

  - Use JSON paths to apply rules / functions to specific parts of your JSON
  objects

  - Built-in set of functions to help [build custom
  rules](#creating-a-custom-rule). Functions include pattern checks, parameter
  checks, alphabetical ordering, a specified number of characters, provided keys
  are present in an object, etc

  - [Create custom functions](#creating-a-custom-function) for advanced use
  cases

  - Optional ready to use rules and functions to validate and lint [OpenAPI v2
  _and_ v3 documents](#example-linting-an-openapi-document)

  - Validate JSON with [Ajv](https://github.com/epoberezkin/ajv)


  ## Installation


  ### Local Installation


  ```bash

  npm install @stoplight/spectral

  ```


  ### Global Installation


  ```bash

  npm install -g @stoplight/spectral

  ```


  Supports Node v8.3+.


  ### Executable binaries


  For users without Node and/or NPM/Yarn, we provide standalone packages for all
  major platforms:


  - x64 Windows

  - x64 MacOS

  - x64 Linux


  You can find them [here](https://github.com/stoplightio/spectral/releases).

  Once downloaded, you can proceed with the standard procedure for running any
  CLI tool.


  ```bash

  ./spectral-macos lint petstore.yaml

  ```


  Note, the binaries are *not* auto-updatable, therefore you will need to
  download a new version on your own.


  #### Installing binaries system-wide


  ##### Linux


  ```bash

  sudo mv ./spectral-linux /usr/local/bin/spectral

  ```


  You may need to restart your terminal.

  Now, `spectral` command will be accessible in your terminal.


  Head over to [releases](https://github.com/stoplightio/spectral/releases) for
  the latest binaries.


  ## Usage


  ### CLI


  Spectral can be run via the command-line:


  ```bash

  spectral lint petstore.yaml

  ```


  Other options include:


  ``` text
    -e, --encoding=encoding      [default: utf8] text encoding to use
    -f, --format=json|stylish    [default: stylish] formatter to use for outputting results
    -h, --help                   show CLI help
    -m, --maxResults=maxResults  [default: all] maximum results to show
    -o, --output=output          output to a file instead of stdout
    -v, --verbose                increase verbosity
  ```


  > Note: The Spectral CLI supports both YAML and JSON.


  Currently, the CLI supports validation of OpenAPI documents and lints them
  based on our default ruleset. It does not support custom rulesets at this
  time. Although if you want to build and run custom rulesets outside of the
  CLI, see [Customization](#Customization).


  ### Example: Linting an OpenAPI document


  Spectral includes a number of ready made rules and functions for OpenAPI v2
  and v3 documents.


  This example uses the OpenAPI v3 rules to lint a document.


  ```javascript

  const { Spectral } = require('@stoplight/spectral');

  const { oas3Functions, oas3Rules } =
  require('@stoplight/spectral/rulesets/oas3');


  // an OASv3 document

  const myOAS = {
    // ... properties in your document
    responses: {
      '200': {
        description: '',
        schema: {
          $ref: '#/definitions/error-response',
        },
      },
    },
    // ... properties in your document
  };


  // create a new instance of spectral with all of the baked in rulesets

  const spectral = new Spectral();


  spectral.addFunctions(oas3Functions());

  spectral.addRules(oas3Rules());


  spectral.addRules({
    // .. extend with your own custom rules
  });


  // run!

  spectral.run(myOAS).then(results => {
    console.log(JSON.stringify(results, null, 4));
  });

  ```


  You can also [add to these rules](#Creating-a-custom-rule) to create a
  customized linting style guide for your OpenAPI documents.


  The existing OAS rules are opinionated. There might be some rules that you
  prefer to change. We encourage you to create your rules to fit your use case.
  We welcome additions to the existing rulesets as well!


  ## Rulesets


  You can find all about [rulesets here](docs/rulesets.md).


  ## Advanced


  ### Customization


  There are three key concepts in Spectral: **Rulesets**, **Rules** and
  **Functions**.


  - **Ruleset** is a container for a collection of rules and functions.

  - **Rule** filters your object down to a set of target values, and specify the
  function that should evaluate those values.

  - **Function** accept a value and return issue(s) if the value is incorrect.


  Think of a set of **rules** and **functions** as a flexible and customizable
  style guide for your JSON objects.


  #### Creating a custom rule


  Spectral has a built-in set of functions which you can reference in your
  rules. This example uses the `RuleFunction.PATTERN` to create a rule that
  checks that all property values are in snake case.


  ```javascript

  const { RuleFunction, Spectral } = require('@stoplight/spectral');


  const spectral = new Spectral();


  spectral.addRules({
    snake_case: {
      summary: 'Checks for snake case pattern',

      // evaluate every property
      given: '$..*',

      then: {
        function: RuleFunction.PATTERN,
        functionOptions: {
          match: '^[a-z]+[a-z0-9_]*[a-z0-9]+$',
        },
      },
    },
  });


  // run!

  spectral.run({name: 'helloWorld',}).then(results => {
    console.log(JSON.stringify(results, null, 4));
  });


  // => outputs a single result since `helloWorld` is not snake_case

  // [

  //   {

  //     "code": "snake_case",

  //     "message": "must match the pattern '^[a-z]+[a-z0-9_]*[a-z0-9]+$'",

  //     "severity": 1,

  //     "path": [

  //       "name"

  //     ]

  //   }

  // ]

  ```


  #### Creating a custom function


  Sometimes the built-in functions don't cover your use case. This example
  creates a custom function, `customNotThatFunction`, and then uses it within a
  rule, `openapi_not_swagger`. The custom function checks that you are not using
  a specific string (e.g., "Swagger") and suggests what to use instead (e.g.,
  "OpenAPI").


  ```javascript

  const { Spectral } = require('@stoplight/spectral');


  // custom function

  const customNotThatFunction = (targetValue, options) => {
    const { match, suggestion } = options;

    if (targetValue && targetValue.match(new RegExp(match))) {
      // return the single error
      return [
        {
          message: `Use ${suggestion} instead of ${match}!`,
        },
      ];
    }
  };


  const spectral = new Spectral();


  spectral.addFunctions({
    notThat: customNotThatFunction,
  });


  spectral.addRules({
    openapi_not_swagger: {
      summary: 'Checks for use of Swagger, and suggests OpenAPI.',

      // check every property
      given: '$..*',

      then: {
        // reference the function we added!
        function: 'notThat',

        // pass it the options it needs
        functionOptions: {
          match: 'Swagger',
          suggestion: 'OpenAPI',
        },
      },
    },
  });


  // run!

  spectral.run({description: 'Swagger is pretty cool!',}).then(results => {
    console.log(JSON.stringify(results, null, 4));
  });


  // => outputs a single result since we are using the term `Swagger` in our
  object

  // [

  //   {

  //     "code": "openapi_not_swagger",

  //     "message": "Use OpenAPI instead of Swagger!",

  //     "severity": 1,

  //     "path": [

  //       "description"

  //     ]

  //   }

  // ]

  ```




  ## FAQs


  **How is this different than [Ajv](https://github.com/epoberezkin/ajv)?**


  Ajv is a JSON Schema validator, not a linter. Spectral does expose a `schema`
  function that you can use in your rules to validate all or part of the target
  object with JSON Schema (Ajv is used under the hood). However, Spectral also
  provides a number of other functions and utilities that you can use to build
  up a linting ruleset to validates things that JSON Schema is not well suited
  for.


  **I want to lint my OpenAPI documents but don't want to implement Spectral
  right now.**


  No problem! A hosted version of Spectral comes **free** with the Stoplight
  platform. Sign up for a free account
  [here](https://stoplight.io/?utm_source=github&utm_campaign=spectral).


  **What is the difference between Spectral and
  [Speccy](https://github.com/wework/speccy)?**


  With Spectral, lint rules can be applied to _any_ JSON object. Speccy is
  designed to work with OpenAPI v3 only. The rule structure is different between
  the two. Spectral uses [JSONPath](http://goessner.net/articles/JsonPath/)
  `path` parameters instead of the `object` parameters (which are OpenAPI
  specific). Rules are also more clearly defined (thanks to TypeScript typings)
  and now require specifying a `type` parameter. Some rule types have been
  enhanced to be a little more flexible along with being able to create your own
  rules based on the built-in and custom functions.


  ## Contributing


  If you are interested in contributing to Spectral itself, check out our
  [contributing docs](CONTRIBUTING.md) to get started.


  Also, most of the interesting projects are built _with_ Spectral. Please
  consider using Spectral in a project or contribute to an [existing
  one](#example-implementations).


  If you are using Spectral in your project and want to be listed in the
  examples section, we encourage you to open an
  [issue](https://github.com/stoplightio/spectral/issues).


  ### Example Implementations


  - [Stoplight's Custom Style and Validation
  Rules](https://docs.stoplight.io/modeling/modeling-with-openapi/style-validation-rules)
  uses Spectral to validate and lint OpenAPI documents on the Stoplight platform

  - [Spectral GitHub Bot](https://github.com/tbarn/spectral-bot), a GitHub pull
  request bot that lints your repo's OpenAPI document that uses the
  [Probot](https://probot.github.io) framework, built by [Taylor
  Barnett](https://github.com/tbarn)

  - [Spectral GitHub Action](https://github.com/XVincentX/spectral-action), a
  GitHub Action that lints your repo's OpenAPI document, built by [Vincenzo
  Chianese](https://github.com/XVincentX/)


  ## Helpful Links


  - [JSONPath Online Evaluator](http://jsonpath.com/), a helpful tool to
  determine what `path` you want

  - [stoplightio/json](https://github.com/stoplightio/json), a library of useful
  functions for when working with JSON

  - [stoplightio/yaml](https://github.com/stoplightio/yaml), a library of useful
  functions for when working with YAML, including parsing YAML into JSON, and a
  few helper functions such as `getJsonPathForPosition` or
  `getLocationForJsonPath`


  ## Thanks :)


  - [Phil Sturgeon](https://github.com/philsturgeon) for collaboration and
  creating Speccy

  - [Mike Ralphson](https://github.com/MikeRalphson) for kicking off the
  Spectral CLI


  ## Support


  If you have a bug or feature request, please open an issue
  [here](https://github.com/stoplightio/spectral/issues).


  If you need help using Spectral or have a support question, please use the
  [Stoplight Community forum](https://community.stoplight.io). We've created an
  open source category for these questions. It's also a great place to share
  your implementations.


  If you want to discuss something in private, you can reach out to Stoplight
  support at [support@stoplight.io](mailto:support@stoplight.io).
m3-moretv/smogger: >
  ## Что это?

  Инструмент для автоматического создания мок-сервера: имитации реального API,

  описанного по спецификации [Open API
  v3](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md).


  ## Зависимости

  - node.js >= 9

  - Open API спецификация (yaml/json)


  ## Установка и запуск

  - `npm i @m3-moretv/smogger`

  - `npx @m3-moretv/smogger -s ./spec.yaml`

  - `npx @m3-moretv/smogger --help` покажет список опций


  На порту `:3000` запустится http сервер, который будет полностью эмулировать

  описанное в спеке API. Все endpoints будут возвращать модели, описанные в 

  спецификации с рандомными значениями, сгенеренными с помощью
  [Faker.js](https://github.com/marak/Faker.js/)


  **Например эта схема:**

  ```yaml

  type: object

  required:
      - id
      - name
  properties:
    id:
      type: integer
      format: int64
    name:
      type: string
      format: name.firstName
    tag:
      type: string
      format: random.word
  ```

  **Вернет такие данные:**

  ```json

  {
    "id": 23123123123,
    "name": "Petra",
    "tag": "Forest"
  }

  ```


  ## Использование


  ### Формат данных

  Для создания данных приближанных к реальному API используется
  [Faker.js](https://github.com/marak/Faker.js/),

  который генерит случайные данные на основе поля `format`. Например для того
  что

  бы в строке был email необходимо в поле `type` указать `string`,

  а в поле `format` указать `internet.email`.


  Полный список форматов можно найти
  [тут](https://rawgit.com/Marak/faker.js/master/examples/browser/index.html).


  ### Лимиты

  Так же поддерживаются все ограничения Open API спецификации:

  - minLength

  - maxLength

  - minimum

  - maximum

  - ... e.t.c.


  Например для того что бы API возвращало возраст от 10 до 18 мы можем описать
  такую схему:

  ```yaml

  type: number

  minimum: 10

  maximum: 18

  ```


  То же самое можно сделать с длинной строки, колличеством элементов в массиве

  или использовать
  [enum](https://swagger.io/docs/specification/data-models/enums/)


  Чуть больше о типах и их ограничениях можно прочитать в спеке [Open
  API](https://swagger.io/docs/specification/data-models/data-types/)


  ## Изображения

  Smogger умеет генерить ссылки на рандомные изображения, используя какой либо

  из открытых сервисов рандомных картинок (по дефолту https://picsum.photos).


  Сервис можно заменить через конфиг, передав в параметре `-i` ссылку сервис.

  Если сервис поддерживает указание в url раземеры картинок можно

  указать это в формате `https://picsum.photos/<width>/<height>/?random`.


  ## ATTENTION

  Сейчас генерятся только ответы application/json с кодом 200. В дальнейшем 

  это будет доработано.


  Так же на данный момент API не умеет работать с float.


  ## Contributors

  В проекте используется yarn и flow.


  _Supported by MoreTV with ❤️_
anupsaund/vertx-auto-swagger: >+
  # vertx-auto-swagger


  > TL;DR - How to get java Vert.x to automatically generate a Open API v3 spec
  (A.k.a. Swagger) and serve it to Swagger UI, served through Vert.x.


  ### Motivation

  I needed a way to generate a swagger spec from Java code, instead of having to
  hand craft a swagger JSON file.


  I also wanted to serve out the spec from Vert.x into Swagger UI so that it
  could be used by all.


  There is a more detailed write up available on my blog post: 

  http://anupsaund.com/how-to-generate-openapi-3-0-swagger-spec-from-vertx-java-and-serve-it-via-swagger-ui


  ### What does it do?


  1.  Read Java Annotations and map them into a openAPI spec.

  2.  Serve the openAPI spec out on an end point.

  3.  Serve a distributable version of SwaggerUI which presents the swagger spec
  from point 2.



  ### Screenshot of Swagger UI

  ![SwaggerUI](UI.PNG "SwaggerUI")


  ### What does a typical Java annotation look like?


  ```java

  @Operation(summary = "Find products by ID", method = "GET", operationId =
  "product/:productId",
      tags = {
        "Product"
      },
      parameters = {
        @Parameter(in = ParameterIn.PATH, name = "productId",
          required = true, description = "The unique ID belonging to the product", schema = @Schema(type = "string"))
      },
      responses = {
        @ApiResponse(responseCode = "200", description = "OK",
          content = @Content(
            mediaType = "application/json",
            encoding = @Encoding(contentType = "application/json"),
            schema = @Schema(name = "product", example =
              "{" +
                "'_id':'abc'," +
                "'title':'Red Truck'," +
                "'image_url':'https://images.pexels.com/photos/1112597/pexels-photo-1112597.jpeg'," +
                "'from_date':'2018-08-30'," +
                "'to_date':'2019-08-30'," +
                "'price':'125.00'," +
                "'enabled':true" +
                "}",
              implementation = Product.class)
          )
        ),
        @ApiResponse(responseCode = "404", description = "Not found."),
        @ApiResponse(responseCode = "500", description = "Internal Server Error.")
      }
    )
  ```


  ## How to get it running


  > Dependancies: Maven, JAVA and a JAVA IDE is helpful.


  1. Clone the repository and use Maven to install dependancies.

  1. In Intellij set up a config to run a Java Application with the following
  settings.


  ``` 
    Main Class: io.vertx.core.Launcher
    VM Options: <up to you, or leave blank>
    Program Arguments: run io.vertx.VertxAutoSwagger.MainVerticle
  ```


  3. After tha application has launched, go to
  http://localhost:8080/doc/index.html


  #### Special Credit

  Goes to Christos Karatzas for creating the generator class which has been used
  and enhanced for this respository:
   
  His original repository is available at:
  https://github.com/ckaratzas/vertx-openapi-spec-generator

mrin9/OpenAPI-Viewer: >+
  <img alt="MrinDoc logo"
  src="https://github.com/mrin9/OpenAPI-Viewer/blob/master/public/images/leaves_logo1.svg"
  width="60px" />


  # MrinDoc

  An OpenAPI 3.0 and 2.0 Spec viewer with built in console 


  ### [Demo](https://mrin9.github.io/OpenAPI-Viewer)


  ### Checkout RapiDoc - Another project for Viewing OpenAPI spec using
  web-Componnet

  #### [Checkout RapiDoc](https://mrin9.github.io/RapiDoc)


  # Features

  - Supports Swagger V2.0 and OpenAPI 3.0

  - Supports searching of end-points (paths)

  - Built In console to try out APIs

  - Responsive (support for desktop and tablets)

  - Supports Authentication
    - OAuth2
    - API Key(Token)
    - HTTP Bearer
    - HTTP Basic
  - UX friendly.
    - All Endpoints paths are cleanly presented
    - Clear seperation of Request and Response info laid out side by side in a two colum layout
    - Lesser clicks to deal with. All schema models, response-jsons and examples are expanded by defaults which eliminates the need of click and reveal each level.
    - While using API console, request data is pre-filled based on schema
    - Needs just one click to try out live APIs


  ## Project Build

  ```

  yarn install

  yarn run build 

  ```

  ### Screenshots

  #### EndPoint Listings

  <kbd>
      <img src="/screenshots/end-point-listing.png?raw=true">
  </kbd>


  #### Request/Response

  Laid out in a two colum for easy view & compare 

  <kbd>
      <img src="/screenshots/request-response.png?raw=true">
  </kbd>


  #### Schema View

  All Request/Response schema and Response JSONs are expanded by default, so
  that you dont have to click and reveal each level for easy browsing and read

  <kbd>
      <img src="/screenshots/response-schema.png?raw=true">
  </kbd>


  #### Console

  Built in console, fields are pre-filled with values if exist in spec, request
  body is generated and filled based on schema, allowing you to quickly try out
  the end-point with a single click 

  <kbd>
      <img src="/screenshots/console.png?raw=true">
  </kbd>


  #### Authentication Support

  All the authentication methods are supported. Along with instructions on how
  to use it

  <kbd>
      <img src="/screenshots/authentication1.png?raw=true">
  </kbd>

  <kbd>
      <img src="/screenshots/authentication2.png?raw=true">
  </kbd>

tiangolo/fastapi: >
  <p align="center">
    <a href="https://fastapi.tiangolo.com"><img src="https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png" alt="FastAPI"></a>
  </p>

  <p align="center">
      <em>FastAPI framework, high performance, easy to learn, fast to code, ready for production</em>
  </p>

  <p align="center">

  <a href="https://travis-ci.org/tiangolo/fastapi" target="_blank">
      <img src="https://travis-ci.org/tiangolo/fastapi.svg?branch=master" alt="Build Status">
  </a>

  <a href="https://codecov.io/gh/tiangolo/fastapi" target="_blank">
      <img src="https://codecov.io/gh/tiangolo/fastapi/branch/master/graph/badge.svg" alt="Coverage">
  </a>

  <a href="https://pypi.org/project/fastapi" target="_blank">
      <img src="https://badge.fury.io/py/fastapi.svg" alt="Package version">
  </a>

  <a
  href="https://gitter.im/tiangolo/fastapi?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"
  target="_blank">
      <img src="https://badges.gitter.im/tiangolo/fastapi.svg" alt="Join the chat at https://gitter.im/tiangolo/fastapi">
  </a>

  </p>


  ---


  **Documentation**: <a href="https://fastapi.tiangolo.com"
  target="_blank">https://fastapi.tiangolo.com</a>


  **Source Code**: <a href="https://github.com/tiangolo/fastapi"
  target="_blank">https://github.com/tiangolo/fastapi</a>


  ---


  FastAPI is a modern, fast (high-performance), web framework for building APIs
  with Python 3.6+ based on standard Python type hints.


  The key features are:


  * **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks
  to Starlette and Pydantic). [One of the fastest Python frameworks
  available](#performance).


  * **Fast to code**: Increase the speed to develop features by about 200% to
  300% *.

  * **Fewer bugs**: Reduce about 40% of human (developer) induced errors. *

  * **Intuitive**: Great editor support. <abbr title="also known as
  auto-complete, autocompletion, IntelliSense">Completion</abbr> everywhere.
  Less time debugging.

  * **Easy**: Designed to be easy to use and learn. Less time reading docs.

  * **Short**: Minimize code duplication. Multiple features from each parameter
  declaration. Fewer bugs.

  * **Robust**: Get production-ready code. With automatic interactive
  documentation.

  * **Standards-based**: Based on (and fully compatible with) the open standards
  for APIs: <a href="https://github.com/OAI/OpenAPI-Specification"
  target="_blank">OpenAPI</a> (previously known as Swagger) and <a
  href="http://json-schema.org/" target="_blank">JSON Schema</a>.


  <small>* estimation based on tests on an internal development team, building
  production applications.</small>


  ## Opinions


  "*[...] I'm using **FastAPI** a ton these days. [...] I'm actually planning to
  use it for all of my team's **ML services at Microsoft**. Some of them are
  getting integrated into the core **Windows** product and some **Office**
  products.*"


  <div style="text-align: right; margin-right: 10%;">Kabir Khan -
  <strong>Microsoft</strong> <a
  href="https://github.com/tiangolo/fastapi/pull/26"
  target="_blank"><small>(ref)</small></a></div>


  ---


  "*I’m over the moon excited about **FastAPI**. It’s so fun!*"


  <div style="text-align: right; margin-right: 10%;">Brian Okken - <strong><a
  href="https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs?time_in_sec=855"
  target="_blank">Python Bytes</a> podcast host</strong> <a
  href="https://twitter.com/brianokken/status/1112220079972728832"
  target="_blank"><small>(ref)</small></a></div>


  ---


  "*Honestly, what you've built looks super solid and polished. In many ways,
  it's what I wanted **Hug** to be - it's really inspiring to see someone build
  that.*"


  <div style="text-align: right; margin-right: 10%;">Timothy Crosley -
  <strong><a href="http://www.hug.rest/" target="_blank">Hug</a>
  creator</strong> <a href="https://news.ycombinator.com/item?id=19455465"
  target="_blank"><small>(ref)</small></a></div>


  ---





  ## Requirements


  Python 3.6+


  FastAPI stands on the shoulders of giants:


  * <a href="https://www.starlette.io/" target="_blank">Starlette</a> for the
  web parts.

  * <a href="https://pydantic-docs.helpmanual.io/" target="_blank">Pydantic</a>
  for the data parts.



  ## Installation


  ```bash

  $ pip install fastapi

  ```


  You will also need an ASGI server, for production such as <a
  href="http://www.uvicorn.org" target="_blank">uvicorn</a>.


  ```bash

  $ pip install uvicorn

  ```


  ## Example


  ### Create it


  * Create a file `main.py` with:


  ```Python

  from fastapi import FastAPI


  app = FastAPI()



  @app.get("/")

  def read_root():
      return {"Hello": "World"}


  @app.get("/items/{item_id}")

  def read_item(item_id: int, q: str = None):
      return {"item_id": item_id, "q": q}
  ```

  <details markdown="1">

  <summary>Or use <code>async def</code>...</summary>


  If your code uses `async` / `await`, use `async def`:


  ```Python hl_lines="7 12"

  from fastapi import FastAPI


  app = FastAPI()



  @app.get("/")

  async def read_root():
      return {"Hello": "World"}


  @app.get("/items/{item_id}")

  async def read_item(item_id: int, q: str = None):
      return {"item_id": item_id, "q": q}
  ```


  **Note**:
      
  If you don't know, check the _"In a hurry?"_ section about <a
  href="https://fastapi.tiangolo.com/async/#in-a-hurry" target="_blank">`async`
  and `await` in the docs</a>.


  </details>


  ### Run it


  Run the server with:


  ```bash

  uvicorn main:app --reload

  ```


  <details markdown="1">

  <summary>About the command <code>uvicorn main:app --reload</code>...</summary>


  The command `uvicorn main:app` refers to:


  * `main`: the file `main.py` (the Python "module").

  * `app`: the object created inside of `main.py` with the line `app =
  FastAPI()`.

  * `--reload`: make the server restart after code changes. Only do this for
  development.


  </details>


  ### Check it


  Open your browser at <a href="http://127.0.0.1:8000/items/5?q=somequery"
  target="_blank">http://127.0.0.1:8000/items/5?q=somequery</a>. 


  You will see the JSON response as:


  ```JSON

  {"item_id": 5, "q": "somequery"}

  ```


  You already created an API that:


  * Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.

  * Both _paths_ take `GET` <em>operations</em> (also known as HTTP _methods_).

  * The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should
  be an `int`.

  * The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.


  ### Interactive API docs


  Now go to <a href="http://127.0.0.1:8000/docs"
  target="_blank">http://127.0.0.1:8000/docs</a>. 


  You will see the automatic interactive API documentation (provided by <a
  href="https://github.com/swagger-api/swagger-ui" target="_blank">Swagger
  UI</a>):


  ![Swagger
  UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)



  ### Alternative API docs


  And now, go to <a href="http://127.0.0.1:8000/redoc"
  target="_blank">http://127.0.0.1:8000/redoc</a>.


  You will see the alternative automatic documentation (provided by <a
  href="https://github.com/Rebilly/ReDoc" target="_blank">ReDoc</a>):


  ![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)


  ## Example upgrade


  Now modify the file `main.py` to receive a body from a `PUT` request.


  Declare the body using standard Python types, thanks to Pydantic.



  ```Python hl_lines="2 7 8 9 10 24"

  from fastapi import FastAPI

  from pydantic import BaseModel


  app = FastAPI()



  class Item(BaseModel):
      name: str
      price: float
      is_offer: bool = None


  @app.get("/")

  def read_root():
      return {"Hello": "World"}


  @app.get("/items/{item_id}")

  def read_item(item_id: int, q: str = None):
      return {"item_id": item_id, "q": q}


  @app.put("/items/{item_id}")

  def update_item(item_id: int, item: Item):
      return {"item_name": item.name, "item_id": item_id}
  ```


  The server should reload automatically (because you added `--reload` to the
  `uvicorn` command above).


  ### Interactive API docs upgrade


  Now go to <a href="http://127.0.0.1:8000/docs"
  target="_blank">http://127.0.0.1:8000/docs</a>.


  * The interactive API documentation will be automatically updated, including
  the new body:


  ![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)


  * Click on the button "Try it out", it allows you to fill the parameters and
  directly interact with the API:


  ![Swagger UI
  interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)


  * Then click on the "Execute" button, the user interface will communicate with
  your API, send the parameters, get the results and show them on the screen:


  ![Swagger UI
  interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)



  ### Alternative API docs upgrade


  And now, go to <a href="http://127.0.0.1:8000/redoc"
  target="_blank">http://127.0.0.1:8000/redoc</a>.


  * The alternative documentation will also reflect the new query parameter and
  body:


  ![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)



  ### Recap


  In summary, you declare **once** the types of parameters, body, etc. as
  function parameters. 


  You do that with standard modern Python types.


  You don't have to learn a new syntax, the methods or classes of a specific
  library, etc.


  Just standard **Python 3.6+**.


  For example, for an `int`:


  ```Python

  item_id: int

  ```


  or for a more complex `Item` model:


  ```Python

  item: Item

  ```


  ...and with that single declaration you get:


  * Editor support, including:
      * Completion.
      * Type checks.
  * Validation of data:
      * Automatic and clear errors when the data is invalid.
      * Validation even for deeply nested JSON objects.
  * <abbr title="also known as: serialization, parsing,
  marshalling">Conversion</abbr> of input data: coming from the network to
  Python data and types. Reading from:
      * JSON.
      * Path parameters.
      * Query parameters.
      * Cookies.
      * Headers.
      * Forms.
      * Files.
  * <abbr title="also known as: serialization, parsing,
  marshalling">Conversion</abbr> of output data: converting from Python data and
  types to network data (as JSON):
      * Convert Python types (`str`, `int`, `float`, `bool`, `list`, etc).
      * `datetime` objects.
      * `UUID` objects.
      * Database models.
      * ...and many more.
  * Automatic interactive API documentation, including 2 alternative user
  interfaces:
      * Swagger UI.
      * ReDoc.

  ---


  Coming back to the previous code example, **FastAPI** will:


  * Validate that there is an `item_id` in the path for `GET` and `PUT`
  requests.

  * Validate that the `item_id` is of type `int` for `GET` and `PUT` requests.
      * If it is not, the client will see a useful, clear error.
  * Check if there is an optional query parameter named `q` (as in
  `http://127.0.0.1:8000/items/foo?q=somequery`) for `GET` requests.
      * As the `q` parameter is declared with `= None`, it is optional.
      * Without the `None` it would be required (as is the body in the case with `PUT`).
  * For `PUT` requests to `/items/{item_id}`, Read the body as JSON:
      * Check that it has a required attribute `name` that should be a `str`. 
      * Check that is has a required attribute `price` that has to be a `float`.
      * Check that it has an optional attribute `is_offer`, that should be a `bool`, if present.
      * All this would also work for deeply nested JSON objects.
  * Convert from and to JSON automatically.

  * Document everything with OpenAPI, that can be used by:
      * Interactive documentation systems.
      * Automatic client code generation systems, for many languages.
  * Provide 2 interactive documentation web interfaces directly.



  ---


  We just scratched the surface, but you already get the idea of how it all
  works.


  Try changing the line with:


  ```Python
      return {"item_name": item.name, "item_id": item_id}
  ```


  ...from:


  ```Python
          ... "item_name": item.name ...
  ```


  ...to:


  ```Python
          ... "item_price": item.price ...
  ```


  ...and see how your editor will auto-complete the attributes and know their
  types:


  ![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)



  For a more complete example including more features, see the <a
  href="https://fastapi.tiangolo.com/tutorial/intro/">Tutorial - User Guide</a>.


  **Spoiler alert**: the tutorial - user guide includes:


  * Declaration of **parameters** from other different places as: **headers**,
  **cookies**, **form fields** and **files**.

  * How to set **validation constraints** as `maximum_length` or `regex`.

  * A very powerful and easy to use **<abbr title="also known as components,
  resources, providers, services, injectables">Dependency Injection</abbr>**
  system.

  * Security and authentication, including support for **OAuth2** with **JWT
  tokens** and **HTTP Basic** auth.

  * More advanced (but equally easy) techniques for declaring **deeply nested
  JSON models** (thanks to Pydantic).

  * Many extra features (thanks to Starlette) as:
      * **WebSockets**
      * **GraphQL**
      * extremely easy tests based on `requests` and `pytest`
      * **CORS**
      * **Cookie Sessions**
      * ...and more.


  ## Performance


  Independent TechEmpower benchmarks show **FastAPI** applications running under
  Uvicorn as <a
  href="https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7"
  target="_blank">one of the fastest Python frameworks available</a>, only below
  Starlette and Uvicorn themselves (used internally by FastAPI). (*)


  To understand more about it, see the section <a
  href="https://fastapi.tiangolo.com/benchmarks/"
  target="_blank">Benchmarks</a>.


  ## Optional Dependencies


  Used by Pydantic:


  * <a href="https://github.com/esnme/ultrajson"
  target="_blank"><code>ujson</code></a> - for faster JSON <abbr
  title="converting the string that comes from an HTTP request into Python
  data">"parsing"</abbr>.

  * <a href="https://github.com/JoshData/python-email-validator"
  target="_blank"><code>email_validator</code></a> - for email validation.



  Used by Starlette:


  * <a href="http://docs.python-requests.org"
  target="_blank"><code>requests</code></a> - Required if you want to use the
  `TestClient`.

  * <a href="https://github.com/Tinche/aiofiles"
  target="_blank"><code>aiofiles</code></a> - Required if you want to use
  `FileResponse` or `StaticFiles`.

  * <a href="http://jinja.pocoo.org" target="_blank"><code>jinja2</code></a> -
  Required if you want to use the default template configuration.

  * <a href="https://andrew-d.github.io/python-multipart/"
  target="_blank"><code>python-multipart</code></a> - Required if you want to
  support form <abbr title="converting the string that comes from an HTTP
  request into Python data">"parsing"</abbr>, with `request.form()`.

  * <a href="https://pythonhosted.org/itsdangerous/"
  target="_blank"><code>itsdangerous</code></a> - Required for
  `SessionMiddleware` support.

  * <a href="https://pyyaml.org/wiki/PyYAMLDocumentation"
  target="_blank"><code>pyyaml</code></a> - Required for `SchemaGenerator`
  support.

  * <a href="https://graphene-python.org/"
  target="_blank"><code>graphene</code></a> - Required for `GraphQLApp` support.

  * <a href="https://github.com/esnme/ultrajson"
  target="_blank"><code>ujson</code></a> - Required if you want to use
  `UJSONResponse`.


  Used by FastAPI / Starlette:


  * <a href="http://www.uvicorn.org" target="_blank"><code>uvicorn</code></a> -
  for the server that loads and serves your application.


  You can install all of these with `pip3 install fastapi[all]`.


  ## License


  This project is licensed under the terms of the MIT license.
ReDoc-ly/create-openapi-repo: >
  # create-openapi-repo


  [![NPM version][npm-image]][npm-url] [![Dependency
  Status][daviddm-image]][daviddm-url]


  > Generator for OpenAPI repository


  <center>


  <img src="./logo.png" widht="500px"/>


  </center>


  ## Why?

  There are a few advantages in hosting your API specification + docs on GitHub:
   - Community engagement (PR's and issues)
   - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)
   - Advertisment in the GitHub community
   - Revision history, branching, CI
   - Fast on-boarding time (everyone knows how to use GitHub :smile:)

  ## Features

  This generator helps to create a GitHub repo with the following features:
   - Possibility to split a big OpenAPI spec into smaller files and bundle it for deployment
   - Continuous integration/deployment on Travis
   - Code samples as separate files
   - OpenAPI spec is validated after each commit
   - OpenAPI spec + ReDoc deployed to Github Pages (you can use a custom domain)
   - Live editing in your editor or `swagger-editor` :heart_eyes:
   ![live editing](./live-edit.gif)

  ## Examples of generated repositories

  - https://github.com/Rebilly/RebillyAPI

  - https://github.com/thingful/openapi-spec

  - https://github.com/TwineHealth/TwineDeveloperDocs


  ## How to generate your repository


  We assume you already have [node.js](https://nodejs.org/) installed.


  - Install `create-openapi-repo` globally:

  ```bash

  npm install -g create-openapi-repo

  ```

  or use
  [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):


  ```bash

  npx create-openapi-repo <spec-root>

  ```

  - [Create GitHub
  repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github)
  where your OpenAPI spec will live.

  - [Clone your repo](https://help.github.com/articles/cloning-a-repository/)
  and execute the following command inside it:

  ```bash

  create-openapi-repo .

  ```

  -  Commit and push your changes to the GitHub and follow instruction from
  `README.md` of your newly created repo.


  [npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg

  [npm-url]: https://npmjs.org/package/generator-openapi-repo

  [daviddm-image]:
  https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io

  [daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo
postmanlabs/openapi-to-postman: >

  ![postman
  icon](https://raw.githubusercontent.com/postmanlabs/postmanlabs.github.io/develop/global-artefacts/postman-logo%2Btext-320x132.png) 


  *Supercharge your API workflow.*  

  *Modern software is built on APIs. Postman helps you develop APIs faster.*


  # OpenAPI 3.0 to Postman Collection v2.1.0 Converter


  [![Build
  Status](https://travis-ci.org/postmanlabs/openapi-to-postman.svg?branch=master)](https://travis-ci.org/postmanlabs/openapi-to-postman)


  #### Contents 


  1. [Getting Started](#getting-started)

  2. [Using the converter as a NodeJS
  module](#using-the-converter-as-a-nodejs-module)
      1. [Convert Function](#convert)
      2. [Options](#options)
      3. [ConversionResult](#conversionresult)
      4. [Sample usage](#sample-usage)
      5. [Validate function](#validate-function)
  3. [Command Line Interface](#command-line-interface)
      1. [Options](#options)
      2. [Usage](#usage)
  4. [Conversion Schema](#conversion-schema)


  ---


  ## Getting Started


  To use the converter as a Node module, you need to have a copy of the NodeJS
  runtime. The easiest way to do this is through npm. If you have NodeJS
  installed you have npm installed as well.


  ```terminal

  $ npm install openapi-to-postmanv2

  ```



  ## Using the converter as a NodeJS module


  In order to use the convert in your node application, you need to import the
  package using `require`.


  ```javascript

  var openapi-converter = require('openapi-to-postmanv2')

  ```


  The converter provides the following functions:


  ### Convert


  The convert function takes in your OpenAPI specification ( YAML / JSON ) and
  converts it to a Postman collection.


  Signature: `convert (data, options, callback);`


  **data:**


  ```javascript

  { type: 'file', data: 'filepath' }

  OR

  { type: 'string', data: '<entire OpenAPI string - JSON or YAML>' }

  OR

  { type: 'json', data: OpenAPI-JS-object }

  ```


  **options:**

  ```javascript

  {
    schemaFaker: true,
    requestNameSource: 'fallback',
    indentCharacter: ' '
  }

  /*

  All three properties are optional. Check the options section below for
  possible values for each option.

  */

  ```


  **callback:**

  ```javascript

  function (err, result) {
    /*
    result = {
      result: true,
      output: [
        {
          type: 'collection',
          data: {..collection object..}
        }
      ]
    }
    */
  }

  ```


  ### Options:

  * `'schemaFaker'(boolean)`:  whether to use json-schema-faker for schema
  conversion. Default: `true`

  * `'requestNameSource'(string)`: The strategy to use to generate request
  names. url: use the request's URL as the name, fallback: Use the
  summary/operationId/URL (in that order) Default: `fallback`

  * `'indentCharacter' (string)`: The character to use per level of indentation
  for JSON/XML data. Default: `' '(space)`


  ### ConversionResult


  - `result` - Flag responsible for providing a status whether the conversion
  was successful or not 


  - `reason` - Provides the reason for an unsuccessful conversion, defined only
  if result: false


  - `output` - Contains an array of Postman objects, each one with a `type` and
  `data`. The only type currently supported is `collection`.




  ### Sample Usage:

  ```javascript

  var fs = require('fs'),
    Converter = require('openapi-to-postmanv2'),
    openapiData = fs.readFileSync('sample-spec.yaml');

   Converter.convert({ type: 'string', data: specPath },
    {}, (err, conversionResult) => {
      if (!conversionResult.result) {
        console.log('Could not convert', conversionResult.reason);
      }
      else {
        console.log('The collection object is: ', conversionResult.output[0].data);
      }
    }
  );

  ```


  ### Validate Function


  The validate function is meant to ensure that the data that is being passed to
  the [convert function](#convert-function) is a valid JSON object or a valid
  (YAML/JSON) string.


  The validate function is synchronous and returns a status object which
  conforms to the following schema


  #### Validation object schema


  ```javascript

  {
    type: 'object',
    properties: {
      result: { type: 'boolean'},
      reason: { type: 'string' }
    },
    required: ['result']
  }

  ```


  ##### Validation object explanation

  - `result` - true if the data looks like OpenAPI and can be passed to the
  convert function


  - `reason` - Provides a reason for an unsuccessful validation of the
  specification



  ## Command Line Interface


  The converter can be used as a CLI tool as well. The following [command line
  options](#options) are available.


  `openapi2postmanv2 [options]`


  ### Options

  - `-V`, `--version`  
    Specifies the version of the converter

  - `-s <source>`, `--spec <source>`  
    Used to specify the OpenAPI specification (file path) which is to be converted

  - `-o <destination>`, `--output <destination>`  
    Used to specify the destination file in which the collection is to be written

  - `-t`, `--test`  
    Used to test the collection with an in-built sample specification

  - `-p`, `--pretty`  
    Used to pretty print the collection object while writing to a file

  - `-h`, `--help`  
    Specifies all the options along with a few usage examples on the terminal


  ### Usage


  **Sample usage examples of the converter CLI**



  - Takes a specification (spec.yaml) as an input and writes to a file
  (collection.json) with pretty printing

  ```terminal

  $ openapi2postmanv2 -s spec.yaml -o collection.json -p

  ```


  - Testing the converter

  ```terminal

  $ openapi2postmanv2 --test

  ```


  ## Conversion Schema


  | *postman* | *openapi* | *options* | *examples* |

  | --- | --- | :---: | :--- |

  | collectionName | info.title | - |  |

  | description | info.description + info.contact | - |  |

  | collectionVariables| server.variables + pathVariables | - |  |

  | folderName | paths.path | - |  |

  | requestName | operationItem(method).operationId |
  default(operationId)-(`requestName`)enum['operationId','summary','url'] |  |

  | request.method | path.method | - |  |

  | request.headers | parameter (`in = header`) | - |
  [link](#Header/Path-param-conversion-example) |

  | request.body | operationItem(method).requestBody | - |  |

  | request.url.raw | server.url (path level server >> openapi server) + path |
  - |  |

  | request.url.variables | parameter (`in = path`) | - |
  [link](#Header/Path-param-conversion-example) |

  | request.url.params | parameter (`in = query`) | - | {"key": param.name,
  "value":
  [link](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#style-examples)}|

  | api_key in (query or header) | components.securitySchemes.api_key | - ||
hh-h/aiohttp-swagger3: >
  # aiohttp-swagger3

  [![Build
  Status](https://travis-ci.com/hh-h/aiohttp-swagger3.svg?branch=master)](https://travis-ci.com/hh-h/aiohttp-swagger3)

  [![Code
  Coverage](https://img.shields.io/codecov/c/github/hh-h/aiohttp-swagger3/master.svg?style=flat)](https://codecov.io/github/hh-h/aiohttp-swagger3?branch=master)

  [![PyPI
  version](https://badge.fury.io/py/aiohttp-swagger3.svg)](https://badge.fury.io/py/aiohttp-swagger3)

  [![Python
  version](https://img.shields.io/badge/python-3.6%2B-brightgreen.svg)](https://img.shields.io/badge/python-3.6%2B-brightgreen.svg)

  [![Code
  Style](https://img.shields.io/badge/code%20style-black-black.svg)](https://github.com/ambv/black)

  [![License](https://img.shields.io/pypi/l/aiohttp-swagger3.svg)](https://www.apache.org/licenses/LICENSE-2.0)


  ## !!! Testers are needed !!!

  Feel free to try this library and raise an issue if it does not work as
  expected, thanks!


  # About

  Package for displaying swagger docs and optionally validating/parsing aiohttp
  requests using swagger specification 3.0 only.  

  It's marked as pre-alpha on pypi.org, but that's because I haven't decided
  architecture yet. However, we use it in production :)


  # Disable validation

  Okay, just pass `validate=False` to `SwaggerDocs`/`SwaggerFile` class, default
  is `True`


  # Requirements

  - python3.6+

  - aiohttp>=3

  - pyyaml

  - attrs

  - openapi-spec-validator

  - strict_rfc3339


  # Limitations

  - only application/json and application/x-www-form-urlencoded supported for
  now, but you can create own
  [handler](https://github.com/hh-h/aiohttp-swagger3/tree/master/examples/custom_handler)

  - header/query parameters only supported simple/form array serialization, e.g.
  1,2,3,4

  - see TODO below


  # Installation

  `pip install aiohttp-swagger3`


  # Example

  ```python

  from aiohttp import web

  from aiohttp_swagger3 import SwaggerDocs


  async def get_one_pet(request: web.Request, pet_id: int) -> web.Response:
      """
      Optional route description
      ---
      summary: Info for a specific pet
      tags:
        - pets
      parameters:
        - name: pet_id
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
      """
      if pet_id not in request.app['storage']:
          raise web.HTTPNotFound()
      return web.json_response(request.app['storage'][pet_id])

  def main():
      app = web.Application()
      s = SwaggerDocs(app, '/docs', title="Swagger Petstore", version="1.0.0", components="components.yaml")
      s.add_routes([
          web.get("/pets/{pet_id}", get_one_pet),
      ])
      app['storage'] = {}
      web.run_app(app)
  ```

  More [examples](https://github.com/hh-h/aiohttp-swagger3/tree/master/examples)


  # Features

  - [x] application/json

  - [x] application/x-www-form-urlencoded (except array and object)

  - [x] items

  - [x] properties

  - [x] pattern

  - [x] required

  - [x] enum

  - [x] minimum

  - [x] maximum

  - [x] exclusiveMinimum

  - [x] exclusiveMaximum

  - [x] minLength

  - [x] maxLength

  - [x] minItems

  - [x] maxItems

  - [x] uniqueItems

  - [x] minProperties

  - [x] maxProperties

  - [x] default (only primitives)

  - [x] additionalProperties

  - [x] nullable

  - [x] allOf

  - [x] oneOf

  - [x] anyOf

  - [x] string formats: date, date-time, password, byte, binary, email, uuid,
  hostname, ipv4, ipv6


  # TODO (raise an issue if needed)


  - ### aiohttp specific

  - [ ] class based view

  - [ ] METH_ANY (*) routes


  - ### swagger specific

  - [ ] cookies

  - [ ] multipleOf

  - [ ] not 

  - [ ] allowEmptyValue

  - [ ] Common Parameters for All Methods of a Path (spec file only)

  - [ ] readOnly, writeOnly

  - [ ] more serialization methods, see:
  [https://swagger.io/docs/specification/serialization/](https://swagger.io/docs/specification/serialization/)

  - [ ] encoding

  - [ ] form data serialization (array, object)

  - [ ] default (array, object)
dolmen-go/openapi-preprocessor: >-
  # openapi-preprocessor


  `openapi-preprocessor` is an processing tool that gives flexibility to API
  documentation authors for writing OpenAPI 2.0/3.x specifications.


  [![Travis-CI](https://api.travis-ci.org/dolmen-go/openapi-preprocessor.svg?branch=master)](https://travis-ci.org/dolmen-go/openapi-preprocessor)

  [![Codecov](https://img.shields.io/codecov/c/github/dolmen-go/openapi-preprocessor/master.svg)](https://codecov.io/gh/dolmen-go/openapi-preprocessor/branch/master)

  [![Go Report
  Card](https://goreportcard.com/badge/github.com/dolmen-go/openapi-preprocessor)](https://goreportcard.com/report/github.com/dolmen-go/openapi-preprocessor)


  ## Uses Cases


  - Author your OpenAPI spec in YAML but publish as JSON.

  - Split your OpenAPI spec source in multiple files for authoring, but publish
  a single file.

  - Build multiple specs from shared parts.

  - Merge spec generated from source code with your additional content created
  by hand.

  - Use advanced inlining (`$inline`, `$merge`) to remove duplication (source of
  inconsistencies).

  - Use advanced inlining (`$inline`, `$merge`) to produce complex schemas that
  share subset of properties.

  - Derivate a spec to build a new spec with altered servers settings for
  localhost/staging/preprod environments.

  - *Submit yours...*


  ## Features


  - Every valid OpenAPI 2.0/3.x specification is a valid input (so you can
  easily start refactoring gradually from an existing spec)

  - Allows to build a spec from multiple files; produces a single output file

  - YAML or JSON input

  - Produces an OpenAPI with maximum compatibility with consumming tools:
    - simplifies complex parts of the spec not supported by all tools
    - JSON output
  - Adds a few keywords (`$inline`, `$merge`) that allow to avoid duplication of
  content and ease the writing of consistent documentation

  - Removes inused global schemas (under `/definitions`), parameters (under
  `/parameters`) and responses (under `/responses`). This reduces risk of
  leaking work in progress or internal details.


  ## Keywords


  ### `$ref`

      { "$ref": "<file>" }
      { "$ref": "<file>#<pointer>" }
      { "$ref": "#<pointer>" }

  `$ref` is like in OpenAPI, but it can reference content in external files
  using relative URLs as well as intra-document. The referenced part of the
  pointed document is injected into the output document.


  Restrictions:

  - JSON pointer location in the output document will be the same location as in
  the ref link. Example: `{"$ref": "external.yml#/components/parameters/Id"}`
  will import the content to `/components/parameters/Id`. This implies that
  partial files should have the same layout as a full spec (this is a feature as
  it enforces readability of partials).

  - other properties along `$ref` are not allowed as the semantics in JSON
  Schema and Swagger/OpenAPI has evolved and the support in consuming tools may
  vary. Use `$merge` instead that has a strict behaviour in this tool.


  ### `$inline`

      { "$inline": "<file>#<pointer>"}

      {
          "$inline": "<file>#<pointer>",
          "pointer": <value>, // Overrides value at <file>#<pointer>/pointer1
          "pointer/slash": <value> // Overrides value at <file>#<pointer>/pointer/slash
      }

  `$inline` is an OpenAPI extension allowing to inject a copy of another part of
  a document in place. Keys along the `$inline` keyword are JSON pointers (with
  the leading `/` removed) allowing to override some parts of the inlined
  content.


  ### `$merge`

      {
          "$merge": "<file>#<pointer>",
          "key": <value>,
          "key/slash": <value> // Overrides value at <file>#<pointer>/key~1slash
      }

      {
          "$merge": [
              "<file1>#<pointer1>",
              "<file2>#<pointer2>" // Overrides keys from <file1>#<pointer1>
          ]
          "key": <value>,
          "key/slash": <value> // Overrides value at <file2>#<pointer2>/key~1slash
      }


  `$merge` is an OpenAPI extension allowing to copy a node, overriding some
  keys. This is a kind of inlined *`$ref` with keys overrides*.


  ## Examples


  See the
  [testsuite](https://github.com/dolmen-go/openapi-preprocessor/tree/master/testdata).


  ## License


  Copyright 2018 Olivier Mengué


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.
matthewtrask/disapi: >-
  ## DisAPI


  ### This is a WIP, use at your own risk.


  A RESTful OpenAPI spec API around the Walt Disney World Resort 


  #### To see ReDoc: 

  ```

  yarn run speccy serve specs/openapi.yml

  ```


  And then go to localhost:5000 to see the documentation


  #### Endpoints


  Work with the Parks Resource Collection

  ```php
      GET/POST /parks
  ```

  ```php
      GET/PUT/DELETE /parks/{id}
  ```


  Work with the Rides Resource Collection

  ```php
      GET/POST /rides
  ```

  ```php
      GET/PUT/DELETE rides/{id}
  ```


  Work with the Restaurants Resource Collection

  ```php
      GET/POST /restaurants
  ```

  ```php
      GET/PUT/DELETE /restaurants
  ```


  Work with the Resorts Resource Collection

  ```php
      GET/POST /resorts
  ```

  ```php
      GET/PUT/DELETE /restaurants/{id}
  ```


  #### Requirements


  * Composer

  * Yarn


  #### Installation


  If you want to install a local copy of this project


  * Clone to your local

  * Cd to project, and composer install the dependencies

  * To use Homestead, edit the path in Homestead.yaml to reflect your local
  and: 

  ```php

  $ ./vendor/bin/homestead make && vagrant up

  ```

  * Edit your /etc/hosts (not sure about windows) and add ```192.168.10.10
  homestead.test``` or whatever you want it to be.

  * ```vagrant ssh``` and cd to root of project

  * Install JS dependencies with Yarn (needed for Speccy)

  * Migrate and Seed the Database with ```php artisan migrate && php artisan
  db:seed```

  * Alternatively, you could import the data.sql file into your local mysql
  instance

  * Open Postman and hit the endpoints above to ensure it works. 


  If you see an issue, hit me up on twitter @matthewtrask
APIs-guru/openapi-directory: "\n\n\n![banner]\n\n[![APIs in collection][numApis-image]][apisDir-link]\n[![OpenAPI definitions][numSpecs-image]][apisDir-link]\n[![Endpoints][endpoints-image]][apisDir-link]\n[![Chat on gitter][gitter-image]][gitter-link]\n\n[![Share on Twitter][twitter-image]][twitter-link]\n[![Follow on Twitter][twitterFollow-image]][twitterFollow-link]\n<a href=\"#backers\" alt=\"sponsors on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/backers/badge.svg\" /></a> <a href=\"#sponsors\" alt=\"Sponsors on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/sponsors/badge.svg\" /></a> <a href=\"#partners\" alt=\"Partners on Open Collective\"><img src=\"https://opencollective.com/openapi-directory/partner/badge.svg\" /></a>\n\nDirectory of API definitions in [OpenAPI(aka Swagger)](https://openapis.org) [2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) and [3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md) formats.<BR>\nAPI access to collection: [Go!][apiDoc-link] - We also have an [RSS Feed](http://api.apis.guru/v2/list.rss)\n\n[![Add API][addAPI-image]][addAPI-link]\n\nOur goal is to create the most comprehensive, standards-compliant and up-to-date directory of machine-readable API definitions with the following principles:\n- Open source, community driven project.\n- Only publicly available APIs (free or paid).\n- Anyone can add or change an API, not only API owners.\n- All data can be accessed through a [REST API][apiDoc-link].\n\nIf you want to reference this project and you need an icon or even a banner, check our [branding guide](https://github.com/APIs-guru/branding).\n\nThe project was started by Ivan Goncharov of APIs.guru, it is now maintained by [Mike Ralphson](https://github.com/MikeRalphson) of [Mermade Software](https://github.com/mermade). Check out our other [OpenAPI-related projects](https://github.com/search?q=org%3AMermade+openapi).\n\nAPIs.guru provide services and consultancy around GraphQL, OpenAPI/Swagger spec and APIs in general.\nYou can contact us at founders@apis.guru / mike.ralphson@gmail.com\n\n[![Become a backer](https://opencollective.com/openapi-directory/tiers/backer.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)\n\nWhat does APIs.guru do?\n--------------------------\n* Filter out private and non-reliable APIs\n* [Convert](https://github.com/lucybot/api-spec-converter) non-OpenAPI formats into OpenAPI(fka Swagger) 2.0\n* Fix mistakes, ~80% of definitions have some\n* Add additional data, like: logo, categories, …\n* Update definitions on at least a weekly basis\n\nAPI definition acceptance criteria\n----------------------------------\n* Public - anyone can access it as long as they follow some clearly defined steps (subscribe, pay fees, etc.).\n* Persistant - API is made with long-lived goal, and not for a particular event (conference, hackathon, etc.).\n* Useful - API should provide useful functionality not only for its owner.\n\nUpdate procedure\n--------------------------\nAll definitions are automatically updated from their original source.\nYou can see this under `x-origin` property inside [each](https://github.com/APIs-guru/openapi-directory/search?utf8=%E2%9C%93&q=x-origin+filename%3Aswagger.yaml) of `swagger.yaml` files.\nWe run our update script at least weekly and manually check diffs before commit.\nIf you see some APIs are not updated for more than 2 weeks please open [an issue](https://github.com/APIs-guru/openapi-directory/issues/new).\n\nExisting integrations\n--------------------------\n\n[![Become a partner](https://opencollective.com/openapi-directory/tiers/partner.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)\n\n - https://any-api.com - **Documentation and Test Consoles for Public APIs**\n - https://datafire.io - **allows you to process and transfer data between APIs, databases, and more**\n - [https://sdks.io](https://sdks.io/Search/FindSDKs?Bridge=APIs.guru) - Explore Automatically Generated SDKs\n - [https://cenit.io](https://cenit.io/directory?spec=swagger) - Data integration platform\n - [commandcar](https://github.com/tikalk/commandcar#installing-from-api-models) - Curl on steroids\n - [Material Swagger UI Hub](https://darosh.github.io/angular-swagger-ui-material/hub/) - testing and exploring hub for Material Swagger UI demo\n - [Paw](https://luckymarmot.com/paw) - The most powerful HTTP client for Mac - You can import definitions and directly play with the APIs, [see how](https://luckymarmot.com/paw/doc/examples/search-apis)\n - [Bitscoop](https://bitscoop.com/) - A better way to create and maintain integrations\n - [WinSwag](https://github.com/SvenEV/WinSwag) - A UWP app for loading Swagger definitions and exploring REST APIs\n - [OpenAPI-Directory-JS](https://github.com/httptoolkit/openapi-directory-js) - The OpenAPI directory precompiled & indexed for JS usage & searching.\n\nAlso used as test suite in the following projects:\n - [ReDoc](https://github.com/Rebilly/ReDoc) - **Swagger-generated API Reference Documentation**\n - [swagger-parser](https://github.com/BigstickCarpet/swagger-parser) - Swagger 2.0 parser and validator for Node and browsers\n - [SwaggerProvider](https://github.com/sergey-tihon/SwaggerProvider) - F# Type Provider for Swagger\n - [ardoq-swagger-addon](https://github.com/ardoq/ardoq-swagger-addon) - Ardoq Open API (Swagger) Addon\n - [swagvali](https://github.com/subeeshcbabu/swagvali/) - Module to build validators for Swagger(OpenApi) Request parameters and Response objects\n - [swagger-search](https://github.com/IG-Group/swagger-search) - An application that collects and indexes swagger docs from your microservices architecture\n\n\nIntegration with 3rd-party services\n--------------------------\nWe discourage you from using Github RAW links or Git directly, the repository structure may change in the future.\nInstead, we strongly recommend you to use our [REST API][apiDoc-link].\n\nLicenses\n--------------------------\nAll code is released under the [MIT](http://opensource.org/licenses/MIT) licence.<br>\nAll API definitions contributed to project by authors are covered by the [CC01.0](https://creativecommons.org/publicdomain/zero/1.0/) license.<br>\nAll API definitions acquired from public sources under the [Fair use](http://en.wikipedia.org/wiki/Fair_use) principle.\n\nDefinition sources\n--------------------------\nSome definitions are taken from Open Source projects:\n - [darklynx/swagger-api-collection](https://github.com/darklynx/swagger-api-collection) - OpenAPI(aka Swagger) description for Instagram API\n - [Mermade/bbcparse](https://github.com/Mermade/bbcparse) - OpenAPI(fka Swagger) definition for BBC Nitro and iBL APIs\n - [amardeshbd/medium-api-specification](https://github.com/amardeshbd/medium-api-specification) - OpenAPI (fka Swagger) 2.0 description for Medium API\n - [faragorn/open-api-specs](https://github.com/faragorn/open-api-specs) - OpenAPI definition for the Giphy API\n\n[banner]: https://apis.guru/branding/banner.svg \"APIs.guru\"\n[twitter-image]: https://img.shields.io/twitter/url/http/APIs.guru.svg?style=social\n[twitter-link]: https://twitter.com/intent/tweet?text=http%3A%2F%2FAPIs.guru%20-%20Wikipedia%20for%20%23Web%20%23APIs%20by%20@APIs_guru%20pic.twitter.com/UhlhbMw1NP\n[twitterFollow-image]: https://img.shields.io/twitter/follow/APIs_guru.svg?style=social\n[twitterFollow-link]: https://twitter.com/intent/follow?screen_name=APIs_guru\n[gitter-image]: https://img.shields.io/gitter/room/APIs-guru/api-models.svg\n[gitter-link]: https://gitter.im/APIs-guru/api-models\n[numApis-image]: https://api.apis.guru/badges/apis_in_collection.svg\n[numSpecs-image]: https://api.apis.guru/badges/openapi_specs.svg\n[endpoints-image]: https://api.apis.guru/badges/endpoints.svg\n[apisDir-link]: ./APIs\n[addAPI-image]: https://cloud.githubusercontent.com/assets/8336157/15861614/7e31511a-2cd5-11e6-8b79-38ad0f61e598.png\n[addAPI-link]: https://apis.guru/add-api/\n[apiDoc-link]: https://apis.guru/api-doc/\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/APIs-guru/openapi-directory/graphs/contributors\"><img src=\"https://opencollective.com/openapi-directory/contributors.svg?width=890&button=false\" /></a>\n\n## Asynchronous APIs\n\nSee also [AsyncAPI-Directory](https://github.com/APIs-guru/asyncapi-directory)\n\n## Backers\n\nThank you to all our backers! \U0001F64F [[Become a backer](https://opencollective.com/openapi-directory#backer)]\n\n<a href=\"https://opencollective.com/openapi-directory#backers\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/openapi-directory#sponsor)]\n\n<a href=\"https://opencollective.com/openapi-directory/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/openapi-directory/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/sponsor/9/avatar.svg\"></a>\n\n## Partners\n\nSupport this project by becoming a partner. Your logo will show up here with a link to your website. [[Become a partner](https://opencollective.com/openapi-directory#partner)]\n\n<a href=\"https://opencollective.com/openapi-directory\" target=\"_blank\"><img src=\"https://opencollective.com/openapi-directory/partners.svg?width=890&button=false\"></a>\n"
apiaryio/dredd-transactions: >
  # Dredd Transactions


  [![npm
  version](https://badge.fury.io/js/dredd-transactions.svg)](https://badge.fury.io/js/dredd-transactions)

  [![Build
  Status](https://travis-ci.org/apiaryio/dredd-transactions.svg?branch=master)](https://travis-ci.org/apiaryio/dredd-transactions)

  [![Build
  status](https://ci.appveyor.com/api/projects/status/hh8l50ssai3p4d3f/branch/master?svg=true)](https://ci.appveyor.com/project/Apiary/dredd-transactions/branch/master)

  [![Dependencies
  Status](https://david-dm.org/apiaryio/dredd-transactions.svg)](https://david-dm.org/apiaryio/dredd-transactions)

  [![devDependencies
  Status](https://david-dm.org/apiaryio/dredd-transactions/dev-status.svg)](https://david-dm.org/apiaryio/dredd-transactions?type=dev)

  [![Greenkeeper
  badge](https://badges.greenkeeper.io/apiaryio/dredd-transactions.svg)](https://greenkeeper.io/)

  [![Coverage
  Status](https://coveralls.io/repos/github/apiaryio/dredd-transactions/badge.svg?branch=master)](https://coveralls.io/github/apiaryio/dredd-transactions?branch=master)

  [![Known
  Vulnerabilities](https://snyk.io/test/npm/dredd-transactions/badge.svg)](https://snyk.io/test/npm/dredd-transactions)



  Dredd Transactions library compiles *HTTP Transactions* (simple
  Request-Response pairs) from API description document.


  > **Note:** To better understand *emphasized* terms in this documentation,
  please refer to the [Glossary of Terms][api-blueprint-glossary]. All data
  structures are described using the [MSON][mson-spec] format.


  This project supersedes [Blueprint Transactions][blueprint-transactions]
  library.



  ## Features


  * Inherits parameters from parent *Resource* and *Action* sections.

  * Expands *URI Templates*.

  * Warns on undefined placeholders in *URI Templates* (both query and path).

  * Validates URI parameter types.

  * Selects first *Request* and first *Response* if multiple are specified in
  the API description document.



  ### Deprecated Features


  * Compiles [Transaction Name][transaction-object-spec] string (vague
  identifier) for each *Transaction*.

  * Provides [Transaction Origin][transaction-object-spec] with pointers to [API
  Elements][api-elements] derived from the original API description document.


  > **Note:** These features are to be superseded by whatever comes out of the
  proposal in
  [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  ## Installation


  ```

  npm install dredd-transactions

  ```



  ## Development


  Dredd Transactions library is written in JavaScript (ES2015+).



  ## Usage


  ### `parse`


  Parses given API description document into API Elements with options specific

  to Dredd. Assumes that documents with unrecognizable format are

  [API Blueprint][api-blueprint]. Turns any parser failures, including

  the unexpected ones, into [API Elements][api-elements] annotations.


  ```javascript

  const parse = require('dredd-transactions/parse');

  // const { parse } = require('dredd-transactions');


  parse('# My API\n...', (error, parseResult) => {
    // ...
  });

  ```


  ### `compile`


  Compiles *HTTP Transactions* from given [API Elements][api-elements]. *HTTP
  Transactions* are a backbone data structure to Dredd.


  ```javascript

  const compile = require('dredd-transactions/compile');

  // const { compile } = require('dredd-transactions');


  const compileResult = compile(mediaType, apiElements, filename);

  ```


  > **Note:** The `filename` argument is optional and about to get deprecated,
  see [#6][filename-deprecation]



  ## Data Structures


  <a name="parse-result-object"></a>

  ### Parse Result (object)


  Result of parsing.


  - `mediaType`: `text/vnd.apiblueprint` (string, default, nullable) - Media
  type of the input format, can be empty in case of some fatal errors

  - `apiElements` ([API Elements][api-elements]) - API Elements parse result


  <a name="compile-result-object"></a>

  ### Compile Result (object)


  Result of compilation. Alongside compiled
  [Transaction][transaction-object-spec] objects contains also errors and
  warnings, mainly from API description parser.


  - `mediaType`: `text/vnd.apiblueprint` (string, default, nullable) - Media
  type of the input format, defaults to API Blueprint format. Can be empty in
  case of some fatal errors.

  - `transactions` (array[[Transaction][transaction-object-spec]]) - Compiled
  _HTTP Transactions_.

  - `annotations` (array[[Annotation][annotation-object-spec]]) - Errors and
  warnings which occurred during parsing of the API description or during
  compilation of transactions.


  <a name="transaction-object"></a>

  ### Transaction (object)


  Represents a single *HTTP Transaction* (Request-Response pair) and its
  location in the API description document. The location is provided in two
  forms, both **deprecated** as of now:


  - `name` - String representation, both human- and machine-readable.

  - `origin` - Object of references to nodes of [API Elements][api-elements]
  derived from the original API description document.


  > **Note:** These two forms of locating HTTP Transactions are to be superseded
  by whatever comes out of the proposal in
  [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  ### Properties


  - request (object) - HTTP Request as described in API description document.
      - method
      - uri: `/message` (string) - Informative URI of the Request.
      - headers (array) - List of HTTP headers in their original order, with the original casing of the header name, including multiple headers of the same name.
          - (object)
              - name: `Content-Type` (string)
              - value: `text/plain` (string)
      - body: `Hello world!\n` (string)
  - response (object) - Expected HTTP Response as described in API description
  document.
      - status: `200` (string)
      - headers (array) - List of HTTP headers in their original order, with the original casing of the header name, including multiple headers of the same name.
          - (object)
              - name: `Content-Type` (string)
              - value: `text/plain` (string)
      - body (string, optional)
      - schema (string, optional)


  ### Deprecated Properties


  - name: `Hello world! > Retrieve Message` (string) - Transaction Name,
  non-deterministic breadcrumb location of the HTTP Transaction within the API
  description document.

  - origin (object) - Object of references to nodes of [API
  Elements][api-elements] derived from the original API description document.
      - filename: `./api-description.apib` (string)
      - apiName: `My Api` (string)
      - resourceGroupName: `Greetings` (string)
      - resourceName: `Hello, world!` (string)
      - actionName: `Retrieve Message` (string)
      - exampleName: `First example` (string)

  > **Note:** These properties are to be superseded by whatever comes out of the
  proposal in
  [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  <a name="annotation-object"></a>

  ### Annotation (object)


  Description of an error or warning which occurred during parsing of the API
  description or during compilation of transactions.


  #### Properties


  - type (enum[string])
      - `error`
      - `warning`
  - component (enum[string]) - In which component of the compilation process the
  annotation occurred
      - `apiDescriptionParser`
      - `parametersValidation`
      - `uriTemplateExpansion`
  - message (string) - Textual annotation. This is – in most cases – a
  human-readable message to be displayed to user

  - location (array, fixed, nullable) - Location of the annotation in the source
  file, represented by a single range of line and column number pairs if
  available, or by `null` otherwise
      - (array) - Start location
          - (number) - Line number
          - (number) - Column number
      - (array) - End location
          - (number) - Line number
          - (number) - Column number

  ### Deprecated Properties


  - origin (object) - Object of references to nodes of [API
  Elements][api-elements] derived from the original API description document.
      - filename: `./api-description.apib` (string)
      - apiName: `My Api` (string)
      - resourceGroupName: `Greetings` (string)
      - resourceName: `Hello, world!` (string)
      - actionName: `Retrieve Message` (string)
      - exampleName: `First example` (string)

  > **Note:** These properties are to be superseded by whatever comes out of the
  proposal in
  [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  [dredd]: https://dredd.org

  [mson-spec]: https://github.com/apiaryio/mson

  [api-elements]: http://api-elements.readthedocs.org/

  [api-blueprint]: https://apiblueprint.org/

  [api-blueprint-glossary]:
  https://github.com/apiaryio/api-blueprint/blob/master/Glossary%20of%20Terms.md

  [blueprint-transactions]: https://github.com/apiaryio/blueprint-transactions/



  [filename-deprecation]:
  https://github.com/apiaryio/dredd-transactions/issues/6

  [compile-result-object-spec]: #compile-result-object

  [transaction-object-spec]: #transaction-object

  [annotation-object-spec]: #annotation-object

  [source-map]:
  https://github.com/refractproject/refract-spec/blob/master/namespaces/parse-result-namespace.md#source-map-element
mrin9/RapiDoc: >-
  <img alt="MrinDoc logo"
  src="https://github.com/mrin9/RapiDoc/blob/master/logo.png" width="60px" />



  <p align="center">
      <img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square"/>
      <img src="https://img.shields.io/github/size/mrin9/rapidoc/dist/rapidoc-min.js.svg?colorB=blue&label=minified&style=flat-square">
      <img src="https://img.shields.io/github/size/mrin9/rapidoc/dist/rapidoc-min.js.gz.svg?colorB=blue&label=zip&style=flat-square">
      <a href="https://www.webcomponents.org/element/rapidoc" alt="published on webcomponents.org">
          <img src="https://img.shields.io/badge/webcomponents.org-rapidoc-blue.svg?style=social"/>
      </a>
  </p>        


  # RapiDoc

  Custom Eelement for Open-API spec viewing


  ## Features

  - Supports Swagger 2.0 and OpenAPI 3.0 

  - Works with any framework or with no framework

  - Allows to make API calls

  - Better Usability, 
    - all Models and Examples are expanded by default, eliminates the need to click and reveal.
    - Request fields are pre-populated with sample data
    - Takes only one click to make an API call
    - Request and response can be placed side-by-side for easy comparision
  - Branding and Personalization features makes it easy to follow any style
  guide
    - Comes with 2 Themes (Dark and Light)
    - Replace default logo with yours
    - Typography, allows changing fonts
    - Allows changing text-color, button-color, header-color and color of other UI elements
  - Plenty of customization options 
    - Add external contents at the top and bottom of the document,  you may add images, link, text, forms etc
    - Allows disabling API calling feature
    - Hide the header so the user cant load any other OpenAPI Spec
    - Hide Authentication and provide your own pre-generated api-key 
    - Embed it inside another HTML document
    - Use it inside another framework (react, vue, angular, lit-element)
    - Use JavaScript to change its attributes, and it will react to those changes
    - Style the element with standard css (change padding, position, border, margin )
  - Lightweight and fast (under 125 KB gzipped)

  - Load local json spec from the disk

  - Supported on Chrome, FireFox and Safari. (Not yet tested on Edge)



  ## Documentation

  [Check out the usage and examples](https://mrin9.github.io/RapiDoc/)



  ## Build Process

  We recommend `yarn` over `npm` as we use yarn
  [resolutions](https://yarnpkg.com/lang/en/docs/selective-version-resolutions/)
  to keep the bundle size smaller. As of this writing this feature is not
  supported in npm natively 

  ```bash

  # Clone / Download the project then

  yarn install


  # build will generate rapidoc-min.js, this is the only file you will need.

  # use it in the script tag of your html <script type="text/javascript"
  src="rapidoc-min.js"></script></body>

  yarn build 


  # for developement use yarn serve (this will start an webserver at port 8080,
  then navigate to localhost:8080) 

  yarn serve

  ```
swagger-api/swagger-js: >+
  # Swagger Client <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  [![Build
  Status](https://travis-ci.org/swagger-api/swagger-js.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-js)


  **Swagger Client** is a JavaScript module that allows you to fetch, resolve,
  and interact with Swagger/OpenAPI documents.


  ## New!


  **This is the new version of swagger-js, 3.x.** The new version supports
  Swagger 2.0 as well as OpenAPI 3.

   Want to learn more? Check out our [FAQ](https://github.com/swagger-api/swagger-js/blob/master/docs/MIGRATION_2_X.md).

  For the older version of swagger-js, refer to the [*2.x
  branch*](https://github.com/swagger-api/swagger-js/tree/2.x).



  ## Note:

  The npm package is called `swagger-client` and the GitHub repository is
  `swagger-js`.

  We'll be consolidating that soon. Just giving you the heads up. You may see
  references to both names.


  ### Usage


  ##### Prerequisites

  - Runtime:
    - browser: es5 compatible. IE11+
    - node v4.x.x
  - Building
    - node v6.x.x

  ##### Download via npm


  ```

  npm install swagger-client

  ```


  ##### Import in code


  ```javascript

  import Swagger from 'swagger-client'

  // Or commonjs

  const Swagger = require('swagger-client')

  ```


  ##### Import in browser


  ```html

  <script src='//unpkg.com/swagger-client' type='text/javascript'></script>

  <script>

  var swaggerClient = new SwaggerClient(specUrl);

  </script>

  ```



  #### API


  This lib exposes these functionalities for Swagger 2.0 and OpenAPI 3:


  - Static functions for...
    -  HTTP Client
    -  Document Resolver (monolithic & subtree)
    - TryItOut Executor
  - A constructor with the methods...
    - HTTP Client, for convenience
    - Document Resolver, which will use `url` or `spec` from the instance
    - TryItOut Executor, bound to the `http` and `spec` instance properties
    - Tags Interface, also bound to the instance

  HTTP Client

  -----------


  `Swagger.http(req)` exposes a [Fetch-like
  interface](https://github.com/lquixada/cross-fetch) with a twist: allowing
  `url` in the request object so that it can be passed around and mutated. It
  extends Fetch to support request and response interceptors and performs
  response & header serialization. This method could be overridden to change how
  SwaggerJS performs HTTP requests.


  ```js

  // Fetch-like, but support `url`, `query` and `xxxInterceptor`

  const request = {
    url,
    query,
    method,
    body,
    headers,
    requestInterceptor,
    responseInterceptor,
    userFetch
  }


  Swagger.http(request)
    .then((res) => {
      res.statusCode // status code
      res.statusText // status text, ie: "Not Found"
      res.body       // JSON object or undefined
      res.obj        // same as above, legacy
      res.text       // textual body, or Blob
      res.headers    // header hash
    })
    .catch((err) => {
      err            // instanceof Error
      err.response   // response or null
    })

  // Interceptors

  Swagger.http({
    requestInterceptor: (req: Request) => Request | Promise<Request>
    responseInterceptor: (res: Response) => Response | Promise<Response>
  })


  // Custom Fetch

  Swagger.http({
    userFetch: (url: String, options: Object) => Promise
  })


  ```


  Swagger Specification Resolver

  ---------------------


  `Swagger.resolve({url, spec, http})` resolves `$ref`s (JSON-Refs) with the
  objects they point to.


  ```js


  Swagger.resolve({url, spec, http}).then((resolved) => {
    resolved.errors // resolution errors, if any
    resolved.spec   // the resolved spec
  })

  ```

  > This is done automatically if you use the constructor/methods


  TryItOut Executor

  -----------------

  An HTTP client for OAS operations, maps an operation and values into an HTTP
  request.


  ```js

  const params = {
    spec,

    operationId, // Either operationId, or you can use pathName + method
    (pathName),
    (method),

    parameters, // _named_ parameters in an object, eg: { petId: 'abc' }
    securities, // _named_ securities, will only be added to the request, if the spec indicates it. eg: {apiKey: 'abc'}
    requestContentType,
    responseContentType,

    (http), // You can also override the HTTP client completely
    (userFetch), // Alternatively you can just override the fetch method (if you want to use request.js or some other HttpAgent)
  }


  // Creates a request object compatible with HTTP client interface.

  // If `pathName` and `method`, then those are used instead of operationId.
  This is useful if you're using this dynamically, as `pathName` + `method` are
  guarenteed to be unique.

  const res = Swagger.execute({...params})


  // You can also generate just the request ( without executing... )

  const req = Swagger.buildRequest({...params})

  ```


  Constructor and methods

  -----------------------


  Resolve the spec and expose some methods that use the resolved spec:


  - `Swagger(url, opts): Promise`

  - Exposes tags interface (see above)

  - Exposes the static functions: `execute`, `http`, `resolve` and some other
  minor ones

  - Exposes `#http`, `#execute` and `#resolve` bound to the instance


  ```javascript

  Swagger('http://petstore.swagger.io/v2/swagger.json')
    .then( client => {
        client.spec // The resolved spec
        client.originalSpec // In case you need it
        client.errors // Any resolver errors

        // Tags interface
        client.apis.pet.addPet({id: 1, name: "bobby"}).then(...)

        // TryItOut Executor, with the `spec` already provided
        client.execute({operationId: 'addPet', parameters: {id: 1, name: "bobby") }).then(...)
     })

  ```


  Tags Interface

  --------------

  A client for operations. We're currently using the
  `apis[tag][operationId]:ExecuteFunction` interface, which can be disabled
  entirely using `Swagger({disableInterfaces: true})` if you don't need it.


  OperationId's are meant to be unique within spec, if they're not we do the
  following:

  - If a tag is absent, we use `default` as the internal tag

  - If an operationId is missing, we deduce it from the http method and path,
  i.e. `${method}${path}`, with non-alphanumeric characters escaped to `_`. See
  these tests
  ([1](https://github.com/swagger-api/swagger-js/blob/7da5755fa18791cd114ecfc9587dcd1b5c58ede1/test/helpers.js#L7),
  [2](https://github.com/swagger-api/swagger-js/blob/7da5755fa18791cd114ecfc9587dcd1b5c58ede1/test/helpers.js#L77))
  for examples.

  - If an operationId is duplicated across all operationIds of the spec, we
  rename all of them with numbers after the ID to keep them unique. You should
  not rely on this, as the renaming is non-deterministic. See [this
  test](https://github.com/swagger-api/swagger-js/blob/7da5755fa18791cd114ecfc9587dcd1b5c58ede1/test/helpers.js#L127)
  for an example.


  ```js

  Swagger({ url: "http://petstore.swagger.io/v2/swagger.json" }).then((client)
  => {
      client
        .apis
        .pet // tag name == `pet`
        .addPet({ // operationId == `addPet`
          id: 1,
          body: {
            name: "bobby",
            status: "available"
          }
        })
        .then(...)
  })

  ```


  If you'd like to use the operationId formatting logic from Swagger-Client 2.x,
  set the `v2OperationIdCompatibilityMode` option:


  ```js

  Swagger({
    url: "http://petstore.swagger.io/v2/swagger.json",
    v2OperationIdCompatibilityMode: true
  }).then((client) => {
    // do things as usual
  })

  ```


  #### OpenAPI 3.0


  OpenAPI 3.0 definitions work in a similar way with the tags interface, but you
  may need to provide additional data in an `options` object for server
  variables and request bodies, since these items are not actual parameters:


  ```js

  Swagger({...}).then((client) => {
      client
        .apis
        .pet // tag name == `pet`
        .addPet({ // operationId == `addPet`
          id: 1
        }, {
          requestBody: {
            name: "bobby",
            status: "available"
          },
          server: "http://petstore.swagger.io/{apiPrefix}/", // this should exactly match a URL in your `servers`
          serverVariables: {
            apiPrefix: "v2"
          }
        })
        .then(...)
  })

  ```


  In Browser

  ----------


  If you need activate CORS requests, just enable it by `withCredentials`
  property at `http`


  ```html

  <html>

  <head>

  <script src='//unpkg.com/swagger-client' type='text/javascript'></script> 

  <script>


  var specUrl = 'http://petstore.swagger.io/v2/swagger.json'; // data urls are
  OK too 'data:application/json;base64,abc...'

  SwaggerClient.http.withCredentials = true; // this activates CORS, if
  necessary


  var swaggerClient = new SwaggerClient(specUrl)
        .then(function (swaggerClient) {
            return swaggerClient.apis.pet.addPet({id: 1, name: "bobby"}); // chaining promises
        }, function (reason) {
           console.error("failed to load the spec" + reason);
        })
        .then(function(addPetResult) {
           console.log(addPetResult.obj);
           // you may return more promises, if necessary
        }, function (reason) {
            console.error("failed on API call " + reason);
        });
  </script>

  </head>

  <body>
    check console in browser's dev. tools
  </body>

  </html>


  ```



  Compatibility

  -------------


  SwaggerJS has some legacy signature _shapes_.


  ### Execute

  ##### Response shape

  ```js

  // swagger-js

  {
    url,
    method,
    status,
    statusText,
    headers,

    data, // The textual content
    obj   // The body object
  }


  // New shape

  {
    url,
    method,
    status,
    statusText,
    headers, // See note below regarding headers

    text,    // The textual content
    body,    // The body object
  }

  ```


  ##### Serializing Headers


  By default the instance version of `#http` serializes the body and headers.

  However, headers pose an issue when there are multiple headers with the same
  name.

  As such we've left the static version of `http` to not perform any
  serialization.


  ### Build


  ```sh

  npm install

  npm run test         # run test

  npm run test:unit:watch   # run test with change watching

  npm run test:lint         # run lint

  npm run build        # package to release

  npm run build:umd:watch    # package with non-minified dist/index.js (for
  debugging)

  npm run build:bundle # build browser version available at .../browser/index.js

  ```


  # Migration from 2.x


  There has been a complete overhaul of the codebase.

  For notes about how to migrate coming from 2.x,

  please see [Migration from 2.x](docs/MIGRATION_2_X.md)


  ## Security contact


  Please disclose any security-related issues or vulnerabilities by emailing
  [security@swagger.io](mailto:security@swagger.io), instead of using the public
  issue tracker.


  ### Graveyard


  For features known to be missing from 3.x please see [the
  Graveyard](docs/GRAVEYARD.md)

swagger-api/validator-badge: >
  # Swagger Validator Badge <img
  src="https://raw.githubusercontent.com/swagger-api/swagger.io/wordpress/images/assets/SW-logo-clr.png"
  height="50" align="right">


  [![Build
  Status](https://img.shields.io/jenkins/s/https/jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-validator-badge-master.svg)](https://jenkins.swagger.io/view/OSS%20-%20Java/job/oss-swagger-validator-badge-master)

  [![Maven
  Central](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-validator/badge.svg?style=plastic)](https://maven-badges.herokuapp.com/maven-central/io.swagger/swagger-validator)


  This project shows a "valid swagger" badge on your site.  There is an online
  version hosted on http://swagger.io.  You can also pull a docker image of the
  validator directly from
  [DockerHub](https://hub.docker.com/r/swaggerapi/swagger-validator/).


  You can validate any OpenAPI specification against the [OpenAPI 2.0
  Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json)
  as follows:


  ```

  <img src="http://online.swagger.io/validator?url={YOUR_URL}">

  ```


  Of course the `YOUR_URL` needs to be addressable by the validator (i.e. won't
  find anything on localhost).  If it validates, you'll get a nice green VALID
  logo.  Failures will give an INVALID logo, and if there are errors parsing the
  specification or reaching it, an ugly red ERROR logo.


  For example, using
  [https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json](https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json)
  as a source, we get ...


  ![](https://online.swagger.io/validator?url=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/json/petstore-expanded.json)


  If your specification fails to validate for some reason, or if there is an
  error, you can get more information on why by visiting
  ```http://online.swagger.io/validator/debug?url={YOUR_URL}```.


  Since the validator uses a browserless back-end to fetch the contents and
  schema, it's not subject to the terrible world of CORS.


  You can also post a spec up to the service with CURL:


  ```

  curl -X POST -d @swagger.json -H 'Content-Type:application/json'
  http://online.swagger.io/validator/debug

  ```


  In this example, `swagger.json` is the swagger definition in JSON format, in
  the CWD.


  ### Running locally


  You can build and run the validator locally:


  ```

  mvn package jetty:run

  ```


  And access the validator like such:


  ```

  http://localhost:8002/?url={URL}

  ```


  or


  ```

  http://localhost:8002/?url=http://petstore.swagger.io/v2/swagger.json

  ```
tiangolo/uvicorn-gunicorn-fastapi-docker: >
  [![Build
  Status](https://travis-ci.org/tiangolo/uvicorn-gunicorn-fastapi-docker.svg?branch=master)](https://travis-ci.org/tiangolo/uvicorn-gunicorn-fastapi-docker)



  ## Supported tags and respective `Dockerfile` links


  * [`python3.7`, `latest`
  _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/python3.7/Dockerfile)

  * [`python3.6`
  _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/python3.6/Dockerfile)

  * [`python3.6-alpine3.8`
  _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/python3.6-alpine3.8/Dockerfile)

  * [`python3.7-alpine3.8`
  _(Dockerfile)_](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/blob/master/python3.7-alpine3.8/Dockerfile)



  # uvicorn-gunicorn-fastapi


  [**Docker**](https://www.docker.com/) image with
  [**Uvicorn**](https://www.uvicorn.org/) managed by
  [**Gunicorn**](https://gunicorn.org/) for high-performance
  [**FastAPI**](https://fastapi.tiangolo.com/) web applications in
  **[Python](https://www.python.org/) 3.7** and **3.6** with performance
  auto-tuning. Optionally with Alpine Linux.


  **GitHub repo**: <https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker>


  **Docker Hub image**:
  <https://hub.docker.com/r/tiangolo/uvicorn-fastapi-gunicorn/>



  ## Description


  **FastAPI** has shown to be a Python web framework with [one of the best
  performances, as measured by third-party
  benchmarks](https://www.techempower.com/benchmarks/#section=test&runid=a979de55-980d-4721-a46f-77298b3f3923&hw=ph&test=fortune&l=zijzen-7),
  thanks to being based on and powered by
  [**Starlette**](https://www.starlette.io/).


  The achievable performance is on par with (and in many cases superior to)
  **Go** and **Node.js** frameworks.


  This image has an "auto-tuning" mechanism included, so that you can just add
  your code and get that same **high performance** automatically. And without
  making sacrifices.



  ## Technical Details



  ### Uvicorn


  **Uvicorn** is a lightning-fast "ASGI" server.


  It runs asynchronous Python web code in a single process.



  ### Gunicorn


  You can use **Gunicorn** to manage Uvicorn and run multiple of these
  concurrent processes.


  That way, you get the best of concurrency and parallelism.



  ### FastAPI


  FastAPI is a modern, fast (high-performance), web framework for building APIs
  with Python 3.6+.


  The key features are:


  * **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks
  to Starlette and Pydantic).

  * **Fast to code**: Increase the speed to develop features by about 300% to
  500% *.

  * **Less bugs**: Reduce about 40% of human (developer) induced errors. *

  * **Intuitive**: Great editor support. <abbr title="also known as
  auto-complete, autocompletion, IntelliSense">Completion</abbr> everywhere.
  Less time debugging.

  * **Easy**: Designed to be easy to use and learn. Less time reading docs.

  * **Short**: Minimize code duplication. Multiple features from each parameter
  declaration. Less bugs.

  * **Robust**: Get production-ready code. With automatic interactive
  documentation.

  * **Standards-based**: Based on (and fully compatible with) the open standards
  for APIs: <a href="https://github.com/OAI/OpenAPI-Specification"
  target="_blank">OpenAPI</a> (previously known as Swagger) and <a
  href="http://json-schema.org/" target="_blank">JSON Schema</a>.


  <small>* estimation based on tests on an internal development team, building
  production applications.</small>



  ### `tiangolo/uvicorn-gunicorn-fastapi`


  This image will set a sensible configuration based on the server it is running
  on (the amount of CPU cores available) without making sacrifices.


  It has sensible defaults, but you can configure it with environment variables
  or override the configuration files.


  There is also an Alpine version. If you want it, use one of the Alpine tags
  from above.



  ### `tiangolo/uvicorn-gunicorn`


  This image (`tiangolo/uvicorn-gunicorn-fastapi`) is based on
  [**tiangolo/uvicorn-gunicorn**](https://github.com/tiangolo/uvicorn-gunicorn-docker).


  That image is what actually does all the work.


  This image just installs FastAPI and has the documentation specifically
  targeted at FastAPI.


  If you feel confident about your knowledge of Uvicorn, Gunicorn and ASGI, you
  can use that image directly.



  ### `tiangolo/uvicorn-gunicorn-starlette`


  There is a sibling Docker image:
  [**tiangolo/uvicorn-gunicorn-starlette**](https://github.com/tiangolo/uvicorn-gunicorn-starlette-docker)


  If you are creating a new [**Starlette**](https://www.starlette.io/) web
  application and you want to discard all the additional features from FastAPI
  you should use
  [**tiangolo/uvicorn-gunicorn-starlette**](https://github.com/tiangolo/uvicorn-gunicorn-starlette-docker)
  instead.


  **Note**: FastAPI is based on Starlette and adds several features on top of
  it. Useful for APIs and other cases: data validation, data conversion,
  documentation with OpenAPI, dependency injection, security/authentication and
  others.



  ## How to use


  * You don't need to clone the GitHub repo. You can use this image as a base
  image for other images, using this in your `Dockerfile`:


  ```Dockerfile

  FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7


  COPY ./app /app

  ```


  It will expect a file at `/app/app/main.py`.


  Or otherwise a file at `/app/main.py`.


  And will expect it to contain a variable `app` with your FastAPI application.


  Then you can build your image from the directory that has your `Dockerfile`,
  e.g:


  ```bash

  docker build -t myimage ./

  ```


  ## Quick Start


  ### Build your Image


  * Go to your project directory.

  * Create a `Dockerfile` with:


  ```Dockerfile

  FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7


  COPY ./app /app

  ```


  * Create an `app` directory and enter in it.

  * Create a `main.py` file with:


  ```Python

  from fastapi import FastAPI


  app = FastAPI()



  @app.get("/")

  def read_root():
      return {"Hello": "World"}


  @app.get("/items/{item_id}")

  def read_item(item_id: int, q: str = None):
      return {"item_id": item_id, "q": q}
  ```


  * You should now have a directory structure like:


  ```

  .

  ├── app

  │   └── main.py

  └── Dockerfile

  ```


  * Go to the project directory (in where your `Dockerfile` is, containing your
  `app` directory).

  * Build your FastAPI image:


  ```bash

  docker build -t myimage .

  ```


  * Run a container based on your image:


  ```bash

  docker run -d --name mycontainer -p 80:80 myimage

  ```


  Now you have an optimized FastAPI server in a Docker container. Auto-tuned for
  your current server (and number of CPU cores).


  ### Check it


  You should be able to check it in your Docker container's URL, for example: <a
  href="http://192.168.99.100/items/5?q=somequery"
  target="_blank">http://192.168.99.100/items/5?q=somequery</a> or <a
  href="http://127.0.0.1/items/5?q=somequery"
  target="_blank">http://127.0.0.1/items/5?q=somequery</a> (or equivalent, using
  your Docker host).


  You will see something like:


  ```JSON

  {"item_id": 5, "q": "somequery"}

  ```


  ### Interactive API docs


  Now you can go to <a href="http://192.168.99.100/docs"
  target="_blank">http://192.168.99.100/docs</a> or <a
  href="http://127.0.0.1/docs" target="_blank">http://127.0.0.1/docs</a> (or
  equivalent, using your Docker host).


  You will see the automatic interactive API documentation (provided by <a
  href="https://github.com/swagger-api/swagger-ui" target="_blank">Swagger
  UI</a>):


  ![Swagger
  UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)



  ### Alternative API docs


  And you can also go to <a href="http://192.168.99.100/redoc"
  target="_blank">http://192.168.99.100/redoc</a> or <a
  href="http://127.0.0.1/redoc" target="_blank">http://127.0.0.1/redoc</a>(or
  equivalent, using your Docker host).


  You will see the alternative automatic documentation (provided by <a
  href="https://github.com/Rebilly/ReDoc" target="_blank">ReDoc</a>):


  ![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)



  ## Advanced usage


  ### Environment variables


  These are the environment variables that you can set in the container to
  configure it and their default values:



  #### `MODULE_NAME`


  The Python "module" (file) to be imported by Gunicorn, this module would
  contain the actual application in a variable.


  By default:


  * `app.main` if there's a file `/app/app/main.py` or

  * `main` if there's a file `/app/main.py`


  For example, if your main file was at `/app/custom_app/custom_main.py`, you
  could set it like:


  ```bash

  docker run -d -p 80:80 -e MODULE_NAME="custom_app.custom_main" myimage

  ```



  #### `VARIABLE_NAME`


  The variable inside of the Python module that contains the FastAPI
  application.


  By default:


  * `app`


  For example, if your main Python file has something like:


  ```Python

  from fastapi import FastAPI


  api = FastAPI()



  @api.get("/")

  def read_root():
      return {"Hello": "World"}
  ```


  In this case `api` would be the variable with the FastAPI application. You
  could set it like:


  ```bash

  docker run -d -p 80:80 -e VARIABLE_NAME="api" myimage

  ```



  #### `APP_MODULE`


  The string with the Python module and the variable name passed to Gunicorn.


  By default, set based on the variables `MODULE_NAME` and `VARIABLE_NAME`:


  * `app.main:app` or

  * `main:app`


  You can set it like:


  ```bash

  docker run -d -p 80:80 -e APP_MODULE="custom_app.custom_main:api" myimage

  ```



  #### `GUNICORN_CONF`


  The path to a Gunicorn Python configuration file.


  By default:


  * `/app/gunicorn_conf.py` if it exists

  * `/app/app/gunicorn_conf.py` if it exists

  * `/gunicorn_conf.py` (the included default)


  You can set it like:


  ```bash

  docker run -d -p 80:80 -e GUNICORN_CONF="/app/custom_gunicorn_conf.py" myimage

  ```



  #### `WORKERS_PER_CORE`


  This image will check how many CPU cores are available in the current server
  running your container.


  It will set the number of workers to the number of CPU cores multiplied by
  this value.


  By default:


  * `1`


  You can set it like:


  ```bash

  docker run -d -p 80:80 -e WORKERS_PER_CORE="3" myimage

  ```


  If you used the value `3` in a server with 2 CPU cores, it would run 6 worker
  processes.


  You can use floating point values too.


  So, for example, if you have a big server (let's say, with 8 CPU cores)
  running several applications, and you have a FastAPI application that you know
  won't need high performance. And you don't want to waste server resources. You
  could make it use `0.5` workers per CPU core. For example:


  ```bash

  docker run -d -p 80:80 -e WORKERS_PER_CORE="0.5" myimage

  ```


  In a server with 8 CPU cores, this would make it start only 4 worker
  processes.


  **Note**: By default, if `WORKERS_PER_CORE` is `1` and the server has only 1
  CPU core, instead of starting 1 single worker, it will start 2. This is to
  avoid bad performance and blocking applications (server application) on small
  machines (server machine/cloud/etc). This can be overridden using
  `WEB_CONCURRENCY`.



  #### `WEB_CONCURRENCY`


  Override the automatic definition of number of workers.


  By default:


  * Set to the number of CPU cores in the current server multiplied by the
  environment variable `WORKERS_PER_CORE`. So, in a server with 2 cores, by
  default it will be set to `2`.


  You can set it like:


  ```bash

  docker run -d -p 80:80 -e WEB_CONCURRENCY="2" myimage

  ```


  This would make the image start 2 worker processes, independent of how many
  CPU cores are available in the server.



  #### `HOST`


  The "host" used by Gunicorn, the IP where Gunicorn will listen for requests.


  It is the host inside of the container.


  So, for example, if you set this variable to `127.0.0.1`, it will only be
  available inside the container, not in the host running it.


  It's is provided for completeness, but you probably shouldn't change it.


  By default:


  * `0.0.0.0`


  #### `PORT`


  The port the container should listen on.


  If you are running your container in a restrictive environment that forces you
  to use some specific port (like `8080`) you can set it with this variable.


  By default:


  * `80`


  You can set it like:


  ```bash

  docker run -d -p 80:8080 -e PORT="8080" myimage

  ```



  #### `BIND`


  The actual host and port passed to Gunicorn.


  By default, set based on the variables `HOST` and `PORT`.


  So, if you didn't change anything, it will be set by default to:
      
  * `0.0.0.0:80`


  You can set it like:


  ```bash

  docker run -d -p 80:8080 -e BIND="0.0.0.0:8080" myimage

  ```



  #### `LOG_LEVEL`


  The log level for Gunicorn.


  One of:


  * `debug`

  * `info`

  * `warning`

  * `error`

  * `critical`


  By default, set to `info`.


  If you need to squeeze more performance sacrificing logging, set it to
  `warning`, for example:


  You can set it like:


  ```bash

  docker run -d -p 80:8080 -e LOG_LEVEL="warning" myimage

  ```


  ### Custom Gunicorn configuration file


  The image includes a default Gunicorn Python config file at
  `/gunicorn_conf.py`.


  It uses the environment variables declared above to set all the
  configurations.


  You can override it by including a file in:


  * `/app/gunicorn_conf.py`

  * `/app/app/gunicorn_conf.py`

  * `/gunicorn_conf.py`



  ### Custom `/app/prestart.sh`


  If you need to run anything before starting the app, you can add a file
  `prestart.sh` to the directory `/app`. The image will automatically detect and
  run it before starting everything. 


  For example, if you want to add Alembic SQL migrations (with SQLALchemy), you
  could create a `./app/prestart.sh` file in your code directory (that will be
  copied by your `Dockerfile`) with:


  ```bash

  #! /usr/bin/env bash


  # Let the DB start

  sleep 10;

  # Run migrations

  alembic upgrade head

  ```


  and it would wait 10 seconds to give the database some time to start and then
  run that `alembic` command.


  If you need to run a Python script before starting the app, you could make the
  `/app/prestart.sh` file run your Python script, with something like:


  ```bash

  #! /usr/bin/env bash


  # Run custom Python script before starting

  python /app/my_custom_prestart_script.py

  ```


  ### Development live reload


  The default program that is run is at `/start.sh`. It does everything
  described above.


  There's also a version for development with live auto-reload at:


  ```bash

  /start-reload.sh

  ```


  #### Details


  For development, it's useful to be able to mount the contents of the
  application code inside of the container as a Docker "host volume", to be able
  to change the code and test it live, without having to build the image every
  time.


  In that case, it's also useful to run the server with live auto-reload, so
  that it re-starts automatically at every code change.


  The additional script `/start-reload.sh` runs Uvicorn alone (without Gunicorn)
  and in a single process.


  It is ideal for development.


  #### Usage


  For example, instead of running:


  ```bash

  docker run -d -p 80:80 myimage

  ```


  You could run:


  ```bash

  docker run -d -p 80:80 -v $(pwd):/app myimage /start-reload.sh

  ```


  * `-v $(pwd):/app`: means that the directory `$(pwd)` should be mounted as a
  volume inside of the container at `/app`.
      * `$(pwd)`: runs `pwd` ("print working directory") and puts it as part of the string.
  * `/start-reload.sh`: adding something (like `/start-reload.sh`) at the end of
  the command, replaces the default "command" with this one. In this case, it
  replaces the default (`/start.sh`) with the development alternative
  `/start-reload.sh`.


  #### Technical Details


  As `/start-reload.sh` doesn't run with Gunicorn, any of the configurations you
  put in a `gunicorn_conf.py` file won't apply.


  But these environment variables will work the same as described above:


  * `MODULE_NAME`

  * `VARIABLE_NAME`

  * `APP_MODULE`

  * `HOST`

  * `PORT`

  * `LOG_LEVEL`


  ## Tests


  All the image tags, configurations, environment variables and application
  options are tested.



  ## Release Notes


  ### 0.4.0


  * Add support for live auto-reload with an additional custom script
  `/start-reload.sh`, check the [updated
  documentation](https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker#development-live-reload).
  PR <a href="https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/6"
  target="_blank">#6</a> in parent image.


  ### 0.3.0


  * Set `WORKERS_PER_CORE` by default to `1`, as it shows to have the best
  performance on benchmarks.

  * Make the default web concurrency, when `WEB_CONCURRENCY` is not set, to a
  minimum of 2 workers. This is to avoid bad performance and blocking
  applications (server application) on small machines (server
  machine/cloud/etc). This can be overridden using `WEB_CONCURRENCY`. This
  applies for example in the case where `WORKERS_PER_CORE` is set to `1` (the
  default) and the server has only 1 CPU core. PR <a
  href="https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker/pull/6"
  target="_blank">#6</a> and PR <a
  href="https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/5"
  target="_blank">#5</a> in parent image.


  ### 0.2.0


  * Make `/start.sh` run independently, reading and generating used default
  environment variables. And remove `/entrypoint.sh` as it doesn't modify
  anything in the system, only reads environment variables. PR <a
  href="https://github.com/tiangolo/uvicorn-gunicorn-docker/pull/4"
  target="_blank">#4</a> in parent image.


  ### 0.1.0


  * Add support for `/app/prestart.sh`.



  ## License


  This project is licensed under the terms of the MIT license.
httptoolkit/openapi-directory-js: >-
  # An OpenAPI Directory for JS [![Travis Build
  Status](https://img.shields.io/travis/httptoolkit/openapi-directory-js.svg)](https://travis-ci.org/httptoolkit/openapi-directory-js)
  [![npm
  version](https://badge.fury.io/js/openapi-directory.svg)](https://badge.fury.io/js/openapi-directory)


  > _Part of [HTTP Toolkit](https://httptoolkit.tech): powerful tools for
  building, testing & debugging HTTP(S)_


  This repo builds & bundles the [OpenAPI
  Directory](https://github.com/APIs-guru/openapi-directory), so you can easily
  find, require and use any OpenAPI spec from the directory in your JS projects.


  It provides files that can be individually required or remotely downloaded
  (via https://unpkg.com/openapi-directory/) for every API in the collection,
  and an index to quickly find the relevant OpenAPI spec for a given URL.


  All specs are:


  * Pre-parsed and exposed as JavaScript objects (not YAML strings).

  * Converted to OpenAPI v3.

  * Pre-bundled with all external $refs.


  That means you can import them, and immediately & consistently start using
  them.


  ## How to use it


  First up, install it with:


  ```bash

  npm install openapi-directory

  ```


  All OpenAPI specs can be now required with:


  ```js

  const spec = require('openapi-directory/api/<spec-id>.json');

  ```


  (or read from `https://unpkg.com/openapi-directory/api/<spec-id>.json`)


  The easiest way to obtain a spec id is to use the index. You can look up a URL
  in the index with:


  ```js

  const { findApi } = require('openapi-directory');


  findApi('wikimedia.org/api/rest_v1/feed/availability');

  ```


  `findApi` takes a URL (host and path, _without_ the protocol) within any API,
  and will return either:


  * Undefined, if there is no matching APIs.

  * A string spec id, if there is exactly one API that's relevant to that URL.

  * A list of spec ids, in rare cases where multiple specs may cover the same
  URL.


  Alternatively if you know in advance which spec you want you can require it
  directly. The id for every spec in the directory is made up of the provider
  name, followed by a slash and the service name if a service name exists. Some
  example ids:


  * `xkcd.com` (provider is xkcd.com, no service name)

  * `amazonaws.com/acm` (provider is amazonaws.com, service name is acm).


  You can find the provider and service name in the spec itself (under `info`,
  `x-providerName` and `x-serviceName`), and you can browse the raw specs
  directly at https://github.com/APIs-guru/openapi-directory.


  ## License


  This repo/npm module is licensed as MIT.


  The license for API definitions varies by spec, see
  https://github.com/APIs-guru/openapi-directory#licenses for more information.


  In general it's very likely that your use of any API definition is covered
  either by CC0 (for specs submitted directly to the directory), the spec's own
  license (check `info.license`) or by Fair Use provisions when communicating
  with the corresponding service. This is not formal legal advice though, its
  your responsibility to confirm this for yourself for the specs you're using.
Frameio/rolodex: >
  # Rolodex


  [![hex.pm
  version](https://img.shields.io/hexpm/v/rolodex.svg)](https://hex.pm/packages/rolodex)
  [![CircleCI](https://circleci.com/gh/Frameio/rolodex.svg?style=svg)](https://circleci.com/gh/Frameio/rolodex)


  Rolodex generates documentation for your Phoenix API.


  Simply annotate your Phoenix controller action functions with `@doc` metadata,
  and Rolodex will turn these descriptions into valid documentation for any
  platform.


  Currently supports:

  - [OpenAPI 3.0](https://swagger.io/specification/)


  ## Disclaimer


  Rolodex is currently under active development! The API is a work in progress
  as we head towards v1.0.


  ## Documentation


  See [https://hexdocs.pm/rolodex](https://hexdocs.pm/rolodex/Rolodex.html)


  ## Installation


  Rolodex is [available in Hex](https://hex.pm/packages/rolodex). Add it to your

  deps in `mix.exs`:


  ```elixir

  def deps do
    [
      {:rolodex, "~> 0.4.1"}
    ]
  end

  ```
quantmind/aio-openapi: >
  # aio-openapi


  [![PyPI
  version](https://badge.fury.io/py/aio-openapi.svg)](https://badge.fury.io/py/aio-openapi)

  [![Python
  versions](https://img.shields.io/pypi/pyversions/aio-openapi.svg)](https://pypi.org/project/aio-openapi)

  [![CircleCI](https://circleci.com/gh/quantmind/aio-openapi.svg?style=svg)](https://circleci.com/gh/quantmind/aio-openapi)

  [![codecov](https://codecov.io/gh/quantmind/aio-openapi/branch/master/graph/badge.svg)](https://codecov.io/gh/quantmind/aio-openapi)


  This library is an asynchronous web middleware for [aiohttp][] for serving
  Rest APIs with [OpenAPI][] v 3

  specification and with optional [PostgreSql][] database.


  <!-- START doctoc generated TOC please keep comment here to allow auto update
  -->

  <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->


  **Table of Contents**


  - [Installation](#installation)

  - [Development](#development)

  - [Features](#features)

  - [Web App](#web-app)

  - [OpenAPI Documentation](#openapi-documentation)

  - [Database Integration](#database-integration)

  - [Websockets](#websockets)
    - [RPC protocol](#rpc-protocol)
    - [Publish/Subscribe](#publishsubscribe)
  - [Environment Variables](#environment-variables)


  <!-- END doctoc generated TOC please keep comment here to allow auto update
  -->


  ## Installation


  ```

  pip install aio-openapi

  ```


  ## Development


  Clone the repository and create a virtual environment `venv`.


  Install dependencies by running the install script


  ```

  ./dev/install.sh

  ```


  To run tests


  ```

  pytest --cov

  ```


  ## Features


  - Asynchronous web routes with
  [aiohttp](https://aiohttp.readthedocs.io/en/stable/)

  - Data validation, serialization and unserialization with python
  [dataclasses](https://docs.python.org/3/library/dataclasses.html)

  - [OpenApi][] v 3 auto documentation

  - [SqlAlchemy][] expression language

  - Asynchronous DB interaction with [asyncpg][]

  - Migrations with [alembic][]

  - SqlAlchemy tables as python dataclasses

  - Support [click][] command line interface

  - Optional [sentry](https://sentry.io) middleware


  ## Web App


  To create an openapi RESTful application follow this schema (lets call the
  file `main.py`)


  ```python

  from openapi.rest import rest


  def create_app():
      return rest(
          openapi=dict(
              title='A REST API',
              ...
          ),
          base_path='/v1',
          allowed_tags=[...],
          validate_docs=True,
          setup_app=setup_app,
          commands=[...]
      )


  def setup_app(app):
      app.router.add_routes(...)
      return app


  if __name__ == '__main__':
      create_app().main()
  ```


  The `create_app` function creates the [aiohttp][] server application by
  invoking the `rest` function.

  This function adds the [click][] command in the `cli` mapping entry and add

  documentation for routes which support OpenAPI docs.

  The `setup_app` function is used to actually setup the custom application,
  usually by adding middleware, routes,

  shutdown callbacks, database integration and so forth.


  ## OpenAPI Documentation


  The library provide tools for creating OpenAPI v 3 compliant endpoints and

  auto-document them.


  An example from test `tests/example` directory


  ```python

  from aiohttp import web


  from openapi.db.path import SqlApiPath

  from openapi.spec import op



  routes = web.RouteTableDef()



  @routes.view('/tasks')

  class TasksPath(SqlApiPath):
      """
      ---
      summary: Create and query Tasks
      tags:
          - Task
      """
      table = 'tasks'

      @op(query_schema=TaskOrderableQuery, response_schema=[Task])
      async def get(self):
          """
          ---
          summary: Retrieve Tasks
          description: Retrieve a list of Tasks
          responses:
              200:
                  description: Authenticated tasks
          """
          paginated = await self.get_list()
          return paginated.json_response()

      @op(response_schema=Task, body_schema=TaskAdd)
      async def post(self):
          """
          ---
          summary: Create a Task
          description: Create a new Task
          responses:
              201:
                  description: the task was successfully added
              422:
                  description: Failed validation
          """
          data = await self.create_one()
          return self.json_response(data, status=201)
  ```


  ## Database Integration


  This library provides integration with [asyncpg][], an high performant
  asynchronous

  connector with [PostgreSql][] database.

  To add the database extension simply use the `get_db` function in the
  applicatiuon `setup_app` function:


  ```python

  from openapi.db import get_db


  def setup_app(app):
      db = get_db(app)
      meta = db.metadata

  ```


  This will enable database connection and command line tools (most of them from
  [alembic][]):


  ```

  python main.py db --help

  ```


  The database container is available at the `db` app key:


  ```python

  app['db']

  ```


  ## Websockets


  This library provides a simple distributed websocket utility for creating

  websocket remote procedure calls (RPC) and pub/sub.


  ```python

  from aiohttp import web


  from openapi.ws import Sockets


  app = web.Application()

  ...

  app['web_sockets'] = Sockets(app)

  ```


  ### RPC protocol


  The RPC protocol has the following structure for incoming messages


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "payload": {
          ...
      }
  }

  ```


  The `id` is used by clients to link the request with the corresponding
  response.

  The response for an RPC call is eitrher a success


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "response": {
          ...
      }
  }

  ```


  or error


  ```

  {
      "id": "abc",
      "method": "rpc_method_name":
      "error": {
          ...
      }
  }

  ```


  ### Publish/Subscribe


  To subscribe to messages, one need to use the `Subscribe` mixin with the
  subscribe RPC handler.

  Messages take the form:


  ```javascript

  {
      "channel": "channel_name",
      "event": "event_name",
      "data": {
          ...
      }
  }

  ```


  ## Environment Variables


  Several environment variables are used by the library to support testing and
  deployment.


  - `DATASTORE`: PostgreSql connection string (same as [SqlAlchemy][] syntax)

  - `DBPOOL_MIN_SIZE`: minimum size of database connection pool (default is 10)

  - `DBPOOL_MAX_SIZE`: maximum size of database connection pool (default is 10)


  [aiohttp]: https://aiohttp.readthedocs.io/en/stable/

  [openapi]: https://www.openapis.org/

  [postgresql]: https://www.postgresql.org/

  [sqlalchemy]: https://www.sqlalchemy.org/

  [click]: https://github.com/pallets/click

  [alembic]: http://alembic.zzzcomputing.com/en/latest/

  [asyncpg]: https://github.com/MagicStack/asyncpg
swagger-mock/swagger-mock: >
  # Swagger Mock Server


  [![Build
  Status](https://travis-ci.org/swagger-mock/swagger-mock.svg?branch=master)](https://travis-ci.org/swagger-mock/swagger-mock)

  [![Scrutinizer Code
  Quality](https://scrutinizer-ci.com/g/swagger-mock/swagger-mock/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/swagger-mock/swagger-mock/?branch=master)

  [![Code
  Coverage](https://scrutinizer-ci.com/g/swagger-mock/swagger-mock/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/swagger-mock/swagger-mock/?branch=master)

  [![StyleCI](https://github.styleci.io/repos/145602302/shield?branch=master)](https://github.styleci.io/repos/145602302)


  Swagger API mock server with fake data generation with main features.


  * OpenAPI 3.x support.

  * Load specification from local file or URL.

  * JSON and YAML format supported.

  * Generates fake response data by provided schemas.

  * Content negotiation by Accept header.

  * Runs in Docker container.


  ## Supported features


  | Feature | Support status |

  | --- | --- |

  | generating xml response | basic support ([without xml
  tags](https://swagger.io/docs/specification/data-models/representing-xml/)) |

  | generating json response | supported |

  | generation of [basic
  types](https://swagger.io/docs/specification/data-models/data-types/) |
  supported |

  | generation of
  [enums](https://swagger.io/docs/specification/data-models/enums/) | supported
  |

  | generation of [associative
  arrays](https://swagger.io/docs/specification/data-models/dictionaries/) |
  supported |

  | generation of [combined
  types](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/)
  | supported (without tag `not` and discriminator) |

  | local reference resolving | supported |

  | remote reference resolving | not supported |

  | URL reference resolving | not supported |

  | validating request data | not supported |

  | force using custom response schema | not supported (schema detected
  automatically) |


  ## How to use


  Recommended way is to use [Docker](https://www.docker.com/) container.


  ```bash

  docker pull swaggermock/swagger-mock


  # with remote file

  docker run -p 8080:8080 -e
  "SWAGGER_MOCK_SPECIFICATION_URL=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml"
  --rm swaggermock/swagger-mock


  # with local file

  docker run -p 8080:8080 -v $PWD/examples/petstore.yaml:/openapi/petstore.yaml
  -e "SWAGGER_MOCK_SPECIFICATION_URL=/openapi/petstore.yaml" --rm
  swaggermock/swagger-mock

  ```


  Also, you can use [Docker Compose](https://docs.docker.com/compose/). Example
  of `docker-compose.yml`


  ```yaml

  version: '3.0'


  services:
    swagger_mock:
      container_name: swagger_mock
      image: swaggermock/swagger-mock
      environment:
        SWAGGER_MOCK_SPECIFICATION_URL: 'https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml'
      ports:
        - "8080:8080"
  ```


  To start up container run command


  ```bash

  docker-compose up -d

  ```


  ## Configuration


  ### Environment variables


  Mock server options can be set via environment variables.


  #### SWAGGER_MOCK_SPECIFICATION_URL


  * Path to file with OpenAPI v3 specification (_required_)

  * _Possible values_: any valid URL or path to file


  #### SWAGGER_MOCK_LOG_LEVEL


  * Error log level

  * _Default value_: `warning`

  * _Possible values_: `error`, `warning`, `info`, `debug`


  #### SWAGGER_MOCK_CACHE_DIRECTORY


  * Directory for OpenAPI specification cache

  * _Default value_: `/dev/shm/openapi-cache`

  * _Possible values_: any valid path


  #### SWAGGER_MOCK_CACHE_TTL


  * Time to live for OpenAPI specification cache in seconds

  * _Default value_: 0

  * _Possible values_: positive integer


  #### SWAGGER_MOCK_CACHE_STRATEGY


  * Caching strategy for OpenAPI specification cache

  * _Default value_: `disabled`

  * _Possible values_: `disabled`, `url_md5`, `url_and_timestamp_md5`


  ### Specification cache


  To speed up server response time you can use caching mechanism for OpenAPI.
  There are several caching strategies. Specific strategy can be set by
  environment variable `SWAGGER_MOCK_CACHE_STRATEGY`.


  * `url_md5` calculates hash from specification URL and if specification URL
  was not changed uses parsed objects from cache.

  * `url_and_timestamp_md5` calculates hash from specification URL and timestamp
  (file timestamp or value of `Last-Modified` header). If you are using file
  from remote server make sure that valid `Last-Modified` header is present. 


  Recommended options for use with remote file (accessible by URL).


  * `SWAGGER_MOCK_CACHE_STRATEGY='url_md5'`

  * `SWAGGER_MOCK_CACHE_TTL=3600`


  Recommended options for use with local file (at local server).


  * `SWAGGER_MOCK_CACHE_STRATEGY='url_and_timestamp_md5'`

  * `SWAGGER_MOCK_CACHE_TTL=3600`


  ## License


  This project is licensed under the MIT License - see the LICENSE file for
  details.


  ## Features roadmap for next versions


  * [ ] extra response negotiation (return of 405 code)
    * [ ] path parser
    * [ ] route matcher in path object
    * [ ] routing by path and endpoints
  * [ ] response cache

  * [ ] faker expression extension for numbers

  * [ ] faker expression extension for strings

  * [ ] request body validation

  * [ ] remote reference support

  * [ ] url reference support

  * [ ] discriminator in combined types
tiangolo/full-stack-fastapi-couchbase: >
  # Full Stack FastAPI Couchbase - project generator


  [![Build
  Status](https://travis-ci.org/tiangolo/full-stack-fastapi-couchbase.svg?branch=master)](https://travis-ci.org/tiangolo/full-stack-fastapi-couchbase)


  Generate a backend and frontend stack using Python, including interactive API
  documentation.


  [![Screenshot](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)](https://github.com/tiangolo/full-stack-fastapi-couchbase)


  ## Features


  * Full **Docker** integration (Docker based).

  * Docker Swarm Mode deployment.

  * **Docker Compose** integration and optimization for local development.

  * **Production ready** Python web server using Uvicorn and Gunicorn.

  * Python **[FastAPI](https://github.com/tiangolo/fastapi)** backend:
      * **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic).
      * **Intuitive**: Great editor support. <abbr title="also known as auto-complete, autocompletion, IntelliSense">Completion</abbr> everywhere. Less time debugging.
      * **Easy**: Designed to be easy to use and learn. Less time reading docs.
      * **Short**: Minimize code duplication. Multiple features from each parameter declaration.
      * **Robust**: Get production-ready code. With automatic interactive documentation.
      * **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href="https://github.com/OAI/OpenAPI-Specification" target="_blank">OpenAPI</a> and <a href="http://json-schema.org/" target="_blank">JSON Schema</a>.
      * [**Many other features**](https://github.com/tiangolo/fastapi) including automatic validation, serialization, interactive documentation, authentication with OAuth2 JWT tokens, etc.
  * **Secure password** hashing by default.

  * **JWT token** authentication.

  * **CORS** (Cross Origin Resource Sharing).

  * **Celery** worker that can import and use code from the rest of the backend
  selectively (you don't have to install the complete app in each worker).

  * **NoSQL Couchbase** database that supports direct synchronization via
  Couchbase Sync Gateway for offline-first applications.

  * **Full Text Search** integrated, using Couchbase.

  * REST backend tests based on Pytest, integrated with Docker, so you can test
  the full API interaction, independent on the database. As it runs in Docker,
  it can build a new data store from scratch each time (so you can use
  ElasticSearch, MongoDB, or whatever you want, and just test that the API
  works).

  * Easy Python integration with **Jupyter** Kernels for remote or in-Docker
  development with extensions like Atom Hydrogen or Visual Studio Code Jupyter.

  * **Email notifications** for account creation and password recovery,
  compatible with:
      * Mailgun
      * SparkPost
      * SendGrid
      * ...any other provider that can generate standard SMTP credentials.
  * **Vue** frontend:
      * Generated with Vue CLI.
      * **JWT Authentication** handling.
      * Login view.
      * After login, main dashboard view.
      * Main dashboard with user creation and edition.
      * Self user edition.
      * **Vuex**.
      * **Vue-router**.
      * **Vuetify** for beautiful material design components.
      * **TypeScript**.
      * Docker server based on **Nginx** (configured to play nicely with Vue-router).
      * Docker multi-stage building, so you don't need to save or commit compiled code.
      * Frontend tests ran at build time (can be disabled too).
      * Made as modular as possible, so it works out of the box, but you can re-generate with Vue CLI or create it as you need, and re-use what you want.
  * **Flower** for Celery jobs monitoring.

  * Load balancing between frontend and backend with **Traefik**, so you can
  have both under the same domain, separated by path, but served by different
  containers.

  * Traefik integration, including Let's Encrypt **HTTPS** certificates
  automatic generation.

  * GitLab **CI** (continuous integration), including frontend and backend
  testing.


  ## How to use it


  Go to the directoy where you want to create your project and run:


  ```bash

  pip install cookiecutter

  cookiecutter https://github.com/tiangolo/full-stack-fastapi-couchbase

  ```


  ### Generate passwords


  You will be asked to provide passwords and secret keys for several components.
  Open another terminal and run:


  ```bash

  openssl rand -hex 32

  # Outputs something like:
  99d3b1f01aa639e4a76f4fc281fc834747a543720ba4c8a8648ba755aef9be7f

  ```


  Copy the contents and use that as password / secret key. And run that again to
  generate another secure key.



  ### Input variables


  The generator (cookiecutter) will ask you for some data, you might want to
  have at hand before generating the project.


  The input variables, with their default values (some auto generated) are:


  * `project_name`: The name of the project

  * `project_slug`: The development friendly name of the project. By default,
  based on the project name

  * `domain_main`: The domain in where to deploy the project for production
  (from the branch `production`), used by the load balancer, backend, etc. By
  default, based on the project slug.

  * `domain_staging`: The domain in where to deploy while staging (before
  production) (from the branch `master`). By default, based on the main domain.


  * `docker_swarm_stack_name_main`: The name of the stack while deploying to
  Docker in Swarm mode for production. By default, based on the domain.

  * `docker_swarm_stack_name_staging`: The name of the stack while deploying to
  Docker in Swarm mode for staging. By default, based on the domain.


  * `secret_key`: Backend server secret key. Use the method above to generate
  it.

  * `first_superuser`: The first superuser generated, with it you will be able
  to create more users, etc. By default, based on the domain.

  * `first_superuser_password`: First superuser password. Use the method above
  to generate it.

  * `backend_cors_origins`: Origins (domains, more or less) that are enabled for
  CORS (Cross Origin Resource Sharing). This allows a frontend in one domain
  (e.g. `https://dashboard.example.com`) to communicate with this backend, that
  could be living in another domain (e.g. `https://api.example.com`). It can
  also be used to allow your local frontend (with a custom `hosts` domain
  mapping, as described in the project's `README.md`) that could be living in
  `http://dev.example.com:8080` to cummunicate with the backend at
  `https://stag.example.com`. Notice the `http` vs `https` and the `dev.` prefix
  for local development vs the "staging" `stag.` prefix. By default, it includes
  origins for production, staging and development, with ports commonly used
  during local development by several popular frontend frameworks (Vue with
  `:8080`, React, Angular).

  * `smtp_port`: Port to use to send emails via SMTP. By default `587`.

  * `smtp_host`: Host to use to send emails, it would be given by your email
  provider, like Mailgun, Sparkpost, etc.

  * `smtp_user`: The user to use in the SMTP connection. The value will be given
  by your email provider.

  * `smtp_password`: The password to be used in the SMTP connection. The value
  will be given by the email provider.

  * `smtp_emails_from_email`: The email account to use as the sender in the
  notification emails, it would be something like `info@your-custom-domain.com`.
   
  * `couchbase_user`: Couchbase main user to be used by the application (code).
  By default `admin`.

  * `couchbase_password`: Password of the main user, for the backend code.
  Generate it with the method above.

  * `couchbase_sync_gateway_cors`: List of CORS origins that the Sync Gateway
  should allow to talk to directly. Similar to `backend_cors_origins`.

  * `couchbase_sync_gateway_user`: User to be created for the Couchbase Sync
  Gateway. This is what allows synchronization using the CouchDB protocol, with
  Couchbase Lite in mobile apps and PouchDB in the web and hybrid mobile apps.

  * `couchbase_sync_gateway_password`: Couchbase Sync Gateway password. Generate
  it with the method above.
   
  * `traefik_constraint_tag`: The tag to be used by the internal Traefik load
  balancer (for example, to divide requests between backend and frontend) for
  production. Used to separate this stack from any other stack you might have.
  This should identify each stack in each environment (production, staging,
  etc).

  * `traefik_constraint_tag_staging`: The Traefik tag to be used while on
  staging. 


  * `traefik_public_network`: This assumes you have another separate publicly
  facing Traefik at the server / cluster level. This is the network that main
  Traefik lives in.

  * `traefik_public_constraint_tag`: The tag that should be used by stack
  services that should communicate with the public.


  * `flower_auth`: Basic HTTP authentication for flower, in the
  form`user:password`. By default: "`root:changethis`".


  * `sentry_dsn`: Key URL (DSN) of Sentry, for live error reporting. If you are
  not using it yet, you should, is open source. E.g.:
  `https://1234abcd:5678ef@sentry.example.com/30`.


  * `docker_image_prefix`: Prefix to use for Docker image names. If you are
  using GitLab Docker registry it would be based on your code repository. E.g.:
  `git.example.com/development-team/my-awesome-project/`.

  * `docker_image_backend`: Docker image name for the backend. By default, it
  will be based on your Docker image prefix, e.g.:
  `git.example.com/development-team/my-awesome-project/backend`. And depending
  on your environment, a different tag will be appended ( `prod`, `stag`,
  `branch` ). So, the final image names used will be like:
  `git.example.com/development-team/my-awesome-project/backend:prod`.

  * `docker_image_celeryworker`: Docker image for the celery worker. By default,
  based on your Docker image prefix.

  * `docker_image_frontend`: Docker image for the frontend. By default, based on
  your Docker image prefix.

  * `docker_image_sync_gateway`: Docker image for the Sync Gateway. By default,
  based on your Docker image prefix.


  ## How to deploy


  This stack can be adjusted and used with several deployment options that are
  compatible with Docker Compose, but it is designed to be used in a cluster
  controlled with pure Docker in Swarm Mode with a Traefik main load balancer
  proxy handling automatic HTTPS certificates, using the ideas from <a
  href="https://dockerswarm.rocks" target="_blank">DockerSwarm.rocks</a>.


  Please refer to <a href="https://dockerswarm.rocks"
  target="_blank">DockerSwarm.rocks</a> to see how to deploy such a cluster in
  20 minutes.


  ## More details


  After using this generator, your new project (the directory created) will
  contain an extensive `README.md` with instructions for development,
  deployment, etc. You can pre-read [the project `README.md` template here
  too](./{{cookiecutter.project_slug}}/README.md).


  ## Sibling project generators


  * Based on PostgreSQL:
  [https://github.com/tiangolo/full-stack-fastapi-postgresql](https://github.com/tiangolo/full-stack-fastapi-postgresql).


  ## Release Notes


  * Update Jupyter Lab installation and util script/environment variable for
  local development.


  ### 0.3.0


  * PR <a
  href="https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/15"
  target="_blank">#15</a>:
      * Update CRUD utils to use types better.
      * Simplify Pydantic model names, from `UserInCreate` to `UserCreate`, etc.
      * Upgrade packages.
      * Add new generic "Items" models, crud utils, endpoints, and tests. To facilitate re-using them to create new functionality. As they are simple and generic (not like Users), it's easier to copy-paste and adapt them to each use case.
      * Update endpoints/*path operations* to simplify code and use new utilities, prefix and tags in `include_router`.
      * Update testing utils.
      * Update linting rules, relax vulture to reduce false positives.
      * Add full text search for items.
      * Update project README.md with tips about how to start with backend.

  ### 0.2.1


  * Fix frontend hijacking /docs in development. Using latest
  https://github.com/tiangolo/node-frontend with custom Nginx configs in
  frontend. <a
  href="https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/14"
  target="_blank">PR #14</a>.


  * Update generated README. Minor typos.


  * Update Couchbase installation, to include Couchbase command line tools.


  * Set `/start-reload.sh` as a command override for development by default.


  ### 0.2.0


  **<a href="https://github.com/tiangolo/full-stack-fastapi-couchbase/pull/7"
  target="_blank">PR #7</a>**:


  * Simplify and update backend `Dockerfile`s.

  * Refactor and simplify backend code, improve naming, imports, modules and
  "namespaces".

  * Improve and simplify Vuex integration with TypeScript accessors.

  * Standardize frontend components layout, buttons order, etc.

  * Add local development scripts (to develop this project generator itself).

  * Add logs to startup modules to detect errors early.

  * Improve FastAPI dependency utilities, to simplify and reduce code (to
  require a superuser).

  * Fix/update logic to update users.


  ## License


  This project is licensed under the terms of the MIT license.
tiangolo/full-stack-fastapi-postgresql: >
  # Full Stack FastAPI and PostgreSQL - Base Project Generator


  [![Build
  Status](https://travis-ci.org/tiangolo/full-stack-fastapi-postgresql.svg?branch=master)](https://travis-ci.org/tiangolo/full-stack-fastapi-postgresql)


  Generate a backend and frontend stack using Python, including interactive API
  documentation.


  ### Interactive API documentation


  [![API
  docs](img/docs.png)](https://github.com/tiangolo/full-stack-fastapi-postgresql)



  ### Alternative API documentation


  [![API
  docs](img/redoc.png)](https://github.com/tiangolo/full-stack-fastapi-postgresql)



  ### Dashboard Login


  [![API
  docs](img/login.png)](https://github.com/tiangolo/full-stack-fastapi-postgresql)



  ### Dashboard - Create User


  [![API
  docs](img/dashboard.png)](https://github.com/tiangolo/full-stack-fastapi-postgresql)


  ## Features


  * Full **Docker** integration (Docker based).

  * Docker Swarm Mode deployment.

  * **Docker Compose** integration and optimization for local development

  * **Production ready** Python web server using Uvicorn and Gunicorn.

  * Python **[FastAPI](https://github.com/tiangolo/fastapi)** backend:
      * **Fast**: Very high performance, on par with **NodeJS** and **Go** (thanks to Starlette and Pydantic).
      * **Intuitive**: Great editor support. <abbr title="also known as auto-complete, autocompletion, IntelliSense">Completion</abbr> everywhere. Less time debugging.
      * **Easy**: Designed to be easy to use and learn. Less time reading docs.
      * **Short**: Minimize code duplication. Multiple features from each parameter declaration.
      * **Robust**: Get production-ready code. With automatic interactive documentation.
      * **Standards-based**: Based on (and fully compatible with) the open standards for APIs: <a href="https://github.com/OAI/OpenAPI-Specification" target="_blank">OpenAPI</a> and <a href="http://json-schema.org/" target="_blank">JSON Schema</a>.
      * [**Many other features**](https://github.com/tiangolo/fastapi) including automatic validation, serialization, interactive documentation, authentication with OAuth2 JWT tokens, etc.
  * **Secure password** hashing by default.

  * **JWT token** authentication.

  * **SQLAlchemy** models (independent of Flask extensions, so they can be used
  with Celery workers directly).

  * Basic starting models for users (modify and remove as you need).

  * **Alembic** migrations.

  * **CORS** (Cross Origin Resource Sharing).

  * **Celery** worker that can import and use models and code from the rest of
  the backend selectively (you don't have to install the complete app in each
  worker).

  * REST backend tests based on **Pytest**, integrated with Docker, so you can
  test the full API interaction, independent on the database. As it runs in
  Docker, it can build a new data store from scratch each time (so you can use
  ElasticSearch, MongoDB, CouchDB, or whatever you want, and just test that the
  API works).

  * Easy Python integration with **Jupyter Kernels** for remote or in-Docker
  development with extensions like Atom Hydrogen or Visual Studio Code Jupyter.

  * **Vue** frontend:
      * Generated with Vue CLI.
      * **JWT Authentication** handling.
      * Login view.
      * After login, main dashboard view.
      * Main dashboard with user creation and edition.
      * Self user edition.
      * **Vuex**.
      * **Vue-router**.
      * **Vuetify** for beautiful material design components.
      * **TypeScript**.
      * Docker server based on **Nginx** (configured to play nicely with Vue-router).
      * Docker multi-stage building, so you don't need to save or commit compiled code.
      * Frontend tests ran at build time (can be disabled too).
      * Made as modular as possible, so it works out of the box, but you can re-generate with Vue CLI or create it as you need, and re-use what you want.
  * **PGAdmin** for PostgreSQL database, you can modify it to use PHPMyAdmin and
  MySQL easily.

  * **Flower** for Celery jobs monitoring.

  * Load balancing between frontend and backend with **Traefik**, so you can
  have both under the same domain, separated by path, but served by different
  containers.

  * Traefik integration, including Let's Encrypt **HTTPS** certificates
  automatic generation.

  * GitLab **CI** (continuous integration), including frontend and backend
  testing.


  ## How to use it


  Go to the directoy where you want to create your project and run:


  ```bash

  pip install cookiecutter

  cookiecutter https://github.com/tiangolo/full-stack-fastapi-postgresql

  ```


  ### Generate passwords


  You will be asked to provide passwords and secret keys for several components.
  Open another terminal and run:


  ```bash

  openssl rand -hex 32

  # Outputs something like:
  99d3b1f01aa639e4a76f4fc281fc834747a543720ba4c8a8648ba755aef9be7f

  ```


  Copy the contents and use that as password / secret key. And run that again to
  generate another secure key.



  ### Input variables


  The generator (cookiecutter) will ask you for some data, you might want to
  have at hand before generating the project.


  The input variables, with their default values (some auto generated) are:


  * `project_name`: The name of the project

  * `project_slug`: The development friendly name of the project. By default,
  based on the project name

  * `domain_main`: The domain in where to deploy the project for production
  (from the branch `production`), used by the load balancer, backend, etc. By
  default, based on the project slug.

  * `domain_staging`: The domain in where to deploy while staging (before
  production) (from the branch `master`). By default, based on the main domain.


  * `docker_swarm_stack_name_main`: The name of the stack while deploying to
  Docker in Swarm mode for production. By default, based on the domain.

  * `docker_swarm_stack_name_staging`: The name of the stack while deploying to
  Docker in Swarm mode for staging. By default, based on the domain.


  * `secret_key`: Backend server secret key. Use the method above to generate
  it.

  * `first_superuser`: The first superuser generated, with it you will be able
  to create more users, etc. By default, based on the domain.

  * `first_superuser_password`: First superuser password. Use the method above
  to generate it.

  * `backend_cors_origins`: Origins (domains, more or less) that are enabled for
  CORS (Cross Origin Resource Sharing). This allows a frontend in one domain
  (e.g. `https://dashboard.example.com`) to communicate with this backend, that
  could be living in another domain (e.g. `https://api.example.com`). It can
  also be used to allow your local frontend (with a custom `hosts` domain
  mapping, as described in the project's `README.md`) that could be living in
  `http://dev.example.com:8080` to cummunicate with the backend at
  `https://stag.example.com`. Notice the `http` vs `https` and the `dev.` prefix
  for local development vs the "staging" `stag.` prefix. By default, it includes
  origins for production, staging and development, with ports commonly used
  during local development by several popular frontend frameworks (Vue with
  `:8080`, React, Angular).

  * `smtp_port`: Port to use to send emails via SMTP. By default `587`.

  * `smtp_host`: Host to use to send emails, it would be given by your email
  provider, like Mailgun, Sparkpost, etc.

  * `smtp_user`: The user to use in the SMTP connection. The value will be given
  by your email provider.

  * `smtp_password`: The password to be used in the SMTP connection. The value
  will be given by the email provider.

  * `smtp_emails_from_email`: The email account to use as the sender in the
  notification emails, it would be something like `info@your-custom-domain.com`.
   
  * `postgres_password`: Postgres database password. Use the method above to
  generate it. (You could easily modify it to use MySQL, MariaDB, etc).

  * `pgadmin_default_user`: PGAdmin default user, to log-in to the PGAdmin
  interface.

  * `pgadmin_default_user_password`: PGAdmin default user password. Generate it
  with the method above.
   
  * `traefik_constraint_tag`: The tag to be used by the internal Traefik load
  balancer (for example, to divide requests between backend and frontend) for
  production. Used to separate this stack from any other stack you might have.
  This should identify each stack in each environment (production, staging,
  etc).

  * `traefik_constraint_tag_staging`: The Traefik tag to be used while on
  staging. 

  * `traefik_public_network`: This assumes you have another separate publicly
  facing Traefik at the server / cluster level. This is the network that main
  Traefik lives in.

  * `traefik_public_constraint_tag`: The tag that should be used by stack
  services that should communicate with the public.


  * `flower_auth`: Basic HTTP authentication for flower, in the
  form`user:password`. By default: "`root:changethis`".


  * `sentry_dsn`: Key URL (DSN) of Sentry, for live error reporting. If you are
  not using it yet, you should, is open source. E.g.:
  `https://1234abcd:5678ef@sentry.example.com/30`.


  * `docker_image_prefix`: Prefix to use for Docker image names. If you are
  using GitLab Docker registry it would be based on your code repository. E.g.:
  `git.example.com/development-team/my-awesome-project/`.

  * `docker_image_backend`: Docker image name for the backend. By default, it
  will be based on your Docker image prefix, e.g.:
  `git.example.com/development-team/my-awesome-project/backend`. And depending
  on your environment, a different tag will be appended ( `prod`, `stag`,
  `branch` ). So, the final image names used will be like:
  `git.example.com/development-team/my-awesome-project/backend:prod`.

  * `docker_image_celeryworker`: Docker image for the celery worker. By default,
  based on your Docker image prefix.

  * `docker_image_frontend`: Docker image for the frontend. By default, based on
  your Docker image prefix.


  ## How to deploy


  This stack can be adjusted and used with several deployment options that are
  compatible with Docker Compose, but it is designed to be used in a cluster
  controlled with pure Docker in Swarm Mode with a Traefik main load balancer
  proxy handling automatic HTTPS certificates, using the ideas from <a
  href="https://dockerswarm.rocks" target="_blank">DockerSwarm.rocks</a>.


  Please refer to <a href="https://dockerswarm.rocks"
  target="_blank">DockerSwarm.rocks</a> to see how to deploy such a cluster in
  20 minutes.


  ## More details


  After using this generator, your new project (the directory created) will
  contain an extensive `README.md` with instructions for development,
  deployment, etc. You can pre-read [the project `README.md` template here
  too](./{{cookiecutter.project_slug}}/README.md).


  ## Sibling project generators


  * Based on Couchbase:
  [https://github.com/tiangolo/full-stack-fastapi-couchbase](https://github.com/tiangolo/full-stack-fastapi-couchbase).


  ## Release Notes


  ### Next release


  * Update development scripts.


  * Read Alembic configs from env vars. PR <a
  href="https://github.com/tiangolo/full-stack-fastapi-postgresql/pull/9"
  target="_blank">#9</a> by <a href="https://github.com/ebreton"
  target="_blank">@ebreton</a>.


  * Create DB Item objects from all Pydantic model's fields.


  * Update Jupyter Lab installation and util script/environment variable for
  local development.


  ### 0.3.0


  * PR <a
  href="https://github.com/tiangolo/full-stack-fastapi-postgresql/pull/14"
  target="_blank">#14</a>:
      * Update CRUD utils to use types better.
      * Simplify Pydantic model names, from `UserInCreate` to `UserCreate`, etc.
      * Upgrade packages.
      * Add new generic "Items" models, crud utils, endpoints, and tests. To facilitate re-using them to create new functionality. As they are simple and generic (not like Users), it's easier to copy-paste and adapt them to each use case.
      * Update endpoints/*path operations* to simplify code and use new utilities, prefix and tags in `include_router`.
      * Update testing utils.
      * Update linting rules, relax vulture to reduce false positives.
      * Update migrations to include new Items.
      * Update project README.md with tips about how to start with backend.

  * Upgrade Python to 3.7 as Celery is now compatible too. PR <a
  href="https://github.com/tiangolo/full-stack-fastapi-postgresql/pull/10"
  target="_blank">#10</a> by <a href="https://github.com/ebreton"
  target="_blank">@ebreton</a>.


  ### 0.2.2


  * Fix frontend hijacking /docs in development. Using latest
  https://github.com/tiangolo/node-frontend with custom Nginx configs in
  frontend. <a
  href="https://github.com/tiangolo/full-stack-fastapi-postgresql/pull/6"
  target="_blank">PR #6</a>.


  ### 0.2.1


  * Fix documentation for *path operation* to get user by ID. <a
  href="https://github.com/tiangolo/full-stack-fastapi-postgresql/pull/4"
  target="_blank">PR #4</a> by <a href="https://github.com/mpclarkson"
  target="_blank">@mpclarkson</a> in FastAPI.


  * Set `/start-reload.sh` as a command override for development by default.


  * Update generated README.


  ### 0.2.0


  **<a href="https://github.com/tiangolo/full-stack-fastapi-postgresql/pull/2"
  target="_blank">PR #2</a>**:


  * Simplify and update backend `Dockerfile`s.

  * Refactor and simplify backend code, improve naming, imports, modules and
  "namespaces".

  * Improve and simplify Vuex integration with TypeScript accessors.

  * Standardize frontend components layout, buttons order, etc.

  * Add local development scripts (to develop this project generator itself).

  * Add logs to startup modules to detect errors early.

  * Improve FastAPI dependency utilities, to simplify and reduce code (to
  require a superuser).


  ### 0.1.2


  * Fix path operation to update self-user, set parameters as body payload.


  ### 0.1.1


  Several bug fixes since initial publication, including:


  * Order of path operations for users.

  * Frontend sending login data in the correct format.

  * Add https://localhost variants to CORS.


  ## License


  This project is licensed under the terms of the MIT license.
fsprojects/SwaggerProvider: >+
  # SwaggerProvider [![NuGet
  Badge](https://buildstats.info/nuget/SwaggerProvider)](https://www.nuget.org/packages/SwaggerProvider)


  [![Join the chat at
  https://gitter.im/fsprojects/SwaggerProvider](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/fsprojects/SwaggerProvider?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  This SwaggerProvider can be used to access RESTful API generated using
  [Swagger.io](http://swagger.io)


  [![Travis build
  status](https://travis-ci.org/fsprojects/SwaggerProvider.svg)](https://travis-ci.org/fsprojects/SwaggerProvider)

  [![AppVeyor Build
  status](https://ci.appveyor.com/api/projects/status/tcahkn4b1tayh39u?svg=true)](https://ci.appveyor.com/project/sergey-tihon/swaggerprovider)

  [![Tested on
  APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru)


  Documentation:  http://fsprojects.github.io/SwaggerProvider/ 


  ## Swagger RESTful API Documentation Specification


  Swagger is available for ASP.NET WebAPI APIs with
  [Swashbuckle](https://github.com/domaindrivendev/Swashbuckle).

  Also possible to [Create an ASP.NET API app in Azure App
  Service](https://azure.microsoft.com/en-us/documentation/articles/app-service-dotnet-create-api-app/)



  ## Maintainer(s)


  - [@sergey-tihon](https://github.com/sergey-tihon)


  The default maintainer account for projects under "fsprojects" is
  @fsprojectsgit - F# Community Project Incubation Space (repo management)

cebe/yii2-app-api: >
  # yii2-app-api


  > OpenAPI Spec to API in 3, 2, 1... done!


  Yii Framework Application Template for quickly building API-first
  applications.


  ## Overview


  This application template consists of 3 application tiers:


  - `api`, contains the Yii application for the REST API.

  - `console`, contains the Yii application for console commands, cronjobs or
  queues.

  - `backend`, contains the Yii application for a CRUD backend on the API data.



  ## Setup

      composer create-project --stability=beta cebe/yii2-app-api my-api
      cd my-api
      cp env.php.dist env.php

  ## Generate Code


  ### Console


  Run `./yii gii/api` to generate your API code. The `--openApiPath` parameter
  specifies the path to your OpenAPI

  spec file. The following example will generate API code for the [OpenAPI
  petstore
  example](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/examples/v3.0/petstore-expanded.yaml).

      ./yii gii/api --openApiPath=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/3.0.2/examples/v3.0/petstore-expanded.yaml

  Run `./yii gii/api --help` for a list of configuration options. You may also
  adjust the configuration in `config/gii-generators.php`.


  Then set up the database:

      ./yii migrate/up
      ./yii faker

  ### Web


  To use the web generator, start the backend server:

      cd backend
      make start

  open `http://localhost:8338/gii` and select the `REST API Generator`.


  ![Gii - REST API Generator](docs/img/gii-generator.png)


  Enter the path or URL to the "OpenAPI 3 Spec file", e.g.
  `https://raw.githubusercontent.com/OAI/OpenAPI-Specification/3.0.2/examples/v3.0/petstore-expanded.yaml`.


  Click "Preview":


  ![Gii - REST API Generator - Generated
  files](docs/img/gii-generator-files.png)


  Click "Generate" to generate API files.


  Then set up the database by running the following commands on the command
  line:

      ./yii migrate/up
      ./yii faker

  ## Try it

      cd api
      make start

  Your API is now available at `http://localhost:8337/`. Try to access an
  endpoint of your spec via `curl`:

      $ curl http://localhost:8337/pets
      [
          {
              "name": "Eos rerum modi et quaerat voluptatibus.",
              "tag": "Totam in commodi in est nisi nihil aut et."
          },
          {
              "name": "Voluptas quia eos nisi deleniti itaque aspernatur aspernatur.",
              "tag": "Temporibus id culpa dolorem sequi aut."
          },
          {
              "name": "Facere aut similique laboriosam omnis perferendis et.",
              "tag": "Quo harum quo et ea distinctio non quam."
          },
          ...
      ]


  # Support


  Professional support, consulting as well as software development services are
  available:


  https://www.cebe.cc/en/contact


  Development of this library is sponsored by [cebe.:cloud: "Your Professional
  Deployment Platform"](https://cebe.cloud).
cdimascio/express-openapi-validator: >
  # express-openapi-validator


  [![](https://travis-ci.com/cdimascio/express-openapi-validator.svg?branch=master)](#)
  [![](https://img.shields.io/npm/v/express-openapi-validator.svg)](https://www.npmjs.com/package/express-openapi-validator)
  [![Coverage
  Status](https://coveralls.io/repos/github/cdimascio/express-openapi-validator/badge.svg)](https://coveralls.io/github/cdimascio/express-openapi-validator)
  [![](https://img.shields.io/badge/license-MIT-blue.svg)](#license)


  An OpenApi validator for ExpressJS that automatically validates API requests
  using an OpenAPI 3 specification.


  <p align="center">

  <img
  src="https://raw.githubusercontent.com/cdimascio/express-openapi-validator/master/assets/express-openapi-validator.png"
  width="500">

  </p>


  [express-openapi-validator](https://github.com/cdimascio/express-openapi-validator)
  is unopinionated and does not impose any  coding convention or project
  structure. Simply, install the validator onto your express app, point it to
  your OpenAPI 3 specification, then define and implement routes the way you
  prefer. See an [example](#example-express-api-server).


  ## Install


  ```shell

  npm i express-openapi-validator

  ```


  ## Usage


  Install the openapi validator


  ```javascript

  new OpenApiValidator({
    apiSpecPath: './openapi.yaml',
  }).install(app);

  ```


  Then, register an error handler to customize errors


  ```javascript

  app.use((err, req, res, next) => {
    // format error
    res.status(err.status).json({
      errors: err.errors,
    });
  });

  ```


  ## Example Express API Server


  Try the complete example below:


  ```javascript

  var express = require('express');

  var path = require('path');

  var cookieParser = require('cookie-parser');

  var bodyParser = require('body-parser');

  var logger = require('morgan');

  var http = require('http');

  var app = express();


  // 1. Import the express-openapi-validator library

  var OpenApiValidator = require('express-openapi-validator').OpenApiValidator;


  app.use(bodyParser.json());

  app.use(logger('dev'));

  app.use(express.json());

  app.use(express.urlencoded({ extended: false }));

  app.use(cookieParser());

  app.use(express.static(path.join(__dirname, 'public')));


  // 2. (optionally) Serve the OpenAPI spec

  const spec = path.join(__dirname, 'openapi.yaml');

  app.use('/spec', express.static(spec));


  // 3. Install the OpenApiValidator onto your express app

  new OpenApiValidator({
    apiSpecPath: './openapi.yaml',
  }).install(app);


  // 4. Define routes using Express

  app.get('/v1/pets', function(req, res, next) {
    res.json([{ id: 1, name: 'max' }, { id: 2, name: 'mini' }]);
  });


  app.post('/v1/pets', function(req, res, next) {
    res.json({ name: 'sparky' });
  });


  app.get('/v1/pets/:id', function(req, res, next) {
    res.json({ id: req.params.id, name: 'sparky' });
  });


  // 5. Create an Express error handler

  app.use((err, req, res, next) => {
    // 6. Customize errors
    res.status(err.status).json({
      errors: err.errors,
    });
  });

  ```


  ## [Example Express API
  Server](https://github.com/cdimascio/express-openapi-validator-example) (clone
  it)


  A fully working example lives
  [here](https://github.com/cdimascio/express-openapi-validator-example)


  ## Example validation responses


  #### Validate a query parameter with a value constraint


  `/pets/:id` should be of type integer, express-openapi-validator returns:


  ```shell

  curl http://localhost:3000/v1/pets/as |jq

  {
    "errors": [
      {
        "path": "id",
        "errorCode": "type.openapi.validation",
        "message": "should be integer",
        "location": "path"
      }
    ]
  }

  ```


  #### Validate a query parameter with a range constraint


  `/pets?limit=?` should be of type integer with a value greater than 5. It
  should also require an additional query paramter, `test`,
  express-openapi-validator returns:


  ```shell

  curl http://localhost:3000/v1/pets?limit=1 |jq

  {
    "errors": [
      {
        "path": "limit",
        "errorCode": "minimum.openapi.validation",
        "message": "should be >= 5",
        "location": "query"
      },
      {
        "path": "test",
        "errorCode": "required.openapi.validation",
        "message": "should have required property 'test'",
        "location": "query"
      }
    ]
  }

  ```


  #### Validate the query parameter's value type


  `POST /pets` is defined to only accept media type application/json,
  express-openapi-validator returns:


  ```shell

  curl --request POST \
    --url http://localhost:3000/v1/pets \
    --header 'content-type: application/xml' \
    --data '{
          "name": "test"
  }' |jq

  {
    "errors": [
      {
        "message": "Unsupported Content-Type application/xml"
      }
    ]
  }

  ```


  #### Validate a POST body to ensure required parameters are present


  `POST /pets` request body is required to contain the `name` properly,
  express-openapi-validator returns:


  ```shell

  λ  my-test curl --request POST \
    --url http://localhost:3000/v1/pets \
    --header 'content-type: application/json' \
    --data '{
  }'|jq
    "errors": [
      {
        "path": "name",
        "errorCode": "required.openapi.validation",
        "message": "should have required property 'name'",
        "location": "body"
      }
    ]
  }

  ```


  #### ...and much more. Try it out!


  ## License


  [MIT](LICENSE)
cebe/yii2-openapi: >
  # yii2-openapi


  REST API application generator for Yii2, openapi 3.0 YAML -> Yii2.


  Base on [Gii, the Yii Framework Code
  Generator](https://www.yiiframework.com/extension/yiisoft/yii2-gii).


  [![Latest Stable
  Version](https://poser.pugx.org/cebe/yii2-openapi/v/stable)](https://packagist.org/packages/cebe/yii2-openapi)

  [![License](https://poser.pugx.org/cebe/yii2-openapi/license)](https://packagist.org/packages/cebe/yii2-openapi)

  [![Build
  Status](https://travis-ci.org/cebe/yii2-openapi.svg?branch=master)](https://travis-ci.org/cebe/yii2-openapi)


  ## what should this do?


  Input: [OpenAPI 3.0 YAML or
  JSON](https://github.com/OAI/OpenAPI-Specification#the-openapi-specification)
  (via [cebe/php-openapi](https://github.com/cebe/php-openapi))


  Output: Controllers, Models, database schema


  ## Features


  This library is currently work in progress, current features are checked here
  when ready:


  - [x] generate Controllers + Actions

  - [x] generate Models

  - [x] generate Database migration

  - [x] provide Dummy API via Faker


  - [ ] update Database and models when API schema changes


  ## Requirements


  - PHP 7.1 or higher



  ## Install

      composer require cebe/yii2-openapi:@beta cebe/php-openapi:@beta

  ## Usage


  You can use this package in your existing application or start a new project
  using the

  [yii2-app-api](https://github.com/cebe/yii2-app-api) application template.

  For usage of the template, see instructions in the template repo readme.


  In your existing Yii application config (works for console as well as web):


  ```php

  <?php

  $config = [
      // ... this is your application config ...
  ];


  if (YII_ENV_DEV) {
      // enable Gii module
      $config['bootstrap'][] = 'gii';
      $config['modules']['gii'] = [
          'class' => yii\gii\Module::class,
          'generators' => [
              // add ApiGenerator to Gii module
              'api' => \cebe\yii2openapi\generator\ApiGenerator::class,
          ],
      ];
  }


  return $config;

  ```


  To use the web generator, open `index.php?r=gii` and select the `REST API
  Generator`.


  On console you can run the generator with `./yii gii/api
  --openApiPath=@app/openapi.yaml`. Where `@app/openapi.yaml` should be the
  absolute path to your OpenAPI spec file. This can be JSON as well as YAML (see
  also [cebe/php-openapi](https://github.com/cebe/php-openapi/) for supported
  formats).


  Run `./yii gii/api --help` for all options.



  ## OpenAPI extensions


  This library understands the following extensions to the OpenAPI spec:


  ### `x-faker`


  You may specify custom PHP code for generating fake data for a property:


  ```yaml
      Post:
        properties:
          id:
            type: integer
          tags:
            type: array
            items:
              type: string
            example: ['one', 'two']
            x-faker: "$faker->randomElements(['one', 'two', 'three', 'four'])"
  ```



  ## Screenshots


  Gii Generator Form:


  ![Gii Generator Form](doc/screenshot-form.png)


  Generated files:


  ![Gii Generated Files](doc/screenshot-files.png)



  # Support


  Professional support, consulting as well as software development services are
  available:


  https://www.cebe.cc/en/contact


  Development of this library is sponsored by [cebe.:cloud: "Your Professional
  Deployment Platform"](https://cebe.cloud).
cdimascio/generator-express-no-stress: "# generator-express-no-stress\n\n![](https://img.shields.io/badge/status-stable-green.svg) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/56c006ccc44c47f49d12b6b35fcf35da)](https://www.codacy.com/app/cdimascio/generator-express-no-stress?utm_source=github.com&utm_medium=referral&utm_content=cdimascio/generator-express-no-stress&utm_campaign=Badge_Grade) ![](https://img.shields.io/badge/license-MIT-blue.svg)\n\nCreate awesome [Express.js](http://www.expressjs.com) applications with best of breed tech including ES.next via [Babel.js](https://babeljs.io/), structured logging with [Pino](https://github.com/pinojs/pino), API validation and interactive documentation using an [OpenAPI 3](https://swagger.io/specification/) or [Swagger 2](https://swagger.io/specification/v2/) spec, environment based config with [dotenv](https://github.com/motdotla/dotenv), and linting with [ESLint](http://eslint.org/).\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/cdimascio/generator-express-no-stress/master/assets/express-no-stress-logo-v.png\">\n</p>\n\ngenerator-express-no-stress gets you up and running in seconds. It's ridiculously easy to configure. Heck, just take the defaults. Start it. Write code.\n\nThis generator scaffolds a fully functioning REST API server, complete with interactive documentation, API validation, structured logging, environment driven config, and more. Simply run the generator and smile :-D\n\n[Here's what you get!](#what-you-get)\n\n## Install\n\n_Requires Node 8 or greater_\n\n```shell\nnpm install -g yo generator-express-no-stress\n```\n\n- See [here](#usage-cli) for use with Yarn and/or Docker\n- See [here](#faqs) for Node 6 support\n\n## Scaffold\n\n```shell\nyo express-no-stress myapp\ncd myapp\n```\n\n## Run\n\nRun in _development mode_:\n\n```shell\nnpm run dev\n```\n\nPackage and run in _production mode_\n\n```shell\nnpm run compile\nnpm start\n```\n\n## Test\n\n```shell\nnpm test\n```\n\n## Debug\n\nRun one of the following, then attach your favorite inspector e.g. [VSCode](#debug-in-vscode):\n\n```shell\n# debug the server\nnpm run dev:debug\n\n# debug the tests\nnpm run test:debug\n```\n\n## Try it!\n\n- Interactive API doc at [http://localhost:3000/api-explorer](http://localhost:3000/api-explorer)\n- Landing page at [http://localhost:3000](http://localhost:3000)\n\n---\n\n## Usage: CLI\n\n```shell\nyo express-no-stress [appname] [--yarn] [--docker]\n```\n\n| Option     | default | Description                                                                |\n| ---------- | ------- | -------------------------------------------------------------------------- |\n| `appname`  | myapp   | The application folder                                                     |\n| `--yarn`   | -       | Use the [`yarn`](https://yarnpkg.com) package manager, instead of `npm`    |\n| `--docker` |         | Install [Docker](https://www.docker.com/) artifacts including a Dockerfile |\n\n## Usage: Project\n\nThe sections below describe all usage options available once the project is generated/scaffolded.\n\n### npm targets\n\n| Target               | Description                                                              |\n| -------------------- | ------------------------------------------------------------------------ |\n| `npm run dev`        | Run in _development_ mode                                                |\n| `npm run dev:debug`  | Debug in _development_ mode                                              |\n| `npm run test`       | Run tests                                                                |\n| `npm run test:debug` | Debug tests                                                              |\n| `npm run lint`       | View a listing of all errors discovered by the linter                    |\n| `npm run lint:fix`   | Fix all errors discovered by the linter                                  |\n| `npm run compile`    | Transpile source code for production use                                 |\n| `npm start`          | Run the in _production_ mode. \\*Requires running `npm run compile` first |\n\n### Debug in VSCode\n\nAdd these [contents](https://github.com/cdimascio/generator-express-no-stress/blob/next/assets/.vscode/launch.json) to your `.vscode/launch.json` file\n\n### Deploy to the Cloud\n\ne.g. CloudFoundry\n\n```\ncf push myapp\n```\n\n### Use Yarn\n\n```\n# scaffold\nyo express-no-stress myapp --yarn\ncd myapp\n\n# run in development mode\nyarn run dev\n\n# run in production mode\nyarn run compile\nyarn start\n\n# test\nyarn test\n```\n\n---\n\n## What you get!\n\n- [Express.js](http://www.expressjs.com) - Fast, unopinionated\n  , minimalist web framework for Node.js\n- [Babel.js](https://babeljs.io/) - Use new syntax, right now without waiting for support\n- [Pino](https://github.com/pinojs/pino) - Extremely fast node.js logger, inspired by Bunyan. It also includes a shell utility to pretty-print its log files\n- [dotenv](https://github.com/motdotla/dotenv) - Loads environment variables from .env for nodejs projects\n- [ESLint](http://eslint.org/) - a pluggable linting utility for JavaScript and JSX\n\n      \tChoose from the following ESLint lint rules:\n      \t- [Airbnb](https://github.com/airbnb/javascript) - A mostly reasonable approach to JavaScript\n      \t- [Prettier](https://github.com/prettier/prettier) - Prettier is an opinionated code formatter\n\n- [Swagger](http://swagger.io/) - is a simple yet powerful representation of your RESTful API\n- [SwaggerUI](http://swagger.io/) - dynamically generate beautiful documentation and sandbox from a Swagger-compliant API\n\n### API Validation\n\nSimply describe your APIs with Swagger and automagically get for free:\n\n- Interactive documentation\n- API validation\n\n#### Interactive API Doc\n\n![](https://raw.githubusercontent.com/cdimascio/generator-express-no-stress/master/assets/interactive-doc1.png)\n\n#### API Validation!\n\nOops! I the API caller forgot to pass a `name` field, no stress, we've got this!\n\n![](https://raw.githubusercontent.com/cdimascio/generator-express-no-stress/master/assets/api-validation.png)\n\n### Structured Logging\n\nStructured logging out of the box!\n\n#### raw\n\n![](https://raw.githubusercontent.com/cdimascio/generator-express-no-stress/master/assets/logging-raw.png)\n\n#### pretty\n\nStructured logging pretty printed by default - great for dev!\n\n![](https://raw.githubusercontent.com/cdimascio/generator-express-no-stress/master/assets/logging-pretty.png)\n\n### API Validation Example\n\nSimply describe your APIs with Swagger and automatically get:\n\n- API request validation\n- Interactive documentation\n\n### example\n\n#### Swagger API spec\n\n```yaml\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: myapp\n  description: My cool app\nbasePath: /api/v1\ntags:\n  - name: Examples\n    description: Simple example endpoints\n  - name: Specification\n    description: The swagger API specification\n\nconsumes:\n  - application/json\nproduces:\n  - application/json\n\ndefinitions:\n  ExampleBody:\n    type: object\n    title: example\n    required:\n      - name\n    properties:\n      name:\n        type: string\n        example: no_stress\n\npaths:\n  /examples:\n    get:\n      tags:\n        - Examples\n      description: Fetch all examples\n      responses:\n        200:\n          description: Returns all examples\n    post:\n      tags:\n        - Examples\n      description: Create a new example\n      parameters:\n        - name: example\n          in: body\n          description: an example\n          required: true\n          schema:\n            $ref: '#/definitions/ExampleBody'\n      responses:\n        200:\n          description: Returns all examples\n\n  /examples/{id}:\n    get:\n      tags:\n        - Examples\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the example to retrieve\n          type: integer\n      responses:\n        200:\n          description: Return the example with the specified id\n        404:\n          description: Example not found\n\n  /spec:\n    get:\n      tags:\n        - Specification\n      responses:\n        200:\n          description: Return the API specification\n```\n\n#### Invoke a POST request via the Interactive doc\n\n![](https://raw.githubusercontent.com/cdimascio/generator-express-no-stress/master/assets/interactive-doc.png)\n\n### Linting\n\nexpress-no-stress uses [ESLint](http://eslint.org/) and provides two choices, Airbnb or Prettier.\n\nTo add your own ESLint customizations, edit`.eslintrc.json`.\n\nNote that the Airbnb variant provides a slightly modified Airbnb [base](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base) configuration.\n\n## FAQs\n\n**Q**: What about Node.js 6.x?\n\n**A**:`generator-express-no-stress` now uses Babel 7. Babel 7 tooling requires Node.js 8 or greater. To use `generator-express-no-stress` with Node.js 6, install version 3.5.4.\n\n```shell\nnpm install -g yo generator-express-no-stress@3.5.4\n```\n\n## License\n\n[MIT](LICENSE)\n"
dansharisan/larapiauth: >
  # larapiauth

  An authentication API + CoreUI Admin panel boilerplate built from Laravel that
  can be used for starting any new app.


  # Demo

  - Demo: http://larapiauth.rakuyomi.net/

  - Admin account: admin@larapiauth.test / admin

  - Member account: member@larapiauth.test / member


  Admin has the access to the panel, while normal member can only see his/her
  info.

  You can go to http://larapiauth.rakuyomi.net/api/ to play with the API.


  # Features

  - Built using Laravel 5.8.3

  - API Documentation with L5-Swagger 5.8.x (Swagger)

  - Authentication API using tymondesigns/jwt-auth

  - CoreUI Admin panel with authorization system

  - Vuex for managing states easily

  - Bootstrap 4.x


  # Notes

  - Use features/admin_panel_coreui_sample branch for showing all the CoreUI
  sample components

  - Master branch has the clean empty admin panel, so you can start putting your
  own things there.


  # APIs

  - Register

  - Activate user (after registration)

  - Login

  - Logout

  - Get user

  - Reset password (forgot password)

  - Change password


  # Installing

  - Run "composer install"

  - Run "npm install"

  - Create a new database

  - Clone the .env.example file and rename it to .env

  - Config database information and mail server information in .env

  - Run "php artisan migrate" to generate DB schema

  - Run "php artisan db:seed" to seed db

  - Run "php artisan jwt:secret" to update your .env file with something like
  JWT_SECRET=xxxxxxxxxx

  - Run "php artisan key:generate" to generate application key

  - Run "sudo chmod -R 777 storage" (on mac or linux) or "chmod -R 777 storage"
  (on windows) to grant permission for the app to access/modify storage folder

  - Run "php artisan l5-swagger:generate" to generate API documentations

  - If you're deploying it to real server, copy everything inside
  vendor\swagger-api\swagger-ui\dist to public\docs\asset on your server. You
  need to create docs\asset if it's not existing.

  - Run "php artisan serve" to start the server then go to localhost:8000 and
  enjoy


  # Donation

  If this project help you reduce time to develop, you can give me a cup of
  coffee :)


  [![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=7CXCQS83WU9EY)
cdimascio/generator-express-no-stress-typescript: >
  # generator-express-no-stress-typescript


  ![](https://img.shields.io/badge/status-stable-green.svg) [![Codacy
  Badge](https://api.codacy.com/project/badge/Grade/21e362094c5a4c0da4841fc172cee95d)](https://www.codacy.com/app/cdimascio/generator-express-no-stress-typescript?utm_source=github.com&utm_medium=referral&utm_content=cdimascio/generator-express-no-stress-typescript&utm_campaign=Badge_Grade)
  ![](https://img.shields.io/badge/license-MIT-blue.svg)


  Create awesome [Express.js](http://www.expressjs.com) applications with best
  of breed tech including [Typescipt](https://www.typescriptlang.org/),
  structured logging with [Pino](https://github.com/pinojs/pino), API validation
  and interactive documentation via an [OpenAPI
  3](https://swagger.io/specification/) or [Swagger
  2](https://swagger.io/specification/v2/) spec, environment based config with
  [dotenv](https://github.com/motdotla/dotenv).


  <p align="center">

  <img
  src="https://raw.githubusercontent.com/cdimascio/generator-express-no-stress-typescript/master/assets/express-no-stress-logo-ts.jpg"

  </p>


  generator-express-no-stress-typescript gets you up and running in seconds.
  It's ridiculously easy to configure. Heck, just take the defaults. Start it.
  Write code.


  This generator scaffolds a fully functioning REST API server complete with
  interactive documentation, API validation, structured logging, environment
  driven config, and more. Simply run the generator and smile :-D


  This project is a Typescript variant of
  [generator-express-no-stress](https://github.com/cdimascio/generator-express-no-stress)


  [Here's what you get!](#what-you-get)


  ## Install


  _Requires Node 6 or greater_


  ```shell

  npm install -g yo generator-express-no-stress-typescript

  ```


  - See [here](#usage-cli) for use with Yarn and/or Docker


  ## Scaffold


  ```shell

  yo express-no-stress-typescript myapp

  cd myapp

  ```


  ## Run


  Run in _development mode_:


  ```shell

  npm run dev

  ```


  Package and run in _production mode_


  ```shell

  npm run compile

  npm start

  ```


  ## Test


  ```shell

  npm test

  ```


  ## Debug


  Run one of the following, then attach your favorite inspector.


  ```shell

  # debug the server

  npm run dev:debug


  # debug the tests

  npm run test:debug

  ```


  ## Try it!


  - Interactive API doc at
  [http://localhost:3000/api-explorer](http://localhost:3000/api-explorer)

  - Landing page at [http://localhost:3000](http://localhost:3000)


  ---


  ## Usage: CLI


  ```shell

  yo express-no-stress-typescript [appname] [--yarn] [--docker]

  ```


  | Option     | default |
  Description                                                                |

  | ---------- | ------- |
  -------------------------------------------------------------------------- |

  | `appname`  | myapp   | The application
  folder                                                     |

  | `--yarn`   | -       | Use the [`yarn`](https://yarnpkg.com) package
  manager, instead of `npm`    |

  | `--docker` |         | Install [Docker](https://www.docker.com/) artifacts
  including a Dockerfile |


  ## Usage: Project


  The sections below describe all usage options available once the project is
  generated/scaffolded.


  ### npm targets


  | Target               |
  Description                                                              |

  | -------------------- |
  ------------------------------------------------------------------------ |

  | `npm run dev`        | Run in _development_
  mode                                                |

  | `npm run dev:debug`  | Debug in _development_
  mode                                              |

  | `npm run test`       | Run
  tests                                                                |

  | `npm run test:debug` | Debug
  tests                                                              |

  | `npm run compile`    | Transpile source code for production
  use                                 |

  | `npm start`          | Run the in _production_ mode. \*Requires running `npm
  run compile` first |


  ### Deploy to the Cloud


  e.g. CloudFoundry


  ```

  cf push myapp

  ```


  ### Use Yarn


  ```

  # scaffold

  yo express-no-stress-typescript myapp --yarn


  # start

  cd myapp

  npm start

  ```


  ---


  ## What you get!


  - [Typescript](https://www.typescriptlang.org/) - Typescript is a typed
  superset of JavaScript that compiles to plain JavaScript

  - [Express.js](https://www.expressjs.com) - Fast, unopinionated
    , minimalist web framework for Node.js
  - [Pino](https://github.com/pinojs/pino) - Extremely fast node.js logger,
  inspired by Bunyan. It also includes a shell utility to pretty-print its log
  files

  - [dotenv](https://github.com/motdotla/dotenv) - Loads environment variables
  from .env for nodejs projects

  - [Swagger](http://swagger.io/) - is a simple yet powerful representation of
  your RESTful API.

  - [SwaggerUI](http://swagger.io/) - dynamically generate beautiful
  documentation and sandbox from a Swagger-compliant API


  ### API Validation


  Simply describe your APIs with Swagger and automagically get for free:


  - Interactive documentation

  - API validation


  #### Interactive API Doc


  ![](https://github.com/cdimascio/generator-express-no-stress-typescript/raw/master/assets/interactive-doc1.png)


  #### API Validation!


  Oops! I the API caller forgot to pass a `name` field, no stress, we've got
  this!


  ![](https://github.com/cdimascio/generator-express-no-stress-typescript/raw/master/assets/api-validation.png)


  ### Structured Logging


  Structured logging out of the box!


  #### raw


  ![](https://github.com/cdimascio/generator-express-no-stress-typescript/raw/master/assets/logging-raw.png)


  #### pretty


  Structured logging pretty printed by default - great for dev!


  ![](https://github.com/cdimascio/generator-express-no-stress-typescript/raw/master/assets/logging-pretty.png)


  ### API Validation Example


  Simply describe your APIs with Swagger and automatically get:


  - API request validation

  - Interactive documentation


  ### example


  #### Swagger API spec


  ```yaml

  swagger: '2.0'

  info:
    version: 1.0.0
    title: myapp
    description: My cool app
  basePath: /api/v1

  tags:
    - name: Examples
      description: Simple example endpoints
    - name: Specification
      description: The swagger API specification

  consumes:
    - application/json
  produces:
    - application/json

  definitions:
    ExampleBody:
      type: object
      title: example
      required:
        - name
      properties:
        name:
          type: string
          example: no_stress

  paths:
    /examples:
      get:
        tags:
          - Examples
        description: Fetch all examples
        responses:
          200:
            description: Returns all examples
      post:
        tags:
          - Examples
        description: Create a new example
        parameters:
          - name: example
            in: body
            description: an example
            required: true
            schema:
              $ref: '#/definitions/ExampleBody'
        responses:
          200:
            description: Returns all examples

    /examples/{id}:
      get:
        tags:
          - Examples
        parameters:
          - name: id
            in: path
            required: true
            description: The id of the example to retrieve
            type: integer
        responses:
          200:
            description: Return the example with the specified id
          404:
            description: Example not found

    /spec:
      get:
        tags:
          - Specification
        responses:
          200:
            description: Return the API specification
  ```


  #### Invoke a POST request via the Interactive doc


  ![](https://github.com/cdimascio/generator-express-no-stress-typescript/raw/master/assets/interactive-doc.png)


  ## License


  [MIT](LICENSE)
namsor/namsor-r-sdk2: >+
  # R API client for namsor


  NamSor API v2 : enpoints to process personal names (gender, cultural origin or
  ethnicity) in all alphabets or languages. Use GET methods for small tests, but
  prefer POST methods for higher throughput (batch processing of up to 1000
  names at a time). Need something you can't find here? We have many more
  features coming soon. Let us know, we'll do our best to add it! 


  ## Overview

  This API client was generated by the [OpenAPI
  Generator](https://openapi-generator.tech) project. By using the [OpenAPI
  spec](https://openapis.org) from a remote server, you can easily generate an
  API client.


  - API version: 2.0.2-beta

  - Package version: 0.1.2

  - Build package: org.openapitools.codegen.languages.RClientCodegen

  For more information, please visit
  [http://www.namsor.com/](http://www.namsor.com/)


  ## Installation


  ### Prerequisites


  Install the dependencies


  ```R

  install.packages("jsonlite")

  install.packages("httr")

  install.packages("caTools")

  ```


  ### Build the package


  ```sh

  git clone https://github.com/namsor/namsor-r-sdk2

  cd namsor-r-sdk2

  R CMD build .

  R CMD check namsor_0.1.2.tar.gz

  R CMD INSTALL namsor_0.1.2.tar.gz

  ```


  ### Install the package


  ```R

  install.packages("namsor")

  ```


  To install directly from Github, use `devtools`:

  ```R

  install.packages("devtools")

  library(devtools)

  install_github("namsor/namsor-r-sdk2")

  ```


  ### Usage


  ```R

  library(namsor)

  ```


  ## Documentation for API Endpoints


  All URIs are relative to *https://v2.namsor.com/NamSorAPIv2*


  Class | Method | HTTP request | Description

  ------------ | ------------- | ------------- | -------------

  *AdminApi* | [**ApiUsage**](docs/AdminApi.md#ApiUsage) | **GET**
  /api2/json/apiUsage | Print current API usage.

  *AdminApi* | [**ApiUsageHistory**](docs/AdminApi.md#ApiUsageHistory) | **GET**
  /api2/json/apiUsageHistory | Print historical API usage.

  *AdminApi* |
  [**ApiUsageHistoryAggregate**](docs/AdminApi.md#ApiUsageHistoryAggregate) |
  **GET** /api2/json/apiUsageHistoryAggregate | Print historical API usage (in
  an aggregated view, by service, by day/hour/min).

  *AdminApi* | [**AvailablePlans**](docs/AdminApi.md#AvailablePlans) | **GET**
  /api2/json/availablePlans | List all available plans in the default currency
  (usd).

  *AdminApi* | [**AvailablePlans1**](docs/AdminApi.md#AvailablePlans1) | **GET**
  /api2/json/availablePlans/{token} | List all available plans in the user's
  preferred currency.

  *AdminApi* | [**AvailableServices**](docs/AdminApi.md#AvailableServices) |
  **GET** /api2/json/apiServices | List of API services and usage cost in Units
  (default is 1=ONE Unit).

  *AdminApi* | [**BillingCurrencies**](docs/AdminApi.md#BillingCurrencies) |
  **GET** /api2/json/billingCurrencies | List possible currency options for
  billing (USD, EUR, GBP, ...)

  *AdminApi* | [**BillingHistory**](docs/AdminApi.md#BillingHistory) | **GET**
  /api2/json/billingHistory/{token} | Read the history billing information
  (invoices paid via Stripe or manually).

  *AdminApi* | [**BillingInfo**](docs/AdminApi.md#BillingInfo) | **GET**
  /api2/json/billingInfo/{token} | Read the billing information (company name,
  address, phone, vat ID)

  *AdminApi* | [**Charge**](docs/AdminApi.md#Charge) | **POST**
  /api2/json/charge | Create a Stripe Customer, based on a payment card token
  (from secure StripeJS) and email.

  *AdminApi* | [**CorporateKey**](docs/AdminApi.md#CorporateKey) | **GET**
  /api2/json/corporateKey/{apiKey}/{corporate} | Setting an API Key to a
  corporate status.

  *AdminApi* | [**DebugLevel**](docs/AdminApi.md#DebugLevel) | **GET**
  /api2/json/debugLevel/{logger}/{level} | Update debug level for a classifier

  *AdminApi* | [**Flush**](docs/AdminApi.md#Flush) | **GET** /api2/json/flush |
  Flush counters.

  *AdminApi* | [**InvalidateCache**](docs/AdminApi.md#InvalidateCache) | **GET**
  /api2/json/invalidateCache | Invalidate system caches.

  *AdminApi* | [**Learnable**](docs/AdminApi.md#Learnable) | **GET**
  /api2/json/learnable/{source}/{learnable} | Activate/deactivate learning from
  a source.

  *AdminApi* | [**NamsorCounter**](docs/AdminApi.md#NamsorCounter) | **GET**
  /api2/json/namsorCounter | Get the overall API counter

  *AdminApi* | [**PaymentInfo**](docs/AdminApi.md#PaymentInfo) | **GET**
  /api2/json/paymentInfo/{token} | Get the Stripe payment information associated
  with the current google auth session token.

  *AdminApi* | [**ProcureKey**](docs/AdminApi.md#ProcureKey) | **GET**
  /api2/json/procureKey/{token} | Procure an API Key (sent via Email), based on
  an auth token. Keep your API Key secret.

  *AdminApi* | [**RedeployUI**](docs/AdminApi.md#RedeployUI) | **GET**
  /api2/json/redeployUI | Redeploy UI from current dev branch.

  *AdminApi* | [**RedeployUI1**](docs/AdminApi.md#RedeployUI1) | **GET**
  /api2/json/redeployUI/{live} | Redeploy UI from current dev branch.

  *AdminApi* | [**RemoveUserAccount**](docs/AdminApi.md#RemoveUserAccount) |
  **GET** /api2/json/removeUserAccount/{token} | Subscribe to a give API plan,
  using the user's preferred or default currency.

  *AdminApi* | [**Shutdown**](docs/AdminApi.md#Shutdown) | **GET**
  /api2/json/shutdown | Stop learning and shutdown system.

  *AdminApi* | [**SoftwareVersion**](docs/AdminApi.md#SoftwareVersion) | **GET**
  /api2/json/softwareVersion | Get the current software version

  *AdminApi* | [**SourceStats**](docs/AdminApi.md#SourceStats) | **GET**
  /api2/json/sourceStats/{source} | Print basic source statistics.

  *AdminApi* | [**Stats**](docs/AdminApi.md#Stats) | **GET** /api2/json/stats |
  Print basic system statistics.

  *AdminApi* | [**StripeConnect**](docs/AdminApi.md#StripeConnect) | **GET**
  /api2/json/stripeConnect | Connects a Stripe Account.

  *AdminApi* | [**SubscribePlan**](docs/AdminApi.md#SubscribePlan) | **GET**
  /api2/json/subscribePlan/{planName}/{token} | Subscribe to a give API plan,
  using the user's preferred or default currency.

  *AdminApi* | [**UpdateBillingInfo**](docs/AdminApi.md#UpdateBillingInfo) |
  **POST** /api2/json/updateBillingInfo/{token} | Sets or update the billing
  information (company name, address, phone, vat ID)

  *AdminApi* | [**UpdateLimit**](docs/AdminApi.md#UpdateLimit) | **GET**
  /api2/json/updateLimit/{usageLimit}/{hardOrSoft}/{token} | Modifies the
  hard/soft limit on the API plan's overages (default is 0$ soft limit).

  *AdminApi* | [**UpdatePaymentDefault**](docs/AdminApi.md#UpdatePaymentDefault)
  | **GET** /api2/json/updatePaymentDefault/{defautSourceId}/{token} | Update
  the default Stripe card associated with the current google auth session token.

  *AdminApi* | [**UserInfo**](docs/AdminApi.md#UserInfo) | **GET**
  /api2/json/userInfo/{token} | Get the user profile associated with the current
  google auth session token.

  *AdminApi* | [**VerifyEmail**](docs/AdminApi.md#VerifyEmail) | **GET**
  /api2/json/verifyEmail/{emailToken} | Verifies an email, based on token sent
  to that email

  *AdminApi* | [**VerifyRemoveEmail**](docs/AdminApi.md#VerifyRemoveEmail) |
  **GET** /api2/json/verifyRemoveEmail/{emailToken} | Verifies an email, based
  on token sent to that email

  *AdminApi* | [**Vet**](docs/AdminApi.md#Vet) | **GET**
  /api2/json/vetting/{source}/{vetted} | Vetting of a source.

  *ChineseApi* |
  [**ChineseNameCandidates**](docs/ChineseApi.md#ChineseNameCandidates) |
  **GET**
  /api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}
  | Identify Chinese name candidates, based on the romanized name.

  *ChineseApi* |
  [**ChineseNameCandidatesBatch**](docs/ChineseApi.md#ChineseNameCandidatesBatch)
  | **POST** /api2/json/chineseNameCandidatesBatch | Identify Chinese name
  candidates, based on the romanized name (firstName = chineseGivenName;
  lastName=chineseSurname).

  *ChineseApi* |
  [**ChineseNameCandidatesGenderBatch**](docs/ChineseApi.md#ChineseNameCandidatesGenderBatch)
  | **POST** /api2/json/chineseNameCandidatesGenderBatch | Identify Chinese name
  candidates, based on the romanized name (firstName = chineseGivenName;
  lastName=chineseSurname).

  *ChineseApi* |
  [**ChineseNameGenderCandidates**](docs/ChineseApi.md#ChineseNameGenderCandidates)
  | **GET**
  /api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}
  | Identify Chinese name candidates, based on the romanized name - having a
  known gender ('male' or 'female')

  *PersonalApi* | [**Country**](docs/PersonalApi.md#Country) | **GET**
  /api2/json/country/{personalNameFull} | [USES 10 UNITS] Infer the likely
  country of residence of a personal full name, or one surname. Assumes names as
  they are in the country of residence OR the country of origin.

  *PersonalApi* | [**CountryBatch**](docs/PersonalApi.md#CountryBatch) |
  **POST** /api2/json/countryBatch | [USES 10 UNITS] Infer the likely country of
  residence of up to 1000 personal full names, or surnames. Assumes names as
  they are in the country of residence OR the country of origin.

  *PersonalApi* | [**Diaspora**](docs/PersonalApi.md#Diaspora) | **GET**
  /api2/json/diaspora/{countryIso2}/{firstName}/{lastName} | [USES 20 UNITS]
  Infer the likely ethnicity/diaspora of a personal name, given a country of
  residence ISO2 code (ex. US, CA, AU, NZ etc.)

  *PersonalApi* | [**DiasporaBatch**](docs/PersonalApi.md#DiasporaBatch) |
  **POST** /api2/json/diasporaBatch | [USES 20 UNITS] Infer the likely
  ethnicity/diaspora of up to 1000 personal names, given a country of residence
  ISO2 code (ex. US, CA, AU, NZ etc.)

  *PersonalApi* | [**Gender**](docs/PersonalApi.md#Gender) | **GET**
  /api2/json/gender/{firstName}/{lastName} | Infer the likely gender of a name.

  *PersonalApi* | [**GenderBatch**](docs/PersonalApi.md#GenderBatch) | **POST**
  /api2/json/genderBatch | Infer the likely gender of up to 1000 names,
  detecting automatically the cultural context.

  *PersonalApi* | [**GenderFull**](docs/PersonalApi.md#GenderFull) | **GET**
  /api2/json/genderFull/{fullName} | Infer the likely gender of a full name, ex.
  John H. Smith

  *PersonalApi* | [**GenderFullBatch**](docs/PersonalApi.md#GenderFullBatch) |
  **POST** /api2/json/genderFullBatch | Infer the likely gender of up to 1000
  full names, detecting automatically the cultural context.

  *PersonalApi* | [**GenderFullGeo**](docs/PersonalApi.md#GenderFullGeo) |
  **GET** /api2/json/genderFullGeo/{fullName}/{countryIso2} | Infer the likely
  gender of a full name, given a local context (ISO2 country code).

  *PersonalApi* |
  [**GenderFullGeoBatch**](docs/PersonalApi.md#GenderFullGeoBatch) | **POST**
  /api2/json/genderFullGeoBatch | Infer the likely gender of up to 1000 full
  names, with a given cultural context (country ISO2 code).

  *PersonalApi* | [**GenderGeo**](docs/PersonalApi.md#GenderGeo) | **GET**
  /api2/json/genderGeo/{firstName}/{lastName}/{countryIso2} | Infer the likely
  gender of a name, given a local context (ISO2 country code).

  *PersonalApi* | [**GenderGeoBatch**](docs/PersonalApi.md#GenderGeoBatch) |
  **POST** /api2/json/genderGeoBatch | Infer the likely gender of up to 1000
  names, each given a local context (ISO2 country code).

  *PersonalApi* | [**Origin**](docs/PersonalApi.md#Origin) | **GET**
  /api2/json/origin/{firstName}/{lastName} | [USES 10 UNITS] Infer the likely
  country of origin of a personal name. Assumes names as they are in the country
  of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.

  *PersonalApi* | [**OriginBatch**](docs/PersonalApi.md#OriginBatch) | **POST**
  /api2/json/originBatch | [USES 10 UNITS] Infer the likely country of origin of
  up to 1000 names, detecting automatically the cultural context.

  *PersonalApi* | [**ParseName**](docs/PersonalApi.md#ParseName) | **GET**
  /api2/json/parseName/{nameFull} | Infer the likely first/last name structure
  of a name, ex. John Smith or SMITH, John or SMITH; John. 

  *PersonalApi* | [**ParseNameBatch**](docs/PersonalApi.md#ParseNameBatch) |
  **POST** /api2/json/parseNameBatch | Infer the likely first/last name
  structure of a name, ex. John Smith or SMITH, John or SMITH; John.

  *PersonalApi* | [**ParseNameGeo**](docs/PersonalApi.md#ParseNameGeo) | **GET**
  /api2/json/parseName/{nameFull}/{countryIso2} | Infer the likely first/last
  name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For
  better accuracy, provide a geographic context.

  *PersonalApi* | [**ParseNameGeoBatch**](docs/PersonalApi.md#ParseNameGeoBatch)
  | **POST** /api2/json/parseNameGeoBatch | Infer the likely first/last name
  structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a
  local context improves precision. 

  *PersonalApi* | [**ParsedGenderBatch**](docs/PersonalApi.md#ParsedGenderBatch)
  | **POST** /api2/json/parsedGenderBatch | Infer the likely gender of up to
  1000 fully parsed names, detecting automatically the cultural context.

  *PersonalApi* |
  [**ParsedGenderGeoBatch**](docs/PersonalApi.md#ParsedGenderGeoBatch) |
  **POST** /api2/json/parsedGenderGeoBatch | Infer the likely gender of up to
  1000 fully parsed names, detecting automatically the cultural context.

  *PersonalApi* | [**UsRaceEthnicity**](docs/PersonalApi.md#UsRaceEthnicity) |
  **GET** /api2/json/usRaceEthnicity/{firstName}/{lastName} | [USES 10 UNITS]
  Infer a US resident's likely race/ethnicity according to US Census taxonomy
  W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL
  (black, non latino).

  *PersonalApi* |
  [**UsRaceEthnicityBatch**](docs/PersonalApi.md#UsRaceEthnicityBatch) |
  **POST** /api2/json/usRaceEthnicityBatch | [USES 10 UNITS] Infer up-to 1000 US
  resident's likely race/ethnicity according to US Census taxonomy.

  *PersonalApi* |
  [**UsRaceEthnicityZIP5**](docs/PersonalApi.md#UsRaceEthnicityZIP5) | **GET**
  /api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code} | [USES 10
  UNITS] Infer a US resident's likely race/ethnicity according to US Census
  taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino),
  HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).

  *PersonalApi* |
  [**UsZipRaceEthnicityBatch**](docs/PersonalApi.md#UsZipRaceEthnicityBatch) |
  **POST** /api2/json/usZipRaceEthnicityBatch | [USES 10 UNITS] Infer up-to 1000
  US resident's likely race/ethnicity according to US Census taxonomy, with
  (optional) ZIP code.

  *SocialApi* | [**PhoneCode**](docs/SocialApi.md#PhoneCode) | **GET**
  /api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber} | [USES 11 UNITS]
  Infer the likely country and phone prefix, given a personal name and formatted
  / unformatted phone number.

  *SocialApi* | [**PhoneCodeBatch**](docs/SocialApi.md#PhoneCodeBatch) |
  **POST** /api2/json/phoneCodeBatch | [USES 11 UNITS] Infer the likely country
  and phone prefix, of up to 1000 personal names, detecting automatically the
  local context given a name and formatted / unformatted phone number.

  *SocialApi* | [**PhoneCodeGeo**](docs/SocialApi.md#PhoneCodeGeo) | **GET**
  /api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2} |
  [USES 11 UNITS] Infer the likely phone prefix, given a personal name and
  formatted / unformatted phone number, with a local context (ISO2 country of
  residence).

  *SocialApi* | [**PhoneCodeGeoBatch**](docs/SocialApi.md#PhoneCodeGeoBatch) |
  **POST** /api2/json/phoneCodeGeoBatch | [USES 11 UNITS] Infer the likely
  country and phone prefix, of up to 1000 personal names, with a local context
  (ISO2 country of residence).

  *SocialApi* |
  [**PhoneCodeGeoFeedbackLoop**](docs/SocialApi.md#PhoneCodeGeoFeedbackLoop) |
  **GET**
  /api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}
  | [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix,
  given a personal name and formatted / unformatted phone number, with a local
  context (ISO2 country of residence).



  ## Documentation for Models

   - [APIBillingPeriodUsageOut](docs/APIBillingPeriodUsageOut.md)
   - [APICounterV2Out](docs/APICounterV2Out.md)
   - [APIKeyOut](docs/APIKeyOut.md)
   - [APIPeriodUsageOut](docs/APIPeriodUsageOut.md)
   - [APIPlanOut](docs/APIPlanOut.md)
   - [APIPlanSubscriptionOut](docs/APIPlanSubscriptionOut.md)
   - [APIPlansOut](docs/APIPlansOut.md)
   - [APIServiceOut](docs/APIServiceOut.md)
   - [APIServicesOut](docs/APIServicesOut.md)
   - [APIUsageAggregatedOut](docs/APIUsageAggregatedOut.md)
   - [BatchFirstLastNameDiasporaedOut](docs/BatchFirstLastNameDiasporaedOut.md)
   - [BatchFirstLastNameGenderIn](docs/BatchFirstLastNameGenderIn.md)
   - [BatchFirstLastNameGenderedOut](docs/BatchFirstLastNameGenderedOut.md)
   - [BatchFirstLastNameGeoIn](docs/BatchFirstLastNameGeoIn.md)
   - [BatchFirstLastNameGeoZippedIn](docs/BatchFirstLastNameGeoZippedIn.md)
   - [BatchFirstLastNameIn](docs/BatchFirstLastNameIn.md)
   - [BatchFirstLastNameOriginedOut](docs/BatchFirstLastNameOriginedOut.md)
   - [BatchFirstLastNamePhoneCodedOut](docs/BatchFirstLastNamePhoneCodedOut.md)
   - [BatchFirstLastNamePhoneNumberGeoIn](docs/BatchFirstLastNamePhoneNumberGeoIn.md)
   - [BatchFirstLastNamePhoneNumberIn](docs/BatchFirstLastNamePhoneNumberIn.md)
   - [BatchFirstLastNameUSRaceEthnicityOut](docs/BatchFirstLastNameUSRaceEthnicityOut.md)
   - [BatchNameMatchCandidatesOut](docs/BatchNameMatchCandidatesOut.md)
   - [BatchParsedFullNameGeoIn](docs/BatchParsedFullNameGeoIn.md)
   - [BatchParsedFullNameIn](docs/BatchParsedFullNameIn.md)
   - [BatchPersonalNameGenderedOut](docs/BatchPersonalNameGenderedOut.md)
   - [BatchPersonalNameGeoIn](docs/BatchPersonalNameGeoIn.md)
   - [BatchPersonalNameGeoOut](docs/BatchPersonalNameGeoOut.md)
   - [BatchPersonalNameIn](docs/BatchPersonalNameIn.md)
   - [BatchPersonalNameParsedOut](docs/BatchPersonalNameParsedOut.md)
   - [BillingHistoryOut](docs/BillingHistoryOut.md)
   - [BillingInfoInOut](docs/BillingInfoInOut.md)
   - [ClassifierMetricsOut](docs/ClassifierMetricsOut.md)
   - [CurrenciesOut](docs/CurrenciesOut.md)
   - [DeployUIOut](docs/DeployUIOut.md)
   - [ExpectedClassMetricsOut](docs/ExpectedClassMetricsOut.md)
   - [FeedbackLoopOut](docs/FeedbackLoopOut.md)
   - [FirstLastNameDiasporaedOut](docs/FirstLastNameDiasporaedOut.md)
   - [FirstLastNameGenderIn](docs/FirstLastNameGenderIn.md)
   - [FirstLastNameGenderedOut](docs/FirstLastNameGenderedOut.md)
   - [FirstLastNameGeoIn](docs/FirstLastNameGeoIn.md)
   - [FirstLastNameGeoZippedIn](docs/FirstLastNameGeoZippedIn.md)
   - [FirstLastNameIn](docs/FirstLastNameIn.md)
   - [FirstLastNameOriginedOut](docs/FirstLastNameOriginedOut.md)
   - [FirstLastNameOut](docs/FirstLastNameOut.md)
   - [FirstLastNamePhoneCodedOut](docs/FirstLastNamePhoneCodedOut.md)
   - [FirstLastNamePhoneNumberGeoIn](docs/FirstLastNamePhoneNumberGeoIn.md)
   - [FirstLastNamePhoneNumberIn](docs/FirstLastNamePhoneNumberIn.md)
   - [FirstLastNameUSRaceEthnicityOut](docs/FirstLastNameUSRaceEthnicityOut.md)
   - [InlineObject](docs/InlineObject.md)
   - [InvoiceItemOut](docs/InvoiceItemOut.md)
   - [InvoiceOut](docs/InvoiceOut.md)
   - [NamSorCounterOut](docs/NamSorCounterOut.md)
   - [NameMatchCandidateOut](docs/NameMatchCandidateOut.md)
   - [NameMatchCandidatesOut](docs/NameMatchCandidatesOut.md)
   - [ParsedFullNameGeoIn](docs/ParsedFullNameGeoIn.md)
   - [ParsedFullNameIn](docs/ParsedFullNameIn.md)
   - [PersonalNameGenderedOut](docs/PersonalNameGenderedOut.md)
   - [PersonalNameGeoIn](docs/PersonalNameGeoIn.md)
   - [PersonalNameGeoOut](docs/PersonalNameGeoOut.md)
   - [PersonalNameIn](docs/PersonalNameIn.md)
   - [PersonalNameParsedOut](docs/PersonalNameParsedOut.md)
   - [RomanizedNameOut](docs/RomanizedNameOut.md)
   - [SoftwareVersionOut](docs/SoftwareVersionOut.md)
   - [SourceDetailedMetricsOut](docs/SourceDetailedMetricsOut.md)
   - [SourceMetricsOut](docs/SourceMetricsOut.md)
   - [StripeCardOut](docs/StripeCardOut.md)
   - [StripeCustomerOut](docs/StripeCustomerOut.md)
   - [SystemMetricsOut](docs/SystemMetricsOut.md)
   - [UserInfoOut](docs/UserInfoOut.md)


  ## Documentation for Authorization



  ### api_key


  - **Type**: API key

  - **API key parameter name**: X-API-KEY

  - **Location**: HTTP header




  ## Author


  contact@namsor.com

