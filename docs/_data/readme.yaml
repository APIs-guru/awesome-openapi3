luckymarmot/API-Flow: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44AF8D2:46268FC:678EE3B0 and timestamp 2025-01-21 00:00:48
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
googleapis/gnostic: >
  [![Build
  Status](https://travis-ci.org/googleapis/gnostic.svg?branch=master)](https://travis-ci.org/googleapis/gnostic)


  # ⨁ gnostic


  This repository contains a Go command line tool which converts JSON and YAML

  [OpenAPI](https://github.com/OAI/OpenAPI-Specification) descriptions to and

  from equivalent Protocol Buffer representations.


  [Protocol Buffers](https://developers.google.com/protocol-buffers/) provide a

  language-neutral, platform-neutral, extensible mechanism for serializing

  structured data. **gnostic**'s Protocol Buffer models for the OpenAPI

  Specification can be used to generate code that includes data structures with

  explicit fields for the elements of an OpenAPI description. This makes it

  possible for developers to work with OpenAPI descriptions in type-safe ways,

  which is particularly useful in strongly-typed languages like Go and

  [Dart](https://dart.dev/).


  **gnostic** reads OpenAPI descriptions into these generated data structures,

  reports errors, resolves internal dependencies, and writes the results in a

  binary form that can be used in any language that is supported by the Protocol

  Buffer tools. A plugin interface simplifies integration with API tools written

  in a variety of different languages, and when necessary, Protocol Buffer

  OpenAPI descriptions can be reexported as JSON or YAML.


  **gnostic** compilation code and OpenAPI Protocol Buffer models are

  automatically generated from an

  [OpenAPI JSON Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json).

  Source code for the generator is in the [generate-gnostic](generate-gnostic)

  directory.


  ## Disclaimer


  Feedback and contributions are welcome! Until there is a 1.0 release, please

  consider this prerelease software and work in progress. To ensure stable

  builds, we request that dependent projects always refer to tagged releases of

  **gnostic**.


  ## Requirements


  **gnostic** can be run in any environment that supports [Go](http://golang.org)

  and the

  [Protocol Buffer Compiler](https://github.com/protocolbuffers/protobuf).


  ## Installation and Getting Started


  The following instructions are for installing **gnostic** using

  [Go modules](https://blog.golang.org/using-go-modules), supported by Go 1.11

  and later.


  1.  Get this package by downloading it with `git clone`.

          git clone https://github.com/googleapis/gnostic
          cd gnostic

  2.  Verify that you have a local installation of `protoc`. You can get protoc
      [here](https://github.com/protocolbuffers/protobuf).

  3.  Build **gnostic** with `make`. This uses
      [go generate](https://blog.golang.org/generate) to build support code
      including code generated by `protoc` and the Go protoc plugin, which is
      automatically downloaded from
      [github.com/golang/protobuf](https://github.com/golang/protobuf) by the
      [COMPILE-PROTOS.sh](COMPILE-PROTOS.sh) script. This also builds all plugins
      and associated tools in this repo.

  4.  Verify **gnostic** with `make test`. These tests are run by **gnostic**'s
      continuous integration, so you should expect them to pass for all release
      versions.

  5.  Run **gnostic**. This sample invocation creates a file in the current
      directory named `petstore.pb` that contains a binary Protocol Buffer
      description of a sample API.

              gnostic --pb-out=. examples/v2.0/json/petstore.json

  6.  You can also compile files that you specify with a URL. Here's another way
      to compile the previous example. This time we're creating `petstore.text`,
      which contains a textual representation of the Protocol Buffer description.
      This is mainly for use in testing and debugging.

              gnostic --text-out=petstore.text https://raw.githubusercontent.com/googleapis/gnostic/master/examples/v2.0/json/petstore.json

  7.  For a sample application, see apps/report. This reads a binary Protocol
      Buffer encoding created by **gnostic**.

          go install ./apps/report ## automatically installed by the top-level Makefile
          report petstore.pb

  8.  **gnostic** also supports plugins. **gnostic**'s plugin interface is
      modeled on `protoc`'s
      [plugin.proto](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/compiler/plugin.proto)
      and is described in [plugins/plugin.proto](plugins/plugin.proto). Several
      plugins are implemented in the `plugins` directory. Others, like
      [gnostic-grpc](https://github.com/googleapis/gnostic-grpc) and
      [gnostic-go-generator](https://github.com/googleapis/gnostic-go-generator),
      are published in their own repositories. One such plugin is
      [gnostic-vocabulary](plugins/gnostic-vocabulary), which produces a summary
      of the word usage in an APIs interfaces. You can run `gnostic-vocabulary`
      with the following:

              gnostic examples/v2.0/json/petstore.json --vocabulary_out=.

      This will produce files named `vocabulary.pb` and `vocabulary.json` in
      `examples/v2.0/json`. For the format of `vocabulary.pb`, see
      [metrics/vocabulary.proto](metrics/vocabulary.proto).

  9.  [Optional] A large part of **gnostic** is automatically-generated by the
      [generate-gnostic](generate-gnostic) tool. This uses JSON schemas to
      generate Protocol Buffer language files that describe supported API
      specification formats and Go-language files of code that will read JSON or
      YAML API descriptions into the generated protocol buffer models.
      Pre-generated versions of these files are checked into the
      [openapiv2](openapiv2), [openapiv3](openapiv3), and [discovery](discovery)
      directories. You can regenerate this code with the following:

          go install ./generate-gnostic
          generate-gnostic --v2
          generate-gnostic --v3
          generate-gnostic --discovery

  ## Copyright


  Copyright 2017-2020, Google LLC.


  ## License


  Released under the Apache 2.0 license.
Mermade/swagger2openapi: >
  # OAS-Kit


  This is the mono-repo for the following related projects


  * [swagger2openapi](packages/swagger2openapi/README.md)

  * [oas-validator](packages/oas-validator/README.md)

  * [oas-linter](packages/oas-linter/README.md)

  * [oas-resolver](packages/oas-resolver/README.md)

  * [oas-schema-walker](packages/oas-schema-walker/README.md)

  * [oas-kit-common](packages/oas-kit-common/README.md)

  * [reftools](packages/reftools/README.md)


  ## Documentation


  * [Main site](https://mermade.github.io/oas-kit)


  ## Online converter/validator


  * [OpenAPI-webconverter](https://mermade.org.uk/openapi-converter)


  ## Supported Node.js versions


  Any LTS version from 8 onwards.


  ## Development


  * clone the repository

  * `npm i` in the top level directory

  * `lerna bootstrap` or `npx lerna bootstrap`


  Please try and keep commits related to a single package or piece of functionality. PR in the usual way.


  ## Supporting development


  * [APIs.guru open-collective](https://opencollective.com/openapi-directory)

  * [Linode VPS referral link](https://www.linode.com/?r=5734be467cc501b23267cf66d451bc339042ddfa)
oasis-tcs/odata-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:5120380:52DBA39:678EE3BD and timestamp 2025-01-21 00:01:02
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
xuzhg/OData.OpenAPI: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDC:4925F:44BBF75:46333A5:678EE3EC and timestamp 2025-01-21 00:01:48
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mission-liao/pyswagger: >+
  pyswagger

  =========


  [![Build Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger) enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui). However, when it's time to **unittest**

  your API, the first option you find would be [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better option is us.


  This project is developed after [swagger-py](https://github.com/digium/swagger-py), which is a nicely implemented one, and inspired many aspects of this project. Another project is [flex](https://github.com/pipermerriam/flex), which focuses on parameter validation, try it if you can handle other parts by yourselves. For other projects related to Swagger tools in python, check [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't need to prepare a scala environment) and tries hard to **fully supports** [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from 1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**, **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be organized into a group of App. And external document with self-describing resource is also supported (refer to [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types) described in Swagger. You don't need to touch any json schema when using pyswagger. Limitations like **minimum/maximum** or **enum** are also checked. **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API definition according to spec.

  - builtin client implementation based on various http clients in python. For usage of these clients, please refer to `pyswagger.tests.contrib.client` for details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure [requests](https://github.com/kennethreitz/requests) is installed on your environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}', base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are going to access a remote/local web server, you must install [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about relations between components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc pyswagger/tests

  ```

koumoul-dev/openapi-viewer: >
  # OpenAPI 3 viewer


  This service is designed to easily browse and test a REST API described with the [OpenAPI 3.0 Specification](https://github.com/OAI/OpenAPI-Specification) (fka Swagger Specification). This service mainly uses [vue-openapi](https://github.com/koumoul-dev/vue-openapi) component. It also provides a simple nodeJS backend for proxy purpose.


  See it in action :
   * https://koumoul.com/openapi-viewer/

  ## Sponsors


  | | Click [here to support the development of this project](https://github.com/sponsors/koumoul-dev). |

  |-|-|

  | [<img alt="Koumoul logo" src="https://koumoul.com/static/logo-slogan.png" height="40">](https://koumoul.com) | [Koumoul](https://koumoul.com) develops the Data Fair ecosystem and hosts it as an online service. |

  | [<img alt="Dawizz logo" src="https://dawizz.fr/logo-Dawizz-all-about-your-data-home.png" height="40">](https://dawizz.fr) | [Dawizz](https://dawizz.fr) uses the Data Fair ecosystem inside its platform and supports its development. |


  ## Install


  Clone this project and install dependencies with `npm install` or `yarn` then :

  ```

  npm run dev

  ```


  ## Launch the service with Docker


  A Docker image is publicly available. Run the following command :


  ```

  docker run -p 8080:8080 ghcr.io/data-fair/openapi-viewer

  ```


  and go to this [page](http://localhost:8080/)


  ## Query parameters

  You can use the followings query parameters to prefill viewer

   * **url** : The location of the API documentation file to load, in OpenAPI v3 JSON format.
   * **proxy** : true or false if you want to fetch API documentation file using this service backend as a proxy. Defaults to false.
  Can be usefull if the API description can't be reached with CORS headers. Do not use the proxy if you want to access an API description located on *localhost*.
   * **headers** : URI encoded JSON dictionnary of headers that will be used to prefill parameters if they match. Can be usefull to prefill *x-api-key* or *authorization* headers.
   * **query-params** : URI encoded JSON dictionnary of query parameters that will be used to prefill parameters if they match. Can be usefull to prefill an *organizationId* parameter in a multi-tenant application.
   * **hide-toolbar** : true or false of you want to hide toolbar. This can be usefull for iframe integration. Defaults to false.
contentjet/openapi-ui: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24F9E97:25B2F93:678EE389 and timestamp 2025-01-21 00:00:09
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
sourcey/spectacle: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD5:124B:D160AB:D7D6AC:678EE3D2 and timestamp 2025-01-21 00:01:22
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Rebilly/ReDoc: >
  <div align="center">
    <img alt="ReDoc logo" src="https://raw.githubusercontent.com/Redocly/redoc/master/docs/images/redoc-logo.png" width="400px" />

    **OpenAPI/Swagger-generated API Reference Documentation**

    [![Build Status](https://travis-ci.org/Redocly/redoc.svg?branch=master)](https://travis-ci.org/Redocly/redoc) [![Coverage Status](https://coveralls.io/repos/Redocly/redoc/badge.svg?branch=master&service=github)](https://coveralls.io/github/Redocly/redoc?branch=master) [![dependencies Status](https://david-dm.org/Redocly/redoc/status.svg)](https://david-dm.org/Redocly/redoc) [![devDependencies Status](https://david-dm.org/Redocly/redoc/dev-status.svg)](https://david-dm.org/Redocly/redoc#info=devDependencies) [![npm](http://img.shields.io/npm/v/redoc.svg)](https://www.npmjs.com/package/redoc) [![License](https://img.shields.io/npm/l/redoc.svg)](https://github.com/Redocly/redoc/blob/master/LICENSE)

    [![bundle size](http://img.badgesize.io/https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js?compression=gzip&max=300000)](https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js) [![npm](https://img.shields.io/npm/dm/redoc.svg)](https://www.npmjs.com/package/redoc) [![](https://data.jsdelivr.com/v1/package/npm/redoc/badge)](https://www.jsdelivr.com/package/npm/redoc) [![Docker Build Status](https://img.shields.io/docker/build/redocly/redoc.svg)](https://hub.docker.com/r/redocly/redoc/)


  </div>


  **This is README for `2.0` version of ReDoc (React based). README for `1.x` version is on the branch [v1.x](https://github.com/Redocly/redoc/tree/v1.x)**



  ![ReDoc demo](https://raw.githubusercontent.com/Redocly/redoc/master/demo/redoc-demo.png)


  ## [Live demo](http://redocly.github.io/redoc/)


  [<img alt="Deploy to Github" src="http://i.imgur.com/YZmaqk3.png" height="60px">](https://github.com/Rebilly/generator-openapi-repo#generator-openapi-repo--) [<img alt="ReDoc as a service" src="http://i.imgur.com/edqdCv6.png" height="60px">](https://redoc.ly) [<img alt="Customization services" src="http://i.imgur.com/c4sUF7M.png" height="60px">](https://redoc.ly/#services)


  ## Features

  - Extremely easy deployment

  - [redoc-cli](https://github.com/Redocly/redoc/blob/master/cli/README.md) with ability to bundle your docs into **zero-dependency** HTML file

  - Server Side Rendering ready

  - The widest OpenAPI v2.0 features support (yes, it supports even `discriminator`) <br>

  ![](docs/images/discriminator-demo.gif)

  - OpenAPI 3.0 support

  - Neat **interactive** documentation for nested objects <br>

  ![](docs/images/nested-demo.gif)

  - Code samples support (via vendor extension) <br>

  ![](docs/images/code-samples-demo.gif)

  - Responsive three-panel design with menu/scrolling synchronization

  - Integrate API Introduction into side menu - ReDoc takes advantage of markdown headings from OpenAPI description field. It pulls them into side menu and also supports deep linking.

  - High-level grouping in side-menu via [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) vendor extension

  - Simple integration with `create-react-app` ([sample](https://github.com/APIs-guru/create-react-app-redoc))

  - Branding/customizations via [`theme` option](#redoc-options-object)


  ## Roadmap
    - [x] ~~[OpenAPI v3.0 support](https://github.com/Redocly/redoc/issues/312)~~
    - [x] ~~performance optimizations~~
    - [x] ~~better navigation (menu improvements + search)~~
    - [x] ~~React rewrite~~
    - [x] ~~docs pre-rendering (performance and SEO)~~
    - [ ] ability to simple branding/styling
    - [ ] built-in API Console

  ## Releases

  **Important:** all the 2.x releases are deployed to npm and can be used via jsdeliver:

  - particular release, e.g. `v2.0.0-alpha.15`: https://cdn.jsdelivr.net/npm/redoc@2.0.0-alpha.17/bundles/redoc.standalone.js

  - `next` release: https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js


  Additionally, all the 1.x releases are hosted on our GitHub Pages-based CDN **(deprecated)**:

  - particular release, e.g. `v1.2.0`: https://rebilly.github.io/ReDoc/releases/v1.2.0/redoc.min.js

  - `v1.x.x` release: https://rebilly.github.io/ReDoc/releases/v1.x.x/redoc.min.js

  - `latest` release: https://rebilly.github.io/ReDoc/releases/latest/redoc.min.js - it will point to latest 1.x.x release since 2.x releases are not hosted on this CDN but on unpkg.


  ## Version Guidance

  | ReDoc Release | OpenAPI Specification |

  |:--------------|:----------------------|

  | 2.0.0-alpha.x | 3.0, 2.0              |

  | 1.19.x        | 2.0                   |

  | 1.18.x        | 2.0                   |

  | 1.17.x        | 2.0                   |


  ## Some Real-life usages

  - [Rebilly](https://rebilly.github.io/RebillyAPI)

  - [Docker Engine](https://docs.docker.com/engine/api/v1.25/)

  - [Zuora](https://www.zuora.com/developer/api-reference/)

  - [Shopify Draft Orders](https://help.shopify.com/api/draft-orders)

  - [Discourse](http://docs.discourse.org)

  - [APIs.guru](https://apis.guru/api-doc/)

  - [FastAPI](https://github.com/tiangolo/fastapi)


  ## Deployment


  ### TL;DR


  ```html

  <!DOCTYPE html>

  <html>
    <head>
      <title>ReDoc</title>
      <!-- needed for adaptive design -->
      <meta charset="utf-8"/>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">

      <!--
      ReDoc doesn't change outer page styles
      -->
      <style>
        body {
          margin: 0;
          padding: 0;
        }
      </style>
    </head>
    <body>
      <redoc spec-url='http://petstore.swagger.io/v2/swagger.json'></redoc>
      <script src="https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js"> </script>
    </body>
  </html>

  ```

  That's all folks!


  **IMPORTANT NOTE:** if you work with untrusted user spec, use `untrusted-spec` [option](#redoc-options-object) to prevent XSS security risks.


  ### 1. Install ReDoc (skip this step for CDN)

  Install using [yarn](https://yarnpkg.com):

      yarn add redoc

  or using [npm](https://docs.npmjs.com/getting-started/what-is-npm):

      npm install redoc --save

  ### 2. Reference redoc script in HTML

  For **CDN**:

  ```html

  <script src="https://cdn.jsdelivr.net/npm/redoc/bundles/redoc.standalone.js"> </script>

  ```


  For npm:

  ```html

  <script src="node_modules/redoc/bundles/redoc.standalone.js"> </script>

  ```


  ### 3. Add `<redoc>` element to your page

  ```html

  <redoc spec-url="url/to/your/spec"></redoc>

  ```


  ### 4. Enjoy :smile:



  ## Usage as a React component


  Install peer dependencies required by ReDoc if you don't have them installed already:

      npm i react react-dom mobx@^4.2.0 styled-components

  Import `RedocStandalone` component from 'redoc' module:


  ```js

  import { RedocStandalone } from 'redoc';

  ```


  and use it somewhere in your component:


  ```js

  <RedocStandalone specUrl="url/to/your/spec"/>

  ```


  or


  ```js

  <RedocStandalone spec={/* spec as an object */}/>

  ```


  Also you can pass options:


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    options={{
      nativeScrollbars: true,
      theme: { colors: { primary: { main: '#dd5522' } } },
    }}
  />

  ```


  Here are detailed [options docs](#redoc-options-object).


  You can also specify `onLoaded` callback which will be called each time Redoc has been fully rendered or when error occurs (with an error as the first argument). *NOTE*: It may be called multiply times if you change component properties


  ```js

  <RedocStandalone
    specUrl="http://rebilly.github.io/RebillyAPI/openapi.json"
    onLoaded={error => {
      if (!error) {
        console.log('Yay!');
      }
    }}
  />

  ```


  [**IE11 Support Notes**](docs/usage-with-ie11.md)


  ## The Docker way


  ReDoc is available as pre-built Docker image in official [Docker Hub repository](https://hub.docker.com/r/redocly/redoc/). You may simply pull & run it:

      docker pull redocly/redoc
      docker run -p 8080:80 redocly/redoc

  Also you may rewrite some predefined environment variables defined in [Dockerfile](./config/docker/Dockerfile). By default ReDoc starts with demo Petstore spec located at `http://petstore.swagger.io/v2/swagger.json`, but you may change this URL using environment variable `SPEC_URL`:

      docker run -p 8080:80 -e SPEC_URL=https://api.example.com/openapi.json redocly/redoc

  ## ReDoc CLI


  [See here](https://github.com/Redocly/redoc/blob/master/cli/README.md)


  ## Configuration


  ### Security Definition location

  You can inject Security Definitions widget into any place of your specification `description`. Check out details [here](docs/security-definitions-injection.md).


  ### Swagger vendor extensions

  ReDoc makes use of the following [vendor extensions](https://swagger.io/specification/#specificationExtensions):

  * [`x-logo`](docs/redoc-vendor-extensions.md#x-logo) - is used to specify API logo

  * [`x-traitTag`](docs/redoc-vendor-extensions.md#x-traitTag) - useful for handling out common things like Pagination, Rate-Limits, etc

  * [`x-code-samples`](docs/redoc-vendor-extensions.md#x-code-samples) - specify operation code samples

  * [`x-examples`](docs/redoc-vendor-extensions.md#x-examples) - specify JSON example for requests

  * [`x-nullable`](docs/redoc-vendor-extensions.md#nullable) - mark schema param as a nullable

  * [`x-displayName`](docs/redoc-vendor-extensions.md#x-displayname) - specify human-friendly names for the menu categories

  * [`x-tagGroups`](docs/redoc-vendor-extensions.md#x-tagGroups) - group tags by categories in the side menu

  * [`x-servers`](docs/redoc-vendor-extensions.md#x-servers) - ability to specify different servers for API (backported from OpenAPI 3.0)

  * [`x-ignoredHeaderParameters`](docs/redoc-vendor-extensions.md#x-ignoredHeaderParameters) - ability to specify header parameter names to ignore


  ### `<redoc>` options object

  You can use all of the following options with standalone version on <redoc> tag by kebab-casing them, e.g. `scrollYOffset` becomes `scroll-y-offset` and `expandResponses` becomes `expand-responses`.


  * `untrustedSpec` - if set, the spec is considered untrusted and all HTML/markdown is sanitized to prevent XSS. **Disabled by default** for performance reasons. **Enable this option if you work with untrusted user data!**

  * `scrollYOffset` - If set, specifies a vertical scroll-offset. This is often useful when there are fixed positioned elements at the top of the page, such as navbars, headers etc;

  `scrollYOffset` can be specified in various ways:
    * **number**: A fixed number of pixels to be used as offset;
    * **selector**: selector of the element to be used for specifying the offset. The distance from the top of the page to the element's bottom will be used as offset;
    * **function**: A getter function. Must return a number representing the offset (in pixels);
  * `suppressWarnings` - if set, warnings are not rendered at the top of documentation (they still are logged to the console).

  * `lazyRendering` - _Not implemented yet_ ~~if set, enables lazy rendering mode in ReDoc. This mode is useful for APIs with big number of operations (e.g. > 50). In this mode ReDoc shows initial screen ASAP and then renders the rest operations asynchronously while showing progress bar on the top. Check out the [demo](\\redocly.github.io/redoc) for the example.~~

  * `hideHostname` - if set, the protocol and hostname is not shown in the operation definition.

  * `expandResponses` - specify which responses to expand by default by response codes. Values should be passed as comma-separated list without spaces e.g. `expandResponses="200,201"`. Special value `"all"` expands all responses by default. Be careful: this option can slow-down documentation rendering time.

  * `requiredPropsFirst` - show required properties first ordered in the same order as in `required` array.

  * `sortPropsAlphabetically` - sort properties alphabetically

  * `showExtensions` - show vendor extensions ("x-" fields). Extensions used by ReDoc are ignored. Can be boolean or an array of `string` with names of extensions to display

  * `noAutoAuth` - do not inject Authentication section automatically

  * `pathInMiddlePanel` - show path link and HTTP verb in the middle panel instead of the right one

  * `hideLoading` - do not show loading animation. Useful for small docs

  * `nativeScrollbars` - use native scrollbar for sidemenu instead of perfect-scroll (scrolling performance optimization for big specs)

  * `hideDownloadButton` - do not show "Download" spec button. **THIS DOESN'T MAKE YOUR SPEC PRIVATE**, it just hides the button.

  * `disableSearch` - disable search indexing and search box

  * `onlyRequiredInSamples` - shows only required fields in request samples.

  * `theme` - ReDoc theme. Not documented yet. For details check source code: [theme.ts](https://github.com/Redocly/redoc/blob/master/src/theme.ts)


  ## Advanced usage of standalone version

  Instead of adding `spec-url` attribute to the `<redoc>` element you can initialize ReDoc via globally exposed `Redoc` object:

  ```js

  Redoc.init(specOrSpecUrl, options, element, callback?)

  ```


  - `specOrSpecUrl` is either JSON object with specification or an URL to the spec in `JSON` or `YAML` format

  - `options` [options object](#redoc-options-object)

  - `element` DOM element to put ReDoc into

  - `callback` (optional) - callback to be called after Redoc has been fully rendered. It is also called also on errors with error as the first argument


  ```js

  Redoc.init('http://petstore.swagger.io/v2/swagger.json', {
    scrollYOffset: 50
  }, document.getElementById('redoc-container'))

  ```


  -----------

  ## Development

  see [CONTRIBUTING.md](.github/CONTRIBUTING.md)
mermade/widdershins: >
  # widdershins

  OpenAPI / Swagger / AsyncAPI / Semoasa definition to [Slate](https://github.com/lord/slate) /

  [Shins](https://github.com/mermade/shins) compatible markdown


  ![Build](https://img.shields.io/travis/Mermade/widdershins/master.svg) [![Tested on APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru) [![Tested on Mermade OpenAPIs](https://img.shields.io/badge/Additional%20Specs-419-brightgreen.svg)](https://github.com/mermade/OpenAPI_specifications)

  [![Known Vulnerabilities](https://snyk.io/test/npm/widdershins/badge.svg)](https://snyk.io/test/npm/widdershins)


  <img src="http://mermade.github.io/widdershins/logo.png" width="247px" height="250px" />


  ### Widdershins *adverb*:

  * In a direction contrary to the sun's course;

  * anticlockwise;

  * helping you produce static documentation from your OpenAPI 3.0 / Swagger 2.0 / AsyncAPI 1.x / Semoasa 0.1.0 definition


  ![Widdershins screenshot](https://mermade.github.io/widdershins/screenshot.png)


  ### News


  * Version 4.0 changes:
    * Now uses Promises not callbacks
    * Option to output html directly, and to ReSpec format
    * Unified JavaScript and Node.js code-samples, PHP added
    * `restrictions` column (`readOnly`/`writeOnly`) added to schema templates
    * Numerous bug fixes
  * As of v3.0.0 Widdershins no longer expands the definition of OpenAPI body parameters / requestBodies by default, unless they have an inline schema. You can restore the old behaviour by using the `--expandBody` option.

  * You may limit the depth of schema examples using the `--maxDepth` option. The default is 10.

  * To omit schemas entirely, please copy and customise the `main.dot` template.

  * As of v3.1.0 Widdershins includes a generated `Authorization` header in OpenAPI code samples. If you wish to omit this, see [here](/templates/openapi3/README.md).


  ### To install


  * Clone the git repository, and `npm i` to install dependencies, or

  * `npm install [-g] widdershins` to install globally


  ### Getting started


  Widdershins is generally used as a stage in an API documentation pipeline. The pipeline begins with an API definition in OpenAPI 3.x, OpenAPI 2.0 (fka Swagger), API Blueprint, AsyncAPI or Semoasa format. Widdershins converts this description into markdown suitable for use by a **renderer**, such as [Slate](https://github.com/lord/slate), [Shins](https://github.com/mermade/shins) or html suitable for use with [ReSpec](https://github.com/w3c/respec).


  If you need to create your input API definition, [this list of available editors](https://apis.guru/awesome-openapi3/category.html#editors) may be useful.


  More in-depth documentation is [available here](https://mermade.github.io/widdershins).


  ### Examples


  ```

  node widdershins --search false --language_tabs 'ruby:Ruby' 'python:Python' --summary defs/petstore3.json -o petstore3.md

  ```


  ### Options


  | CLI parameter name | JavaScript parameter name | Type | Default value | Description |

  | --- | --- | --- | --- | --- |

  | --customApiKeyValue | options.customApiKeyValue | `string` | `ApiKey` | Set a custom API key value to use as the API key in generated code examples. |

  | --expandBody | options.expandBody | `boolean` | `false` | If a method's requestBody parameter refers to a schema by reference (not with a inline schema), by default, Widdershins shows only a reference to this parameter. Set this option to true to expand the schema and show all properties in the request body. |

  | --headings | options.headings | `integer` | 2 | Set the value of the `headingLevel` parameter in the header so Shins knows how many heading levels to show in the table of contents. Currently supported only by Shins, not by Slate, which lacks this feature. |

  | --omitBody | options.omitBody | `boolean` | `false` | By default, Widdershins includes the body parameter as a row in the parameters table before the rows that represent the fields in the body. Set this parameter to omit that body parameter row. |

  | --omitHeader | options.omitHeader | `boolean` | `false` | Omit the header / YAML front-matter in the generated Markdown file. |

  | --resolve | options.resolve | `boolean` | `false` | Resolve external $refs, using the `source` parameter or the input file as the base location. |

  | --shallowSchemas | options.shallowSchemas | `boolean` | `false` | When referring to a schema with a $ref, don't show the full contents of the schema. |

  | N/A | options.source | `string` | None | The absolute location or URL of the source file to use as the base to resolve relative references ($refs) from; required if options.resolve is set to true. For CLI commands, Widdershins uses the input file as the base for the $refs. |

  | --summary | options.tocSummary | `boolean` | `false` | Use the operation summary as the TOC entry instead of the ID. |

  | --useBodyName | options.useBodyName | `boolean` | Use original param name for OpenAPI 2.0 body parameter. |

  | -v, --verbose | options.verbose | `boolean` | `false` | Increase verbosity. |

  | -h, --help | options.help | `boolean` | `false` | Show help. |

  | --version | options.version | `boolean` | `false` | Show version number. |

  | -c, --code | options.codeSamples | `boolean` | `false` | Omit generated code samples. |

  | --httpsnippet | options.httpsnippet | `boolean` | `false` | Use httpsnippet to generate code samples. |

  | -d, --discovery | options.discovery | `boolean` | `false` | Include schema.org WebAPI discovery data. |

  | -e, --environment | N/A | `string` | None | File to load config options from. |

  | -i, --includes | options.includes | `string` | None | List of files to put in the `include` header of the output Markdown. Processors such as Shins can then import the contents of these files. |

  | -l, --lang | options.lang | `boolean` | `false` | Generate the list of languages for code samples based on the languages used in the source file's `x-code-samples` examples. |

  | --language_tabs | options.language_tabs | `string` | (Differs for each input type) | List of language tabs for code samples using language[:label[:client]] format, such as `javascript:JavaScript:request`. |

  | -m, --maxDepth | options.maxDepth | `integer` | 10 | Maximum depth to show for schema examples. |

  | -o, --outfile | N/A | `string` | None | File to write the output markdown to. If left blank, Widdershins sends the output to stdout. |

  | -r, --raw | options.raw | `boolean` | `false` | Output raw schemas instead of example values. |

  | -s, --search | options.search | `boolean` | `true` | Set the value of the `search` parameter in the header so Markdown processors like Shins include search or not in their output. |

  | -t, --theme | options.theme | `string` | darkula | Syntax-highlighter theme to use. |

  | -u, --user_templates | options.user_templates | `string` | None | Directory to load override templates from. |

  | -x, --experimental | options.experimental | `boolean` |  | For backwards compatibility only; ignored. |

  | -y, --yaml | options.yaml | `boolean` | `false` | Display JSON schemas in YAML format. |

  |  | options.templateCallback | `function` | None | A `function` that is called before and after each template (JavaScript code only). |

  |  | options.toc_footers | `object` | A map of `url`s and `description`s to be added to the ToC footers array (JavaScript code only). |


  In Node.JS code, create an options object and pass it to the Widdershins `convert` function, as in this example:


  ```javascript

  const converter = require('widdershins');

  let options = {}; // defaults shown

  options.codeSamples = true;

  options.httpsnippet = false;

  //options.language_tabs = [];

  //options.language_clients = [];

  //options.loadedFrom = sourceUrl; // only needed if input document is relative

  //options.user_templates = './user_templates';

  options.templateCallback = function(templateName,stage,data) { return data };

  options.theme = 'darkula';

  options.search = true;

  options.sample = true; // set false by --raw

  options.discovery = false;

  options.includes = [];

  options.shallowSchemas = false;

  options.tocSummary = false;

  options.headings = 2;

  options.yaml = false;

  //options.resolve = false;

  //options.source = sourceUrl; // if resolve is true, must be set to full path or URL of the input document

  converter.convert(apiObj,options)

  .then(str => {
    // str contains the converted markdown
  })

  .catch(err => {
    console.error(err);
  });

  ```


  To only include a subset of the pre-defined language-tabs, or to rename their display-names, you can override the `options.language_tabs`:


  ```javascript

  options.language_tabs = [{ 'go': 'Go' }, { 'http': 'HTTP' }, { 'javascript': 'JavaScript' }, { 'javascript--node': 'Node.JS' }, { 'python': 'Python' }, { 'ruby': 'Ruby' }];

  ```


  The `--environment` option specifies a JSON or YAML-formatted `options` object, for example:


  ```json

  {
    "language_tabs": [{ "go": "Go" }, { "http": "HTTP" }, { "javascript": "JavaScript" }, { "javascript--node": "Node.JS" }, { "python": "Python" }, { "ruby": "Ruby" }],
    "verbose": true,
    "tagGroups": [
      {
        "title": "Companies",
        "tags": ["companies"]
      },
      {
        "title": "Billing",
        "tags": ["invoice-create", "invoice-close", "invoice-delete"]
      }
    ]
  }

  ```


  You can also use the environment file to group OAS/Swagger tagged paths together to create a more elegant table of contents, and overall page structure.


  If you need to support a version of Slate \<v1.5.0 (or a renderer which also doesn't support display-names for language-tabs, such as `node-slate`, `slate-node` or `whiteboard`), you can use the `--environment` option with the included `whiteboard_env.json` file to simply achieve this.


  If you are using the `httpsnippet` option to generate code samples, you can specify the client library used to perform the requests for each language by overriding the `options.language_clients`:


  ```javascript

  options.language_clients = [{ 'shell': 'curl' }, { 'node': 'request' }, { 'java': 'unirest' }];

  ```


  If the language name differs between the markdown name required to syntax highlight and the httpsnippet required target, both can be specified in the form `markdown--target`.


  To see the list of languages and clients supported by httpsnippet, [click here](https://github.com/Kong/httpsnippet/tree/master/src/targets).


  The `loadedFrom` option is only needed where the OpenAPI / Swagger definition does not specify a host, and (as per the OpenAPI [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields)) the API endpoint is deemed to be based on the source URL

  the definition was loaded from.


  To see the list of highlight-js syntax highlighting themes, [click here](https://highlightjs.org/static/demo/).


  Schema.org WebAPI discovery data is included if the `discovery` option above is set `true`. See the W3C [WebAPI Discovery Community Group](https://www.w3.org/community/web-api-discovery/) for more information.


  ## Language tabs


  Widdershins supports the `x-code-samples` [vendor-extension](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#operation-object-vendor-extensions) to completely customise your documentation. Alternatively, you can edit the default code-samples in the `templates` sub-directory, or override them using the `user_templates` option to specify a directory containing your templates.


  Widdershins supports the use of multiple language tabs with the same language (i.e. plain Javascript and Node.Js). To use this support you must be using Slate (or one of its ports compatible with) version 1.5.0 or higher. [Shins](https://github.com/mermade/shins) versions track Slate version numbers.


  ## Templates


  By default, Widdershins uses the templates in its `templates/` folder to generate the Markdown output. To customize the templates, copy some or all of them to a folder and pass their location to the `user_templates` parameter.


  The templates include `.dot` templates and `.def` partials. To override a `.dot` template, you must copy it and the child `.def` partials that the template references. Similarly, to override a `.def` partial, you must also copy the parent `.dot` template. For OpenAPI 3, the primary template is `main.dot` and its main child partials are `parameters.def`, `responses.def`, and `callbacks.def`.


  This means that it is usually easiest to copy all `.dot` and `.def` files to your user templates directory so you don't skip a template or partial. To bring in changes from Widdershins updates, you can use a visual `diff` tool which can run across two directories, such as [Meld](http://meldmerge.org/) or [WinMerge](http://winmerge.org).


  ### Template syntax


  Templates are compiled with [doT.js](https://github.com/olado/doT#readme).


  Templates have access to a `data` object with a range of properties based on the document context. For information about the parameters, see the README file for the appropriate templates:


  * [Swagger 2.0 / OpenAPI 3.0.x template parameters](/templates/openapi3/README.md)

  * [AsyncAPI 1.x template parameters](/templates/asyncapi1/README.md)

  * [Semoasa 0.1.0 template parameters](/templates/semoasa/README.md)


  To print the value of a parameter or variable in a template, use the code `{{=parameterName}}`. For example, to print the title of an OpenAPI 3 spec (from its `info.title` field), use the code `{{=data.api.info.title}}`.


  To loop through values in an array, use the code `{{~ arrayName :tempVariable}}` to start the loop and the code `{{~}}` to close the loop. For example, the OpenAPI 3 partial `parameters.def` uses this code to create a table of the parameters in an operation:

  ```

  |Name|In|Type|Required|Description|

  |---|---|---|---|---|

  {{~ data.parameters :p}}|{{=p.name}}|{{=p.in}}|{{=p.safeType}}|{{=p.required}}|{{=p.shortDesc || 'none'}}|

  {{~}}

  ```


  For if/then logic, use the code `{{? booleanExpression}}` to start the code block and the code `{{?}}` to close the block. For example, the OpenAPI 3 `main.dot` template calls the `security.def` partial to show information about the security schemes if the OpenAPI spec includes a `securitySchemes` section:

  ```

  {{? data.api.components && data.api.components.securitySchemes }}

  {{#def.security}}

  {{?}}

  ```


  You can run arbitrary JavaScript within a template by inserting a code block within curly braces. For example, this code creates a variable and references it with normal doT.js syntax later in the template:

  ```

  {{ {

  let message = "Hello!";

  } }}


  {{=message}}

  ```


  ### Template callbacks


  The `templateCallback` parameter points to a function that Widdershins calls before and after each template runs. The callback function receives a `data` object that contains the spec that Widdershins is processing; the function must return this object. You can use callback functions only if you are calling Widdershins from JavaScript code, not from the command line.


  Widdershins passes these variables to the callback function:

  - `templateName`: The name of the template, such as `main`.

  - `stage`: Whether Widdershins is calling the callback function before (`pre`) or after (`post`) the template.

  - `data`: An object that contains the data that Widdershins is processing. You can mutate the `data` object in any way you see fit, but the function must return it whether it changes it or not. Content that you put in the `data.append` property is appended to the current output stream.


  For example, this JavaScript code prints the name of the template and the processing stage in the output Markdown:

  ```javascript

  'use strict';


  const converter = require('widdershins');

  const fs = require('fs');


  let options = {};

  options.templateCallback = myCallBackFunction;


  function myCallBackFunction(templateName, stage, data) {
    let statusString = "Template name: " + templateName + "\n";
    statusString += "Stage: " + stage + "\n";
    data.append = statusString;
    return data;
  }


  const apiObj = JSON.parse(fs.readFileSync('defs/petstore3.json'));


  converter.convert(apiObj, options)

  .then(str => {
    fs.writeFileSync('petstore3Output.md', str, 'utf8');
  });

  ```


  ## Tests


  To run a test-suite:


  ```

  node testRunner {path-to-APIs}

  ```


  The test harness currently expects `.yaml` or `.json` files and has been tested against


  * [APIs.guru](https://github.com/APIs-guru/OpenAPI-directory)

  * [Mermade OpenAPI definitions collection](https://github.com/mermade/OpenAPI-definitions)


  ### Comparison between this and other OpenAPI / Swagger to Slate tools


  [Blog posting](https://dev.to/mikeralphson/comparison-of-various-openapiswagger-to-slate-conversion-tools) by the author of Widdershins.


  ### Acknowledgements


  * [@latgeek](https://github.com/LatGeek) for the logo.

  * [@vfernandestoptal](https://github.com/vfernandestoptal) for the httpsnippet support.


  ### Widdershins in the wild


  Please feel free to add a link to your API documentation here.


  * [GOV.UK Content API v1.0.0](https://content-api.publishing.service.gov.uk/reference.html)

  * [GOV UK Digital Marketplace API v1.0.0](https://alphagov.github.io/digitalmarketplace-api-docs/#digital-marketplace-api-v1-0-0)

  * [Capital One API](https://www.capitalone.co.uk/developer/api/)

  * [Cognite Data API](http://doc.cognitedata.com/)

  * [SpeckleWorks API](https://speckleworks.github.io/SpeckleSpecs)

  * [Bank by API](https://tbicr.github.io/bank-api/bank-api.html)

  * [Open EO API](https://open-eo.github.io/openeo-api-poc/apireference/index.html)

  * [Split Payments API](http://docs.split.cash/)

  * [LeApp daemon API](https://leapp-to.github.io/shins/index.html)

  * [Shutterstock API](https://api-reference.shutterstock.com/)

  * [Shotstack Video Editing API](https://shotstack.io/docs/api/index.html)


  ### Widdershins and Shins


  * `Widdershins` works well with Slate, but for a solely Node.js-based experience, why not try the [Shins](https://github.com/mermade/shins) port?
Rebilly/generator-openapi-repo: >
  # create-openapi-repo


  [![NPM version][npm-image]][npm-url] [![Dependency Status][daviddm-image]][daviddm-url]


  > Generate an organized multi-file OpenAPI repository.


  <center>


  <img src="./logo.png" width="500px"/>


  </center>


  ## Who?

  You! Hello.  Do you need to write or contribute to an OpenAPI definition?  If so, read on...


  ## What?

  We recommend a docs-like-code approach to OpenAPI definitions:

  - Write it using your favorite text-editor or IDE (we love VSCode).

  - Organize it into multiple files and folders to make it easy to navigate.

  - Store it using source control (such as GitHub).

  - Continuously validate it using our free [openapi-cli tool](https://github.com/redocly/openapi-cli) or our free continuous validation service (coming soon).

  - Bundle it (for a smaller footprint to use in other tools or for tools that do not support a multi-file format).


  ## Why?

  There are a few advantages in hosting your API definition on GitHub:
   - Community engagement (PR's and issues -- if you have a public repo)
   - Advertisment in the GitHub community
   - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)
   - Revision history, branching, CI
   - Review and approval workflows using Pull Requests
   - Fast on-boarding time (developers and tech writers know how to use GitHub :smile:)
   - Fully compatible with Redocly API Reference too

   There are also some advantages to a multi-file YAML format OpenAPI definition:
   - Reuse schema objects to keep things DRY (don't repeat yourself) 
   - Smaller diffs compared to JSON (especially for markdown descriptions)
   - Easier to navigate
   - Easier to edit with confidence

  ## Features

  This generator helps to create a GitHub repo with the following features:
   - Split a big (or small) OpenAPI definition into smaller files organized into folders
   - Bundle it into a single file for deployment
   - Continuous integration/deployment on Travis or Redocly Workflows
   - Code samples as separate files
   - Automate deployment of your OpenAPI definition and docs
   - OpenAPI definition is validated after each commit
   - Live editing in your editor of choice :heart_eyes:

  ## Structure


  You will have a structure similar to this:

  ```
      ├── .redocly.yaml
      ├── LICENSE
      ├── README.md
      ├── docs
      │   ├── favicon.png
      │   └── index.html
      ├── openapi
      │   ├── README.md
      │   ├── code_samples
      │   │   ├── C#
      │   │   │   └── echo
      │   │   │       └── post.cs
      │   │   ├── PHP
      │   │   │   └── echo
      │   │   │       └── post.php
      │   │   └── README.md
      │   ├── components
      │   │   └── README.md
      │   └── paths
      │       └── README.md
      └── package.json
  ```


  However, you can adjust it to any structure you prefer.


  The `openapi` folder is where your OpenAPI definition will live.  Inside there, and the sub-folders, there are `README.md` files to help guide you further. This is also where your entrypoint `openapi.yaml` will live.


  The `components` folder is where you will organize sub-folders such as `schema` to define your schema.


  The `paths` folder is where you will organize your paths. There will be a 'README.md' file in there with suggestions for how to organize it into specially named files (or folders) that use an `@` in place of a `/` (because files cannot have a `/` character in them).  You will also be able to use path parameters by wrapping them in curly braces `{example}`.


  The `.redocly.yaml` file is a universal configuration for various Redocly tools including the lint tool and reference doc engine.


  ## Commands


  The generated repository includes installing a dependency for our `openapi-cli` tool which supports commands such as `validate`, `bundle`, and more.  There are scripted shortcuts defined in the repository's `package.json`.  



  ## Examples of generated repositories

  - https://github.com/Rebilly/RebillyAPI

  - https://github.com/thingful/openapi-spec

  - https://github.com/TwineHealth/TwineDeveloperDocs


  ## How to generate your repository


  We assume you already have [node.js](https://nodejs.org/) installed.


  - Install `create-openapi-repo` globally:

  ```bash

  npm install -g create-openapi-repo

  ```

  or use [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):


  We'll use `npx` in this example.  However, remove `npx` if you installed it globally.


  ```bash

  npx create-openapi-repo

  ```


  You will be presented with some questions. You can create a new definition or use an existing definition to initialize your project.


  Please note, if you do start a new one, remember to [create a GitHub repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github) where your OpenAPI definition will live.


  If you use the prior version of this generated repository, please read the following upgrade instructions.


  #### Upgrading from a prior version


  Migrate your repository from a previous structure of OpenAPI repo to this newer structure with our migration tool. 


  Run this in the root folder of your repo.


  ```bash

  npx create-openapi-repo --migrate-2-3

  ```


  Note: the migration tool does not migrate plugins automatically. You would need to manually add them to the `transformers` folder. 


  ## Support


  Thank you for wanting to support us. Here are some ideas how to support us:


  * Star us

  * Tell a friend or colleague about us (or Tweet about us)

  * Write an article about it (and let us know) -- open an issue to let us know, with the link.

  * Consider our commercial products if are looking for automation to ease the docs-like code workflow, hosting along with conveniences like custom domains, access controls and previews, API reference documentation, or a full developer portal:  https://redoc.ly


  [npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg

  [npm-url]: https://npmjs.org/package/generator-openapi-repo

  [daviddm-image]: https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io

  [daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo
temando/open-api-renderer: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC7:1EDF9F:250D9EA:25C70A8:678EE3DF and timestamp 2025-01-21 00:01:35
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
RepreZen/KaiZen-OpenAPI-Editor: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24F424D:25AD0C6:678EE36B and timestamp 2025-01-20 23:59:39
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-api/swagger-editor: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC7:1EDF9F:250C3AB:25C59F5:678EE3D9 and timestamp 2025-01-21 00:01:29
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apicurio/apicurio-studio: >
  [![CircleCI](https://circleci.com/gh/Apicurio/apicurio-studio.svg?style=svg)](https://circleci.com/gh/Apicurio/apicurio-studio)


  # The apicurio-studio project (Open Source API Design Studio)


  ## Summary


  This is the official Git repository for the apicurio studio project:  http://www.apicur.io/


  The apicurio studio project is a standalone API design studio that can be used to create

  new or edit existing API designs (using the OpenAPI specification).


  ## Get the code


  The easiest way to get started with the code is to [create your own fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:

  ```bash
    $ git clone git@github.com:<you>/apicurio-studio.git
    $ cd apicurio-studio
    $ git remote add upstream git://github.com/apicurio/apicurio-studio.git
  ```

  At any time, you can pull changes from the upstream and merge them onto your master:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git push origin                   # pushes all the updates to your fork, which should be in-sync with 'upstream'
  ```

  The general idea is to keep your 'master' branch in-sync with the 'upstream/master'.


  ## Building apicurio-studio


  ### Requirements

  - Maven 3.x

  - Java 8+


  The following command compiles all the code, installs the JARs into your local Maven repository, and runs all of the unit tests:

  ```bash
    $ mvn clean install
  ```

  ## Quickstart (i.e. How To Run It)


  The fastest way to get started using Apicurio Studio is to use the quickstart.  The Apicurio quickstart is produced as part 

  of the full maven build - you can find it in `distro/quickstart/target` as a ZIP file.  To start up the quickstart, use the 

  following commands from the top-level of the repository:


  ```bash
    $ rm -rf ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT
    $ unzip distro/quickstart/target/apicurio-studio-*-quickstart.zip -d distro/quickstart/target
    $ ./distro/quickstart/target/apicurio-studio-*-SNAPSHOT/bin/standalone.sh -c standalone-apicurio.xml
  ```


  This will start Wildfly on your local machine and you can access the UI at [http://localhost:8080](http://localhost:8080).


  ## Contribute fixes and features


  Apicurio Studio is open source, and we welcome anybody who wants to participate and contribute!


  Please follow [Setting your development environment](https://apicurio-studio.readme.io/docs/setting-up-a-development-environment) guide to setup your local machine for development.  The guide assumes the use of the Eclipse IDE for Java

  development (backend) but is not required - developers should be able to adapt the instructions to their particular

  environment.


  If you want to fix a bug or make any changes, please [log an issue in GitHub](https://github.com/apicurio/apicurio-studio/issues) describing the bug

  or new feature. Then we highly recommend making the changes on a topic branch named with the JIRA issue number. For example, this command creates

  a branch for the APISTUDIO-1234 issue:

  ```bash
    $ git checkout -b apicurio-studio-1234
  ```

  After you're happy with your changes and a full build (with unit tests) runs successfully, commit your

  changes on your topic branch. Then it's time to check for and pull any recent changes that were made in

  the official repository:

  ```bash
    $ git checkout master               # switches to the 'master' branch
    $ git pull upstream master          # fetches all 'upstream' changes and merges 'upstream/master' onto your 'master' branch
    $ git checkout apicurio-studio-1234   # switches to your topic branch
    $ git rebase master                 # reapplies your changes on top of the latest in master
                                        # (i.e., the latest from master will be the new base for your changes)
  ```

  If the pull grabbed a lot of changes, you should rerun your build to make sure your changes are still good.

  You can then either [create patches](http://progit.org/book/ch5-2.html) (one file per commit, saved in `~/apicurio-studio-1234`) with

  ```bash
    $ git format-patch -M -o ~/apicurio-studio-1234 orgin/master
  ```

  and upload them to the JIRA issue, or you can push your topic branch and its changes into your public fork repository

  ```bash
    $ git push origin apicurio-studio-1234         # pushes your topic branch into your public fork of apicurio-studio
  ```

  and [generate a pull-request](http://help.github.com/pull-requests/) for your changes.


  We prefer pull-requests, because we can review the proposed changes, comment on them,

  discuss them with you, and likely merge the changes right into the official repository.


  Please try to create one commit per feature or fix, generally the easiest way to do this is via [git squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the repository history with checkpoint commits.


  ## Code Formatting


  When you are hacking on some apicurio-studio code, we'd really appreciate it if you followed the

  apicurio-studio coding standards.  If you're using Eclipse, you can find a code formatter config

  file here:

  ```

  tools/src/eclipse/apicurio-eclipse-formatter.xml

  ```

  You should be able to import that guy straight into Eclipse by going to

  *Window->Preferences :: Java/Code Style/Formatter*
apiacademy/rapido-web: "# rápido-web\r

  \r

  Rapido is an API design tool that facilitates the _sketching_ phase of
  design.  At a minimum, a sketch should be:\r

  \r

  * easy to create\r

  * easy to dispose\r

  * easy to translate into a prototype\r

  \r

  Sketching allows a designer to perform many iterations of an early design if
  the cost of creation is very low.  This promotes experimentation and
  ideation.  Early iterations are important for API design as it is difficult to
  change an API once it is released and being used.\r

  \r

  ## Rapido Design Principles\r

  \r

  1.  Rapid design - a user should be able to create a complete API sketch
  within five minutes\r

  2.  Safe Disposability - users should feel safe when starting a design over
  (through archiving and peristence of previous designs )\r

  3.  Unidirectional - Rapido sketches can be exported to later lifecycle
  stages, but designs cannot be imported.  \r

  \r

  ## Development Setup\r

  \r

  Rapido requires NodeJS and npm and a [backend
  Rapido](http://github.com/apiacademy/rapido-backend) implementation.\r

  \r

  To install:\r

  `npm install`\r

  \r

  To start:\r

  `npm start`\r

  \r

  To test with Chrome:\r

  'npm test'\r\n"
mermade/openapi-gui: >+
  OpenAPI-GUI

  ===========


  OpenAPI-GUI is a GUI for creating and editing OpenAPI version 3.0.x JSON/YAML definitions. In its current form it is most useful as a tool for starting off and editing simple OpenAPI definitions. Imported OpenAPI 2.0 definitions are automatically converted to v3.0.


  ![Screenshot](https://github.com/Mermade/openapi-gui/blob/master/img/screenshot.png?raw=true)


  For the previous Swagger / OpenAPI 2.0-only version see [here](https://mikeralphson.github.io/openapi-gui). This version is currently **unmaintained** apart from security fixes.


  This project was initially a fork of [Daryl Kuhn's IODoctor](https://github.com/darrylkuhn/iodoctor/tree/angular-port), which in turn was inspired by [IODoctor by Brandon West](https://github.com/brandonmwest/iodoctor) which was written in Ruby. The complete history of the project is maintained on GitHub.


  Description

  -----------

  ### How It Works


  Select an existing OpenAPI 2.0 or 3.0.x definition to upload, or create a new definition and start adding Paths, Operations, and Parameters. When an existing definition is used, it is parsed and forms for editing each Path, Operation and Parameter will be created.


  You can load an existing definition by appending a `?url=` query parameter to the initial start page.


  Click an item from the menu on the left to begin editing. View the JSON/YAML output at any time by selecting one of the "Export" tabs. When finished, download the output to save it locally or copy it your clipboard. OpenAPI-GUI only stores one definition at a time, and this is in your browser's local-storage. Make sure you save your JSON/YAML output locally.


  Before performing a destructive action, OpenAPI-GUI saves the current state of the definition. At all other times you must remember to select Save manually.


  ### Technology


  OpenAPI-GUI runs entirely client-side using a number of Javascript frameworks including [Vue.JS](https://vuejs.org/), [jQuery](https://jquery.com/) and [Bulma](http://bulma.io/) for CSS.


  To get the app up and running just browse to [the live version on GitHub pages](https://mermade.github.io/openapi-gui), deploy a clone to GitHub pages, deploy to Heroku using the button below, or clone the repo and point a browser at `index.html` or host it yourself - couldn't be simpler. More [technical information here](docs/technical.md).


  You only need to `npm install` the Node.js modules if you wish to use the `openapi-gui` embedded web server (i.e. not if you are running your own web-server), otherwise they are only there for PaaS deployments.


  [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)


  #### CLI options


  ```

  -d, --definition    serve the given OAS definition

  -l, --launch        start a web-browser pointing to the GUI

  -p, --port          specify the port to run on, defaults to $PORT or 3000

  -w, --write         enable writing back to the source definition

  ```


  #### Running with Docker


  If you don't have a local Node development environment, or if you would prefer to run OpenAPI-GUI in a Docker container, you can do in with a few simple steps:


  1. Clone the repository.

  2. Run `docker build -t mermade/openapi-gui .` to build the Docker image (`mermade/openapi-gui`)

  3. Run `docker run --name openapi-gui -p 8080:3000 -d mermade/openapi-gui` to run the server on port 8080.

  4. Navigate to `http://localhost:8080` in your favorite browser.

  5. When you're done, shut down the server by running `docker stop openapi-gui && docker rm openapi-gui`


  Or you can pull the pre-built Docker image:


  * `docker pull mermade/openapi-gui`


  ### Limitations


  * OpenAPI-GUI will de-reference shared parameters.

  * The definition must be self-contained with no external `$ref`s. **This is likely to be resolved (ho-ho) soon**.

  * Editing a response / example / body schema will dereference it.

  * OpenAPI-GUI will not always preserve vendor-extensions, e.g. if a parameter is deleted and recreated.

  * OpenAPI-GUI will not preserve comments from definitions imported in YAML format.


  TODO

  ----


  * See the [TODO list](/docs/TODO.md) and the current status of [OpenAPI 3.0 specification support](docs/openapi3-support.md).

stoplightio/prism: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC4:2AAE2C:5126220:52E1A9A:678EE3D6 and timestamp 2025-01-21 00:01:26
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Szasza/express-gateway-plugin-openapi3-mock-server: >
  # Express Gateway OpenAPI 3
  Mock Server Plugin


  [![npm version](https://badge.fury.io/js/express-gateway-plugin-openapi3-mock-server.svg)](https://badge.fury.io/js/express-gateway-plugin-openapi3-mock-server)


  > **DEPRECATION NOTICE** Following the main Express Gateway's deprecation, this project is no longer maintained.


  ## Prerequisites


  Please follow the instructions on Express Gateway's [Getting started](http://www.express-gateway.io/getting-started/) page.


  Also please take a look at how plugins are [installed and enabled](http://www.express-gateway.io/docs/plugins/).


  ## Installation


  `eg plugin install express-gateway-plugin-openapi3-mock-server`


  ## Configuration


  You can use `samples/base-paths.yml` for testing purposes. If so, please create a `definitions` folder

  in the project root and copy the sample YAML there.


  _system.config.yml_


  ```yaml

  # some config in front of the plugins section


  plugins:
    express-gateway-plugin-openapi3-mock-server:
      definitionFile: 'definitions/yourdefinition.yml' # The file containing your API's specification

  # some config after the plugins section

  ```


  _gateway.config.yml_ (A barebone example, if nothing else is used.)


  ```yaml

  http:
    port: 80
  apiEndpoints:
    api:
      host: '*'
  policies:
    - mock
  pipelines:
    api:
      apiEndpoints:
          - api
      policies:
          - mock:
            - action
  ```

  The above configuration disables the Admin CLI and will do nothing but provide a dummy responder based on your 

  OpenAPI specification.


  ## Features


  * Endpoints with appropriate request types are parsed and the first response example is used as a response body.

  * HTTP and apiKey auth header check support


  ### To do


  * Accept header checks to return appropriate response example

  * X-* headers for testing error responses

  * X-* headers for response example selection

  * Input parameter validation

  * Generators for random response data based on provided schema
swagger-api/swagger-node: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD0:1F5FC7:552C7E8:56E8AD1:678EE3DB and timestamp 2025-01-21 00:01:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
modern-project/modern-ruby: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCA:2AAE2C:511EF56:52DA5C1:678EE3B8 and timestamp 2025-01-21 00:00:56
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
go-swagger/go-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:24FE8F0:25B7B2A:678EE39E and timestamp 2025-01-21 00:00:30
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-api/swagger-inflector: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:250C5F9:25C5C9B:678EE3DA and timestamp 2025-01-21 00:01:30
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
networknt/light-rest-4j: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:2505236:25BE68D:678EE3BC and timestamp 2025-01-21 00:01:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apioo/fusio: >
  
  <p align="center">
      <a href="https://www.fusio-project.org/" target="_blank"><img src="https://www.fusio-project.org/img/fusio_64px.png"></a>
  </p>


  # About


  Fusio is an open source API management platform which helps to create innovative API solutions.


  ## Use-Cases


  * __API-Product__  
    Fusio helps you to create a great API product, besides building an API it provides a developer portal where developers
    can register and a way to monetize your API
  * __API-Gateway__  
    Fusio can be used as gateway to your internal API and microservices. It handles all common features like
    Authorization, Rate-Limiting and Schema-Validation
  * __SPA-Backend__  
    Fusio can be used as backend to build SPAs using popular Javascript-Frameworks like i.e. Angular, React or Vue. It
    provides a powerful code generator which can automatically generate an SDK for your API
  * __Low-Code-Platform__  
    Fusio allows you to build API endpoints without coding knowledge. I.e. it provides an Entity generator which you can
    use to easily create complete CRUD APIs.
  * __API-Framework__  
    For more complex use cases you can use Fusio also as framework to build complete APIs from scratch. This means you
    build custom actions where you can use the wide PHP ecosystem to solve your task.

  ## Features


  Fusio helps you to build APIs providing out-of-the-box enterprise features so that you can concentrate on your business

  case. Please take a look at our [documentation website](https://docs.fusio-project.org/)

  for more information. The following feature list gives you a first overview:


  * __OpenAPI generation__  
    Fusio generates automatically an OpenAPI specification for the defined routes
  * __SDK generation__  
    Fusio can automatically generate a client SDK for your API based on the defined schema
  * __Webhook support__  
    Fusio contains a webhook system which helps to build publish/subscribe for your API
  * __Rate limiting__  
    Fusio provides a way to rate limit requests based on the user or app
  * __Authorization__  
    Fusio uses OAuth2 for API authorization
  * __Monetization__  
    Fusio provides a simple payment system to charge for specific routes
  * __Validation__  
    Fusio uses the TypeSchema to automatically validate incoming request data
  * __Analytics__  
    Fusio monitors all API activities and shows them on a dashboard
  * __User management__  
    Fusio provides a developer app where new users can login or register a new account through GitHub, Google, Facebook or
    through normal email registration

  # Apps


  Fusio provides many apps which help to work with the API. Mostly apps are

  simple JS apps, which work with the internal API of Fusio. You can see a list of all available apps at our

  [marketplace](https://www.fusio-project.org/marketplace). You can install such an app either through a CLI command i.e.

  `php bin/fusio marketplace:install fusio` or through the backend app.


  All apps are installed to the `apps/` folder. You need to tell Fusio the public url to the apps folder at the `.env`

  file by defining the `APP_APPS_URL` variable. Depending on your setup this can be either a custom sub-domain like

  `https://apps.acme.com` or simply the sub folder `https://acme.com/apps`.


  ## Backend


  ![Backend](https://www.fusio-project.org/media/backend/dashboard.png)


  The backend app is the main app to configure and manage your API. The installer automatically installs this app. The app

  is located at `/apps/fusio/`.


  ## VSCode


  Fusio provides a [VSCode extension](https://marketplace.visualstudio.com/items?itemName=Fusio.fusio)

  which can be used to simplify action development. This means you can develop every action directly inside

  the VSCode editor.


  # SDK


  To build and integrate apps with Fusio we provide several SDKs which you can use to work with a Fusio instance or you

  can also simply manually talk to the REST API.


  | Language   | GitHub                                                  | Package                                                           | Example                                                      |

  |------------|---------------------------------------------------------|-------------------------------------------------------------------|--------------------------------------------------------------|

  | C#         | [GitHub](https://github.com/apioo/fusio-sdk-csharp)     | [NuGet](https://www.nuget.org/packages/Fusio.SDK)                 | [Example](https://github.com/apioo/fusio-sample-csharp-cli)  |

  | Go         | [GitHub](https://github.com/apioo/fusio-sdk-go)         |                                                                   | [Example](https://github.com/apioo/fusio-sample-go-cli)      |

  | Java       | [GitHub](https://github.com/apioo/fusio-sdk-java)       | [Maven](https://mvnrepository.com/artifact/org.fusio-project/sdk) | [Example](https://github.com/apioo/fusio-sample-java-cli)    |

  | Javascript | [GitHub](https://github.com/apioo/fusio-sdk-javascript) | [NPM](https://www.npmjs.com/package/fusio-sdk)                    |                                                              |

  | PHP        | [GitHub](https://github.com/apioo/fusio-sdk-php)        | [Packagist](https://packagist.org/packages/fusio/sdk)             | [Example](https://github.com/apioo/fusio-sample-php-cli)     |

  | Python     | [GitHub](https://github.com/apioo/fusio-sdk-python)     | [PyPI](https://pypi.org/project/fusio-sdk/)                       | [Example](https://github.com/apioo/fusio-sample-python-cli)  |


  ## Frameworks


  | Framework | GitHub                                                           | Package                                             | Example |

  |-----------|------------------------------------------------------------------|-----------------------------------------------------|---------|

  | Angular   | [GitHub](https://github.com/apioo/fusio-sdk-javascript-angular)  | [NPM](https://www.npmjs.com/package/ngx-fusio-sdk)  | [Example](https://github.com/apioo/fusio-sample-javascript-angular)        |


  ## REST API


  | Domain   | Documentation                                       | Specification                                                                           |

  |----------|-----------------------------------------------------|-----------------------------------------------------------------------------------------|

  | Backend  | [ReDoc](https://www.fusio-project.org/api/backend)  | [OpenAPI](https://demo.fusio-project.org/system/generator/spec-openapi?filter=backend)  |

  | Consumer | [ReDoc](https://www.fusio-project.org/api/consumer) | [OpenAPI](https://demo.fusio-project.org/system/generator/spec-openapi?filter=consumer) |

  | System   | [ReDoc](https://www.fusio-project.org/api/system)   | [OpenAPI](https://demo.fusio-project.org/system/generator/spec-openapi?filter=system)   |


  # Ecosystem


  Fusio is an open source project which you can use freely for private and commercial projects under the terms of the

  Apache 2.0 license. Besides our core product we offer additional services to augment the functionality of Fusio.


  * [SDKgen](https://sdkgen.app/)  
    SDKgen is a powerful code generator to automatically build client SDKs for your REST API.
  * [APIgen](https://apigen.app/)  
    Generate fully working and customizable APIs based on your data model.
  * [APImon](https://apimon.app/)  
    APImon provides an intuitive service to monitor and analyze API endpoints.
  * [TypeSchema](https://typeschema.org/)  
    A JSON format to describe data models in a language neutral format.
  * [TypeAPI](https://typeapi.org/)  
    An OpenAPI alternative to describe REST APIs for type-safe code generation.
  * [TypeHub](https://typehub.cloud/)  
    A collaborative platform to design and build API models and client SDKs.
  * [PSX](https://phpsx.org/)  
    An innovative PHP framework dedicated to build fully typed REST APIs.

  # Installation


  It is possible to install Fusio either through composer or manually file download.


  ## Composer


  ```

  composer create-project fusio/fusio

  ```


  ## Download


  https://github.com/apioo/fusio/releases


  ## Configuration


  You can either manually install Fusio with the steps below or you can also use the browser based installer at

  `public/install.php`. Note because of security reasons it is highly recommended removing the installer script after the

  installation.


  * __Adjust the configuration file__  
    Open the file `.env` in the Fusio directory and change the `APP_URL` to the domain pointing to the public folder.
    Also insert the database credentials to the `APP_CONNECTION` keys. Optional adjust `APP_APPS_URL` to the public url
    of the apps folder (in case you want to use apps).
  * __Execute the installation command__  
    The installation script inserts the Fusio database schema into the provided database. It can be executed with the
    following command `php bin/fusio migrate`.
  * __Create administrator user__  
    After the installation is complete you have to create a new administrator account. Therefor you can use the following
    command `php bin/fusio adduser`. Choose as account type "Administrator".
  * __Install backend app__  
    To manage your API through an admin panel you need to install the backend app. The app can be installed with the
    following command `php bin/fusio marketplace:install fusio`

  You can verify the installation by visiting the `APP_URL` with a browser. You should see an API response that the

  installation was successful.


  In case you want to install Fusio on a specific database you need to adjust the `APP_CONNECTION` parameter. You can

  use the following connection strings:


  * MySQL: `pdo-mysql://root:test1234@localhost/fusio`

  * PostgreSQL: `pdo-pgsql://postgres:postgres@localhost/fusio`

  * SQLite: `pdo-sqlite:///fusio.sqlite`


  In general it is possible to install Fusio on all database which are [supported](https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/configuration.html#driver)

  by our database abstraction layer but our internal test cases are only covering MySQL, PostgreSQL and SQLite so there is

  no guarantee that everything works.


  ## Docker


  It is possible to setup Fusio through docker. This has the advantage that you automatically get a complete running Fusio

  system without configuration. This is especially great for testing and evaluation. To setup the container you have to

  checkout the [repository](https://github.com/apioo/fusio-docker) and run the following command:


  ```

  docker-compose up -d

  ```


  This builds the Fusio system with a predefined backend account. The credentials are taken from the env variables

  `FUSIO_BACKEND_USER`, `FUSIO_BACKEND_EMAIL` and `FUSIO_BACKEND_PW` in the `docker-compose.yml`. If you are planing to

  run the container on the internet you must change these credentials.


  ## Domains


  By default the complete Fusio project can be hosted on a single domain. In this setup your API is served at the root

  directory and the developer portal and backend apps are directly served from the /apps folder. This setup is easy to use

  since it requires no configuration. If you want to run Fusio in a production environment we recommend to create the

  following sub-domain structure:


  * __api.acme.com__  
    Contains only Fusio where your API is served, in this case you can delete the apps/ folder from the public/ folder
  * __developer.acme.com__  
    Contains the developer portal app where external developers can register 
  * __fusio.acme.com__  
    Optional the backend app where you can manage your Fusio instance. You can host this also on a complete separate
    internal domain, the backend app only needs access to the Fusio API.

  This is of course only a suggestion and you are free to choose the domain names how you like.


  # Documentation


  Please check out our official documentation website where we bundle all documentation resources:

  https://docs.fusio-project.org/


  # Support


  ## Promotion


  If you are a blogger or magazine we would be happy if you like to cover Fusio. Please take a look at the Media section

  of our [About Page](https://www.fusio-project.org/about) to download the official icon set. In case you have any

  questions please write us a message directly so we can help you to create great content.


  ## Consulting


  If you are a company or freelancer and want to get detailed information how you can use Fusio you can contact us for

  consulting. In the workshop we try to find the best way how you can use/integrate Fusio also we try to explain the

  functionality and answer your questions.


  ## Donations


  If this project helps you to generate revenue or in general if you like to support the project please check out the

  donation options at our repository.


  ## Partner


  The following list shows all partners of the Fusio project. We like to thank every partner supporting us in our vision

  to move API development to the next level. If you are interested in getting listed here feel free to sponsor our

  project.


  <a href="https://jb.gg/OpenSourceSupport">

  <img src="https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg">

  </a>
smartrecruiters/openapi-first: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:537974A:5535C8C:678EE3D0 and timestamp 2025-01-21 00:01:21
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-api/swagger-core: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44B83A9:462F67B:678EE3D9 and timestamp 2025-01-21 00:01:29
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-api/swagger-parser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD2:4925F:44B8AFF:462FDFE:678EE3DB and timestamp 2025-01-21 00:01:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
BigstickCarpet/swagger-cli: >
  Swagger/OpenAPI CLI

  ============================


  [![Cross-Platform Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-cli/blob/master/.github/workflows/CI-CD.yaml)

  [![Build Status](https://github.com/APIDevTools/swagger-cli/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-cli/blob/master/.github/workflows/CI-CD.yaml)


  [![Dependencies](https://david-dm.org/APIDevTools/swagger-cli.svg)](https://david-dm.org/APIDevTools/swagger-cli)

  [![Coverage Status](https://coveralls.io/repos/github/APIDevTools/swagger-cli/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-cli?branch=master)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-cli.svg)](https://www.npmjs.com/package/@apidevtools/swagger-cli)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-cli.svg)](LICENSE)

  [![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-cli)




  Features

  --------------------------

  - Validate Swagger/OpenAPI files in **JSON or YAML** format

  - Supports multi-file API definitions via `$ref` pointers

  - Bundle multiple Swagger/OpenAPI files into one combined file




  Related Projects

  --------------------------

  - [Swagger Parser](https://github.com/APIDevTools/swagger-parser)

  - [Swagger Express Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install -g @apidevtools/swagger-cli

  ```




  Usage

  --------------------------


  ```

  swagger-cli <command> [options] <file>


  Commands:
      validate                Validates an API definition in Swagger 2.0 or OpenAPI 3.0 format

      bundle                  Bundles a multi-file API definition into a single file

  Options:
      -h, --help              Show help for any command
      -v, --version           Output the CLI version number
      -d, --debug [filter]    Show debug output, optionally filtered (e.g. "*", "swagger:*", etc.)
  ```



  ### Validate an API


  The `swagger-cli validate` command will validate your Swagger/OpenAPI definition against the [Swagger 2.0 schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json) or [OpenAPI 3.0 Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json).  It also performs additional validations against the [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md), which will catch some things that aren't covered by the schema, such as duplicate parameters, invalid MIME types, etc.


  The command will exit with a non-zero code if the API is invalid.


  ```

  swagger-cli validate [options] <file>


  Options:
      --no-schema             Do NOT validate against the Swagger/OpenAPI JSON schema

      --no-spec               Do NOT validate against the Swagger/OpenAPI specification
  ```


  #### Git pre-commit hook


  There is a useful Python tool called [pre-commit](https://pre-commit.com/) that can be used to execute a wide suite of pre-commit checks. The `swagger-cli validate` command can be integrated as part of a git pre-commit hook by adding the following configuration to the `repos` entry of an existing `.pre-commit-config.yaml` file.


  ```

  -   repo: https://github.com/APIDevTools/swagger-cli
      rev: v2.2.1
      hooks:
      - id: swagger-validation
        args: ["validate", "<path to root swagger>"]
  ```


  The intention is to point to single root swagger that references multiple swagger definitions. The above hook will execute the `swagger-cli validation` against the root swagger anytime that a file matching the pattern `.*swagger.*\.(json|yaml|yml)` is modified. Any failures in this validation will prevent the git commit from being processed.


  ### Combine Multiple Files


  The Swagger and OpenAPI specs allows you to split your API definition across multiple files using [`$ref` pointers](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#reference-object) to reference each file. You can use the `swagger-cli bundle` command to combine all of those referenced files into a single file, which is useful for distribution or interoperation with other tools.


  By default, the `swagger-cli bundle` command tries to keep the output file size as small as possible, by only embedding each referenced file _once_.  If the same file is referenced multiple times, then any subsequent references are simply modified to point to the _single_ inlined copy of the file.  If you want to produce a bundled file without _any_ `$ref` pointers, then add the `--dereference` option.  This will result in a larger file size, since multiple references to the same file will result in that file being embedded multiple times.


  If you don't specify the `--output-file` option, then the bundled API will be written to stdout, which means you can pipe it to other commands.


  The result of this method by default is written as JSON. It can be changed to YAML with the `--type` option, by passing the `yaml` value.


  ```

  swagger-cli bundle [options] <file>


  Options:
      -o, --outfile <file>        The output file

      -r, --dereference           Fully dereference all $ref pointers

      -f, --format <spaces>       Formats the output using the given number of spaces
                                  (the default is 2 spaces)

      -t, --type <filetype>       Defines the output file type. The valid values are: json, yaml
                                  (the default is JSON)

      -w, --wrap <column>         Set the line length for YAML strings
                                  (the default is no wrapping)
  ```




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an issue](https://github.com/APIDevTools/swagger-cli/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/swagger-cli/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-cli.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`




  License

  --------------------------

  Swagger CLI is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/APIDevTools/swagger-cli) to thank us for our work. By contributing to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers ❤


  [![Travis CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
RepreZen/KaiZen-OpenApi-Parser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCA:2AAE2C:510E69C:52C9752:678EE36B and timestamp 2025-01-20 23:59:39
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
networknt/openapi-parser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDD:B00D1:522C8A8:53E9484:678EE3BC and timestamp 2025-01-21 00:01:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
metadevpro/openapi3-ts: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D0F1A4:D76596:678EE3B3 and timestamp 2025-01-21 00:00:51
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Apicurio/oai-ts-core: >
  
  # Deprecated Repository


  Please note that this library has deprecated in favor of [apicurio-data-models](https://github.com/Apicurio/apicurio-data-models).  Please report all bugs and contribute all pull requests there.
kevindew/openapi3_parser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDE:2D0327:52ABB40:5467577:678EE3A5 and timestamp 2025-01-21 00:00:37
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
getkin/kin-openapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD9:124B:D0A1B0:D7143B:678EE39D and timestamp 2025-01-21 00:00:29
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
adwhit/openapi3-rust: >
  # OpenAPIv3


  Spec: https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md
wework/speccy: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD7:201941:57D2343:598EAD5:678EE3E8
  and timestamp 2025-01-21 00:01:44
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apioo/psx-api: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CCB:201941:57BA475:59764B3:678EE37E
  and timestamp 2025-01-20 23:59:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
p1c2u/openapi-spec-validator: >
  **********************

  OpenAPI Spec validator

  **********************


  .. image:: https://img.shields.io/docker/v/p1c2u/openapi-spec-validator.svg?color=%23086DD7&label=docker%20hub&sort=semver
       :target: https://hub.docker.com/r/p1c2u/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/v/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image:: https://travis-ci.org/python-openapi/openapi-spec-validator.svg?branch=master
       :target: https://travis-ci.org/python-openapi/openapi-spec-validator
  .. image:: https://img.shields.io/codecov/c/github/python-openapi/openapi-spec-validator/master.svg?style=flat
       :target: https://codecov.io/github/python-openapi/openapi-spec-validator?branch=master
  .. image:: https://img.shields.io/pypi/pyversions/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/format/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator
  .. image:: https://img.shields.io/pypi/status/openapi-spec-validator.svg
       :target: https://pypi.python.org/pypi/openapi-spec-validator

  About

  #####


  OpenAPI Spec Validator is a Python library that validates OpenAPI Specs

  against the `OpenAPI 2.0 (aka Swagger)

  <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md>`__,

  `OpenAPI 3.0 <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md>`__

  and `OpenAPI 3.1 <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md>`__

  specification. The validator aims to check for full compliance with the Specification.



  Documentation

  #############


  Check documentation to see more details about the features. All documentation is in the "docs" directory and online at `openapi-spec-validator.readthedocs.io <https://openapi-spec-validator.readthedocs.io>`__



  Installation

  ############


  .. code-block:: console

      pip install openapi-spec-validator

  Alternatively you can download the code and install from the repository:


  .. code-block:: bash

     pip install -e git+https://github.com/python-openapi/openapi-spec-validator.git#egg=openapi_spec_validator


  Usage

  #####


  CLI (Command Line Interface)

  ****************************


  Straight forward way:


  .. code-block:: bash

      openapi-spec-validator openapi.yaml

  pipes way:


  .. code-block:: bash

      cat openapi.yaml | openapi-spec-validator -

  docker way:


  .. code-block:: bash

      docker run -v path/to/openapi.yaml:/openapi.yaml --rm p1c2u/openapi-spec-validator /openapi.yaml

  or more pythonic way:


  .. code-block:: bash

      python -m openapi_spec_validator openapi.yaml

  For more details, read about `CLI (Command Line Interface) <https://openapi-spec-validator.readthedocs.io/en/latest/cli.html>`__.


  Python package

  **************


  .. code:: python

      from openapi_spec_validator import validate_spec
      from openapi_spec_validator.readers import read_from_filename

      spec_dict, spec_url = read_from_filename('openapi.yaml')

      # If no exception is raised by validate_spec(), the spec is valid.
      validate_spec(spec_dict)

      validate_spec({'openapi': '3.1.0'})

      Traceback (most recent call last):
          ...
      OpenAPIValidationError: 'info' is a required property

  For more details, read about `Python package <https://openapi-spec-validator.readthedocs.io/en/latest/python.html>`__.


  Related projects

  ################


  * `openapi-core <https://github.com/python-openapi/openapi-core>`__
     Python library that adds client-side and server-side support for the OpenAPI v3.0 and OpenAPI v3.1 specification.
  * `openapi-schema-validator <https://github.com/python-openapi/openapi-schema-validator>`__
     Python library that validates schema against the OpenAPI Schema Specification v3.0 and OpenAPI Schema Specification v3.1.

  License

  #######


  Copyright (c) 2017-2023, Artur Maciag, All rights reserved. Apache v2
Microsoft/OpenAPI.NET: "![Category overview screenshot](docs/images/oainet.png
  \"Microsoft + OpenAPI = Love\")\r

  \r

  # OpenAPI.NET \r

  \r

  |Package|Nuget|\r

  |--|--|\r

  |Models and
  Writers|[![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.svg)](http\
  s://www.nuget.org/packages/Microsoft.OpenApi/) |\r

  |Readers |
  [![nuget](https://img.shields.io/nuget/v/Microsoft.OpenApi.Readers.svg)](http\
  s://www.nuget.org/packages/Microsoft.OpenApi.Readers/) |\r

  \r

  \r

  The **OpenAPI.NET** SDK contains a useful object model for OpenAPI documents
  in .NET along with common serializers to extract raw OpenAPI JSON and YAML
  documents from the model.\r

  \r

  **See more information on the OpenAPI specification and its history here: <a
  href=\"https://www.openapis.org\">Open API Initiative</a>**\r

  \r

  Project Objectives \r

  \r

  - Provide a single shared object model in .NET for OpenAPI descriptions.\r

  - Include the most primitive Reader for ingesting OpenAPI JSON and YAML
  documents in both V2 and V3 formats.\r

  - Provide OpenAPI description writers for both V2 and V3 specification
  formats.\r

  - Enable developers to create Readers that translate different data formats
  into OpenAPI descriptions. \r

  \r

  # Installation\r

  \r

  - Install core Nuget package `Microsoft.OpenApi`\r

  - Install readers Nuget package `Microsoft.OpenApi.Readers`\r

  \r

  # Processors\r

  The OpenAPI.NET project holds the base object model for representing OpenAPI
  documents as .NET objects. Some developers have found the need to write
  processors that convert other data formats into this OpenAPI.NET object model.
  We'd like to curate that list of processors in this section of the readme. \r

  \r

  The base JSON and YAML processors are built into this project. Below is the
  list of the other supported processor projects.\r

  \r

  - [**C# Comment / Annotation
  Processor**](https://github.com/Microsoft/OpenAPI.NET.CSharpAnnotations) :
  Converts standard .NET annotations ( /// comments ) emitted from your build
  (MSBuild.exe) into OpenAPI.NET document object. \r

  \r

  - [**OData CSDL Processor**](https://github.com/Microsoft/OpenAPI.NET.OData)
  : Converts the XML representation of the Entity Data Model (EDM) describing an
  OData Service into OpenAPI.NET document object. \r

  \r

  # Example Usage\r

  \r

  Creating an OpenAPI Document\r

  \r

  ```C#\r

  var document = new OpenApiDocument\r

  {\r

  \    Info = new OpenApiInfo\r

  \    {\r

  \        Version = \"1.0.0\",\r

  \        Title = \"Swagger Petstore (Simple)\",\r

  \    },\r

  \    Servers = new List<OpenApiServer>\r

  \    {\r

  \        new OpenApiServer { Url = \"http://petstore.swagger.io/api\" }\r

  \    },\r

  \    Paths = new OpenApiPaths\r

  \    {\r

  \        [\"/pets\"] = new OpenApiPathItem\r

  \        {\r

  \            Operations = new Dictionary<OperationType, OpenApiOperation>\r

  \            {\r

  \                [OperationType.Get] = new OpenApiOperation\r

  \                {\r

  \                    Description = \"Returns all pets from the system that
  the user has access to\",\r

  \                    Responses = new OpenApiResponses\r

  \                    {\r

  \                        [\"200\"] = new OpenApiResponse\r

  \                        {\r

  \                            Description = \"OK\"\r

  \                        }\r

  \                    }\r

  \                }\r

  \            }\r

  \        }\r

  \    }\r

  };\r

  ```\r

  \r

  Reading and writing a OpenAPI description\r

  \r

  ```C#\r

  var httpClient = new HttpClient\r

  {\r

  \    BaseAddress = new
  Uri(\"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/\")\r

  };\r

  \r

  var stream = await
  httpClient.GetStreamAsync(\"master/examples/v3.0/petstore.yaml\");\r

  \r

  // Read V3 as YAML\r

  var openApiDocument = new OpenApiStreamReader().Read(stream, out var
  diagnostic);\r

  \r

  // Write V2 as JSON\r

  var outputString = openApiDocument.Serialize(OpenApiSpecVersion.OpenApi2_0,
  OpenApiFormat.Json);\r

  \r

  ```\r

  \r

  # Build Status\r

  \r

  |**master**|\r

  |--|\r

  |[![Build
  status](https://ci.appveyor.com/api/projects/status/9l6hly3vjeu0tmtx/branch/m\
  aster?svg=true)](https://ci.appveyor.com/project/MicrosoftOpenAPINETAdmin/ope\
  napi-net-54e7i/branch/master)|\r

  \r

  # Contributing\r

  \r

  This project welcomes contributions and suggestions.  Most contributions
  require you to agree to a\r

  Contributor License Agreement (CLA) declaring that you have the right to,
  and actually do, grant us\r

  the rights to use your contribution. For details, visit
  https://cla.microsoft.com.\r

  \r

  When you submit a pull request, a CLA-bot will automatically determine
  whether you need to provide\r

  a CLA and decorate the PR appropriately (e.g., label, comment). Simply
  follow the instructions\r

  provided by the bot. You will only need to do this once across all repos
  using our CLA.\r

  \r

  This project has adopted the [Microsoft Open Source Code of
  Conduct](https://opensource.microsoft.com/codeofconduct/).\r

  For more information see the [Code of Conduct
  FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r

  contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any
  additional questions or comments.\r

  \r

  To provide feedback and ask questions you can use Stack Overflow with the
  [OpenAPI.NET](https://stackoverflow.com/questions/tagged/openapi.net) tag or
  use the OpenAPI.NET Slack channel which you can join by registering for the
  HTTP APIs team at http://slack.httpapis.com.\r\n"
swagger-api/swagger-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD5:124B:D175D1:D7EC3E:678EE3D8 and timestamp 2025-01-21 00:01:29
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fmvilas/swagger-node-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D094B6:D706FD:678EE399 and timestamp 2025-01-21 00:00:25
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
janephp/open-api: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC7:1EDF9F:24FF6E2:25B896B:678EE3A2 and timestamp 2025-01-21 00:00:34
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
dtzar/openapi-auto-test: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57BF025:597B21F:678EE391 and timestamp 2025-01-21 00:00:17
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apiaryio/dredd: >
  # Dredd — HTTP API Testing Framework


  [![npm version](https://badge.fury.io/js/dredd.svg)](https://www.npmjs.com/package/dredd)

  [![Build Status](https://circleci.com/gh/apiaryio/dredd/tree/master.svg?style=svg)](https://circleci.com/gh/apiaryio/dredd/tree/master)

  [![Build Status](https://ci.appveyor.com/api/projects/status/n3ixfxh72qushyr4/branch/master?svg=true)](https://ci.appveyor.com/project/Apiary/dredd/branch/master)

  [![Documentation Status](https://readthedocs.org/projects/dredd/badge/?version=latest)](https://readthedocs.org/projects/dredd/builds/)

  [![Known Vulnerabilities](https://snyk.io/test/npm/dredd/badge.svg)](https://snyk.io/test/npm/dredd)


  ![Dredd - HTTP API Testing Framework](docs/_static/images/dredd.png?raw=true)


  > **Dredd is a language-agnostic command-line tool for validating

  > API description document against backend implementation of the API.**


  - [Documentation][]

  - [Changelog][]

  - [Contributor's Guidelines][]


  Dredd reads your API description and step by step validates whether your API

  implementation replies with responses as they are described in the

  documentation.


  ### Supported API Description Formats


  - [API Blueprint][]

  - [OpenAPI 2][] (formerly known as Swagger)

  - [OpenAPI 3][] ([experimental](https://github.com/apiaryio/api-elements.js/blob/master/packages/openapi3-parser/STATUS.md), contributions welcome!)


  ### Supported Hooks Languages


  Dredd supports writing [hooks](https://dredd.org/en/latest/hooks/)

  — a glue code for each test setup and teardown. Following languages are supported:


  - [Go](https://dredd.org/en/latest/hooks-go/)

  - [Node.js (JavaScript)](https://dredd.org/en/latest/hooks-nodejs/)

  - [Perl](https://dredd.org/en/latest/hooks-perl/)

  - [PHP](https://dredd.org/en/latest/hooks-php/)

  - [Python](https://dredd.org/en/latest/hooks-python/)

  - [Ruby](https://dredd.org/en/latest/hooks-ruby/)

  - [Rust](https://dredd.org/en/latest/hooks-rust/)

  - Didn't find your favorite language? _[Add a new one!](https://dredd.org/en/latest/hooks-new-language/)_


  ### Supported Systems


  - Linux, macOS, Windows, ...

  - [Travis CI][], [CircleCI][], [Jenkins][], [AppVeyor][], ...


  ## Installation


  ```

  $ npm install -g dredd

  ```


  ## Quick Start


  1.  Create an [API Blueprint][] file called `api-description.apib`.
      Follow [tutorial at API Blueprint website][api blueprint tutorial]
      or just take one of the [ready-made examples][api blueprint examples].
  2.  Run interactive configuration:

      ```shell
      $ dredd init
      ```

  3.  Run Dredd:

      ```shell
      $ dredd
      ```

  4.  To see how to use all Dredd's features, browse the
      [full documentation][documentation].

  ## Howtos, Tutorials, Blogposts (3rd party)


  - [Maintenir à jour sa documentation d'API avec Dredd!](https://blog.itnetwork.fr/blog-post/2019/05/06/dredd-partie-1-ecriture-documentation.html) _05/06/2019_

  - [Dredd - Language-agnostic HTTP API Testing Tool - Interview with Honza Javorek](https://survivejs.com/blog/dredd-interview/) _03/22/2019_

  - [Laravel OpenAPI 3 Documentation Verification Using Dredd](https://commandz.io/snippets/laravel/laravel-dredd-openapi-v3/) _02/24/2019_

  - [Testing your API with Dredd](https://medium.com/mop-developers/testing-your-api-with-dredd-c02e6ca151f2) _09/27/2018_

  - [Writing Testable API Documentation Using APIB and Dredd (Rails)](https://blog.rebased.pl/2018/06/29/testable-api-docs.html) _06/29/2018_

  - [Design-first API Specification Workflow Matures](https://philsturgeon.uk/api/2018/03/01/api-specification-workflow-matures/) _03/01/2018_

  - [Writing and testing API specifications with API Blueprint, Dredd and Apiary](https://hackernoon.com/writing-and-testing-api-specifications-with-api-blueprint-dreed-and-apiary-df138accce5a) _12/04/2017_

  - [Testing an API Against its Documentation](https://dev.to/albertofdzm/testing-an-api-against-documentation-6cl) _11/23/2017_

  - [Keeping Documentation Honest](https://blog.apisyouwonthate.com/keeping-documentation-honest-d9ab5351ddd4) _11/21/2017_

  - [Apiary designed APIs tested using Dredd](https://redthunder.blog/2017/09/20/apiary-designed-apis-tested-using-dredd/) _09/20/2017_

  - [Dredd + Swagger for REST API testing](https://codeburst.io/dredd-swagger-for-rest-api-testing-715d1af5e8c5) _01/24/2017_

  - [Testing Your API Documentation With Dredd](https://matthewdaly.co.uk/blog/2016/08/08/testing-your-api-documentation-with-dredd/) _08/08/2016_

  - [DREDD API Tester works with API Blueprints](http://www.finklabs.org/articles/api-blueprint-dredd.html) _07/05/2016_

  - [Documentation driven API Development using Laravel, Dredd and Apiary](https://medium.com/frianbiz/api-php-pilot%C3%A9e-par-la-doc-3c9eb4daa2aa) _06/21/2016_

  - [Dredd v1.1.0: A Bit Different](https://philsturgeon.uk/api/2016/06/20/dredd-v1-1-0-a-bit-different/) _06/20/2016_

  - [Dredd: Do Your HTTP API Justice](https://philsturgeon.uk/api/2015/01/28/dredd-api-testing-documentation/) _01/28/2015_


  [api blueprint]: https://apiblueprint.org/

  [api blueprint tutorial]: https://apiblueprint.org/documentation/tutorial.html

  [api blueprint examples]: https://github.com/apiaryio/api-blueprint/tree/master/examples

  [openapi 2]: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md

  [openapi 3]: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md

  [documentation]: https://dredd.org/en/latest/

  [changelog]: https://github.com/apiaryio/dredd/releases

  [contributor's guidelines]: https://dredd.org/en/latest/contributing/

  [travis ci]: https://travis-ci.org/

  [circleci]: https://circleci.com/

  [jenkins]: https://jenkins.io/

  [appveyor]: https://www.appveyor.com/
quen2404/openapi-diff: >
  # OpenAPI-diff 


  Compare two OpenAPI specifications (3.x) and render the difference to HTML plaintext, or Markdown files.


  [![Test](https://github.com/OpenAPITools/openapi-diff/workflows/Test/badge.svg)](https://github.com/OpenAPITools/openapi-diff/actions?query=branch%3Amaster+workflow%3ATest+)


  # Requirements


  * Java 8


  # Feature


  * Supports OpenAPI spec v3.0.

  * Depth comparison of parameters, responses, endpoint, http method (GET,POST,PUT,DELETE...)

  * Supports swagger api Authorization

  * Render difference of property with Expression Language

  * HTML & Markdown render


  # Maven


  Available on [Maven Central](https://search.maven.org/artifact/com.github.joschi.openapi-diff/core)


  ```xml

  <dependency>
    <groupId>com.github.joschi.openapi-diff</groupId>
    <artifactId>core</artifactId>
    <version>${openapi-diff-version}</version>
  </dependency>

  ```


  # Docker


  Available on [Docker Hub](https://hub.docker.com/r/joschi/openapi-diff/) as `joschi/openapi-diff`.


  ```bash

  # docker run joschi/openapi-diff:latest

  usage: openapi-diff <old> <new>
      --debug                     Print debugging information
      --error                     Print error information
      --fail-on-changed           Fail if API changed but is backward
                                  compatible
      --fail-on-incompatible      Fail only if API changes broke backward
                                  compatibility
   -h,--help                      print this message
      --header <property=value>   use given header for authorisation
      --html <file>               export diff as html in given file
      --info                      Print additional information
   -l,--log <level>               use given level for log (TRACE, DEBUG,
                                  INFO, WARN, ERROR, OFF). Default: ERROR
      --markdown <file>           export diff as markdown in given file
      --off                       No information printed
      --query <property=value>    use query param for authorisation
      --state                     Only output diff state: no_changes,
                                  incompatible, compatible
      --text <file>               export diff as text in given file
      --trace                     be extra verbose
      --version                   print the version information and exit
      --warn                      Print warning information
  ```



  ## Build the image


  This is only required if you want to try new changes in the Dockerfile of this project.


  ```bash

  docker build -t local-openapi-diff .

  ```


  You can replace the local image name `local-openapi-diff` by any name of your choice.


  ## Run an instance


  In this example the `$(pwd)/core/src/test/resources` directory is mounted in the `/specs` directory of the container

  in readonly mode (`ro`).


  ```bash

  docker run -t \
    -v $(pwd)/core/src/test/resources:/specs:ro \
    joschi/openapi-diff /specs/path_1.yaml /specs/path_2.yaml
  ```


  The remote name `joschi/openapi-diff` can be replaced with `local-openapi-diff` or the name you gave to your local image.


  # Usage


  openapi-diff can read OpenAPI specs from JSON files or HTTP URLs.


  ## Command Line


  ```bash

  $ openapi-diff --help

  usage: openapi-diff <old> <new>
      --debug                     Print debugging information
      --error                     Print error information
   -h,--help                      print this message
      --header <property=value>   use given header for authorisation
      --html <file>               export diff as html in given file
      --info                      Print additional information
   -l,--log <level>               use given level for log (TRACE, DEBUG,
                                  INFO, WARN, ERROR, OFF). Default: ERROR
      --markdown <file>           export diff as markdown in given file
      --off                       No information printed
      --query <property=value>    use query param for authorisation
      --state                     Only output diff state: no_changes,
                                  incompatible, compatible
      --fail-on-incompatible      Fail only if API changes broke backward compatibility
      --fail-on-changed           Fail if API changed but is backward compatible
      --trace                     be extra verbose
      --version                   print the version information and exit
      --warn                      Print warning information
  ```


  ## Direct Invocation


  ```java

  public class Main {
      public static final String OPENAPI_DOC1 = "petstore_v3_1.json";
      public static final String OPENAPI_DOC2 = "petstore_v2_2.yaml";
          
      public static void main(String[] args) {
          ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);

          //...
      }
  }

  ```


  ### Render difference

  ---

  #### HTML


  ```java

  String html = new HtmlRender("Changelog",
          "http://deepoove.com/swagger-diff/stylesheets/demo.css")
                  .render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testNewApi.html");
      fw.write(html);
      fw.close();

  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  #### Markdown


  ```java

  String render = new MarkdownRender().render(diff);

  try {
      FileWriter fw = new FileWriter(
              "testDiff.md");
      fw.write(render);
      fw.close();
































































      
  } catch (IOException e) {
      e.printStackTrace();
  }

  ```


  ### Extensions


  This project uses Java Service Provider Inteface (SPI) so additional extensions can be added. 


  To build your own extension, you simply need to create a `src/main/resources/META-INF/services/com.qdesrame.openapi.diff.core.compare.ExtensionDiff` file with the full classname of your implementation.  Your class must also implement the `com.qdesrame.openapi.diff.core.compare.ExtensionDiff` interface.  Then, including your library with the `openapi-diff` module will cause it to be triggered automatically.


  # Examples


  ### CLI Output


  ```text

  ==========================================================================

  ==                            API CHANGE LOG                            ==

  ==========================================================================
                               Swagger Petstore                             
  --------------------------------------------------------------------------

  --                              What's New                              --

  --------------------------------------------------------------------------

  - GET    /pet/{petId}


  --------------------------------------------------------------------------

  --                            What's Deleted                            --

  --------------------------------------------------------------------------

  - POST   /pet/{petId}


  --------------------------------------------------------------------------

  --                          What's Deprecated                           --

  --------------------------------------------------------------------------

  - GET    /user/logout


  --------------------------------------------------------------------------

  --                            What's Changed                            --

  --------------------------------------------------------------------------

  - PUT    /pet
    Request:
          - Deleted application/xml
          - Changed application/json
            Schema: Backward compatible
  - POST   /pet
    Parameter:
      - Add tags in query
    Request:
          - Changed application/xml
            Schema: Backward compatible
          - Changed application/json
            Schema: Backward compatible
  - GET    /pet/findByStatus
    Parameter:
      - Deprecated status in query
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - GET    /pet/findByTags
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - DELETE /pet/{petId}
    Parameter:
      - Add newHeaderParam in header
  - POST   /pet/{petId}/uploadImage
    Parameter:
      - Changed petId in path
  - POST   /user
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithArray
    Request:
          - Changed application/json
            Schema: Backward compatible
  - POST   /user/createWithList
    Request:
          - Changed application/json
            Schema: Backward compatible
  - GET    /user/login
    Parameter:
      - Delete password in query
  - GET    /user/logout

  - GET    /user/{username}
    Return Type:
      - Changed 200 OK
        Media types:
          - Changed application/xml
            Schema: Broken compatibility
          - Changed application/json
            Schema: Broken compatibility
  - PUT    /user/{username}
    Request:
          - Changed application/json
            Schema: Backward compatible
  --------------------------------------------------------------------------

  --                                Result                                --

  --------------------------------------------------------------------------
                   API changes broke backward compatibility                 
  --------------------------------------------------------------------------

  ```


  ### Markdown


  ```markdown

  ### What's New

  ---

  * `GET` /pet/{petId} Find pet by ID


  ### What's Deleted

  ---

  * `POST` /pet/{petId} Updates a pet in the store with form data


  ### What's Deprecated

  ---

  * `GET` /user/logout Logs out current logged in user session


  ### What's Changed

  ---

  * `PUT` /pet Update an existing pet  
      Request

          Deleted request body : [application/xml]
          Changed response : [application/json]
  * `POST` /pet Add a new pet to the store  
      Parameter

          Add tags //add new query param demo
      Request

          Changed response : [application/xml]
          Changed response : [application/json]
  * `GET` /pet/findByStatus Finds Pets by status  
      Parameter

      Return Type

          Changed response : [200] //successful operation
  * `GET` /pet/findByTags Finds Pets by tags  
      Return Type

          Changed response : [200] //successful operation
  * `DELETE` /pet/{petId} Deletes a pet  
      Parameter

          Add newHeaderParam
  * `POST` /pet/{petId}/uploadImage uploads an image for pet  
      Parameter

          petId Notes ID of pet to update change into ID of pet to update, default false
  * `POST` /user Create user  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithArray Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `POST` /user/createWithList Creates list of users with given input array  
      Request

          Changed response : [application/json]
  * `GET` /user/login Logs user into the system  
      Parameter

          Delete password //The password for login in clear text
  * `GET` /user/logout Logs out current logged in user session  

  * `PUT` /user/{username} Updated user  
      Request

          Changed response : [application/json]
  * `GET` /user/{username} Get user by user name  
      Return Type

          Changed response : [200] //successful operation
  ```


  # License


  openapi-diff is released under the Apache License 2.0.


  # Thanks


  * Adarsh Sharma / [adarshsharma](https://github.com/adarshsharma)

  * Quentin Desramé / [quen2404](https://github.com/quen2404)

  * [Sayi](https://github.com/Sayi) for his project [swagger-diff](https://github.com/Sayi/swagger-diff) 
    which was a source of inspiration for this tool
Mermade/openapi-filter: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD0:1F5FC7:5511432:56CCE67:678EE360 and timestamp 2025-01-20 23:59:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Mermade/openapi-extract: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCE:2B946D:5360DCC:551CB89:678EE360 and timestamp 2025-01-20 23:59:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
webonix/swagger-docs-cfml: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:5129EFB:52E5893:678EE3E8 and timestamp 2025-01-21 00:01:44
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
silas/swagger-framework: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD0:1F5FC7:5529CFC:56E5F22:678EE3CE and timestamp 2025-01-21 00:01:19
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
batdevis/swagger_engine: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44A4DB8:461BA3B:678EE37F and timestamp 2025-01-21 00:00:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
signalfx/swagger-angular-client: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC6:201941:57CBECD:598847D:678EE3CB and timestamp 2025-01-21 00:01:15
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
richhollis/swagger-docs: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC0:1F5FC7:5527F11:56E40B9:678EE3C6 and timestamp 2025-01-21 00:01:11
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
EiffelWebFramework/swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:CFCB07:D638A0:678EE35A and timestamp 2025-01-20 23:59:22
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
SmartBear/swagger4j: >
  ## swagger4j


  A simple java library for reading and writing [Swagger 1.X definitions](https://swagger.io). Supports both JSON and XML formats. The current version is

  reasonably in line with the latest swagger core release except that it doesn't support any of the JSON Schema/Data Model constructs yet. Apache 2.0 licensed.


  If you're interested in reading Swagger 2.0 definitions you're better off using the official [swagger-parser](https://github.com/swagger-api/swagger-parser)


  ### Getting started


  Clone this repo from GitHub and build it yourself with maven (with "mvn install"). 


  The latest version is also available in the SmartBear maven repository at soapui.org, add this to your pom with


  ```xml

  <repositories>
      <repository>
          <id>soapUI Repository</id>
          <url>http://www.soapui.org/repository/maven2</url>
      </repository>
  </repositories>

  ```


  and add the corresponding dependency:


  ```xml

  <dependency>
      <groupId>com.smartbear</groupId>
      <artifactId>swagger4j</artifactId>
      <version>1.0.0</version>
  </dependency>

  ```


  swagger4j has a runtime dependency

  on jsonp ([https://java.net/projects/jsonp/](https://java.net/projects/jsonp/)) which you can add to your maven pom with.


  ```xml

  <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.json</artifactId>
      <version>1.0-b06</version>
  </dependency>

  ```


  Once added to your classpath you can start reading swagger definitions, for example


  ```java

  ResourceListing resourceListing = Swagger.readSwagger( "http://petstore.swagger.wordnik.com/api/api-docs.json" )

  for( ResourceListingApi apiRef : resourceListing.getApis() )

  {
     ApiDeclaration apiDeclaration = apiRef.getDeclaration();
     for( Api api : apiDeclaration.getApis())
     {
         ...
     }
  }

  ```


  and of course you can write them as well


  ```java

  SwaggerFactory factory = Swagger.createSwaggerFactory();


  ApiDeclaration apiDeclaration = factory.createApiDeclaration( "http://api.mycompany.com/apis", "/user" );

  Api api = apiDeclaration.addApi( "{id}" );

  Operation op = api.addOperation( "getuserbyid", Operation.Method.GET );

  op.addParameter( "id", Parameter.ParamType.path );


  ResourceListing rl = factory.createResourceListing( "http://api.mycompany.com/apis" );

  rl.setApiVersion( "1.0" );

  rl.addApi( apiDeclaration, "user-doc.{format}" );


  Swagger.writerSwagger( rl, "api-docs" );

  ```


  The API is closely modeled after the Swagger specification, if you are familiar with that it should be a breeze to use.

  If you aren't familiar with Swagger and its spec head right over to the swagger website at 

  [https://github.com/wordnik/swagger-core/wiki](https://github.com/wordnik/swagger-core/wiki) to learn all about it.


  Javadoc is available in the zip at sourceforge.


  ### Library Design


  Swagger4j uses a standard Factory/Builder approach with interfaces defining the entire Swagger object model and a

  default implementation implementing them. If you have any suggestions on how to improve the actual API please don't

  hesitate to get in touch by adding tickets here at GitHub for bugs, issues, feature requests - Thank you!


  Please note the following:

  - the whole DataModel/DataType part of Swagger is not yet supported

  - paths to APIs referred to in a ResourceListing are resolved by adding the path of the api to the basePath defined

  in the resourceListing. If the basePath is relative - it is resolved relatively to the host/root of the ResourceListing

  URI.


  ### Usages


  * Version 0.2+ of the SoapUI-Swagger-Plugin use swagger4j to parse and generate Swagger definitions.


  ### Future improvements


  * None planned at this point!


  ### Release History


  * 20130527 - Initial beta1 release

  * 20131119 - beta2 release, adds support for Swagger 1.2 and 1.0

  * 20140505 - beta3 bugfixes

  * 20140512 - beta4 more bugfixes

  * 20151029 - 1.0.0 release - more bugfixes
ROAMSYS/swaggerapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDA:1EDF9F:24F3B82:25AC9C9:678EE368 and timestamp 2025-01-20 23:59:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ryankennedy/swagger-jaxrs-doclet: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD8:2AAE2C:5122CEA:52DE44A:678EE3C8 and timestamp 2025-01-21 00:01:12
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
signalfx/swagger-node-client: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:25097AB:25C2D45:678EE3CD and timestamp 2025-01-21 00:01:18
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
springfox/springfox-grails-integration: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CCE:2B946D:537A2DC:5536852:678EE3D4 and timestamp 2025-01-21 00:01:24
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
rantav/flask-restful-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC6:201941:57CA79E:5986CEE:678EE3C5 and timestamp 2025-01-21 00:01:09
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
emicklei/go-restful: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCD:2AAE2C:51168F4:52D1CB9:678EE392 and timestamp 2025-01-21 00:00:18
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
springfox/springfox-grails-demo: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:250ADE9:25C43DD:678EE3D3 and timestamp 2025-01-21 00:01:23
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
gong023/swagger-assert: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57C1F91:597E237:678EE39E and timestamp 2025-01-21 00:00:30
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
worldline/swagger-jack: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D1AF74:D8270E:678EE3EA and timestamp 2025-01-21 00:01:46
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Luracast/Restler: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC6:201941:57B4AFB:5970923:678EE35D and timestamp 2025-01-20 23:59:25
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
signalfx/swagger-cli-client: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCB:201941:57CC0B4:598866D:678EE3CC and timestamp 2025-01-21 00:01:16
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
concentricsky/django-tastypie-swagger: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CC5:2B946D:5368C7B:5524D14:678EE388 and timestamp 2025-01-21 00:00:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fliptoo/swagger-express: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57C09DD:597CC58:678EE398 and timestamp 2025-01-21 00:00:24
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
KevM/fubumvc-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:24F1AB7:25AA847:678EE35C and timestamp 2025-01-20 23:59:24
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ServiceStack/ServiceStack: >
  Follow
  [@ServiceStack](https://twitter.com/servicestack) or [view the
  docs](https://docs.servicestack.net), use
  [StackOverflow](http://stackoverflow.com/questions/ask) or the [Customer
  Forums](https://forums.servicestack.net/) for support.


  > View the [Release Notes](https://docs.servicestack.net/release-notes-history) for latest features or see [servicestack.net/features](https://servicestack.net/features) for an overview.


  ### Simple, Fast, Versatile and full-featured Services Framework


  ServiceStack is a simple, fast, versatile and highly-productive full-featured [Web](http://razor.servicestack.net) and 

  [Web Services](https://docs.servicestack.net/web-services.html) Framework that's 

  thoughtfully-architected to [reduce artificial complexity](https://docs.servicestack.net/why-not-odata.html#why-not-complexity) and promote 

  [remote services best-practices](https://docs.servicestack.net/advantages-of-message-based-web-services.html) 

  with a [message-based design](https://docs.servicestack.net/what-is-a-message-based-web-service.html) 

  that allows for maximum re-use that can leverage an integrated 

  [Service Gateway](https://docs.servicestack.net/service-gateway.html) 

  for the creation of loosely-coupled 

  [Modularized Service](https://docs.servicestack.net/modularizing-services.html) Architectures.

  ServiceStack Services are consumable via an array of built-in fast data formats (inc. 

  [JSON](https://github.com/ServiceStack/ServiceStack.Text), 

  XML, 

  [CSV](https://docs.servicestack.net/csv-format.html), 

  [JSV](https://docs.servicestack.net/json-jsv-and-xml.html), 

  [ProtoBuf](https://docs.servicestack.net/protobuf-format.html), 

  [Wire](https://docs.servicestack.net/wire-format.html) and 

  [MsgPack](https://docs.servicestack.net/messagepack-format.html)) 

  as well as XSD/WSDL for [SOAP endpoints](https://docs.servicestack.net/soap-support.html) and 

  [Rabbit MQ](https://docs.servicestack.net/rabbit-mq.html), 

  [Redis MQ](https://docs.servicestack.net/messaging-and-redis.html) and

  [Amazon SQS](https://github.com/ServiceStack/ServiceStack.Aws#sqsmqserver) MQ hosts. 


  Its design and simplicity focus offers an unparalleled suite of productivity features that can be declaratively enabled 

  without code, from creating fully queryable Web API's with just a single Typed Request DTO with

  [Auto Query](https://docs.servicestack.net/autoquery.html) supporting 

  [every major RDBMS](https://github.com/ServiceStack/ServiceStack.OrmLite#8-flavours-of-ormlite-is-on-nuget) 

  to the built-in support for

  [Auto Batched Requests](https://docs.servicestack.net/auto-batched-requests.html) 

  or effortlessly enabling rich [HTTP Caching](https://docs.servicestack.net/http-caching.html) and

  [Encrypted Messaging](https://docs.servicestack.net/encrypted-messaging.html) 

  for all your existing services via [Plugins](https://docs.servicestack.net/plugins.html).


  Your same Services also serve as the Controller in ServiceStack's [Smart Razor Views](http://razor.servicestack.net/)

  reducing the effort to serve both 

  [Web and Single Page Apps](https://github.com/ServiceStackApps/LiveDemos) as well as 

  [Rich Desktop and Mobile Clients](https://github.com/ServiceStackApps/HelloMobile) that are able to deliver instant interactive 

  experiences using ServiceStack's real-time [Server Events](https://docs.servicestack.net/server-events.html).


  ServiceStack Services also maximize productivity for consumers providing an 

  [instant end-to-end typed API without code-gen](https://docs.servicestack.net/csharp-client.html) enabling

  the most productive development experience for developing .NET to .NET Web Services.


  ### [Generate Instant Typed APIs from within all Major IDEs!](https://docs.servicestack.net/add-servicestack-reference.html)


  ServiceStack now integrates with all Major IDE's used for creating the best native experiences on the most popular platforms 

  to enable a highly productive dev workflow for consuming Web Services, making ServiceStack the ideal back-end choice for powering 

  rich, native iPhone and iPad Apps on iOS with Swift, Mobile and Tablet Apps on the Android platform with Java, OSX Desktop Applications 

  as well as targeting the most popular .NET PCL platforms including Xamarin.iOS, Xamarin.Android, Windows Store, WPF, WinForms and Silverlight: 


  <img src="https://raw.githubusercontent.com/ServiceStack/Assets/master/img/wikis/ide-ss-plugin-logos.png" align="right" />


  #### [VS.NET integration with ServiceStackVS](https://visualstudiogallery.msdn.microsoft.com/5bd40817-0986-444d-a77d-482e43a48da7)


  Providing instant Native Typed API's for 

  [C#](https://docs.servicestack.net/csharp-add-servicestack-reference.html), 

  [TypeScript](https://docs.servicestack.net/typescript-add-servicestack-reference.html),

  [F#](https://docs.servicestack.net/fsharp-add-servicestack-reference.html) and 

  [VB.NET](https://docs.servicestack.net/vbnet-add-servicestack-reference.html) 

  directly in Visual Studio for the 

  [most popular .NET platforms](https://github.com/ServiceStackApps/HelloMobile) including iOS and Android using 

  [Xamarin.iOS](https://github.com/ServiceStackApps/HelloMobile#xamarinios-client) and 

  [Xamarin.Android](https://github.com/ServiceStackApps/HelloMobile#xamarinandroid-client) on Windows.


  #### [Xamarin Studio integration with ServiceStackXS](https://docs.servicestack.net/csharp-add-servicestack-reference.html#xamarin-studio)


  Providing [C# Native Types](https://docs.servicestack.net/csharp-add-servicestack-reference.html) 

  support for developing iOS and Android mobile Apps using 

  [Xamarin.iOS](https://github.com/ServiceStackApps/HelloMobile#xamarinios-client) and 

  [Xamarin.Android](https://github.com/ServiceStackApps/HelloMobile#xamarinandroid-client) with 

  [Xamarin Studio](https://www.xamarin.com/studio) on OSX. The **ServiceStackXS** plugin also provides a rich web service 

  development experience developing Client applications with 

  [Mono Develop on Linux](https://docs.servicestack.net/csharp-add-servicestack-reference.html#xamarin-studio-for-linux)


  #### [Xcode integration with ServiceStackXC Plugin](https://docs.servicestack.net/swift-add-servicestack-reference.html)


  Providing [an instant Native Typed API in Swift](https://docs.servicestack.net/swift-add-servicestack-reference.html) 

  including generic Service Clients enabling a highly-productive workflow and effortless consumption of Web Services from 

  native iOS and OSX Applications - directly from within Xcode!


  #### [Android Studio integration with ServiceStackIDEA](https://docs.servicestack.net/java-add-servicestack-reference.html)


  Providing [an instant Native Typed API in Java](https://docs.servicestack.net/java-add-servicestack-reference.html) 

  and [Kotlin](https://docs.servicestack.net/kotlin-add-servicestack-reference.html)

  including idiomatic Java Generic Service Clients supporting Sync and Async Requests by leveraging Android's AsyncTasks to enable the creation of services-rich and responsive native Java or Kotlin Mobile Apps on the Android platform - directly from within Android Studio!


  #### [IntelliJ integration with ServiceStackIDEA](https://docs.servicestack.net/java-add-servicestack-reference.html#install-servicestack-idea-from-the-plugin-repository)


  The ServiceStack IDEA plugin is installable directly from IntelliJ's Plugin repository and enables seamless integration with IntelliJ Java Maven projects for generating a Typed API to quickly and effortlessly consume remote ServiceStack Web Services from pure cross-platform Java or Kotlin Clients.


  #### [Eclipse integration with ServiceStackEclipse](https://github.com/ServiceStack/ServiceStack.Java/tree/master/src/ServiceStackEclipse#eclipse-integration-with-servicestack)


  The unmatched productivity offered by [Java Add ServiceStack Reference](https://docs.servicestack.net/java-add-servicestack-reference.html) is also available in the 

  [ServiceStackEclipse IDE Plugin](https://github.com/ServiceStack/ServiceStack.Java/tree/master/src/ServiceStackEclipse#eclipse-integration-with-servicestack) that's installable 

  from the [Eclipse MarketPlace](https://marketplace.eclipse.org/content/servicestackeclipse) to provide deep integration of Add ServiceStack Reference with Eclipse Java Maven Projects

  enabling Java Developers to effortlessly Add and Update the references of their evolving remote ServiceStack Web Services.


  #### [servicestack-cli - Simple command-line utilities for ServiceStack](https://docs.servicestack.net/add-servicestack-reference.html#simple-command-line-utilities-for-servicestack)


  In addition to our growing list of supported IDE's, the [servicestack-cli](https://github.com/ServiceStack/servicestack-cli)

  cross-platform command-line npm scripts makes it easy for build servers, automated tasks and command-line runners of your 

  favorite text editors to easily Add and Update ServiceStack References!


  ## Simple Customer Database REST Services Example


  This example is also available as a [stand-alone integration test](https://github.com/ServiceStack/ServiceStack/blob/master/tests/ServiceStack.WebHost.Endpoints.Tests/CustomerRestExample.cs):


  ```csharp

  //Web Service Host Configuration

  public class AppHost : AppSelfHostBase

  {
      public AppHost() 
          : base("Customer REST Example", typeof(CustomerService).Assembly) {}

      public override void Configure(Container container)
      {
          //Register which RDBMS provider to use
          container.Register<IDbConnectionFactory>(c => 
              new OrmLiteConnectionFactory(":memory:", SqliteDialect.Provider));

          using (var db = container.Resolve<IDbConnectionFactory>().Open())
          {
              //Create the Customer POCO table if it doesn't already exist
              db.CreateTableIfNotExists<Customer>();
          }
      }
  }


  //Web Service DTO's

  [Route("/customers", "GET")]

  public class GetCustomers : IReturn<GetCustomersResponse> {}


  public class GetCustomersResponse

  {
      public List<Customer> Results { get; set; } 
  }


  [Route("/customers/{Id}", "GET")]

  public class GetCustomer : IReturn<Customer>

  {
      public int Id { get; set; }
  }


  [Route("/customers", "POST")]

  public class CreateCustomer : IReturn<Customer>

  {
      public string Name { get; set; }
  }


  [Route("/customers/{Id}", "PUT")]

  public class UpdateCustomer : IReturn<Customer>

  {
      public int Id { get; set; }

      public string Name { get; set; }
  }


  [Route("/customers/{Id}", "DELETE")]

  public class DeleteCustomer : IReturnVoid

  {
      public int Id { get; set; }
  }


  // POCO DB Model

  public class Customer

  {
      [AutoIncrement]
      public int Id { get; set; }

      public string Name { get; set; }
  }


  //Web Services Implementation

  public class CustomerService : Service

  {
      public object Get(GetCustomers request)
      {
          return new GetCustomersResponse { Results = Db.Select<Customer>() };
      }

      public object Get(GetCustomer request)
      {
          return Db.SingleById<Customer>(request.Id);
      }

      public object Post(CreateCustomer request)
      {
          var customer = new Customer { Name = request.Name };
          Db.Save(customer);
          return customer;
      }

      public object Put(UpdateCustomer request)
      {
          var customer = Db.SingleById<Customer>(request.Id);
          if (customer == null)
              throw HttpError.NotFound("Customer '{0}' does not exist".Fmt(request.Id));

          customer.Name = request.Name;
          Db.Update(customer);

          return customer;
      }

      public void Delete(DeleteCustomer request)
      {
          Db.DeleteById<Customer>(request.Id);
      }
  }


  ```


  ### [Calling the above REST Service from any C#/.NET Client](https://docs.servicestack.net/csharp-add-servicestack-reference.html)


  > No code-gen required, can re-use above Server DTOs:


  ```csharp

  var client = new JsonServiceClient(BaseUri);


  //GET /customers

  var all = client.Get(new GetCustomers());                         // Count = 0


  //POST /customers

  var customer = client.Post(new CreateCustomer { Name = "Foo" });


  //GET /customer/1

  customer = client.Get(new GetCustomer { Id = customer.Id });      // Name = Foo


  //GET /customers

  all = client.Get(new GetCustomers());                             // Count = 1


  //PUT /customers/1

  customer = client.Put(
      new UpdateCustomer { Id = customer.Id, Name = "Bar" });       // Name = Bar

  //DELETE /customers/1

  client.Delete(new DeleteCustomer { Id = customer.Id });


  //GET /customers

  all = client.Get(new GetCustomers());                             // Count = 0

  ```


  Same code also works with [Android, iOS, Xamarin.Forms, UWP and WPF clients](https://github.com/ServiceStackApps/HelloMobile).


  > [F#](https://docs.servicestack.net/fsharp-add-servicestack-reference.html) and 

  [VB.NET](https://docs.servicestack.net/vbnet-add-servicestack-reference.html) can re-use same 

  [.NET Service Clients](https://docs.servicestack.net/csharp-client.html) and DTO's


  ### [Calling from TypeScript](https://docs.servicestack.net/typescript-add-servicestack-reference.html#ideal-typed-message-based-api)


  ```ts

  const client = new JsonServiceClient(baseUrl);

  const { results } = await client.get(new GetCustomers());

  ```


  ### [Calling from Swift](https://docs.servicestack.net/swift-add-servicestack-reference.html#jsonserviceclientswift)


  ```swift

  let client = JsonServiceClient(baseUrl: BaseUri)


  client.getAsync(GetCustomers())
      .then {
          let results = $0.results;
      }
  ```


  ### [Calling from Java](https://docs.servicestack.net/java-add-servicestack-reference.html#jsonserviceclient-usage)


  ```java

  JsonServiceClient client = new JsonServiceClient(BaseUri);


  GetCustomersResponse response = client.get(new GetCustomers());

  List<Customer> results = response.results; 

  ```


  ### [Calling from Kotlin](https://docs.servicestack.net/kotlin-add-servicestack-reference.html#jsonserviceclient-usage)


  ```kotlin

  val client = JsonServiceClient(BaseUri)


  val response = client.get(GetCustomers())

  val results = response.results

  ```


  ### [Calling from Dart](https://docs.servicestack.net/dart-add-servicestack-reference)


  ```dart

  var client = new JsonServiceClient(BaseUri);


  var response = await client.get(GetCustomers());

  var results = client.results;

  ```


  ### [Calling from jQuery using TypeScript Definitions](https://docs.servicestack.net/typescript-add-servicestack-reference.html#typescript-interface-definitions)


  ```js

  $.getJSON($.ss.createUrl("/customers", request), request, (r: GetCustomersResponse) => {
      var results = r.results;
  });

  ```


  Using TypeScript Definitions with Angular HTTP Client:


  ```ts

  this.http.get<GetCustomersResponse>(createUrl('/customers', request)).subscribe(r => {
      this.results = r.results;
  });

  ```


  ### Calling from jQuery


  ```js

  $.getJSON(baseUri + "/customers", function(r) {
  	var results = r.results;
  });

  ```


  That's all the application code required to create and consume a simple database-enabled REST Web Service!


  ## Getting Started

   * [Start with the **Getting Started** section](https://docs.servicestack.net/create-your-first-webservice.html)
   * [Example Apps and Demos](https://github.com/ServiceStackApps/LiveDemos)
   * [Community resources](https://docs.servicestack.net/community-resources.html)

  ### [Release Notes](https://servicestack.net/release-notes)


  ## Download


  If you have [NuGet](http://www.nuget.org/) installed, the easiest way to get started is to: 


  ### [Install ServiceStack via NuGet](https://servicestack.net/download).


  _Latest v4+ on NuGet is a [commercial release](https://servicestack.net/pricing) with [free quotas](https://servicestack.net/download#free-quotas)._


  ### [Docs and Downloads for older v3 BSD releases](https://github.com/ServiceStackV3/ServiceStackV3)


  ### [Live Demos](https://github.com/ServiceStackApps/LiveDemos)


  **The [Definitive list of Example Projects, Use-Cases, Demos, Starter Templates](https://github.com/ServiceStackApps/LiveDemos)**
      
  ## Copying


  Since September 2013, ServiceStack source code is available under GNU Affero General Public License/FOSS License Exception, see license.txt in the source. 

  Alternative commercial licensing is also available, see https://servicestack.net/pricing for details.


  ## Contributing


  Contributors need to approve the [Contributor License Agreement](https://docs.google.com/forms/d/16Op0fmKaqYtxGL4sg7w_g-cXXyCoWjzppgkuqzOeKyk/viewform) before any code will be reviewed, see the [Contributing docs](https://docs.servicestack.net/contributing.html) for more details. All contributions must include tests verifying the desired behavior.


  ## OSS Libraries used


  ServiceStack includes source code of the great libraries below for some of its core functionality. 

  Each library is released under its respective licence:

    - [Mono](https://github.com/mono/mono) [(MIT License)](https://github.com/mono/mono/blob/master/LICENSE)
    - [Funq IOC](http://funq.codeplex.com) [(MS-PL License)](https://opensource.org/licenses/MS-PL)
    - [Fluent Validation](https://github.com/JeremySkinner/FluentValidation) [(Apache License 2.0)](https://github.com/JeremySkinner/FluentValidation/blob/master/License.txt)
    - [Mini Profiler](https://github.com/MiniProfiler/dotnet) [(MIT License)](https://github.com/MiniProfiler/dotnet/blob/master/LICENSE.txt)
    - [Dapper](https://github.com/StackExchange/Dapper) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)
    - [TweetStation's OAuth library](https://github.com/migueldeicaza/TweetStation) [(MIT License)](https://github.com/migueldeicaza/TweetStation/blob/master/LICENSE)
    - [MarkdownSharp](https://code.google.com/archive/p/markdownsharp) [(MIT License)](https://opensource.org/licenses/mit-license.php)
    - [MarkdownDeep](https://github.com/toptensoftware/markdowndeep) [(Apache License 2.0)](http://www.toptensoftware.com/markdowndeep/license)
    - [HtmlCompressor](https://code.google.com/archive/p/htmlcompressor) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)
    - [JSMin](https://github.com/douglascrockford/JSMin/blob/master/jsmin.c) [(Apache License 2.0)](http://www.apache.org/licenses/LICENSE-2.0)
    - [RecyclableMemoryStream](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream) [(MIT License)](https://github.com/Microsoft/Microsoft.IO.RecyclableMemoryStream/blob/master/LICENSE)
    - [ASP.NET MVC](https://github.com/aspnet/Mvc) [(Apache License 2.0)](https://github.com/aspnet/Mvc/blob/release/2.2/LICENSE.txt)
    - [CoreFX](https://github.com/dotnet/corefx) [(MIT License)](https://github.com/dotnet/corefx/blob/master/LICENSE.TXT)
    - [Nito.AsyncEx](https://github.com/StephenCleary/AsyncEx) [(MIT License)](https://github.com/StephenCleary/AsyncEx/blob/master/LICENSE)

  ## Find out More


  Follow [@ServiceStack](https://twitter.com/ServiceStack) and 

  [+ServiceStack](https://plus.google.com/u/0/communities/112445368900682590445) for project updates.


  -----


  ## Core Team

   - [mythz](https://github.com/mythz) (Demis Bellot)
   - [layoric](https://github.com/layoric) (Darren Reid) / [@layoric](https://twitter.com/layoric)
   - [xplicit](https://github.com/xplicit) (Sergey Zhukov) / [@quantumcalc](https://twitter.com/quantumcalc)
   - [desunit](https://github.com/desunit) (Sergey Bogdanov) / [@desunit](https://twitter.com/desunit)
   - [arxisos](https://github.com/arxisos) (Steffen Müller) / [@arxisos](https://twitter.com/arxisos)

  ## Contributors 


  A big thanks to GitHub and all of ServiceStack's contributors:

   - [bman654](https://github.com/bman654) (Brandon Wallace)
   - [iristyle](https://github.com/iristyle) (Ethan Brown)
   - [superlogical](https://github.com/superlogical) (Jake Scott)
   - [itamar82](https://github.com/itamar82)
   - [chadwackerman](https://github.com/chadwackerman)
   - [derfsplat](https://github.com/derfsplat)
   - [johnacarruthers](https://github.com/johnacarruthers) (John Carruthers)
   - [mvitorino](https://github.com/mvitorino) (Miguel Vitorino)
   - [bsiegel](https://github.com/bsiegel) (Brandon Siegel)
   - [mdavid](https://github.com/mdavid) (M. David Peterson)
   - [lhaussknecht](https://github.com/lhaussknecht) (Louis Haussknecht)
   - [grendello](https://github.com/grendello) (Marek Habersack)
   - [SteveDunn](https://github.com/SteveDunn) (Steve Dunn)
   - [kcherenkov](https://github.com/kcherenkov) (Konstantin Cherenkov)
   - [timryan](https://github.com/timryan) (Tim Ryan)
   - [letssellsomebananas](https://github.com/letssellsomebananas) (Tymek Majewski)
   - [danbarua](https://github.com/danbarua) (Dan Barua)
   - [JonCanning](https://github.com/JonCanning) (Jon Canning)
   - [paegun](https://github.com/paegun) (James Gorlick)
   - [pvasek](https://github.com/pvasek) (pvasek)
   - [derfsplat](https://github.com/derfsplat) (derfsplat)
   - [justinrolston](https://github.com/justinrolston) (Justin Rolston)
   - [danmiser](https://github.com/danmiser) (Dan Miser)
   - [danatkinson](https://github.com/danatkinson) (Dan Atkinson)
   - [brainless83](https://github.com/brainless83) (Thomas Grassauer)
   - [angelcolmenares](https://github.com/angelcolmenares) (angel colmenares)
   - [dbeattie71](https://github.com/dbeattie71) (Derek Beattie)
   - [danielwertheim](https://github.com/danielwertheim) (Daniel Wertheim)
   - [greghroberts](https://github.com/greghroberts) (Gregh Roberts)
   - [int03](https://github.com/int03) (Selim Selçuk)
   - [andidog](https://github.com/AndiDog) (AndiDog)
   - [chuckb](https://github.com/chuckb) (chuckb)
   - [niemyjski](https://github.com/niemyjski) (Blake Niemyjski)
   - [mj1856](https://github.com/mj1856) (Matt Johnson)
   - [matthieugd](https://github.com/matthieugd) (Matthieu)
   - [tomaszkubacki](https://github.com/tomaszkubacki) (Tomasz Kubacki)
   - [e11137](https://github.com/e11137) (Rogelio Canedo)
   - [davidroth](https://github.com/davidroth) (David Roth)
   - [meebey](https://github.com/meebey) (Mirco Bauer)
   - [codedemonuk](https://github.com/codedemonuk) (Pervez Choudhury)
   - [jrosskopf](https://github.com/jrosskopf) (Joachim Rosskopf)
   - [friism](https://github.com/friism) (Michael Friis)
   - [mp3125](https://github.com/mp3125)
   - [aurimas86](https://github.com/aurimas86)
   - [parnham](https://github.com/parnham) (Dan Parnham)
   - [yeurch](https://github.com/yeurch) (Richard Fawcett)
   - [damianh](https://github.com/damianh) (Damian Hickey)
   - [freeman](https://github.com/freeman) (Michel Rasschaert)
   - [kvervo](https://github.com/kvervo) (Kvervo)
   - [pauldbau](https://github.com/pauldbau) (Paul Du Bois)
   - [justinpihony](https://github.com/JustinPihony) (Justin Pihony) 
   - [bokmadsen](https://github.com/bokmadsen) (Bo Kingo Damgaard)
   - [dragan](https://github.com/dragan) (Dale Ragan)
   - [sneal](https://github.com/sneal) (Shawn Neal)
   - [johnsheehan](https://github.com/johnsheehan) (John Sheehan)
   - [jschlicht](https://github.com/jschlicht) (Jared Schlicht)
   - [kumarnitin](https://github.com/kumarnitin) (Nitin Kumar)
   - [davidchristiansen](https://github.com/davidchristiansen) (David Christiansen)  
   - [paulecoyote](https://github.com/paulecoyote) (Paul Evans)
   - [kongo2002](https://github.com/kongo2002) (Gregor Uhlenheuer)
   - [brannonking](https://github.com/brannonking) (Brannon King)
   - [alexandrerocco](https://github.com/alexandrerocco) (Alexandre Rocco)
   - [cbarbara](https://github.com/cbarbara)
   - [assaframan](https://github.com/assaframan) (Assaf Raman)
   - [csakshaug](https://github.com/csakshaug) (Christian Sakshaug)
   - [johnman](https://github.com/johnman)
   - [jarroda](https://github.com/jarroda)
   - [ssboisen](https://github.com/ssboisen) (Simon Skov Boisen)
   - [paulduran](https://github.com/paulduran) (Paul Duran)
   - [pruiz](https://github.com/pruiz) (Pablo Ruiz García)
   - [fantasticjamieburns](https://github.com/fantasticjamieburns)
   - [pseabury](https://github.com/pseabury)
   - [kevingessner](https://github.com/kevingessner) (Kevin Gessner)
   - [iskomorokh](https://github.com/iskomorokh) (Igor Skomorokh)
   - [royjacobs](https://github.com/royjacobs) (Roy Jacobs)
   - [robertmircea](https://github.com/robertmircea) (Robert Mircea)
   - [markswiatek](https://github.com/markswiatek) (Mark Swiatek)
   - [flq](https://github.com/flq) (Frank Quednau)
   - [ashd](https://github.com/ashd) (Ash D)
   - [thanhhh](https://github.com/thanhhh)
   - [algra](https://github.com/algra) (Alexey Gravanov)
   - [jimschubert](https://github.com/jimschubert) (Jim Schubert)
   - [gkathire](https://github.com/gkathire)
   - [mikaelwaltersson](https://github.com/mikaelwaltersson) (Mikael Waltersson)
   - [asunar](https://github.com/asunar) (Alper)
   - [chucksavage](https://github.com/chucksavage) (Chuck Savage)
   - [sashagit](https://github.com/sashagit) (Sasha)
   - [froyke](https://github.com/froyke) (Froyke)
   - [dbhobbs](https://github.com/dbhobbs) (Daniel Hobbs)
   - [bculberson](https://github.com/bculberson) (Brad Culberson)
   - [awr](https://github.com/awr) (Andrew)
   - [pingvinen](https://github.com/pingvinen) (Patrick)
   - [citndev](https://github.com/CITnDev) (Sebastien Curutchet)
   - [cyberprune](https://github.com/cyberprune)
   - [jorbor](https://github.com/jorbor) (Jordan Hayashi)
   - [bojanv55](https://github.com/bojanv55)
   - [i-e-b](https://github.com/i-e-b) (Iain Ballard)
   - [pietervp](https://github.com/pietervp) (Pieter Van Parys)
   - [franklinwise](https://github.com/franklinwise)
   - [ckasabula](https://github.com/ckasabula) (Chuck Kasabula)
   - [dortzur](https://github.com/dortzur) (Dor Tzur)
   - [allenarthurgay](https://github.com/allenarthurgay) (Allen Gay)
   - [viceberg](https://github.com/vIceBerg) 
   - [vansha](https://github.com/vansha) (Ivan Korneliuk)
   - [aaronlerch](https://github.com/aaronlerch) (Aaron Lerch)
   - [glikoz](https://github.com/glikoz)
   - [danielcrenna](https://github.com/danielcrenna) (Daniel Crenna)
   - [stevegraygh](https://github.com/stevegraygh) (Steve Graygh)
   - [jrmitch120](https://github.com/jrmitch120) (Jeff Mitchell)
   - [manuelnelson](https://github.com/manuelnelson) (Manuel Nelson)
   - [babcca](https://github.com/babcca) (Petr Babicka)
   - [jgeurts](https://github.com/jgeurts) (Jim Geurts)
   - [driis](https://github.com/driis) (Dennis Riis)
   - [gshackles](https://github.com/gshackles) (Greg Shackles)
   - [jsonmez](https://github.com/jsonmez) (John Sonmez)
   - [dchurchland](https://github.com/dchurchland) (David Churchland)
   - [softwx](https://github.com/softwx) (Steve Hatchett)
   - [ggeurts](https://github.com/ggeurts) (Gerke Geurts)
   - [andrewrissing](https://github.com/AndrewRissing) (Andrew Rissing)
   - [jjavery](https://github.com/jjavery) (James Javery)
   - [suremaker](https://github.com/suremaker) (Wojtek)
   - [cheesebaron](https://github.com/cheesebaron) (Tomasz Cielecki)
   - [mikkelfish](https://github.com/mikkelfish) (Mikkel Fishman)
   - [johngibb](https://github.com/johngibb) (John Gibb)
   - [stabbylambda](https://github.com/stabbylambda) (David Stone)
   - [mikepugh](https://github.com/mikepugh) (Mike Pugh)
   - [permalmberg](https://github.com/permalmberg) (Per Malmberg)
   - [adamralph](https://github.com/adamralph) (Adam Ralph)
   - [shamsulamry](https://github.com/shamsulamry) (Shamsul Amry)
   - [peterlazzarino](https://github.com/peterlazzarino) (Peter Lazzarino)
   - [kevin-montrose](https://github.com/kevin-montrose) (Kevin Montrose)
   - [msarchet](https://github.com/msarchet) (Michael Sarchet)
   - [jeffgabhart](https://github.com/jeffgabhart) (Jeff Gabhart)
   - [pkudinov](https://github.com/pkudinov) (Pavel Kudinov)
   - [permalmberg](https://github.com/permalmberg) (Per Malmberg)
   - [namman](https://github.com/namman) (Nick Miller)
   - [leon-andria](https://github.com/leon-andria) (Leon Andria)
   - [kkolstad](https://github.com/kkolstad) (Kenneth Kolstad)
   - [electricshaman](https://github.com/electricshaman) (Jeff Smith)
   - [ecgan](https://github.com/ecgan) (Gan Eng Chin)
   - [its-tyson](https://github.com/its-tyson) (Tyson Stolarski)
   - [tischlda](https://github.com/tischlda) (David Tischler)
   - [connectassist](https://github.com/connectassist) (Carl Healy)
   - [starteleport](https://github.com/starteleport)
   - [jfoshee](https://github.com/jfoshee) (Jacob Foshee)
   - [nardin](https://github.com/nardin) (Mamaev Michail)
   - [cliffstill](https://github.com/cliffstill)
   - [somya](https://github.com/somya) (Somya Jain)
   - [thinkbeforecoding](https://github.com/thinkbeforecoding) (Jérémie Chassaing)
   - [paksys](https://github.com/paksys) (Khalil Ahmad)
   - [mcguinness](https://github.com/mcguinness) (Karl McGuinness)
   - [jpasichnyk](https://github.com/jpasichnyk) (Jesse Pasichnyk)
   - [waynebrantley](https://github.com/waynebrantley) (Wayne Brantley)
   - [dcartoon](https://github.com/dcartoon) (Dan Cartoon)
   - [alexvodovoz](https://github.com/alexvodovoz) (Alex Vodovoz)
   - [jluchiji](https://github.com/jluchiji) (Denis Luchkin-Zhou)
   - [grexican](https://github.com/grexican)
   - [akoslukacs](https://github.com/akoslukacs) (Ákos Lukács)
   - [medianick](https://github.com/medianick) (Nick Jones)
   - [arhoads76](https://github.com/arhoads76)
   - [dylanvdmerwe](https://github.com/dylanvdmerwe) (Dylan v.d Merwe)
   - [mattiasw2](https://github.com/mattiasw2) (Mattias)
   - [paultyng](https://github.com/paultyng) (Paul Tyng)
   - [h2oman](https://github.com/h2oman) (Jason Waterman)
   - [anewton](https://github.com/anewton) (Allen Newton)
   - [sami1971](https://github.com/sami1971)
   - [russellchadwick](https://github.com/russellchadwick) (Russell Chadwick)
   - [cyberzed](https://github.com/cyberzed) (Stefan Daugaard Poulsen)
   - [filipw](https://github.com/filipw) (Filip Wojcieszyn)
   - [ghuntley](https://github.com/ghuntley) (Geoffrey Huntley)
   - [baramuse](https://github.com/baramuse)
   - [pdegenhardt](https://github.com/pdegenhardt) (Phil Degenhardt)
   - [captncraig](https://github.com/captncraig) (Craig Peterson)
   - [abattery](https://github.com/abattery) (Jae sung Chung)
   - [biliktamas79](https://github.com/biliktamas79)
   - [garuma](https://github.com/garuma) (Jérémie Laval)
   - [dsimunic](https://github.com/dsimunic)
   - [adamfowleruk](https://github.com/adamfowleruk) (Adam Fowler)
   - [bfriesen](https://github.com/bfriesen) (Brian Friesen)
   - [roryf](https://github.com/roryf) (Rory Fitzpatrick)
   - [stefandevo](https://github.com/stefandevo)
   - [gdassac](https://github.com/gdassac)
   - [metal10k](https://github.com/metal10k)
   - [cmelgarejo](https://github.com/cmelgarejo)
   - [skaman](https://github.com/skaman)
   - [rossipedia](https://github.com/rossipedia) (Bryan J. Ross)
   - [wimatihomer](https://github.com/wimatihomer) (Wim Pool)
   - [sword-breaker](https://github.com/sword-breaker)
   - [adebisi-fa](https://github.com/adebisi-fa) (Adebisi Foluso A.)
   - [mbischoff](https://github.com/mbischoff) (M. Bischoff)
   - [ivanfioravanti](https://github.com/ivanfioravanti) (Ivan Fioravanti)
   - [inhibition](https://github.com/inhibition) (Keith Hassen)
   - [joshearl](https://github.com/joshearl) (Josh Earl)
   - [friism](https://github.com/friism) (Michael Friis)
   - [corkupine](https://github.com/corkupine)
   - [bchavez](https://github.com/bchavez) (Brian Chavez)
   - [nhhagen](https://github.com/nhhagen) (Niels Henrik Hagen)
   - [daggmano](https://github.com/daggmano) (Darren Oster)
   - [chappoo](https://github.com/chappoo) (Steve Chapman)
   - [julrichkieffer](https://github.com/julrichkieffer) (Julrich Kieffer)
   - [adamclarsen](https://github.com/adamclarsen) (Adam Larsen)
   - [joero74](https://github.com/joero74) (Joerg Rosenkranz)
   - [ddotlic](https://github.com/ddotlic) (Drazen Dotlic)
   - [chrismcv](https://github.com/chrismcv) (Chris McVittie)
   - [marcioalthmann](https://github.com/marcioalthmann) (Márcio Fábio Althmann)
   - [mmertsock](https://github.com/mmertsock) (Mike Mertsock)
   - [johnkamau](https://github.com/johnkamau) (John Kamau)
   - [uhaciogullari](https://github.com/uhaciogullari) (Ufuk Hacıoğulları)
   - [davybrion](https://github.com/davybrion) (Davy Brion)
   - [aleshi](https://github.com/aleshi) (Alexander Shiryaev)
   - [alexandryz](https://github.com/alexandryz) (Alexandr Zaozerskiy)
   - [mistobaan](https://github.com/mistobaan) (Fabrizio Milo)
   - [niemyjski](https://github.com/niemyjski) (Blake Niemyjski)
   - [alexandernyquist](https://github.com/alexandernyquist) (Alexander Nyquist)
   - [mcduck76](https://github.com/mcduck76)
   - [kojoru](https://github.com/kojoru)
   - [jeremy-bridges](https://github.com/jeremy-bridges) (Jeremy Bridges)
   - [andreabalducci](https://github.com/andreabalducci) (Andrea Balducci)
   - [robertthegrey](https://github.com/RobertTheGrey) (Robert Greyling)
   - [robertbeal](https://github.com/robertbeal) (Robert Beal)
   - [improvedk](https://github.com/improvedk) (Mark Rasmussen)
   - [foresterh](https://github.com/foresterh) (Jamie Houston)
   - [peterkahl](https://github.com/peterkahl) (Peter Kahl)
   - [helgel](https://github.com/helgel)
   - [anthonycarl](https://github.com/anthonycarl) (Anthony Carl)
   - [mrjul](https://github.com/mrjul) (Julien Lebosquain)
   - [pwhe23](https://github.com/pwhe23) (Paul Wheeler)
   - [aleksd](https://github.com/aleksd)
   - [miketrebilcock](https://github.com/miketrebilcock) (Mike Trebilcock)
   - [markwoodhall](https://github.com/markwoodhall) (Mark Woodhall)
   - [theonlylawislove](https://github.com/theonlylawislove) (Paul Knopf)
   - [callumvass](https://github.com/callumvass) (Callum Vass)
   - [bpruitt-goddard](https://github.com/bpruitt-goddard)
   - [gregpakes](https://github.com/gregpakes) (Greg Pakes)
   - [caspiancanuck](https://github.com/caspiancanuck) (Caspian Canuck)
   - [merwer](https://github.com/merwer)
   - [pavelsavara](https://github.com/pavelsavara) (Pavel Savara)
   - [markwalls](https://github.com/markwalls) (Mark Walls)
   - [prasannavl](https://github.com/prasannavl) (Prasanna Loganathar)
   - [wilfrem](https://github.com/wilfrem)
   - [emiba](https://github.com/emiba)
   - [lucky-ly](https://github.com/lucky-ly) (Dmitry Svechnikov)
   - [hhandoko](https://github.com/hhandoko) (Herdy Handoko)
   - [datawingsoftware](https://github.com/datawingsoftware)
   - [tal952](https://github.com/tal952)
   - [bretternst](https://github.com/bretternst)
   - [kevinhoward](https://github.com/kevinhoward) (Kevin Howard)
   - [mattbutton](https://github.com/mattbutton) (Matt Button)
   - [torbenrahbekkoch](https://github.com/torbenrahbekkoch) (Torben Rahbek Koch)
   - [pilotmartin](https://github.com/pilotmartin) (Pilot Martin)
   - [catlion](https://github.com/catlion)
   - [tstade](https://github.com/tstade) (Toft Stade)
   - [niltz](https://github.com/niltz) (Jeff Sawatzky)
   - [nhalm](https://github.com/nhalm)
   - [fhurta](https://github.com/fhurta) (Filip Hurta)
   - [discobanan](https://github.com/discobanan)
   - [x-cray](https://github.com/x-cray)
   - [jeremistadler](https://github.com/jeremistadler) (Jeremi Stadler)
   - [bangbite](https://github.com/bangbite)
   - [felipesabino](https://github.com/felipesabino) (Felipe Sabino)
   - [xelom](https://github.com/xelom) (Arıl Bozoluk)
   - [shiweichuan](https://github.com/shiweichuan) (Weichuan Shi)
   - [kojoru](https://github.com/kojoru) (Konstantin Yakushev)
   - [eddiegroves](https://github.com/eddiegroves) (Eddie Groves)
   - [fetters5](https://github.com/fetters5)
   - [rcollette](https://github.com/rcollette) (Richard Collette)
   - [urihendler](https://github.com/urihendler) (Uri Hendler)
   - [laurencee](https://github.com/laurencee) (Laurence Evans)
   - [m-andrew-albright](https://github.com/m-andrew-albright) (Andrew Albright)
   - [lee337](https://github.com/lee337) (Lee Venkatsamy)
   - [kaza](https://github.com/kaza)
   - [mishfit](https://github.com/mishfit)
   - [rfvgyhn](https://github.com/rfvgyhn) (Chris)
   - [augustoproiete](https://github.com/augustoproiete) (C. Augusto Proiete)
   - [sjuxax](https://github.com/sjuxax) (Jeff Cook)
   - [madaleno](https://github.com/madaleno) (Luis Madaleno)
   - [yavosh](https://github.com/yavosh) (Yavor Shahpasov)
   - [fvoncina](https://github.com/fvoncina) (Facundo Voncina)
   - [devrios](https://github.com/devrios) (Dev Rios)
   - [bfkelsey](https://github.com/bfkelsey) (Ben Kelsey)
   - [maksimenko](https://github.com/maksimenko)
   - [dixon](https://github.com/dixon) (Jarrod Dixon)
   - [kal](https://github.com/kal) (Kal Ahmed)
   - [mhanney](https://github.com/mhanney) (Michael Hanney)
   - [bcms](https://github.com/bcms)
   - [mgravell](https://github.com/mgravell) (Marc Gravell)
   - [lafama](https://github.com/lafama) (Denis Ndwiga)
   - [jamesgroat](https://github.com/jamesgroat) (James Groat)
   - [jamesearl](https://github.com/jamesearl) (James Cunningham)
   - [remkoboschker](https://github.com/remkoboschker) (Remko Boschker)
   - [shelakel](https://github.com/shelakel)
   - [schmidt4brains](https://github.com/schmidt4brains) (Doug Schmidt)
   - [joplaal](https://github.com/joplaal)
   - [aifdsc](https://github.com/aifdsc) (Stephan Desmoulin)
   - [nicklarsen](https://github.com/nicklarsen) (NickLarsen)
   - [connectassist](https://github.com/connectassist) (Carl Healy)
   - [et1975](https://github.com/et1975) (Eugene Tolmachev)
   - [barambani](https://github.com/barambani)
   - [nhalm](https://github.com/et1975)


  ***


  ## Similar open source projects


  Similar Open source .NET projects for developing or accessing web services include:

   * [Nancy Fx](http://nancyfx.org) - A Sinatra-inspired lightweight Web Framework for .NET:
   * [Fubu MVC](https://fubumvc.github.io/) - A "Front Controller" pattern-style MVC framework designed for use in web applications built on ASP.NET:
   * [Rest Sharp](http://restsharp.org) - An open source REST client for .NET
rahulsom/swaggydoc: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CE1:2B946D:5376A82:5532F14:678EE3C5 and timestamp 2025-01-21 00:01:09
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
glennjones/hapi-swagger: >
  # hapi-swagger


  This is a [OpenAPI (aka Swagger)](https://openapis.org/) plug-in for [Hapi](https://hapi.dev/) When installed it will self document the API interface

  in a project.


  [![Maintainers Wanted](https://img.shields.io/badge/maintainers-wanted-red.svg?style=for-the-badge)](https://github.com/hapi-swagger/hapi-swagger/issues/718)

  ![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/hapi-swagger/hapi-swagger/node.js.yml?style=for-the-badge)

  [![npm downloads](https://img.shields.io/npm/dm/hapi-swagger.svg?style=for-the-badge)](https://www.npmjs.com/package/hapi-swagger)

  [![MIT license](http://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge)](https://raw.github.com/hapi-swagger/hapi-swagger/master/license.txt)


  ## Compatibility


  | Version | [Hapi](https://github.com/hapijs/hapi) | [Joi](https://github.com/sideway/joi) | Node   | Release Notes                                                   |

  | ------- | -------------------------------------- | ------------------------------------- | ------ | --------------------------------------------------------------- |

  | `16.x`  | `>=20.0.0 @hapi/hapi`                  | `>=17.0.0 joi`                        | `>=14` | [#795](https://github.com/hapi-swagger/hapi-swagger/issues/795) |

  | `15.x`  | `>=20.0.0 @hapi/hapi`                  | `>=17.0.0 joi`                        | `>=14` | [#782](https://github.com/hapi-swagger/hapi-swagger/issues/782) |

  | `14.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0 joi`                        | `>=12` | [#680](https://github.com/hapi-swagger/hapi-swagger/issues/680) |

  | `13.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0 @hapi/joi`                  | `>=12` | [#660](https://github.com/hapi-swagger/hapi-swagger/issues/660) |

  | `12.x`  | `>=19.0.0 @hapi/hapi`                  | `>=17.0.0 @hapi/joi`                  | `>=12` | [#644](https://github.com/hapi-swagger/hapi-swagger/issues/644) |

  | `11.x`  | `>=18.4.0 @hapi/hapi`                  | `>=16.0.0 @hapi/joi`                  | `>=8`  | [#631](https://github.com/hapi-swagger/hapi-swagger/issues/631) |

  | `10.x`  | `>=18.3.1 @hapi/hapi`                  | `>=14.0.0 @hapi/joi`                  | `>=8`  | [#587](https://github.com/hapi-swagger/hapi-swagger/issues/587) |

  | `9.x`   | `>=17 hapi`                            | `<14.0.0`                             | `>=8`  | [#487](https://github.com/hapi-swagger/hapi-swagger/issues/487) |

  | `7.x`   | `<17 hapi`                             | ???                                   | ???    | [#325](https://github.com/hapi-swagger/hapi-swagger/issues/325) |


  ## Installation


  You can add the module to your Hapi using npm:


  ```bash

  > npm install hapi-swagger --save

  ```


  **hapi-swagger** no longer bundles `joi` to fix [#648](https://github.com/hapi-swagger/hapi-swagger/issues/648). Install **hapi-swagger** with peer dependencies using:


  ```bash

  npx install-peerdeps hapi-swagger

  ```


  If you want to view the documentation from your API you will also need to install the `inert` and `vision` plugs-ins which support templates and static

  content serving.


  ```bash

  > npm install @hapi/inert --save

  > npm install @hapi/vision --save

  ```


  ## Documentation


  -   [Options Reference](optionsreference.md)

  -   [Usage Guide](usageguide.md)


  ## Quick start


  In your Hapi apps please check the main JavaScript file and add the following code to already created a Hapi `server` object.

  You will also add the routes for you API as describe on [hapi website](https://hapi.dev/).


  ```Javascript

  const Hapi = require('@hapi/hapi');

  const Inert = require('@hapi/inert');

  const Vision = require('@hapi/vision');

  const HapiSwagger = require('hapi-swagger');

  const Pack = require('./package');


  (async () => {
      const server = Hapi.server({
          port: 3000,
          host: 'localhost'
      });

      const swaggerOptions = {
          info: {
                  title: 'Test API Documentation',
                  version: Pack.version,
              },
          };

      await server.register([
          Inert,
          Vision,
          {
              plugin: HapiSwagger,
              options: swaggerOptions
          }
      ]);

      try {
          await server.start();
          console.log('Server running at:', server.info.uri);
      } catch(err) {
          console.log(err);
      }

      server.route(Routes);
  })();

  ```


  ### Tagging your API routes


  As a project may be a mixture of web pages and API endpoints you need to tag the routes you wish Swagger to

  document. Simply add the `tags: ['api']` property to the route object for any endpoint you want documenting.


  You can even specify more tags and then later generate tag-specific documentation. If you specify

  `tags: ['api', 'foo']`, you can later use `/documentation?tags=foo` to load the documentation on the

  HTML page (see next section).


  ```Javascript

  {
      method: 'GET',
      path: '/todo/{id}/',
      options: {
          handler: handlers.getToDo,
          description: 'Get todo',
          notes: 'Returns a todo item by the id passed in the path',
          tags: ['api'], // ADD THIS TAG
          validate: {
              params: Joi.object({
                  id : Joi.number()
                          .required()
                          .description('the id for the todo item'),
              })
          }
      },
  }

  ```


  Once you have tagged your routes start the application. **The plugin adds a page into your site with the route `/documentation`**,

  so the the full URL for the above options would be `http://localhost:3000/documentation`.


  ### Typescript


  **hapi-swagger** exports its own typescript definition file that can be used when registering the plugin with **Hapi**. See example below:


  #### Install Typescript Definition Files


  ```sh

  npm i @types/hapi__hapi @types/hapi__inert @types/hapi__joi @types/hapi__vision @types/node hapi-swagger --save-dev

  ```


  #### Register Plugin with Typescript


  ```typescript

  import * as Hapi from '@hapi/hapi';

  import * as HapiSwagger from 'hapi-swagger';


  // code omitted for brevity


  const swaggerOptions: HapiSwagger.RegisterOptions = {
      info: {
          title: 'Test API Documentation'
      }
  };


  const plugins: Array<Hapi.ServerRegisterPluginObject<any>> = [
      {
          plugin: Inert
      },
      {
          plugin: Vision
      },
      {
          plugin: HapiSwagger,
          options: swaggerOptions
      }
  ];


  await server.register(plugins);

  ```


  ## Contributing


  Read the [contributing guidelines](./.github/CONTRIBUTING.md) for details.


  ## Thanks


  I would like to thank all that have contributed to the project over the last couple of years. This is a hard project to maintain, getting Hapi to work with Swagger is like putting a round plug in a square hole. Without the help of others it would not be possible.
stemey/gform-admin: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD0:1F5FC7:552B2EC:56E7567:678EE3D5 and timestamp 2025-01-21 00:01:25
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mac-/ratify: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD1:124B:D0E97E:D75D3D:678EE3B1 and
  timestamp 2025-01-21 00:00:49
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
marcgibbons/django-rest-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD6:1EDF9F:2502FBD:25BC388:678EE3B2 and timestamp 2025-01-21 00:00:50
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
signalfx/swagger-client-generator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44B5BCB:462CDD1:678EE3CD and timestamp 2025-01-21 00:01:17
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
solso/source2swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D15FA4:D7D5A9:678EE3D2 and timestamp 2025-01-21 00:01:22
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
myfreeweb/octohipster: >
  Current [semantic](http://semver.org/) version:


  ```clojure

  [octohipster "0.2.1-SNAPSHOT"]

  ```


  # octohipster [![Build Status](https://travis-ci.org/myfreeweb/octohipster.png?branch=master)](https://travis-ci.org/myfreeweb/octohipster) [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)


  Octohipster is


  - a REST library/toolkit/microframework for Clojure

  - that allows you to build HTTP APIs

  - in a declarative [Webmachine](https://github.com/basho/webmachine/wiki/Overview)-like style, using [Liberator](https://github.com/clojure-liberator/liberator)

  - powered by [Ring](https://github.com/ring-clojure/ring); you can add [rate limiting](https://github.com/myfreeweb/ring-ratelimit), [authentication](https://github.com/cemerick/friend), [metrics](http://metrics-clojure.readthedocs.org/en/latest/ring.html), [URL rewriting](https://github.com/ebaxt/ring-rewrite) and more with just middleware


  It allows you to make APIs that


  - support hypermedia ([HAL+JSON](http://stateless.co/hal_specification.html), [Collection+JSON](http://amundsen.com/media-types/collection/) and Link/Link-Template HTTP headers; works with [Frenetic](http://dlindahl.github.com/frenetic/))

  - support multiple output formats (JSON, EDN, YAML and any custom format)

  - have [Swagger](https://github.com/wordnik/swagger-core/wiki) documentation 

  - use [JSON Schema](http://json-schema.org) for validation *and* documentation

  - have pagination


  ## Concepts


  - a **resource** is a single endpoint that accepts requests and returns responses

  - a **group** is a collection of resources with a single URL prefix (eg. a group /things contains resources /things/ and /things/{id}) and zero or more shared properties (usually the schema)

  - a **documenter** is a function that returns a resource which documents regular resources (Swagger, HAL root, etc)

  - a **mixin** is a function that is applied to multiple resources to give them shared behavior (eg. collection or entry behavior)

  - a **response handler** is a function that is used to encode response data to a particular content-type (JSON, EDN, YAML, etc.)

  - a **params handler** is a function that is used to decode incoming data from a particular content-type (JSON, EDN, YAML, etc.)


  ## Usage


  ```clojure

  (ns example
    (:use [octohipster core routes mixins pagination]
          [octohipster.documenters swagger schema]
          org.httpkit.server)
    (:import org.bson.types.ObjectId)
    (:require [monger.core :as mg]
              [monger.query :as mq]
              [monger.collection :as mc]
              monger.json))

  (mg/connect!)

  (mg/set-db! (mg/get-db "octohipster-example"))


  ;;;; The "model"

  ;;;;  tip: make it a separate namespace, eg. app.models.contact

  (def contact-schema
    {:id "Contact"
     :type "object"
     :properties {:name {:type "string"}
                  :phone {:type "integer"}}
     :required [:name]})

  (defn contacts-count [] (mc/count "contacts"))

  (defn contacts-all []
    (mq/with-collection "contacts"
      (mq/find {})
      (mq/skip *skip*)
      (mq/limit *limit*)))
  (defn contacts-find-by-id [x] (mc/find-map-by-id "contacts" (ObjectId. x)))

  (defn contacts-insert! [x]
    (let [id (ObjectId.)]
      (mc/insert "contacts" (assoc x :_id id))
      (mc/find-map-by-id "contacts" id)))
  (defn contacts-update! [x old] (mc/update "contacts" old x :multi false))

  (defn contacts-delete! [x] (mc/remove "contacts" x))


  ;;;; The resources

  ;; with shared pieces of documentation

  (def name-param
    {:name "name", :dataType "string", :paramType "path", :required "true", :description "The name of the contact", :allowMultiple false})

  (def body-param
    {:dataType "Contact", :paramType "body", :required true, :allowMultiple false})

  (defresource contact-collection
    :desc "Operations with multiple contacts"
    :mixins [collection-resource]
    :clinks {:item ::contact-item}
    :data-key :contacts
    :exists? (fn [ctx] {:contacts (contacts-all)})
    :post! (fn [ctx] {:item (-> ctx :request :non-query-params contacts-insert!)})
    :count (fn [req] (contacts-count))
    :doc {:get {:nickname "getContacts", :summary "Get all contacts"}
          :post {:nickname "createContact", :summary "Create a contact"}})

  (defresource contact-item
    :desc "Operations with individual contacts"
    :url "/{_id}"
    :mixins [item-resource]
    :clinks {:collection ::contact-collection}
    :data-key :contact
    :exists? (fn [ctx]
               (if-let [doc (-> ctx :request :route-params :_id contacts-find-by-id)]
                 {:contact doc}))
    :put! (fn [ctx]
            (-> ctx :request :non-query-params (contacts-update! (:contact ctx)))
            {:contact (-> ctx :request :route-params :_id contacts-find-by-id)})
    :delete! (fn [ctx]
               (-> ctx :contact contacts-delete!)
               {:contact nil})
    :doc {:get {:nickname "getContact", :summary "Get a contact", :parameters [name-param]}
          :put {:nickname "updateContact", :summary "Overwrite a contact", :parameters [name-param body-param]}
          :delete {:nickname "deleteContact", :summary "Delete a contact", :parameters [name-param]}})

  ;;;; The group

  (defgroup contact-group
    :url "/contacts"
    :add-to-resources {:schema contact-schema}  ; instead of typing the same for all resources in the group
    :resources [contact-collection contact-item])

  ;;;; The handler

  (defroutes site
    :groups [contact-group]
    :documenters [schema-doc schema-root-doc swagger-doc swagger-root-doc])

  (defn -main [] (run-server site {:port 8080}))

  ```


  Also, [API Documentation](http://myfreeweb.github.com/octohipster) is available.


  ## Contributing


  By participating in this project you agree to follow the [Contributor Code of Conduct](http://contributor-covenant.org/version/1/1/0/).


  Please take over the whole project!  

  I don't use Clojure a lot nowadays.  

  Talk to me: <greg@unrelenting.technology>.


  ## License


  This is free and unencumbered software released into the public domain.  

  For more information, please refer to the `UNLICENSE` file or [unlicense.org](http://unlicense.org).
gettyimages/spray-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44ABBED:4622ACD:678EE39D and timestamp 2025-01-21 00:00:29
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
skrusty/dotswaggen: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD2:4925F:44B634E:462D56A:678EE3CF and timestamp 2025-01-21 00:01:19
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
yvasiyarov/swagger: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC4:2AAE2C:512B44F:52E6E4C:678EE3EE and timestamp 2025-01-21 00:01:50
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
SerenaFeng/tornado-swagger: >
  # tornado-swagger


  ## What is tornado-swagger?

  tornado is a wrapper for tornado which enables swagger-ui support.


  In essense, you just need to wrap the Api instance and add a few python decorators to get full swagger support.


  ## How to:

  Install:


  ```

  pip install .

  ```

  (This installs tornado and epydoc as well)



  And in your program, where you'd usually just use tornado, add just a little bit of sauce and get a swagger spec out.



  ```python

  from tornado.web import RequestHandler, HTTPError

  from tornado_swagger import swagger


  swagger.docs()


  # You may decorate your operation with @swagger.operation and use docs to inform information

  class ItemNoParamHandler(GenericApiHandler):
      @swagger.operation(nickname='create')
      def post(self):
          """
              @param body: create test results for a item.
              @type body: L{Item}
              @return 200: item is created.
              @raise 400: invalid input
          """

  # Operations not decorated with @swagger.operation do not get added to the swagger docs


  class ItemNoParamHandler(GenericApiHandler):
      def options(self):
          """
          I'm not visible in the swagger docs
          """
          pass


  # Then you use swagger.Application instead of tornado.web.Application

  # and do other operations as usual


  def make_app():
      return swagger.Application([
          (r"/items", ItemNoParamHandler),
          (r"/items/([^/]+)", ItemHandler),
          (r"/items/([^/]+)/cases/([^/]+)", ItemOptionParamHandler),
      ])

  # You define models like this:

  @swagger.model

  class Item:
      """
          @descriptin:
              This is an example of a model class that has parameters in its constructor
              and the fields in the swagger spec are derived from the parameters to __init__.
          @notes:
              In this case we would have property1, property2 as required parameters and property3 as optional parameter.
          @property property3: Item decription
          @ptype property3: L{PropertySubclass}
      """
      def __init__(self, property1, property2=None):
          self.property1 = property1
          self.property2 = property2

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                      "default": null
                  }
              ]
          }
      }

  # If you declare an __init__ method with meaningful arguments

  # then those args could be used to deduce the swagger model fields.

  # just as shown above


  # if you declare an @property in docs, this property property2 will also be used to deduce the swagger model fields

  class Item:
      """
          @property property3: Item description
      """
      def __init__(self, property1, property2):
          self.property1 = property1
          self.property2 = property2

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                  }
                  "property3": {
                      "type": "string"
                  }
              ]
          }
      }

  # if you declare an argument with @ptype, the type of this argument will be specified rather than the default 'string'

  class Item:
      """
          @ptype property3: L{PropertySubclass}
      """
      def __init__(self, property1, property2, property3=None):
          self.property1 = property1
          self.property2 = property2
          self.property3 = property3

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                  },
                  "property3": {
                      "type": "PropertySubclass"
                      "default": null
                  }
              ]
          }
      }

  # if you want to declare an list property, you can do it like this:

  class Item:
      """
          @ptype property3: L{PropertySubclass}
          @ptype property4: C{list} of L{PropertySubclass}
      """
      def __init__(self, property1, property2, property3, property4=None):
          self.property1 = property1
          self.property2 = property2
          self.property3 = property3
          self.property4 = property4

  # Swagger json:
      "models": {
          "Item": {
              "description": "A description...",
              "id": "Item",
              "required": [
                  "property1",
              ],
              "properties": [
                  "property1": {
                      "type": "string"
                  },
                  "property2": {
                      "type": "string"
                  },
                  "property3": {
                      "type": "PropertySubclass"
                      "default": null
                  },
                  "property4": {
                      "default": null,
                      "items": {
                          "type": "PropertySubclass"},
                          "type": "array"
                      }
                  }
              ]
          }
      }
  ```


  # Running and testing


  Now run your tornado app


  ```

  python basic.py

  ```


  And visit:


  ```

  curl http://localhost:7111/swagger/spec

  ```


  access to web

  ```

  http://localhost:7111/swagger/spec.html

  ```


  # Passing more metadata to swagger

  customized arguments used in creating the 'swagger.docs' object will be supported later
siemens/restapidoc: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD4:2B946D:5378015:55344F2:678EE3CA and timestamp 2025-01-21 00:01:14
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
josephpconley/swagger2postman: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24FFC75:25B8F3A:678EE3A4 and timestamp 2025-01-21 00:00:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
wonderlic/swagger-validation: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD8:2AAE2C:512A427:52E5DC9:678EE3E9 and timestamp 2025-01-21 00:01:45
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
signalfx/swagger-validate: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:250997F:25C2F32:678EE3CE and timestamp 2025-01-21 00:01:18
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
DarthFubuMVC/fubumvc: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD5:124B:CFC80F:D635A2:678EE359 and timestamp 2025-01-20 23:59:21
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
kenshoo/swagger-validator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDD:B00D1:5227807:53E428C:678EE3A5 and timestamp 2025-01-21 00:00:37
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
nelmio/NelmioApiDocBundle: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD8:2AAE2C:511F9E9:52DB068:678EE3BB and timestamp 2025-01-21 00:00:59
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
astaxie/beego: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CCF:2AAE2C:5111DF8:52CD00A:678EE37F
  and timestamp 2025-01-20 23:59:59
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
signalfx/swagger-ajax-client: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:5378129:5534609:678EE3CB and timestamp 2025-01-21 00:01:15
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-api/swagger-ui: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC3:4925F:44B8BD7:462FED4:678EE3DB and timestamp 2025-01-21 00:01:32
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
wkennedy/swagger4spring-web: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCC:2AAE2C:512A317:52E5CC2:678EE3E9 and timestamp 2025-01-21 00:01:45
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
sun-opsys/api-doc: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCD:2AAE2C:5126941:52E21B4:678EE3D8 and timestamp 2025-01-21 00:01:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
abelsilva/swaggerwcf: >
  <h1 align="left">

  SwaggerWcf&nbsp;<a href="https://www.nuget.org/packages/SwaggerWcf">
          <img src="http://img.shields.io/nuget/v/SwaggerWcf.svg?style=flat" alt="nuget status">
      </a>
  </h1>


  Generates [Swagger](http://swagger.io/) (2.0) for WCF services and also provides [swagger-ui](https://github.com/swagger-api/swagger-ui).


  With an API described in Swagger you can use multiple Swagger tools like client generators, see [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more details.


  This project has started as a fork from [superstator/Swaggeratr](https://github.com/superstator/Swaggeratr) to implement version 2.0 of Swagger.


  ## Getting Started


  ### Step 1: Install SwaggerWcf package


  ```


  Install-Package SwaggerWcf


  ```


  ### Step 2: Configure WCF

  #### ASP.NET


  Add the route in the `Application_Start` method inside `Global.asax`


  ```csharp


  protected void Application_Start(object sender, EventArgs e)

  {
      // [.......]
      
      RouteTable.Routes.Add(new ServiceRoute("api-docs", new WebServiceHostFactory(), typeof(SwaggerWcfEndpoint)));
  }


  ```


  Note: You might need to add a reference to `System.ServiceModel.Activation`


  Edit `Web.config` and add the following (if it doesn't exist yet) inside the `system.serviceModel` block


  ```xml


  <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true"/>


  ```


  Edit again `Web.config` and add the following (if it doesn't exist yet) inside the `system.webServer` block


  ```xml


  <modules runAllManagedModulesForAllRequests="true"/>


  ```

  #### Self Hosted

  Add an endpoint to your App.config file.

  ```xml

  <services>
    <service name="SwaggerWcf.SwaggerWcfEndpoint">
      <endpoint address="http://localhost/docs" binding="webHttpBinding" contract="SwaggerWcf.ISwaggerWcfEndpoint" />
    </service>
  </services>

  ```

  Create a WebServiceHost

  ```csharp

  var swaggerHost = new WebServiceHost(typeof(SwaggerWcfEndpoint));

  swaggerHost.Open();

  ```


  ### Step 3: Optionaly configure WCF response auto types


  Add the following to your config file.

  This will allow the WCF service to accept requests and send replies based on the `Content-Type` headers.


  ```xml


  <system.serviceModel>
    <behaviors>
      <endpointBehaviors>
        <behavior>
          <webHttp automaticFormatSelectionEnabled="true" />
        </behavior>
      </endpointBehaviors>
      <!-- [.......] -->
    </behaviors>
  </system.serviceModel>
    
  ```


  ### Step 4: Configure WCF services general information

  #### Configure via config file

  Add the following to your config file and change the values accordingly


  ```xml

  <configSections>
    <section name="swaggerwcf" type="SwaggerWcf.Configuration.SwaggerWcfSection, SwaggerWcf" />
  </configSections>


  <swaggerwcf>
    <tags>
      <tag name="LowPerformance" visible="false" />
    </tags>
    <settings>
      <setting name="InfoDescription" value="Sample Service to test SwaggerWCF" />
      <setting name="InfoVersion" value="0.0.1" />
      <setting name="InfoTermsOfService" value="Terms of Service" />
      <setting name="InfoTitle" value="SampleService" />
      <setting name="InfoContactName" value="Abel Silva" />
      <setting name="InfoContactUrl" value="http://github.com/abelsilva" />
      <setting name="InfoContactEmail" value="no@e.mail" />
      <setting name="InfoLicenseUrl" value="https://github.com/abelsilva/SwaggerWCF/blob/master/LICENSE" />
      <setting name="InfoLicenseName" value="Apache License" />
    </settings>
  </swaggerwcf>

  ```


  Notes:

  * make sure the `configSections` block is the first child of `configuration`

  * `tags` will be described further down


  #### Configure via code

  Configure the base properties via code. New: You can add security settings to your api (see also the new Security-Methodattribute)


  ```csharp

  var info = new Info

  {

  Description = "Sample Service to test SwaggerWCF",

  Version = "0.0.1"

  // etc

  };


  var security = new SecurityDefinitions

  {
    {
      "api-gateway", new SecurityAuthorization
      {
        Type = "oauth2",
        Name = "api-gateway",
        Description = "Forces authentication with credentials via an api gateway",
        Flow = "password",
        Scopes = new Dictionary<string, string="">
        {
            { "author", "use author scope"},
            { "admin", "use admin scope"},
        },
        AuthorizationUrl = "http://yourapi.net/oauth/token"
      }
    }
  };


  SwaggerWcfEndpoint.Configure(info, security);

  ```


  ### Step 5: Decorate WCF services interfaces


  For each method, configure the `WebInvoke` or `WebGet` attribute, and add a `SwaggerWcfPath` attribute.


  ```csharp


  [ServiceContract]

  public interface IStore

  {
      [SwaggerWcfPath("Create book", "Create a book on the store")]
      [WebInvoke(UriTemplate = "/books",
          BodyStyle = WebMessageBodyStyle.Bare,
          Method = "POST",
          RequestFormat = WebMessageFormat.Json,
          ResponseFormat = WebMessageFormat.Json)]
      [OperationContract]
      Book CreateBook(Book value);
      
      // [.......]
  }


  ```


  ### Step 6: Decorate WCF services class


  Add the `SwaggerWcf` and `AspNetCompatibilityRequirements` attributes to the class providing the base path for the service (the same as used in step 2).

  Optinally, for each method, add the `SwaggerWcfTag` to categorize the method and the `SwaggerWcfResponse` for each possible response from the service.


  ```csharp


  [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]

  [SwaggerWcf("/v1/rest")]

  public class BookStore : IStore

  {
      [SwaggerWcfTag("Books")]
      [SwaggerWcfResponse(HttpStatusCode.Created, "Book created, value in the response body with id updated")]
      [SwaggerWcfResponse(HttpStatusCode.BadRequest, "Bad request", true)]
      [SwaggerWcfResponse(HttpStatusCode.InternalServerError,
          "Internal error (can be forced using ERROR_500 as book title)", true)]
      public Book CreateBook(Book value)
      {
          // [.......]
      }
      
      // [.......]
  }


  ```


  ### Step 7: Decorate data types used in WCF services


  ```csharp


  [DataContract(Name = "book")]

  [Description("Book with title, first publish date, author and language")]

  [SwaggerWcfDefinition(ExternalDocsUrl = "http://en.wikipedia.org/wiki/Book", ExternalDocsDescription = "Description of a book")]

  public class Book

  {
      [DataMember(Name = "id")]
      [Description("Book ID")]
      public string Id { get; set; }

      // [.......]
  }


  ```


  Note: make sure you add at least the `DataContract` and `DataMember` attributes in classes and properties


  ## Attributes


  | Attribute                | Used in                                    | Description                            | Options                                                                                             |

  | ------------------------ |------------------------------------------- | -------------------------------------- | --------------------------------------------------------------------------------------------------- |

  | `SwaggerWcf`             | `Class`, `Interface`                       | Enable parsing WCF service             | `ServicePath`                                                                                       |

  | `SwaggerWcfHidden`       | `Class`, `Method`, `Property`, `Parameter` | Hide element from Swagger              |                                                                                                     |

  | `SwaggerWcfTag`          | `Class`, `Method`, `Property`, `Parameter` | Add a tag to an element                | `TagName`, `HideFromSpec`                                                                           |

  | `SwaggerWcfHeader`       | `Method`                                   | Configure method HTTP headers          | `Name`, `Required`, `Description`, `DefaultValue`                                                   |

  | `SwaggerWcfPath`         | `Method`                                   | Configure a method in Swagger          | `Summary`, `Description`, `OperationId`, `ExternalDocsDescription`, `ExternalDocsUrl`, `Deprecated` |

  | `SwaggerWcfParameter`    | `Parameter`                                | Configure method parameters            | `Required`, `Description`, `ParameterType`                                                          |

  | `SwaggerWcfProperty`     | `Property`                                 | Configure property parameters          | `Required`, `Description`, `Minimum`, `Maximum`, `Default`, ...                                     |

  | `SwaggerWcfResponse`     | `Method`                                   | Configure method return value          | `Code`, `Description`, `EmptyResponseOverride`, `Headers`                                           |

  | `SwaggerWcfDefinition`   | `Class`                                    | Configure a data type                  | `ExternalDocsDescription`, `ExternalDocsUrl`                                                        |

  | `SwaggerWcfReturnType`   | `Method`                                   | Override method return type            | `ReturnType`                                                                                        |

  | `SwaggerWcfContentTypes` | `Method`                                   | Override consume/produce content-types | `ConsumeTypes`, `ProduceTypes`                                                                      |

  | `SwaggerWcfSecurity`     | `Method`                                   | Add security background to this method | `SecurityDefinitionName`, `params Scopes`                                                           |



  ## Tags


  Tags are used to create categories in Swagger UI.


  In SwaggerWcf they can also be used to hide or show elements from the Swagger output using the configuration file.


  Using the configuration from step 4, any elements with the tag `LowPerformance` will be hidden from Swagger.


  When a `SwaggerWcfTag` is added to an element, it may be configured with `HideFromSpec`.

  This will prevent this tag to be displayed in the Swagger output.


  When combined with `SwaggerWcfHidden`, if the tag has the value `visible` as `true` in `web.config` file, the element will be visible


  ## Query Parameter


  To specify query parameters to a function you may use the following syntax


  ```csharp

  [WebGet(UriTemplate = "/books?filter={filter}", BodyStyle = WebMessageBodyStyle.Bare)]

  Book[] ReadBooks(string filter = null);

  ```


  ## Optional Parameters


  To specify a paramter as optional for swagger-ui provide a default value for the parameter on the interface.

  ```csharp

  public string Foo(string bar = null);

  ```


  ## Optional Properties


  To mark a property as optional or required, use the `IsRequired` parameter on the `DataMember` attribute.



  ## TODO


  * Add some options to configuration in `Web.config`

  * Tests


  ## How to Improve It


  Fork this project [abelsilva/swaggerwcf](https://github.com/abelsilva/swaggerwcf) and submit pull requests.
fleekjs/fleek-parser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D08718:D6F91B:678EE395 and timestamp 2025-01-21 00:00:21
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
pipermerriam/flex: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD9:124B:D125C2:D79A98:678EE3C2 and timestamp 2025-01-21 00:01:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
yahehe/Nancy.Swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCF:2AAE2C:512AF18:52E6903:678EE3ED and timestamp 2025-01-21 00:01:49
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
penx/openapi-mock: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD0:1F5FC7:55266F4:56E2817:678EE3C0 and timestamp 2025-01-21 00:01:04
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apigee/undefined: '{"message":"Not
  Found","documentation_url":"https://docs.github.com/rest/repos/contents#get-a-repository-readme","status":"404"}'
xerions/phoenix_swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D1B450:D82C12:678EE3EC and timestamp 2025-01-21 00:01:48
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apiaryio/fury-adapter-swagger: >
  # Fury Swagger 2.0 Adapter


  This repository has moved location to [API Elements: JS](https://github.com/apiaryio/api-elements.js).
fleekjs/fleek-response: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D088F6:D6FAEC:678EE396 and timestamp 2025-01-21 00:00:22
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
marcelojaloto/SwagDoc: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD5:124B:D0ECB7:D7608F:678EE3B2 and timestamp 2025-01-21 00:00:50
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
senchalabs/connect: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC9:201941:57CB68F:5987C31:678EE3C9 and timestamp 2025-01-21 00:01:13
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Yelp/bravado: >
  .. image::
  https://github.com/Yelp/bravado/workflows/build/badge.svg?branch=master
    :target: https://github.com/Yelp/bravado/actions?query=workflow%3Abuild

  .. image:: https://img.shields.io/coveralls/Yelp/bravado.svg
    :target: https://coveralls.io/r/Yelp/bravado

  .. image:: https://img.shields.io/pypi/v/bravado.svg
      :target: https://pypi.python.org/pypi/bravado/
      :alt: PyPi version

  .. image:: https://img.shields.io/pypi/pyversions/bravado.svg
      :target: https://pypi.python.org/pypi/bravado/
      :alt: Supported Python versions

  Bravado

  ==========


  About

  -----


  Bravado is a Yelp maintained fork of `digium/swagger-py <https://github.com/digium/swagger-py/>`__

  for use with `OpenAPI Specification version 2.0 <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md>`__ (previously

  known as Swagger).


  From the OpenAPI Specification project:

      The goal of The OpenAPI Specification is to define a standard,
      language-agnostic interface to REST APIs which allows both humans and
      computers to discover and understand the capabilities of the service
      without access to source code, documentation, or through network traffic
      inspection.

  Client libraries can automatically be generated from the OpenAPI specification,

  however Bravado aims to be a complete replacement for code generation

  (`swagger-codegen <https://github.com/wordnik/swagger-codegen>`__).


  Example Usage

  -------------


  .. code-block:: Python

      from bravado.client import SwaggerClient
      client = SwaggerClient.from_url('http://petstore.swagger.io/v2/swagger.json')
      pet = client.pet.getPetById(petId=1).response().result

  Example with Basic Authentication

  ---------------------------------


  .. code-block:: python

      from bravado.requests_client import RequestsClient
      from bravado.client import SwaggerClient

      http_client = RequestsClient()
      http_client.set_basic_auth(
          'api.yourhost.com',
          'username', 'password'
      )
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=1).response().result

  Example with Header Authentication

  ----------------------------------


  .. code-block:: python

      from bravado.requests_client import RequestsClient
      from bravado.client import SwaggerClient

      http_client = RequestsClient()
      http_client.set_api_key(
          'api.yourhost.com', 'token',
          param_name='api_key', param_in='header'
      )
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=1).response().result

  Example with Fido Client (Async Http Client)

  --------------------------------------------


  .. code-block:: python

      # Install bravado with fido extra (``pip install bravado[fido]``)
      from bravado.fido_client import FidoClient
      from bravado.client import SwaggerClient

      http_client = FidoClient()
      client = SwaggerClient.from_url(
          'http://petstore.swagger.io/v2/swagger.json',
          http_client=http_client,
      )
      pet = client.pet.getPetById(petId=1).response().result

  Documentation

  -------------


  More documentation is available at http://bravado.readthedocs.org


  Installation

  ------------


  .. code-block:: bash

      # To install bravado with Synchronous Http Client only.
      $ pip install bravado

      # To install bravado with Synchronous and Asynchronous Http Client (RequestsClient and FidoClient).
      $ pip install bravado[fido]

  Development

  ===========


  Code is documented using `Sphinx <http://sphinx-doc.org/>`__.


  `virtualenv <https://virtualenv.readthedocs.io/en/latest/>`__. is

  recommended to keep dependencies and libraries isolated.


  Setup

  -----


  .. code-block:: bash

      # Run tests
      tox

      # Install git pre-commit hooks
      tox -e pre-commit install

  Contributing

  ------------


  1. Fork it ( http://github.com/Yelp/bravado/fork )

  2. Create your feature branch (``git checkout -b my-new-feature``)

  3. Add your modifications

  4. Commit your changes (``git commit -m "Add some feature"``)

  5. Push to the branch (``git push origin my-new-feature``)

  6. Create new Pull Request


  Releasing a new version (Yelpers only)

  --------------------------------------

  See https://yelpwiki.yelpcorp.com/pages/viewpage.action?pageId=19022447


  License

  -------


  Copyright (c) 2013, Digium, Inc. All rights reserved.

  Copyright (c) 2014-2021, Yelp, Inc. All rights reserved.


  Bravado is licensed with a `BSD 3-Clause

  License <http://opensource.org/licenses/BSD-3-Clause>`__.
stackia/test2doc.js: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDB:124B:D166DF:D7DCEF:678EE3D4 and timestamp 2025-01-21 00:01:24
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
RobWin/assertj-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCC:2AAE2C:510E76C:52C9823:678EE36B and timestamp 2025-01-20 23:59:39
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mobilcom-debitel/got-swag: >
  # Got Swag?


  A tool to test Swagger-powered APIs automatically through monkey testing.

  Also allows for custom tests written directly in Swagger files

  or in separate test suites.

  Includes command-line and programmatic interfaces.

  Install via `npm install got-swag -g`.


  ## Usage


  ```

  got-swag <url> ... [-m] [-t <ms>] [-T] [-v] [-w]
    Test a Swagger URL or file (YAML). Additional files are merged.

  Options:
    -m, --monkey        Run monkey tests on GET endpoints
    -l, --monkey-limit  Maximum number of parameter combinations for each
                        monkey GET, default is 50
    -t, --timeout <ms>  Set a timeout (in milliseconds) for test step execution,
                        default is 2000 ms
    -T, --trace         Trace: Log requests and responses
    -V, --version       Show version
    -w, --watch         Watch the Swagger files and rerun tests on changes
  ```


  Most Mocha options are valid. See https://mochajs.org/#usage for details.



  ## Monkey Testing


  The most basic usage of `got-swag` is monkey testing:

  Each GET endpoint of a service is validated using minimal variable

  input, if any, and the definitions from the services' Swagger file.

  The endpoints are requested with random authentication/variable combinations

  until one combination leads to a response status code less than 400.


  Just invoke got-swag on a URL with the `-m` switch:


  ```

  got-swag http://petstore.swagger.io/v2/swagger.json -m

  ```


  See [monkeystore.yaml](examples/monkeystore.yaml) for an example of input variables.



  ## Custom Tests


  Additionally, `got-swag` allows to embed custom tests in Swagger files

  or separate test suites.

  The test steps are written in JS using a small domain-specific language.

  Every step is evaluated, even if a previous step failed.


  For example, see [petstore.yaml](examples/petstore.yaml) (embedded) and

  [yoda.yaml](examples/yoda.yaml) (separate).



  ## Test Syntax Reference


  ### [Assertions](https://nodejs.org/api/assert.html)


  - `ok( actual )`

  - `equal( actual, expected )`

  - `notEqual( actual, expected )`

  - `deepEqual( actual, expected )`

  - `notDeepEqual( actual, expected )`

  - `strictEqual( actual, expected )`

  - `notStrictEqual( actual, expected )`

  - `deepStrictEqual( actual, expected )`

  - `notDeepStrictEqual( actual, expected )`

  - `match( actualString, expectedPattern )`


  ### Validation


  - `validate( data, schema )`
    - Validate JSON data against a [JSON schema](http://json-schema.org/)
    - If `data` or `schema` are omitted (strictly equal to `undefined`),
      the last response is validated against the current operation's response schema

  ### Requests


  - `request( options )`
    - Requests the current endpoint
    - `options` is optional, see [http](https://nodejs.org/api/http.html)
    - `options.data` sets the request body
  - Shortcuts:
    - `get( url, headers )`
    - `post( url, data, headers )`
    - `put( url, data, headers )`
    - `delete( url, headers )`
    - `options( url, headers )`
    - `head( url, headers )`
    - Use `null` for `url` to request the current endpoint
    - `headers` are optional

  ### Authentication


  - `auth( securityDefinitionId, credentials, scopes )`
    - Authenticates against a security definition
    - `scopes` are optional and inferred from the API if possible

  ### Utility


  - `encodeURIComponent( s )` encodes a string for URI transmission

  - `log( value )` logs a value

  - `stringify( value )` alias of JSON.stringify

  - `parse( string )` alias of JSON.parse

  - `byteLength( string )` alias of Buffer.byteLength for computing 'Content-Length' header manually 

  - `monkeyAuth()` tries to authenticate using known method/credentials

  - `monkeyGet()` tries to GET using known parameters


  ### Variables


  - `vars`: Variables reusable for all tests
    - You can write to `vars` in test steps, see example
  - `req`: Last request data

  - `res`: Last response data
    - `res.statusCode`: Integer response status code
    - `res.headers`: Response headers
    - `res.body`: String response body
    - `res.json`: Parsed JSON response, if any
  - `api`: Complete Swagger API


  ### Extension Syntax


  You can define extension Swagger files on top of existing Swagger files

  using the `'#/path': value` syntax.

  For reference, see [extended-petstore.yaml](examples/extended-petstore.yaml).



  ## Programmatic Usage


  ```js

  var gotSwag = require( 'got-swag' );


  // test api and report as JSON

  gotSwag.test( 'swag.yaml', 'vars.yaml' ).then( function ( report ) {
    console.log( report );
  } );


  // describe mocha tests in current suite

  describe( 'My test suite', function () {
    gotSwag.describe( 'swag.yaml', 'vars.yaml', { parent: this } );
  } );

  ```



  ## Notes


  - Currently, `got-swag` only supports JSON

  - The DSL is sandboxed using [vm](https://nodejs.org/api/vm.html)

  - If you see something like
    `.../node_modules/got-swag/lib/validate.js:24 throw new Error( result.errors );`
    in your console, it's a [Node.js Bug](https://github.com/nodejs/node/issues/7397)
metosin/ring-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC7:1EDF9F:250380E:25BCC05:678EE3B4 and timestamp 2025-01-21 00:00:52
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
byjg/php-swagger-test: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D03352:D6A41A:678EE380 and timestamp 2025-01-21 00:00:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
alekseyl/mini-apivore: >
  # MiniApivore


  MiniApivore is an adaptation of the apivore gem for mini-test instead of rspec. 


  Original project: https://github.com/westfieldlabs/apivore


  So base credits should go to the apivore authors, this is 60% copy/paste of original project. 

  Rem: didn't forked it cause didn't expect it to be a relatively small set of changes.


  Code-Test-Document, the idea of how things are need to be done: https://medium.com/@leshchuk/code-test-document-9b79921307a5


  ## What's new/different

  * Swagger schema can be loaded from a file or directly. There can be one schema per MiniTestClass. 

  * Removed all dependencies of active support and rails. See tests as an example on how 
    to use a mini-apivore outside a rails 
  * Didn't implement a custom schema validator ( but I kept the original schema and code from apivore in case of a future need )

  * The test for untested routes now added by default at the end of all runnable_methods

  * Much more simplified tests against original project, rspec is replaced with minitest

  * Removed all rspec dependencies and usage.


  ## Installation


  Add this line to your application's Gemfile:


  ```ruby

  gem 'mini-apivore'

  ```


  And then execute:

      $ bundle

  Or install it yourself as:

      $ gem install mini-apivore

  ## Usage


  To start testing routes with mini_apivore you need: 


  * ```require 'mini_apivore' ``` in you MiniTest class file

  * ```include MiniApivore``` in you MiniTest class 

  * ```init_swagger('/apidocs.json')``` init swagger-schema against which yourtest are gonna run

  * Run ```check_route( :get, '/cards.json', OK )``` against all routes in your swagger schema


  You can see example in test/mini_apivore/mini_apivore/api_schemas_test.rb


  Here another complete example of testing simple internal REST api for Card model 

  with devise integration as authentication framework


  ```ruby

  #mini_apivore_helper.rb

  require 'mini_apivore'


  # this is simple intermediate class for apivore tes classes

  class MiniApivoreTest < ActionDispatch::IntegrationTest
    include Devise::Test::IntegrationHelpers
    include MiniApivore

    # swagger checker initialized once per class, but since we using one definition
    # for all we can just redefine original swagger_checker
    def swagger_checker;
      SWAGGER_CHECKERS[MiniApivoreTest]
    end

    
  end

  ```


  The most readable way to handle check_routes, especially when you have nested resources i.e. like always :), 

  is to create a set of named route helpers for the TestClass, may be even extract it to a module if it's a generalized helpers.


  Then you need to redefine ```prepare_error_backtrace```, cause assert for correct execution is hidden deep in stack
   and instead of pointing to just to that useless stack frame you need show something upper and may be more context,
   so you can redefine ```prepare_error_backtrace``` and deliver valuable context!  

  Here is an example how you can handle simple resource route testing, as you can see you can read it 

  without a context of a routes structure and without verbosity:
   
  ```ruby

  #cards_api_test.rb

  require 'test_helper'

  require 'mini_apivore_helper'


  class CardsApiTest < MiniApivoreTest
    
     #------- DEFINE CLASS SPECIFIC NAMED ROUTE HELPERS ----------------
      def __get_cards(expectation)
         check_route( :get, '/cards.json', expectation )
      end 

      def __get_card( card, expectation)
        # check_route will use to_param inside
        check_route( :get, '/cards/{id}.json', expectation, id: card )
      end 

      def __update_card( card, expectation, params = {})
        # check_route will use to_param inside
        check_route( :patch, '/cards/{id}.json', expectation, id: card, **params)
      end 

      def __create_card( expectation, params = {})
        check_route( :post, '/cards.json', expectation, params )
      end

      def __delete_card(card, expectation)
        check_route( :delete, '/cards/{id}.json', expectation, id: card )
      end
     #------- DEFINE CLASS SPECIFIC NAMED ROUTE HELPERS DONE -----------
     # 
     # failure need a proper stackframe and a context around:
     def prepare_error_backtrace
       # it will deliver something like this: 
       #"/app/test/helpers/base_routes_helpers.rb:57:in `__create_card'",
       #"/app/test/integration/cards_api_test.rb:71:in `block (2 levels) in <class:CommentsApiTest>'",
       Thread.current.backtrace[2..-1].slice_after{|trc| trc[/check_route/] }.to_a.last[0..1]
     end

    test 'cards unauthorized' do
      card = cards(:valid_card_1)
      __get_cards( NOT_AUTHORIZED )
      __get_card( card, NOT_AUTHORIZED )
      __update_card( card, NOT_AUTHORIZED, _data: { card: { title: '1' } } )
      __create_card( NOT_AUTHORIZED, _data: { card: { title: '1' } } )
      __delete_card( card, NOT_AUTHORIZED )
    end

    test 'cards forbidden' do
      sign_in( :first_user )
      # card with restricted privileges 
      card = cards(:restricted_card)

      __get_card( card, FORBIDDEN )
      __update_card( card, FORBIDDEN, id: card, _data: { card: { title: '1' } } )

      # this may be added if not all users can create cards 
      # check_route( :post, '/cards.json', FORBIDDEN,  _data: { card: { title: '1' } } )

      __delete_card( card, FORBIDDEN)
    end

    test 'cards not_found' do
      sign_in( :first_user )
      card = Card.new(id: -1)
      __get_card( card, NOT_FOUND )
      __update_card( card, NOT_FOUND )
      __delete_card( card, NOT_FOUND  )
    end

    test 'cards REST authorized' do
      sign_in( :first_user )
      __get_cards( OK )
      __get_cards( cards(:valid_card_1), OK )

      assert_difference( -> { Card.count } ) do
        __create_card( OK, _data: {
                       card: { title: 'test card creation', 
                       card_preview_img_attributes: {
                                  upload: fixture_file_upload( Rails.root.join('test', 'fixtures', 'files', 'test.png') ,'image/png')
                                }
                       } } )
      end
      created_card = Card.last
      assert_equal( 'test card creation', created_card.title )

      __update_card( created_card, OK, _data: { card: { title: 'Nothing' } } )
      assert_equal( created_card.reload.title, 'Nothing' )

      assert_difference( -> { Card.count }, -1 ) do
         __delete_card( created_card, NO_CONTENT )
      end

    end
  end

  ```


  ## Development


  After checking out the repo, run `bin/setup` to install dependencies. Then, run `rake test` to run the tests. You can also run `bin/console` for an interactive prompt that will allow you to experiment.


  To install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).


  ## Contributing


  Bug reports and pull requests are welcome on GitHub at https://github.com/[USERNAME]/mini-apivore. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](http://contributor-covenant.org) code of conduct.


  ## License


  The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).
Surnet/swagger-jsdoc: >
  # swagger-jsdoc


  This library reads your [JSDoc](https://jsdoc.app/)-annotated source code and generates an [OpenAPI (Swagger) specification](https://swagger.io/specification/).


  [![npm Downloads](https://img.shields.io/npm/dm/swagger-jsdoc.svg)](https://www.npmjs.com/package/swagger-jsdoc)

  ![CI](https://github.com/Surnet/swagger-jsdoc/workflows/CI/badge.svg)


  ## Getting started


  Imagine having API files like these:


  ```javascript

  /**
   * @openapi
   * /:
   *   get:
   *     description: Welcome to swagger-jsdoc!
   *     responses:
   *       200:
   *         description: Returns a mysterious string.
   */
  app.get('/', (req, res) => {
    res.send('Hello World!');
  });

  ```


  The library will take the contents of `@openapi` (or `@swagger`) with the following configuration:


  ```javascript

  const swaggerJsdoc = require('swagger-jsdoc');


  const options = {
    definition: {
      openapi: '3.0.0',
      info: {
        title: 'Hello World',
        version: '1.0.0',
      },
    },
    apis: ['./src/routes*.js'], // files containing annotations as above
  };


  const openapiSpecification = swaggerJsdoc(options);

  ```


  The resulting `openapiSpecification` will be a [swagger tools](https://swagger.io/tools/)-compatible (and validated) specification.


  ![swagger-jsdoc example screenshot](./docs/screenshot.png)


  ## System requirements


  - Node.js 12.x or higher


  You are viewing `swagger-jsdoc` v6 which is published in CommonJS module system.


  ## Installation


  ```bash

  npm install swagger-jsdoc --save

  ```


  Or


  ```bash

  yarn add swagger-jsdoc

  ```


  ## Supported specifications


  - OpenAPI 3.x

  - Swagger 2

  - AsyncAPI 2.0


  ## Validation of swagger docs


  By default `swagger-jsdoc` tries to parse all docs to it's best capabilities. If you'd like to you can instruct an Error to be thrown instead if validation failed by setting the options flag `failOnErrors` to `true`. This is for instance useful if you want to verify that your swagger docs validate using a unit test.


  ```javascript

  const swaggerJsdoc = require('swagger-jsdoc');


  const options = {
    failOnErrors: true, // Whether or not to throw when parsing errors. Defaults to false.
    definition: {
      openapi: '3.0.0',
      info: {
        title: 'Hello World',
        version: '1.0.0',
      },
    },
    apis: ['./src/routes*.js'],
  };


  const openapiSpecification = swaggerJsdoc(options);

  ```


  ## Documentation


  Click on the version you are using for further details:


  - [7.x](https://github.com/Surnet/swagger-jsdoc/tree/v7/docs)

  - [6.x](https://github.com/Surnet/swagger-jsdoc/tree/v6/docs)

  - [5.x](https://github.com/Surnet/swagger-jsdoc/tree/v5)
domaindrivendev/Swashbuckle: >
  | :mega: Calling for Maintainers |

  |--------------|

  | With the introduction of [ASP.NET Core](https://www.asp.net/core), I've now shifted my focus to the Core-specific project - [Swashbuckle.AspNetCore](https://github.com/domaindrivendev/Swashbuckle.AspNetCore). That will be receiving most of my (already limited) personal time, and so I won't have the capacity to maintain this one at a sufficient rate. Still, I'd love to see it live on and am seeking one or two "core" contributors / maintainers to help out. Ideally, these would be people who have already contributed through PRs and understand the inner workings and overall design. Once signed-up, we can agree on an approach that works - ultimately, I want to remove myself as the bottleneck to merging PRs and getting fresh Nugets published. If you're interested, please let me know by adding a comment [here](https://github.com/domaindrivendev/Swashbuckle/issues/1053) |


  Swashbuckle

  =========


  [![Build status](https://ci.appveyor.com/api/projects/status/qoesh4nm6tb6diuk?svg=true)](https://ci.appveyor.com/project/domaindrivendev/swashbuckle)


  Seamlessly adds a [Swagger](http://swagger.io/) to WebApi projects! Combines ApiExplorer and Swagger/swagger-ui to provide a rich discovery, documentation and playground experience to your API consumers.


  In addition to its Swagger generator, Swashbuckle also contains an embedded version of [swagger-ui](https://github.com/swagger-api/swagger-ui) which it will automatically serve up once Swashbuckle is installed. This means you can complement your API with a slick discovery UI to assist consumers with their integration efforts. Best of all, it requires minimal coding and maintenance, allowing you to focus on building an awesome API!


  And that's not all ...


  Once you have a Web API that can describe itself in Swagger, you've opened the treasure chest of Swagger-based tools including a client generator that can be targeted to a wide range of popular platforms. See [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more details.


  **Swashbuckle Core Features:**


  * Auto-generated [Swagger 2.0](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)

  * Seamless integration of swagger-ui

  * Reflection-based Schema generation for describing API types

  * Extensibility hooks for customizing the generated Swagger doc

  * Extensibility hooks for customizing the swagger-ui

  * Out-of-the-box support for leveraging Xml comments

  * Support for describing ApiKey, Basic Auth and OAuth2 schemes ... including UI support for the Implicit OAuth2 flow


  **Swashbuckle 5.0**


  Swashbuckle 5.0 makes the transition to Swagger 2.0. The 2.0 schema is significantly different to its predecessor (1.2) and, as a result, the Swashbuckle config interface has undergone yet another overhaul. Checkout the [transition guide](#transitioning-to-swashbuckle-50) if you're upgrading from a prior version.


  ## Getting Started ##


  There are currently two Nuget packages - the Core library (Swashbuckle.Core) and a convenience package (Swashbuckle)  - that provides automatic bootstrapping. The latter is only applicable to regular IIS hosted Web APIs. For all other hosting environments, you should only install the Core library and then follow the instructions below to manually enable the Swagger routes.


  Once installed and enabled, you should be able to browse the following Swagger docs and UI endpoints respectively:


  ***\<your-root-url\>/swagger/docs/v1***


  ***\<your-root-url\>/swagger***


  ### IIS Hosted ###


  If your service is hosted in IIS, you can start exposing Swagger docs and a corresponding swagger-ui by simply installing the following Nuget package:

      Install-Package Swashbuckle

  This will add a reference to Swashbuckle.Core and also install a bootstrapper (App_Start/SwaggerConfig.cs) that enables the Swagger routes on app start-up using [WebActivatorEx](https://github.com/davidebbo/WebActivator).


  ### Self-hosted ###


  If your service is self-hosted, just install the Core library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and, optionally, the swagger-ui by invoking the following extension methods (in namespace Swashbuckle.Application) on an instance of HttpConfiguration (e.g. in Program.cs)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi();
  ```


  ### OWIN  ###


  If your service is hosted using OWIN middleware, just install the Core library:

      Install-Package Swashbuckle.Core

  Then manually enable the Swagger docs and swagger-ui by invoking the extension methods (in namespace Swashbuckle.Application) on an instance of HttpConfiguration (e.g. in Startup.cs)


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi();    
  ```


  ## Troubleshooting ##


  Troubleshooting??? I thought this was all supposed to be "seamless"? OK you've called me out! Things shouldn't go wrong, but if they do, take a look at the [FAQs](#troubleshooting-and-faqs) for inspiration.


  ## Customizing the Generated Swagger Docs ##


  The following snippet demonstrates the minimum configuration required to get the Swagger docs and swagger-ui up and running:

  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
        .EnableSwaggerUi();
  ```


  These methods expose a range of configuration and extensibility options that you can pick and choose from, combining the convenience of sensible defaults with the flexibility to customize where you see fit. Read on to learn more.


  ### Custom Routes ###


  The default route templates for the Swagger docs and swagger-ui are "swagger/docs/{apiVersion}" and "swagger/ui/{\*assetPath}" respectively. You're free to change these so long as the provided templates include the relevant route parameters - {apiVersion} and {\*assetPath}.


  ```csharp

  httpConfiguration
      .EnableSwagger("docs/{apiVersion}/swagger", c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi("sandbox/{*assetPath}");
  ```


  In this case the URL to swagger-ui will be `sandbox/index`.


  ### Pretty Print ###


  If you want the output Swagger docs to be indented properly, enable the __PrettyPrint__ option as following:


  ```cs

  httpConfiguration
      .EnableSwagger(c => c.PrettyPrint())
      .EnableSwaggerUi();
  ```


  ### Additional Service Metadata ###


  In addition to operation descriptions, Swagger 2.0 includes several properties to describe the service itself. These can all be provided through the configuration API:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.RootUrl(req => GetRootUrlFromAppConfig());

              c.Schemes(new[] { "http", "https" });

              c.SingleApiVersion("v1", "Swashbuckle.Dummy")
                  .Description("A sample API for testing and prototyping Swashbuckle features")
                  .TermsOfService("Some terms")
                  .Contact(cc => cc
                      .Name("Some contact")
                      .Url("http://tempuri.org/contact")
                      .Email("some.contact@tempuri.org"))
                  .License(lc => lc
                      .Name("Some License")
                      .Url("http://tempuri.org/license"));
          });
  ```

  #### RootUrl ####


  By default, the service root url is inferred from the request used to access the docs. However, there may be situations (e.g. proxy and load-balanced environments) where this does not resolve correctly. You can workaround this by providing your own code to determine the root URL.


  #### Schemes ####


  If schemes are not explicitly provided in a Swagger 2.0 document, then the scheme used to access the docs is taken as the default. If your API supports multiple schemes and you want to be explicit about them, you can use the __Schemes__ option.


  #### SingleApiVersion ####


  Use this to describe a single version API. Swagger 2.0 includes an "Info" object to hold additional metadata for an API. Version and title are required but you may also provide additional fields as shown above.


  __NOTE__: If your Web API is hosted in IIS, you should avoid using full-stops in the version name (e.g. "1.0"). The full-stop at the tail of the URL will cause IIS to treat it as a static file (i.e. with an extension) and bypass the URL Routing Module and therefore, Web API. 


  ### Describing Multiple API Versions ###


  If your API has multiple versions, use __MultipleApiVersions__ instead of __SingleApiVersion__. In this case, you provide a lambda that tells Swashbuckle which actions should be included in the docs for a given API version. Like __SingleApiVersion__, __Version__ also returns an "Info" builder so you can provide additional metadata per API version.


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.MultipleApiVersions(
                  (apiDesc, targetApiVersion) => ResolveVersionSupportByRouteConstraint(apiDesc, targetApiVersion),
                  (vc) =>
                  {
                      vc.Version("v2", "Swashbuckle Dummy API V2");
                      vc.Version("v1", "Swashbuckle Dummy API V1");
                  });
          });
      .EnableSwaggerUi(c =>
          {
              c.EnableDiscoveryUrlSelector();
          });
  ```


  \* You can also enable a select box in the swagger-ui (as shown above) that displays a discovery URL for each version. This provides a convenient way for users to browse documentation for different API versions.


  ### Describing Security/Authorization Schemes ###


  You can use BasicAuth, __ApiKey__ or __OAuth2__ options to describe security schemes for the API. See https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md for more details.


  ```csharp

  httpConfiguration
       .EnableSwagger(c =>
           {
               //c.BasicAuth("basic")
               //    .Description("Basic HTTP Authentication");

               //c.ApiKey("apiKey")
               //    .Description("API Key Authentication")
               //    .Name("apiKey")
               //    .In("header");

               c.OAuth2("oauth2")
                   .Description("OAuth2 Implicit Grant")
                   .Flow("implicit")
                   .AuthorizationUrl("http://petstore.swagger.wordnik.com/api/oauth/dialog")
                   //.TokenUrl("https://tempuri.org/token")
                   .Scopes(scopes =>
                   {
                       scopes.Add("read", "Read access to protected resources");
                       scopes.Add("write", "Write access to protected resources");
                   });

               c.OperationFilter<AssignOAuth2SecurityRequirements>();
           });
       .EnableSwaggerUi(c =>
           {
               c.EnableOAuth2Support("test-client-id", "test-realm", "Swagger UI");
           });
  ```

  __NOTE:__ These only define the schemes and need to be coupled with a corresponding "security" property at the document or operation level to indicate which schemes are required for each operation.  To do this, you'll need to implement a custom IDocumentFilter and/or IOperationFilter to set these properties according to your specific authorization implementation


  \* If your API supports the OAuth2 Implicit flow, and you've described it correctly, according to the Swagger 2.0 specification, you can enable UI support as shown above.


  ### Customize the Operation Listing ###


  If necessary, you can ignore obsolete actions and provide custom grouping/sorting strategies for the list of Operations in a Swagger document:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.IgnoreObsoleteActions();

              c.GroupActionsBy(apiDesc => apiDesc.HttpMethod.ToString());

              c.OrderActionGroupsBy(new DescendingAlphabeticComparer());
          });
  ```

  #### IgnoreObsoleteActions ####


  Set this flag to omit operation descriptions for any actions decorated with the Obsolete attribute


  __NOTE__: If you want to omit specific operations but without using the Obsolete attribute, you can create an IDocumentFilter or make use of the built in ApiExplorerSettingsAttribute


  #### GroupActionsBy ####


  Each operation can be assigned one or more tags which are then used by consumers for various reasons. For example, the swagger-ui groups operations according to the first tag of each operation. By default, this will be the controller name but you can use this method to override with any value.


  #### OrderActionGroupsBy ####


  You can also specify a custom sort order for groups (as defined by __GroupActionsBy__) to dictate the order in which operations are listed. For example, if the default grouping is in place (controller name) and you specify a descending alphabetic sort order, then actions from a ProductsController will be listed before those from a CustomersController. This is typically used to customize the order of groupings in the swagger-ui.


  ### Modifying Generated Schemas ###


  Swashbuckle makes a best attempt at generating Swagger compliant JSON schemas for the various types exposed in your API. However, there may be occasions when more control of the output is needed.  This is supported through the following options:


  ```csharp

  httpConfiguration
        .EnableSwagger(c =>
            {
                c.MapType<ProductType>(() => new Schema { type = "integer", format = "int32" });

                c.SchemaFilter<ApplySchemaVendorExtensions>();

                //c.UseFullTypeNameInSchemaIds();

                c.SchemaId(t => t.FullName.Contains('`') ? t.FullName.Substring(0, t.FullName.IndexOf('`')) : t.FullName);
                
                c.IgnoreObsoleteProperties();

                c.DescribeAllEnumsAsStrings();
            });
  ```


  #### MapType ####


  Use this option to override the Schema generation for a specific type.


  It should be noted that the resulting Schema will be placed "inline" for any applicable Operations. While Swagger 2.0 supports inline definitions for "all" Schema types, the swagger-ui tool does not. It expects "complex" Schemas to be defined separately and referenced. For this reason, you should only use the __MapType__ option when the resulting Schema is a primitive or array type.


  If you need to alter a complex Schema, use a Schema filter.


  #### SchemaFilter ####


  If you want to post-modify "complex" Schemas once they've been generated, across the board or for a specific type, you can wire up one or more Schema filters.


  ISchemaFilter has the following interface:


  ```csharp

  void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type);

  ```


  A typical implementation will inspect the system Type and modify the Schema accordingly. If necessary, the schemaRegistry can be used to obtain or register Schemas for other Types


  #### UseFullTypeNamesInSchemaIds ####


  In a Swagger 2.0 document, complex types are typically declared globally and referenced by unique Schema Id. By default, Swashbuckle does NOT use the full type name in Schema Ids. In most cases, this works well because it prevents the "implementation detail" of type namespaces from leaking into your Swagger docs and UI. However, if you have multiple types in your API with the same class name, you'll need to opt out of this behavior to avoid Schema Id conflicts.  


  #### SchemaId ####


  Use this option to provide your own custom strategy for inferring SchemaId's for describing "complex" types in your API.


  #### IgnoreObsoleteProperties ####


  Set this flag to omit schema property descriptions for any type properties decorated with the Obsolete attribute 


  #### DescribeAllEnumsAsStrings ####


  In accordance with the built in JsonSerializer, Swashbuckle will, by default, describe enums as integers. You can change the serializer behavior by configuring the StringEnumConverter globally or for a given enum type. Swashbuckle will honor this change out-of-the-box. However, if you use a different approach to serialize enums as strings, you can also force Swashbuckle to describe them as strings.


  ### Modifying Generated Operations ###


  Similar to Schema filters, Swashbuckle also supports Operation and Document filters:


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
           {
               c.OperationFilter<AddDefaultResponse>();

               c.DocumentFilter<ApplyDocumentVendorExtensions>();
           });
  ```

  #### OperationFilter ####


  Post-modify Operation descriptions once they've been generated by wiring up one or more Operation filters.


  IOperationFilter has the following interface:


  ```csharp

  void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription);

  ```


  A typical implementation will inspect the ApiDescription and modify the Operation accordingly. If necessary, the schemaRegistry can be used to obtain or register Schemas for Types that are used in the Operation.


  #### DocumentFilter ####


  Post-modify the entire Swagger document by wiring up one or more Document filters.


  IDocumentFilter has the following interface:


  ```csharp

  void Apply(SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry, IApiExplorer apiExplorer);

  ```


  This gives full control to modify the final SwaggerDocument. You can gain additional context from the provided SwaggerDocument (e.g. version) and IApiExplorer. You should have a good understanding of the [Swagger 2.0 spec.](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md) before using this option.


  ### Wrapping the SwaggerGenerator with Additional Behavior ###


  The default implementation of ISwaggerProvider, the interface used to obtain Swagger metadata for a given API, is the SwaggerGenerator. If neccessary, you can inject your own implementation or wrap the existing one with additional behavior. For example, you could use this option to inject a "Caching Proxy" that attempts to retrieve the SwaggerDocument from a cache before delegating to the built-in generator:


  ```csharp

  httpConfiguration
        .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
            {
          c.CustomProvider((defaultProvider) => new CachingSwaggerProvider(defaultProvider));
            });
  ```


  ### Including XML Comments ###


  If you annotate Controllers and API Types with [Xml Comments](http://msdn.microsoft.com/en-us/library/b2s063f7(v=vs.110).aspx), you can incorporate those comments into the generated docs and UI. The Xml tags are mapped to Swagger properties as follows:


  * **Action summary** -> Operation.summary

  * **Action remarks** -> Operation.description

  * **Parameter summary** -> Parameter.description

  * **Type summary** -> Schema.descripton

  * **Property summary** -> Schema.description (i.e. on a property Schema)


  You can enable this by providing the path to one or more XML comments files:

  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(GetXmlCommentsPathForControllers());
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```


  NOTE: You will need to enable output of the XML documentation file. This is enabled by going to project properties -> Build -> Output. The "XML documentation file" needs to be checked and a path assigned, such as "bin\Debug\MyProj.XML". You will also want to verify this across each build configuration. Here's an example of reading the file, but it may need to be modified according to your specific project settings:


  ```csharp

  httpConfiguration
      .EnableSwagger(c =>
          {
              var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
              var commentsFileName = Assembly.GetExecutingAssembly().GetName().Name + ".XML";
              var commentsFile = Path.Combine(baseDirectory, commentsFileName);

              c.SingleApiVersion("v1", "A title for your API");
              c.IncludeXmlComments(commentsFile);
              c.IncludeXmlComments(GetXmlCommentsPathForModels());
          });
  ```

  #### Response Codes ####


  Swashbuckle will automatically create a "success" response for each operation based on the action's return type. If it's a void, the status code will be 204 (No content), otherwise 200 (Ok). This mirrors WebApi's default behavior. If you need to change this and/or list additional response codes, you can use the non-standard "response" tag:


  ```csharp

  /// <response code="201">Account created</response>

  /// <response code="400">Username already in use</response>

  public int Create(Account account)

  ```

  ### Working Around Swagger 2.0 Constraints ###


  In contrast to Web API, Swagger 2.0 does not include the query string component when mapping a URL to an action. As a result, Swashbuckle will raise an exception if it encounters multiple actions with the same path (sans query string) and HTTP method. You can workaround this by providing a custom strategy to pick a winner or merge the descriptions for the purposes of the Swagger docs 


  ```csharp

  httpConfiguration
      .EnableSwagger((c) =>
          {
              c.SingleApiVersion("v1", "A title for your API"));
              c.ResolveConflictingActions(apiDescriptions => apiDescriptions.First());
          });
  ```

  See the following discussion for more details:


  <https://github.com/domaindrivendev/Swashbuckle/issues/142>


  ## Customizing the swagger-ui ##


  The swagger-ui is a JavaScript application hosted in a single HTML page (index.html), and it exposes several customization settings. Swashbuckle ships with an embedded version and includes corresponding configuration methods for each of the UI settings. If you require further customization, you can also inject your own version of "index.html". Read on to learn more.


  ### Customizations via the configuration API ###


  If you're happy with the basic look and feel but want to make some minor tweaks, the following options may be sufficient:


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
      .EnableSwaggerUi(c =>
          {
              c.InjectStylesheet(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testStyles1.css");
              c.InjectJavaScript(containingAssembly, "Swashbuckle.Dummy.SwaggerExtensions.testScript1.js");
              c.SetValidatorUrl("http://localhost/validator");
              c.DisableValidator();
              c.DocExpansion(DocExpansion.List);
              c.SupportedSubmitMethods("GET", "HEAD")
          });
  ```


  #### InjectStylesheet ####


  Use this to enrich the UI with one or more additional CSS stylesheets. The file(s) must be included in your project as an "Embedded Resource", and then the resource's "Logical Name" is passed to the method as shown above. See [Injecting Custom Content](#injecting-custom-content) for step by step instructions.


  #### InjectJavaScript ####


  Use this to invoke one or more custom JavaScripts after the swagger-ui has loaded. The file(s) must be included in your project as an "Embedded Resource", and then the resource's "Logical Name" is passed to the method as shown above. See [Injecting Custom Content](#injecting-custom-content) for step by step instructions.


  #### SetValidatorUrl/DisableValidator ####


  By default, swagger-ui will validate specs against swagger.io's online validator and display the result in a badge at the bottom of the page. Use these options to set a different validator URL or to disable the feature entirely.


  #### DocExpansion ####


  Use this option to control how the Operation listing is displayed. It can be set to "None" (default), "List" (shows operations for each resource), or "Full" (fully expanded: shows operations and their details).


  #### SupportedSubmitMethods ####


  Specify which HTTP operations will have the 'Try it out!' option. An empty parameter list disables it for all operations.


  ### Provide your own "index" file ###


  As an alternative, you can inject your own version of "index.html" and customize the markup and swagger-ui directly. Use the __CustomAsset__ option to instruct Swashbuckle to return your version instead of the default when a request is made for "index". As with all custom content, the file must be included in your project as an "Embedded Resource", and then the resource's "Logical Name" is passed to the method as shown below. See [Injecting Custom Content](#injecting-custom-content) for step by step instructions.


  For compatibility, you should base your custom "index.html" off [this version](https://github.com/domaindrivendev/Swashbuckle/blob/v5.5.3/Swashbuckle.Core/SwaggerUi/CustomAssets/index.html)


  ```csharp

  httpConfiguration
       .EnableSwagger(c => c.SingleApiVersion("v1", "A title for your API"))
       .EnableSwaggerUi(c =>
           {
               c.CustomAsset("index", yourAssembly, "YourWebApiProject.SwaggerExtensions.index.html");
           });
  ```


  ### Injecting Custom Content ###


  The __InjectStylesheet__, __InjectJavaScript__ and __CustomAsset__ options all share the same mechanism for providing custom content. In each case, the file must be included in your project as an "Embedded Resource". The steps to do this are described below:


  1. Add a new file to your Web API project.

  2. In Solution Explorer, right click the file and open its properties window. Change the "Build Action" to "Embedded Resource".


  This will embed the file in your assembly and register it with a "Logical Name". This can then be passed to the relevant configuration method. It's based on the Project's default namespace, file location and file extension. For example, given a default namespace of "YourWebApiProject" and a file located at "/SwaggerExtensions/index.html", then the resource will be assigned the name - "YourWebApiProject.SwaggerExtensions.index.html". If you use "Swagger" as the root folder name for your custom assets, this will collide with the default route templates and the page will not be loaded correctly.


  ## Transitioning to Swashbuckle 5.0 ##


  This version of Swashbuckle makes the transition to Swagger 2.0. The 2.0 specification is significantly different to its predecessor (1.2) and forces several breaking changes to Swashbuckle's configuration API. If you're using Swashbuckle without any customizations, i.e. App_Start/SwaggerConfig.cs has never been modified, then you can overwrite it with the new version. The defaults are the same and so the swagger-ui should behave as before.


  \* If you have consumers of the raw Swagger document, you should ensure they can accept Swagger 2.0 before making the upgrade.


  If you're using the existing configuration API to customize the final Swagger document and/or swagger-ui, you will need to port the code manually. The static __Customize__ methods on SwaggerSpecConfig and SwaggerUiConfig have been replaced with extension methods on HttpConfiguration - __EnableSwagger__ and __EnableSwaggerUi__. All options from version 4.0 are made available through these methods, albeit with slightly different naming and syntax. Refer to the tables below for a summary of changes:



  | 4.0 | 5.0 Equivalent | Additional Notes |

  | --------------- | --------------- | ---------------- |

  | ResolveBasePathUsing | RootUrl | |

  | ResolveTargetVersionUsing | N/A | version is now implicit in the docs URL e.g. "swagger/docs/{apiVersion}" |

  | ApiVersion | SingleApiVersion| now supports additional metadata for the version | 

  | SupportMultipleApiVersions | MultipleApiVersions | now supports additional metadata for each version |

  | Authorization | BasicAuth/ApiKey/OAuth2 | | 

  | GroupDeclarationsBy | GroupActionsBy | |

  | SortDeclarationsBy | OrderActionGroupsBy | |

  | MapType | MapType | now accepts Func&lt;Schema&gt; instead of Func&lt;DataType&gt; |

  | ModelFilter | SchemaFilter | IModelFilter is now ISchemaFilter, DataTypeRegistry is now SchemaRegistry |

  | OperationFilter | OperationFilter | DataTypeRegistry is now SchemaRegistry |

  | PolymorphicType | N/A | not currently supported |

  | SupportHeaderParams | N/A | header params are implicitly supported |

  | SupportedSubmitMethods | N/A | all HTTP verbs are implicitly supported |

  | CustomRoute | CustomAsset | &nbsp; |


  ## Troubleshooting and FAQ's ##


  1. [Swagger-ui showing "Can't read swagger JSON from ..."](#swagger-ui-showing-cant-read-swagger-json-from)

  2. [Page not found when accessing the UI](#page-not-found-when-accessing-the-ui)

  3. [Swagger-ui broken by Visual Studio 2013](#swagger-ui-broken-by-visual-studio-2013)

  4. [OWIN Hosted in IIS - Incorrect VirtualPathRoot Handling](#owin-hosted-in-iis---incorrect-virtualpathroot-handling)

  5. [How to add vendor extensions](#how-to-add-vendor-extensions)

  6. [FromUri Query string DataMember names are incorrect](#fromuri-query-string-datamember-names-are-incorrect)

  7. [Remove Duplicate Path Parameters](#remove-duplicate-path-parameters)

  8. [Deploying behind Load Balancer / Reverse Proxies](#deploying-behind-load-balancer--reverse-proxies)

  9. [500 : {"Message":"An error has occurred."}](#500--messagean-error-has-occurred)


  ### Swagger-ui showing "Can't read swagger JSON from ..."


  If you see this message, it means the swagger-ui received an unexpected response when requesting the Swagger document. You can troubleshoot further by navigating directly to the discovery URL included in the error message. This should provide more details.


  If the discovery URL returns a 404 Not Found response, it may be due to a full-stop in the version name (e.g. "1.0"). This will cause IIS to treat it as a static file (i.e. with an extension) and bypass the URL Routing Module and therefore, Web API. 


  To workaround, you can update the version name specified in SwaggerConfig.cs. For example, to "v1", "1-0" etc. Alternatively, you can change the route template being used for the swagger docs (as shown [here](#custom-routes)) so that the version parameter is not at the end of the route.


  ### Page not found when accessing the UI ###


  Swashbuckle serves an embedded version of the swagger-ui through the Web API pipeline. But, most of the URLs contain extensions (.html, .js, .css) and many IIS environments are configured to bypass the managed pipeline for paths containing extensions.


  In previous versions of Swashbuckle, this was resolved by adding the following setting to your Web.config:


  ```xml

  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
  </system.webServer>

  ```


  This is no longer neccessary in Swashbuckle 5.0 because it serves the swagger-ui through extensionless URL's.


  However, if you're using the SingleApiVersion, MultipleApiVersions or CustomAsset configuration settings you could still get this error. Check to ensure you're not specifying a value that causes a URL with an extension to be referenced in the UI. For example a full-stop in a version number ...


  ```csharp

  httpConfiguration
      .EnableSwagger(c => c.SingleApiVersion("1.0", "A title for your API"))
      .EnableSwaggerUi();
  ```

  will result in a discovery URL like this "/swagger/docs/1.0" where the full-stop is treated as a file extension.


  ### Swagger-ui broken by Visual Studio 2013 ###


  VS 2013 ships with a new feature - Browser Link - that improves the web development workflow by setting up a channel between the IDE and pages being previewed in a local browser. It does this by dynamically injecting JavaScript into your files.


  Although this JavaScript SHOULD have no affect on your production code, it appears to be breaking the swagger-ui.


  I hope to find a permanent fix, but in the meantime, you'll need to workaround this issue by disabling the feature in your web.config:


  ```xml

  <appSettings>
      <add key="vs:EnableBrowserLink" value="false"/>
  </appSettings>

  ```

  ### OWIN Hosted in IIS - Incorrect VirtualPathRoot Handling


  When you host Web API 2 on top of OWIN/SystemWeb, Swashbuckle cannot correctly resolve VirtualPathRoot by default.


  You must either explicitly set VirtualPathRoot in your HttpConfiguration at startup, or perform customization like this to fix automatic discovery:


  ```csharp

  httpConfiguration.EnableSwagger(c => 

  {
      c.RootUrl(req =>
          req.RequestUri.GetLeftPart(UriPartial.Authority) +
          req.GetRequestContext().VirtualPathRoot.TrimEnd('/'));
  }

  ```


  ### How to add vendor extensions


  Swagger 2.0 allows additional meta-data (aka vendor extensions) to be added at various points in the Swagger document. Swashbuckle supports this by including a "vendorExtensions" dictionary with each of the extensible Swagger types. Meta-data can be added to these dictionaries from custom Schema, Operation or Document filters. For example:


  ```csharp

  public class ApplySchemaVendorExtensions : ISchemaFilter

  {
      public void Apply(Schema schema, SchemaRegistry schemaRegistry, Type type)
      {
          schema.vendorExtensions.Add("x-foo", "bar");
      }
  }

  ```


  As per the specification, all extension properties should be prefixed by "x-"


  ### FromUri Query string DataMember names are incorrect


  When using `FromUri` Model Binding, it is possible to override the querystring parameter name's using `DataMember`s. In this case you can add a custom operation filter to override the name. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
          if (operation.parameters == null)
              return;

          var parameters = apiDescription.ActionDescriptor.GetParameters();
          foreach (var parameter in parameters)
          {
              foreach (var property in parameter.ParameterType.GetProperties())
              {
                  var param = operation.parameters.FirstOrDefault(o => o.name.ToLowerInvariant().Contains(property.Name.ToLowerInvariant()));

                  if (param == null) continue;

                  var name = GetNameFromAttribute(property);

                  if (string.IsNullOrEmpty(name))
                  {
                      operation.parameters.Remove(param);
                  }
                  param.name = GetNameFromAttribute(property);
              }
          }
      }
      
      private static string GetNameFromAttribute(PropertyInfo property)
      {
          var customAttributes = property.GetCustomAttributes(typeof(DataMemberAttribute), true);
          if (customAttributes.Length > 0)
          {
              var attribute = customAttributes[0] as DataMemberAttribute;
              if (attribute != null) return attribute.Name;
          }
          return string.Empty;
      }
  }

  ```


  ### Remove Duplicate Path Parameters


  When using `FromUri` Model Binding, duplicate items can appear as items can be passed as URI parameters, or querystrings. In this case you can add a custom operation filter to remove the duplicates. For example:


  ```csharp

  public class ComplexTypeOperationFilter : IOperationFilter

  {
      public void Apply(Operation operation, SchemaRegistry schemaRegistry, ApiDescription apiDescription)
      {
         if (operation.parameters == null)
             return;
         var complexParameters = operation.parameters.Where(x => x.@in == "query" && !string.IsNullOrWhiteSpace(x.name)).ToArray();

         foreach (var parameter in complexParameters)
         {
             if (!parameter.name.Contains('.')) continue;
             var name = parameter.name.Split('.')[1];

             var opParams = operation.parameters.Where(x => x.name == name);
             var parameters = opParams as Parameter[] ?? opParams.ToArray();

             if (parameters.Length > 0)
             {
                 operation.parameters.Remove(parameter);
             }
         }
      }
  }

  ```


  ### Deploying behind Load Balancer / Reverse Proxies


  Swashbuckle attempts to populate the [Swagger "host"](http://swagger.io/specification/#swaggerObject) property from HTTP headers that are sent with the request for Swagger JSON. This may cause issues in load balancer / reverse proxy environments, particularly if non-standard headers are used to pass on the outer most host name. You can workaround this by providing your own function for determining your API's root URL based on vendor-specific headers. Checkout [issue 705](https://github.com/domaindrivendev/Swashbuckle/issues/705) for some potential implementations.


  ### 500 : {"Message":"An error has occurred."}


  If, on loading the Swagger UI page, you get an error: `500 : {"Message":"An error has occurred."} http://<url>/swagger/docs/v1` ensure that the XML documentation output settings have been set in the project file in the solution, for both Debug and Release configurations.
gossi/swagger: >+
  # swagger


  [![License](https://poser.pugx.org/gossi/swagger/license)](https://packagist.org/packages/gossi/swagger)

  [![Latest Stable Version](https://poser.pugx.org/gossi/swagger/v/stable)](https://packagist.org/packages/gossi/swagger)

  [![Total Downloads](https://poser.pugx.org/gossi/swagger/downloads)](https://packagist.org/packages/gossi/swagger)<br>

  [![HHVM Status](http://hhvm.h4cc.de/badge/gossi/swagger.svg?style=flat)](http://hhvm.h4cc.de/package/gossi/swagger)

  [![Build Status](https://travis-ci.org/gossi/swagger.svg?branch=master)](https://travis-ci.org/gossi/swagger)

  [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/gossi/swagger/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)

  [![Code Coverage](https://scrutinizer-ci.com/g/gossi/swagger/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/gossi/swagger/?branch=master)



  A php library to manipulate [swagger](http://swagger.io)/[Open API](https://openapis.org) specifications.


  ## Installation


  ```

  composer require gossi/swagger

  ```


  ## Usage


  Read an `api.json` file:


  ```php

  $swagger = Swagger::fromFile('api.json');


  // or


  $swagger = new Swagger($array);

  ```


  ### Collections


  There are two major collections: `Paths` and `Definitions`. The API is similar for both:


  ```php

  $paths = $swagger->getPaths();

  $p = new Path('/user');


  // adding

  $paths->add($p);


  // retrieving

  if ($paths->has('/user') || $paths->contains($p)) {
  	$path = $paths->get('/user');
  }


  // removing

  $paths->remove('/user');


  // iterating

  foreach ($paths as $path) {
  	// do sth with $path
  }

  ```


  Other collections are: `Headers`, `Parameters`, `Responses` and `SecurityDefinitions`.


  ### Models


  There are a lot of models, e.g. the mentioned `Path` above. The API is well written, so it works with the auto-completion of your IDE. It is straight forward and uses the same naming scheme as the OpenAPI specification.



  ## Contributing


  Feel free to fork and submit a pull request (don't forget the tests) and I am happy to merge.


Maks3w/SwaggerAssertions: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24F20CB:25AAE86:678EE35E and timestamp 2025-01-20 23:59:26
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
metosin/compojure-api: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCF:2AAE2C:511E187:52D9792:678EE3B4 and timestamp 2025-01-21 00:00:52
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Azure/AutoRest: >+
  # <img align="center" src="./docs/images/logo.png">  AutoRest



  The **AutoRest** tool generates client libraries for accessing RESTful web services. Input to *AutoRest* is a spec that describes the REST API using the [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format.


  <!-- 1) returns SVGs now which aren't rendered by GitHub 2) seems to be awfully unresponsive and unreliable lately

  [![PR Stats](http://issuestats.com/github/Azure/autorest/badge/pr?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  [![Issue Stats](http://issuestats.com/github/Azure/autorest/badge/issue?style=flat-square)](http://issuestats.com/github/Azure/autorest)

  -->


  ## Support Policy

  AutoRest is an open source tool -- if you need assistance, first check the documentation. If you find a bug or need some help, feel free to submit an [issue](https://github.com/Azure/autorest/issues)


  # Getting Started using AutoRest ![image](./docs/images/normal.png)


  Start by reading the documentation for using AutoRest:

  - [Installing AutoRest](./docs/installing-autorest.md) - Shows how to install AutoRest.

  - [Understanding AutoRest Versions and Extensions](./docs/autorest-versioning.md) - AutoRest core and extension versioning

  - [Managing AutoRest](./docs/managing-autorest.md) - shows how to get new updates to AutoRest and choose which version to use for code generation.

  - [Generating a Client using AutoRest](./docs/examples/generating-a-client.md) - shows simple command line usage for generating a client library.

  - [Command Line Interface Documentation](./docs/user/command-line-interface.md) - explains common command line arguments.

  - [Examples](./Samples) - full, walkthrough-style scenarios for using AutoRest.

  - [Recent Updates](./changelog.md) - notes on recent updates .


  # New! AutoRest Version 3.0 

  AutoRest 3.0 introduces a large number of internal changes to support new scenarios. 


  ## Features


  ### OpenAPI3 support! 

  AutoRest 3.0 finally supports OpenAPI3 files as an input format, with the following caveats:

  - existing AutoRest v2 generators may not support all features from OpenAPI3. (see next section)

  - `anyOf`, `oneOf` are not currently supported 

  - other OpenAPI3 specific features may not be entirely supported.


  ### Generators


  A new set of language generator plugins are being written that adopt the lighter-weight patterns for Azure Core libraries.<br>

  Existing V2 generators will default to processing with the AutoRest 2 pipeline. <br>

  If you want to force it to use the v3 (to get support for OpenAPI3 ) add `--v3` to the command line:

  > `autorest --v3 --csharp ...`


  | Generator | Command | Notes |

  |----|---|---|

  |PowerShell| `autorest --powershell ...` |Fully V3 Supported - use to generate powershell modules |   

  |CSharp|`autorest --csharp ...` |v2 generator, may use OpenAPI3 with `--v3` switch (may be some differences) - v3 generator in progress | 

  |Python|`autorest --python ...` |v2 generator, may use OpenAPI3 with `--v3` switch (may be some differences) - v3 generator in progress| 

  |Java|`autorest --java ...` |v2 generator, may use OpenAPI3 with `--v3` switch (may be some differences) - v3 generator in progress | 

  |TypeScript|`autorest --typescript ...` |v2 generator, may use OpenAPI3 with `--v3` switch (may be some differences) - v3 generator in progress | 

  |Go|`autorest --go ...` |v2 generator, may use OpenAPI3 with `--v3` switch (may be some differences) - v3 generator in progress | 

  |Ruby|`autorest --ruby ...` |v2 generator - does not support v3 feature, no OpenAPI3 support | 


  #### New V3 Pipeline


  In AutoRest v3, the pipeline has been drastically rebuilt, which allows support for:

  - OpenAPI3 inputs

  - Supporting merging multiple API versions 

  - Model Deduplication and Subset reduction across multiple API versions

  - Azure Profile support (v3 generator required)


  Some related information:

  - [Validation Rules & Linting](https://github.com/Azure/azure-openapi-validator/blob/master/docs/readme.md) - about the validation rules in AutoRest

  - [Client Runtimes](./docs/developer/architecture/Autorest-and-Clientruntimes.md) - information about the client runtimes required for using code generated by AutoRest

  <!-- - [Developer Guide](./docs/developer/guide/) - Notes on developing with AutoRest -->


  ### Supported Platforms


  While AutoRest itself runs on NodeJS, some generators use the .NET Core 2.0 runtime, which is the most limiting factor.

  See [dotnet/core/release-notes/2.0/2.0-supported-os.md](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0-supported-os.md) for a list of supported platforms.


  ---


  ### Code of Conduct 

  This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.

subeeshcbabu/swagmock: >
  # swagmock

  Mock data generator for swagger api


  *Note: Swagmock version `1.0.0` onwards requires `Node.js v6+` (`"engines": {"node": ">=6.x"}`). Please use `v0.0.x` (say `0.0.5`), if you want to run this module on any previous node.js versions.*


  ## Install


  ```

  npm install swagmock

  ```


  ## Usage


  ```javascript
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(api, options);
      // api Can be one of the following.
      // 1) A relative or absolute path to the Swagger api document.
      // 2) A swagger api Object.
      // 3) A promise (or a `thenable`) that resolves to the swagger api Object.
      // Set the `validated` : `true`  in `options`, if the api Object is already validated
      // and dereferenced ($ref are resolved ).
  ```


  Promise response:


  ```javascript
      let responseMock = Mockgen.responses({}); //returns a promise that resolves to response mock
      responseMock.then(mock => {
          //Use mock here
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Callback style:


  ```javascript

      Mockgen.responses({ path: '/somepath'}, (error, mock) => {
          Assert.ifError(error);
          //Use mock here
      });
  ```


  Check the [API](README.md#api) for more details.


  ## Example


  Initialize the mock generator


  ```javascript
      const apiPath = 'http://petstore.swagger.io/v2/swagger.json';
      let Assert = require('assert');
      let Swagmock = require('swagmock');
      let Mockgen = Swagmock(apiPath);
  ```


  Response mock generation:


  ```javascript
      mockgen.responses({
          path: '/pet/findByStatus',
          operation: 'get',
          response: 200
      }).then(mock => {
          console.log(mock); // This would print:
          // {
          //     "responses": [{
          //         "id": 2530624032210944,
          //         "category": {
          //             "id": 8200505595527168,
          //             "name": "r($vA&"
          //         },
          //         "name": "doggie",
          //         "photoUrls": ["p0x1", "6O)3*kO"],
          //         "tags": [{
          //             "id": 4590764340281344,
          //             "name": "WCTA6f!"
          //         }, {
          //             "id": -4614156653166592,
          //             "name": "e"
          //         }],
          //         "status": "pending"
          //     }]
          // }
      }).catch(error => {
          Assert.ifError(error);
      });
  ```


  Parameters mock generation:


  ```javascript

      mockgen.parameters({
          path: '/pet/findByStatus',
          operation: 'get'
      }).then(mock => {
          console.log(mock);//This would print:
          // {
          //     "parameters": {
          //         "query": [{
          //             "name": "status",
          //             "value": [ 'available', 'pending' ],
          //             "separator": "multi"
          //         }]
          //     }
          // }
      }).catch(error => {
          Assert.ifError(error);
      })

  ```


  Check [Examples](docs/EXAMPLES.md) for more details on mock generators.


  ## API


  `Swagmock(api, [options])`


  * `api` - (*Object*) or (*String*) or (*Promise*) - (required) - api can be one of the following.
      - A relative or absolute path to the Swagger api document.
      - A URL of the Swagger api document.
      - The swagger api Object
      - A promise (or a `thenable`) that resolves to the swagger api Object

  * `options` - (*Object*) - (optional) - Additional options to create the mock generator.
      - `validated` -  Set this property to `true` if the api is already validated against swagger schema and already dereferenced all the `$ref`. This is really useful to generate mocks for parsed api specs. Default value for this is `false` and the api will be validated using [swagger-parser validate](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#validateapi-options-callback).

  ## responses


  `mockgen.responses(options, [callback])`


  This generates the mock response objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the response mock need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path` is not specified, mock response will be generated for all the paths defined by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the response mock need to be generated. For example `get`, `post` etc. If `operation` is not specified, mock response will be generated for all the operations defined by the swagger api.


  * `response` - (*String*) - (optional) - The response for which the response mock need to be generated. For example `200`, `400`, `default` etc. If `response` is not specified, mock response will be generated for all the responses defined by the swagger api.


  * `useExamples` - (*Boolean*)- (optional) - Should the generated mock make use of example values defined in your swagger.json. Note: invalid example values will create invalid mockdata!


  ## parameters


  `mockgen.parameters(options, [callback])`


  This generates the mock parameters objects based on the `options`


  * `options` - (*Object*) - (required) - Options to control the mock generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path` is not specified, mock parameters will be generated for all the paths defined by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the parameters mock need to be generated. For example `get`, `post` etc. If `operation` is not specified, mock parameters will be generated for all the operations defined by the swagger api.



  ## requests


  `mockgen.requests(options, [callback])`


  This generates the mock request object based on the `options`. `requests` API resolves the `parameters` mock data to generate the `request` mock object useful for unit tests.


  * `options` - (*Object*) - (required) - Options to control the mock generation.


  * `callback` -  (*Function*) - (optional) - `function (error, mock)`. If a callback is not provided a `Promise` will be returned.


  ### options


  * `path` - (*String*) - (optional) - The path for which the parameters mock need to be generated. For example `/pet/findByStatus`, `/pet` etc. If a `path` is not specified, mock parameters will be generated for all the paths defined by the swagger api.


  * `operation` - (*String*) - (optional) - The operation for which the parameters mock need to be generated. For example `get`, `post` etc. If `operation` is not specified, mock parameters will be generated for all the operations defined by the swagger api.


  ### data


  `request` Object will have following possible properties `query`, `header`, `pathname`, `path`, `formData` or `body` based on the `parameters` defined for the path and operation.


  Mock request [Path templates](http://swagger.io/specification/#pathTemplating) are resolved using path parameters.


  ```javascript
      mockgen.requests({
          path: '/pet/findByStatus',
          operation: 'get'
      }, function (error, mock) {
          assert.ifError(error);

          console.log(mock);
          //This would print:
          // {
          //     "request": {
          //         "query": "status=available&status=pending"
          //     }
          // }
      });
  ```

  ## Examples


  ### API

  [Usage](docs/EXAMPLES.md)


  ### Unit test request mocks


  [github api express app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/github-express/tests)


  [slack api hapi app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/slack/tests)


  ### Mock response data providers


  [spotify api hapi app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/hapi/spotify/data)


  [glugbot api express app](https://github.com/subeeshcbabu/swaggerize-examples/tree/master/express/glugbot-express/tests/api)
zalando/friboo: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC2:1EDF9F:251144F:25CAC3B:678EE3F1
  and timestamp 2025-01-21 00:01:53
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
krakenjs/generator-swaggerize: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC0:1F5FC7:55210C4:56DD028:678EE3A8 and timestamp 2025-01-21 00:00:40
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ninenines/cowboy: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDF:2AAE2C:511FFF9:52DB6A9:678EE3BD and timestamp 2025-01-21 00:01:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
BlueOakJS/blueoak-server: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24F0D69:25A9AB3:678EE357 and timestamp 2025-01-20 23:59:19
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Trax-air/swagger-aggregator: >
  .. image::
  https://travis-ci.org/Trax-air/swagger-aggregator.svg?branch=master
     :alt: Travis status
  .. image:: https://badges.gitter.im/Trax-air/swagger-aggregator.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-aggregator
    :target: https://gitter.im/Trax-air/swagger-aggregator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-aggregator.svg
      :target: https://pypi.python.org/pypi/swagger-aggregator/

  swagger-aggregator

  ==================


  Swagger-aggregator allow you to create a swagger REST API from several other swagger REST APIs.


  This can be really useful if you want to make an API Gateway accessing some of your internal APIs.

  You can also filter which path you want to deliver, and which properties of your definitions you don't want to show.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-stub: A stub you can use in your client's unit tests. All the HTTP calls to your swagger API are mocked by default. You can also add your own mocked_calls in your test functions.

  * https://github.com/Trax-air/swagger-parser: A helper that parses swagger specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  Here is an example of an aggregate configuration.


  .. code:: yaml

    args: pet_url

    info:
      version: "0.1"
      title: "API Gateway"

    basePath: /v2

    apis:
        pet: http://pet_url/v2

    exclude_paths:
      - DELETE /pets/{petId}

    exclude_fields:
      petPet:
        - id

  This is not the most useful aggregation, as it only aggregate one API.

  The first part, `args`, define that the first parameter we will send to the aggregate will be pet_url. Then pet_url will be replaced by the given value everywhere in the config.

  The two next part, `info` and `basePath`, are the same as the ones you can find in every swagger API.

  `apis`, define the different APIs you want to aggregate. A name is associated with it URL.

  Then `exclude_paths` allow you to not deliver some path. In this case we don't want the user to delete a pet.


  Finally, `exclude_fields` define the attributes of the definitions we do not want to show.

  The value of the keys is the name of the API followed by the name of the definition. The value of each key will be a list of all properties to exclude.


  Then use this command to generate the aggregated swagger file:


  .. code:: python

    from traxit_aggregator import SwaggerAggregator

    SwaggerAggregator('config.yaml', 'pet.com')

  Documentation

  -------------


  More documentation is available at https://swagger-aggregator.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-aggregator`


  License

  -------


  swagger-aggregator is licensed under http://opensource.org/licenses/MIT.
Reckon-Limited/serverless_swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:24F3C38:25ACA7D:678EE368 and timestamp 2025-01-20 23:59:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
capitalone/oas-nodegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDD:B00D1:521F2CF:53DBAE0:678EE381 and timestamp 2025-01-21 00:00:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
calcinai/strut: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CDA:1EDF9F:24F7E85:25B0EC7:678EE381
  and timestamp 2025-01-21 00:00:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
pingf/falsy: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD7:201941:57C9AE1:5985FE9:678EE3C2
  and timestamp 2025-01-21 00:01:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
gangverk/flask-swagger: >
  # flask-swagger

  A Swagger 2.0 spec extractor for Flask


  You can now specify base path for yml files:

  ```python

  app = Flask(__name__)


  @app.route("/spec")

  def spec():
      base_path = os.path.join(app.root_path, 'docs')
      return jsonify(swagger(app), from_file_keyword="swagger_from_file", base_path=base_path)
  ```

  and use relative paths:

  ```python

  @app.route('/test', methods=['POST'])

  def login():
      """
      swagger_from_file: test.yml
      """
  ```


  Install:


  ```shell

  pip install flask-swagger

  ```

  Flask-swagger provides a method (swagger) that inspects the Flask app for endpoints that contain YAML docstrings with Swagger 2.0 [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object) objects.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user
          ---
          tags:
            - users
          definitions:
            - schema:
                id: Group
                properties:
                  name:
                   type: string
                   description: the group's name
          parameters:
            - in: body
              name: body
              schema:
                id: User
                required:
                  - email
                  - name
                properties:
                  email:
                    type: string
                    description: email for user
                  name:
                    type: string
                    description: name for user
                  address:
                    description: address for user
                    schema:
                      id: Address
                      properties:
                        street:
                          type: string
                        state:
                          type: string
                        country:
                          type: string
                        postalcode:
                          type: string
                  groups:
                    type: array
                    description: list of groups
                    items:
                      $ref: "#/definitions/Group"
          responses:
            201:
              description: User created
          """
          return {}
  ```

  Flask-swagger supports docstrings in methods of MethodView classes (à la [Flask-RESTful](https://github.com/flask-restful/flask-restful)) and regular Flask view functions.


  Following YAML conventions, flask-swagger searches for `---`, everything preceding is provided as `summary` (first line) and `description` (following lines) for the endpoint while everything after is parsed as a swagger [Operation](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object) object.


  In order to support inline definition of [Schema ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject) objects in [Parameter](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject)  and [Response](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#responsesObject) objects, flask-swagger veers a little off from the standard. We require an `id` field for the inline Schema which is then used to correctly place the [Schema](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject) object in the [Definitions](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject) object.



  [Schema ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject) objects can be defined in a definitions section within the docstrings (see group object above) or within responses or parameters (see user object above). We also support schema objects nested within the properties of other [Schema ](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#schemaObject) objects. An example is shown above with the address property of User.


  If you don't like to put YAML on docstrings you can put the same content in an external file.


  #### file.yml

  ```yaml

  Create a new user

  ---

  tags:
    - users
  definitions:
    - schema:
        id: Group
        properties:
          name:
           type: string
           description: the group's name
  parameters:
    - in: body
      name: body
      schema:
        id: User
        required:
          - email
          - name
        properties:
          email:
            type: string
            description: email for user
          name:
            type: string
            description: name for user
          address:
            description: address for user
            schema:
              id: Address
              properties:
                street:
                  type: string
                state:
                  type: string
                country:
                  type: string
                postalcode:
                  type: string
          groups:
            type: array
            description: list of groups
            items:
              $ref: "#/definitions/Group"
  responses:
    201:
      description: User created
  ```


  and point to it in your docstring.


  ```python

  class UserAPI(MethodView):

      def post(self):
          """
          Create a new user

          blah blah

          swagger_from_file: path/to/file.yml

          blah blah
          """
          return {}
  ```


  Note that you can replace `swagger_from_file` by another keyword. Supply your chosen keyword as an argument to swagger. 



  To expose your Swagger specification to the world you provide a Flask route that does something along these lines


  ```python

  from flask import Flask, jsonify

  from flask_swagger import swagger


  app = Flask(__name__)


  @app.route("/spec")

  def spec():
      return jsonify(swagger(app))
  ```


  Note that the Swagger specification returned by `swagger(app)` is as minimal as it can be. It's your job to override and add to the specification as you see fit.


  ```python

  @app.route("/spec")

  def spec():
      swag = swagger(app)
      swag['info']['version'] = "1.0"
      swag['info']['title'] = "My API"
      return jsonify(swag)
  ```



  [Swagger-UI](https://github.com/swagger-api/swagger-ui)


  Swagger-UI is the reason we embarked on this mission to begin with, flask-swagger does not however include Swagger-UI. Simply follow the awesome documentation over at https://github.com/swagger-api/swagger-ui and point your [swaggerUi.url](https://github.com/swagger-api/swagger-ui#swaggerui) to your new flask-swagger endpoint and enjoy.


  ## flaskswagger Command

  This package now comes with a very simple command line interface: flaskswagger. This command can be used to build and update swagger specs for your flask apps from the command line or at build time.


  ```shell

  flaskswagger -h

  ```


  ```

  usage: flaskswagger [-h] [--template TEMPLATE] [--out-dir OUT_DIR]
                      [--definitions DEFINITIONS] [--host HOST]
                      [--base-path BASE_PATH] [--version VERSION]
                      app

  positional arguments:
    app                   the flask app to swaggerify

  optional arguments:
    -h, --help            show this help message and exit
    --template TEMPLATE   template spec to start with, before any other options
                          or processing
    --out-dir OUT_DIR     the directory to output to
    --definitions DEFINITIONS
                          json definitions file
    --host HOST
    --base-path BASE_PATH
    --version VERSION     Specify a spec version

  ```


  For example, this can be used to build a swagger spec which can be served from your static directory. In the example below, we use the manually created swagger.json.manual as a template, and output to the `static/` directory.


  ```shell

  flaskswagger server:app --template static/swagger.json.manual --out-dir static/

  ```

  Also, you can ask flaskswagger to add host and basePath to your swagger spec:  


  ```shell

  flaskswagger server:app --host localhost:5000 --base-path /v1

  ```


  Acknowledgements


  Flask-swagger builds on ideas and code from [flask-sillywalk](https://github.com/hobbeswalsh/flask-sillywalk) and [flask-restful-swagger](https://github.com/rantav/flask-restful-swagger)


  Notable forks


  [Flasgger](https://github.com/rochacbruno/flasgger)
Yelp/swagger_spec_validator: >
  # swagger\_spec\_validator

  [![Build Status](https://github.com/Yelp/swagger_spec_validator/workflows/build/badge.svg?branch=master)](https://github.com/Yelp/swagger_spec_validator/actions?query=workflow%3Abuild)

  [![Coverage Status](https://coveralls.io/repos/Yelp/swagger_spec_validator/badge.svg)](https://coveralls.io/r/Yelp/swagger_spec_validator)

  [![Latest Version](https://img.shields.io/pypi/v/swagger_spec_validator.svg)](https://pypi.python.org/pypi/swagger_spec_validator/)


  ## About


  Swagger Spec Validator is a Python library that validates Swagger Specs against the [Swagger 1.2](https://github.com/swagger-api/swagger-spec/blob/master/versions/1.2.md) or [Swagger 2.0](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md) specification.  The validator aims to check for full compliance with the Specification.


  ## Example Usage


  Validate a spec from a url:


  ```python


  from swagger_spec_validator import validate_spec_url


  # example for swagger spec v1.2

  validate_spec_url('http://petstore.swagger.io/api/api-docs')


  # example for swagger spec v2.0

  validate_spec_url('http://petstore.swagger.io/v2/swagger.json')

  ```


  ## Documentation


  More documentation is available at http://swagger_spec_validator.readthedocs.org


  ## Installation

      $ pip install swagger_spec_validator

  ## Contributing


  1. Fork it ( http://github.com/Yelp/swagger_spec_validator/fork )

  2. Create your feature branch (`git checkout -b my-new-feature`)

  3. Commit your changes (`git commit -am 'Add some feature'`)

  4. Push to the branch (`git push origin my-new-feature`)

  5. Create new Pull Request


  ## License


  Copyright (c) 2015, Yelp, Inc. All rights reserved.

  Apache v2
tminglei/binder-swagger-java: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:537D7C6:5539E4B:678EE3E2 and timestamp 2025-01-21 00:01:38
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
thebignet/swagger-codegen-gradle-plugin: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CC8:1EDF9F:250DCEB:25C73AE:678EE3E0 and timestamp 2025-01-21 00:01:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
striglia/pyramid_swagger: >
  :PyPI: https://pypi.python.org/pypi/pyramid_swagger

  :Documentation: http://pyramid-swagger.readthedocs.org/en/latest/

  :Source: https://github.com/striglia/pyramid_swagger

  :License: Copyright © 2014 Scott Triglia under the `BSD 3-clause <http://opensource.org/licenses/BSD-3-Clause>`_

  :Build status:
      .. image:: https://travis-ci.org/striglia/pyramid_swagger.png?branch=master
          :target: https://travis-ci.org/striglia/pyramid_swagger?branch=master
          :alt: Travis CI
      .. image:: https://ci.appveyor.com/api/projects/status/ufmlmpwy1vj3yjgk/branch/master?svg=true
          :target: https://ci.appveyor.com/project/striglia/pyramid-swagger
          :alt: Appveyor (Windows CI)
  :Current coverage on master:
      .. image:: https://coveralls.io/repos/striglia/pyramid_swagger/badge.png
          :target: https://coveralls.io/r/striglia/pyramid_swagger
  :Persistent chat for questions:
      .. image:: https://badges.gitter.im/Join%20Chat.svg
          :alt: Join the chat at https://gitter.im/striglia/pyramid_swagger
          :target: https://gitter.im/striglia/pyramid_swagger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge


  pyramid_swagger

  ===============


  This project offers convenient tools for using Swagger to define and validate

  your interfaces in a Pyramid webapp.


  Full documentation is available at http://pyramid-swagger.readthedocs.org/.



  How to contribute

  -----------------


  #. Fork this repository on Github: https://help.github.com/articles/fork-a-repo/

  #. Clone your forked repository: https://help.github.com/articles/cloning-a-repository/

  #. Make a feature branch for your changes:

      ::

          git remote add upstream https://github.com/striglia/pyramid_swagger.git
          git fetch upstream
          git checkout upstream/master -b my-feature-branch

  #. Create and activate the virtual environment, this will provide you with all the
     libraries and tools necessary for pyramid_swagger development:

      ::

          make
          source .activate.sh

  #. Make sure the test suite works before you start:

      ::

          tox -e py27    # Note: use py35 for Python 3.5, see tox.ini for possible values

  #. Commit patches: http://gitref.org/basic/

  #. Push to github: ``git pull && git push origin``

  #. Send a pull request: https://help.github.com/articles/creating-a-pull-request/



  Running a single test

  *********************


  Make sure you have activated the virtual environment (see above).


  ::

      py.test -vvv tests/tween_test.py::test_response_properties
kaizhu256/node-swagger-mongodb: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D0BC50:D72F45:678EE3A4 and timestamp 2025-01-21 00:00:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
krakenjs/swaggerize-express: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:2501079:25BA38A:678EE3A9 and timestamp 2025-01-21 00:00:41
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
khrt/Raisin: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC3:4925F:44AD74A:4624688:678EE3A5
  and timestamp 2025-01-21 00:00:37
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mobilcom-debitel/pokemock: "# Pokemock\r

  \r

  A mock server generated from one or more arbitrary Swagger files.\r

  Supports seeding, timeouts, response picking,\r

  entity memory, semantic action inference, etc.\r

  \r

  \r

  ## Usage\r

  \r

  ```\r

  Syntax:\r

  \  pokemock <swagger-urls-or-files> ... [-h] [-v] [-w] [-p <port>]\r

  \r

  Options:\r

  \  -h, --help        Show help\r

  \  -v, --version     Show version\r

  \  -p, --port <port> Set server port, default is 8000\r

  \  -w, --watch       Watch mode: Restart on Swagger changes\r

  \  -k, --killable    Publish /kill endpoint to stop the service\r

  \      --memory      Enable memory module (experimental)\r

  ```\r

  \r

  \r

  ## Server\r

  \r

  The mock server listens to the specified port and\r

  mocks endpoints defined in the provided Swagger document.\r

  Additionally, it publishes a Swagger UI under `/ui`,\r

  the Swagger API under `/api-docs` and a `/kill` endpoint for shutdown.\r

  \r

  \r

  ## Request Headers\r

  \r

  Using optional headers, clients can control the server's behavior:\r

  \r

  - __X-Mock-Status__\r

  \  - Specifies the response status code\r

  \  - The correct response is inferred from the API if possible\r

  \  - Defaults to the first response code specified in the API\r

  - __X-Mock-Seed__\r

  \  - Specifies a seed for data generation\r

  \  - If omitted, a random seed is generated\r

  \  - The current seed is always returned in a X-Mock-Seed response header\r

  - __X-Mock-Time__\r

  \  - Specifies the minimum response time (milliseconds)\r

  - __X-Mock-Size__\r

  \  - Specifies array size(s) in the response\r

  \  - Must be a valid JSON object of\r

  \    `<definitionName|attributeName>: <size>` pairs\r

  \  - If omitted, array sizes are randomly between 1 and 5\r

  - __X-Mock-Depth__\r

  \  - Specifies the maximum JSON data depth\r

  \  - Defaults to 5\r

  - __X-Mock-Override__\r

  \  - Specifies response data via [JSON
  Path](https://github.com/dchester/jsonpath)\r

  \  - Must be a valid JSON object of `<jsonPath>: <data>` pairs\r

  \  - `<data>` is arbitrary JSON\r

  - __X-Mock-Replay__\r

  \  - Specifies the number of times the current X-Mock-* headers should be
  replayed\r

  \  - The next N requests to the requested URL will replay the current
  X-Mock-* headers\r

  - __X-Mock-Replay-Pattern__\r

  \  - Specifies a regular expression to match for X-Mock-Replay\r

  \  - If omitted, the exact path is used for replaying\r

  \r

  \r

  ## Memory (experimental)\r

  \r

  Use the `--memory` switch to enable the memory module.\r

  When enabled, entities containing an ID are remembered by the server.\r

  If the entity is requested again, the remembered data is returned.\r

  This also applies to sub-entities across endpoints.\r

  \r

  Additionally, the server tries to infer semantic actions from requests,\r

  such as:\r

  \r

  - Get by id\r

  - Delete by id\r

  - Update by id\r

  - Create new entity\r

  \r

  These actions are applied to known entities in memory.\r

  For example, requesting a deleted entity will result in a 404 response.\r

  \r

  \r

  ## Customization\r

  \r

  Pokemock provides a set of [Express](http://expressjs.com/de/) middlewares\r

  which you can use independently.\r

  The default app defined in `createDefaultApp.js` is an opinionated stack
  of\r

  middlewares which you're encouraged to hack on.\r

  By re-arranging and adding middlewares (especially generators)\r

  you can tailor Pokemock to fit your APIs.\r\n"
fleekjs/fleek-validator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24FD276:25B6465:678EE398 and timestamp 2025-01-21 00:00:24
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
oatpp/oatpp-swagger: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCC:2AAE2C:5120492:52DBB48:678EE3BE and timestamp 2025-01-21 00:01:02
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
zaaack/koa-joi-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCC:2AAE2C:512B832:52E7233:678EE3EF and timestamp 2025-01-21 00:01:51
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ruby-grape/grape-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD6:1EDF9F:250808C:25C15B8:678EE3C8 and timestamp 2025-01-21 00:01:12
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apigee-127/swagger-tools: >
  The project provides various tools for integrating and
  interacting with Swagger.  This project is in its infancy but

  what is within the repository should be fully tested and reusable.  Please visit the [issue tracker][project-issues] to

  see what issues we are aware of and what features/enhancements we are working on.  Otherwise, feel free to review the

  [Release Notes][release-notes] to see what is new and improved.


  ## Project Badges


  [![Join the chat at https://gitter.im/apigee-127/swagger-tools](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/apigee-127/swagger-tools?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  * Dependencies: [![Dependencies](https://david-dm.org/apigee-127/swagger-tools.svg)](https://david-dm.org/apigee-127/swagger-tools)

  * Developer dependencies: [![Dev Dependencies](https://david-dm.org/apigee-127/swagger-tools/dev-status.svg)](https://david-dm.org/apigee-127/swagger-tools#info=devDependencies&view=table)

  * Downloads: [![NPM Downloads Per Month](http://img.shields.io/npm/dm/swagger-tools.svg?style=flat)](https://www.npmjs.org/package/swagger-tools)

  * License: [![License](http://img.shields.io/npm/l/swagger-tools.svg?style=flat)](https://github.com/apigee-127/swagger-tools/blob/master/LICENSE)

  * Bower Version [![NPM Version](https://img.shields.io/bower/v/swagger-tools.svg?style=flat)](http://bower.io/search/?q=swagger-tools)

  * NPM Version: [![NPM Version](http://img.shields.io/npm/v/swagger-tools.svg?style=flat)](https://www.npmjs.org/package/swagger-tools)


  ## Supported Swagger Versions


  * [1.2][swagger-docs-v1_2]

  * [2.0][swagger-docs-v2_0]


  ## Features


  * Simple CLI
      * Validate Swagger document(s)
      * Convert Swagger 1.2 documents to Swagger 2.0
  * Schema validation: For the file(s) supported by the Swagger specification, ensure they pass structural validation

  based on the [JSON Schema][json-schema] associated with that version of the specification _(Browser and Node)_

  * Semantic validation: Validates Swagger files above and beyond the structure of the file _(Browser and Node)_

  * Connect middleware for adding pertinent Swagger information to your requests _(Node only)_

  * Connect middleware for wiring up security handlers for requests based on Swagger documentation _(Node only)_

  * Connect middleware for wiring request handlers to requests based on Swagger documentation _(Node only)_

  * Connect middleware for serving your Swagger documents and [Swagger UI][swagger-ui] _(Node only)_

  * Connect middleware for using Swagger resource documents for pre-route validation _(Node only)_
      * Validate the request/response Content-Type based on the operation's `consumes/produces` value(s)
      * Validate the request parameter types
      * Validate the request parameter values
      * Validate the response values

  ## Installation


  Swagger Tools is available for both Node.js and the browser.  Installation instructions for each environment are below.


  ### Browser


  Installation for browser applications can be done via [Bower][bower] or by downloading a standalone binary.


  #### Using Bower


  ```

  bower install swagger-tools --save

  ```


  #### Standalone Binaries


  The standalone binaries come in two flavors:


  * [swagger-tools-standalone.js](https://raw.github.com/apigee-127/swagger-tools/master/browser/swagger-tools-standalone.js): _2,280kb_, full source _(including all dependencies)_ and source maps

  * [swagger-tools-standalone-min.js](https://raw.github.com/apigee-127/swagger-tools/master/browser/swagger-tools-standalone-min.js): _316kb_, minified, compressed

  and no sourcemap


  ### Node.js


  Installation for Node.js applications can be done via [NPM][npm].


  ```

  npm install swagger-tools --save

  ```


  If you want to use the `swagger-tools` executable for validating Swagger documents, you can install swagger-tools

  globally using the following:


  ```

  npm install -g swagger-tools

  ```


  ## Documentation


  swagger-tools is heavily documented so head on over to the project  [documentation][documentation] or jump straight to

  the [Quick Start][quick-start].


  ## Contributing


  This project uses [Gulp][gulp] for building so `npm install -g gulp` once you clone this project.  Running `gulp` in the

  project root will lint check the source code and run the unit tests.


  [bower]: http://bower.io/

  [documentation]: https://github.com/apigee-127/swagger-tools/blob/master/docs/README.md

  [gulp]: http://gulpjs.com/

  [json-schema]: http://json-schema.org/

  [npm]: https://www.npmjs.org/

  [project-issues]: https://github.com/apigee/swagger-tools/issues

  [quick-start]: https://github.com/apigee-127/swagger-tools/blob/master/docs/QuickStart.md

  [release-notes]: https://github.com/apigee-127/swagger-tools/blob/master/RELEASE_NOTES.md

  [swagger]: http://swagger.io/

  [swagger-docs-v1_2]: https://github.com/swagger-api/swagger-spec/blob/master/versions/1.2.md

  [swagger-docs-v2_0]: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md

  [swagger-ui]: https://github.com/swagger-api/swagger-ui
metosin/fnhouse-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC0:1F5FC7:5523B7A:56DFBC4:678EE3B4 and timestamp 2025-01-21 00:00:52
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
yonaskolb/SwagGen: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD1:124B:D1BBB2:D83384:678EE3EE and timestamp 2025-01-21 00:01:50
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
jolie/jester: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CDA:1EDF9F:24FFA4C:25B8D0D:678EE3A3
  and timestamp 2025-01-21 00:00:35
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Yelp/bravado-core: >
  .. image::
  https://github.com/Yelp/bravado-core/workflows/build/badge.svg?branch=master
    :target: https://github.com/Yelp/bravado-core/actions?query=workflow%3Abuild

  .. image:: https://img.shields.io/coveralls/Yelp/bravado-core.svg
    :target: https://coveralls.io/r/Yelp/bravado-core

  .. image:: https://img.shields.io/pypi/v/bravado-core.svg
      :target: https://pypi.python.org/pypi/bravado-core/
      :alt: PyPi version

  .. image:: https://img.shields.io/pypi/pyversions/bravado_core.svg
      :target: https://pypi.python.org/pypi/bravado-core/
      :alt: Supported Python versions

  bravado-core

  ============


  About

  -----


  bravado-core is a Python library that adds client-side and server-side support

  for the `OpenAPI Specification v2.0 <https://github.com/OAI/OpenAPI-Specification>`__.


  Features

  --------

  * OpenAPI Specification schema validation

  * Marshaling, transformation, and validation of requests and responses

  * Models as Python classes or dicts

  * Custom formats for type conversion


  Documentation

  -------------


  Documentation is available at `readthedocs.org <http://bravado-core.readthedocs.org>`__



  Installation

  ------------


  ::

      $ pip install bravado-core


  Related Projects

  ----------------

  * `bravado <https://github.com/Yelp/bravado>`__

  * `pyramid-swagger <https://github.com/striglia/pyramid_swagger>`__

  * `swagger-spec-validator <https://github.com/Yelp/swagger_spec_validator>`__


  Development

  ===========


  | Code is documented using `Sphinx <http://sphinx-doc.org/>`__.

  | `virtualenv <http://virtualenv.readthedocs.org/en/latest/virtualenv.html>`__ is recommended to keep dependencies and libraries isolated.

  | `tox <https://tox.readthedocs.org/en/latest/>`__ is used for standardized testing.


  Setup

  -----


  ::

      # Run tests
      tox

      # Install git pre-commit hooks
      .tox/py310/bin/pre-commit install


  Contributing

  ------------


  1. Fork it ( http://github.com/Yelp/bravado-core/fork )

  2. Create your feature branch (``git checkout -b my-new-feature``)

  3. Add your modifications

  4. Add short summary of your modifications on ``CHANGELOG.rst``

  5. Commit your changes (``git commit -m "Add some feature"``)

  6. Push to the branch (``git push origin my-new-feature``)

  7. Create new Pull Request


  License

  -------


  | Copyright (c) 2013, Digium, Inc. All rights reserved.

  | Copyright (c) 2014-2015, Yelp, Inc. All rights reserved.


  Bravado is licensed with a `BSD 3-Clause

  License <http://opensource.org/licenses/BSD-3-Clause>`__.
unicredit/sbt-swagger-codegen: >
  # SBT Swagger Code Generator


  ## Overview


  Like the official [swagger-codegen](https://github.com/swagger-api/swagger-codegen) this project aims to generate Scala source code from [Swagger 2.0 Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) compliant API descriptions.

  Moreover, you can do it directly within an `sbt` project.


  ## Compatibility


  This code generator is designed specifically for Swagger Spec Version 2.0. Moreover, it relies on [Play! Framework](http://www.playframework.com/) 2.7 for Json marshalling/unmarshalling, server- and client-side code.


  ## Install


  Current release is [`0.0.12`](https://github.com/unicredit/sbt-swagger-codegen/tree/0.0.12)


  If you want to try the latest version on `master`, first clone this project and `publishLocal` it.


  Enable it inside your `project\plugins.sbt` like this:


  `addSbtPlugin("eu.unicredit" % "sbt-swagger-codegen" % "0.1.0-SNAPSHOT")`


  Enable it in your `build.sbt` like this:


  `enablePlugins(SwaggerCodegenPlugin)`


  ## Quick start


  For a *super fast* hands-on tutorial refer to the related examples and check out [sbt-swagger-codegen-examples](https://github.com/unicredit/sbt-swagger-codegen-examples).


  ## How it works


  By default, the plugin will assume that you have put your `yaml` Swagger specification files under `src/main/swagger`.


  If so, then you can just run `swaggerModelCodeGen` task and it will generate your *models* as case classes and [Play Framework](www.playframework.com) [Formats](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators#Format) for them (for json serialization).


  ## Tasks


  All available tasks from the plugin


  - `swaggerModelCodeGen`  -> generated code for model classes

  - `swaggerServerCodeGen` -> generates Play Framework code

  - `swaggerClientCodeGen` -> generates client code using `play-ws`

  - `swaggerClean` -> cleans up already generated code


  The `swaggerModelCodeGen`, `swaggerServerCodeGen` and `swaggerClientCodeGen` will run automatically when the swagger sources change.


  ## Keys (and defaults)


  These keys influence properties of the generated code itself:


  - `swaggerSourcesDir` -> "/src/main/swagger" (path where to search for swagger files)

  - `swaggerCodeGenPackage` -> "swagger.codegen" (package name of the generated sources)

  - `swaggerModelFileSplitting` -> "oneFilePerSource" (in model generation how to group classes in '.scala' files available options are "oneFilePerSource" "oneFilePerModel")

  - `swaggerCodeProvidedPackage` -> "com.yourcompany" (where you will provide business logic server method implementation)


  These keys determine where generated files will be put:


  - `swaggerModelCodeTargetDir` -> "target/scala-2.1x/src_managed/src/main/swagger/model" (path where to put generated model files)

  - `swaggerClientCodeTargetDir` -> "target/scala-2.1x/src_managed/src/main/swagger/client" (path where to put generated client code files)

  - `swaggerServerCodeTargetDir` -> "target/scala-2.1x/src_managed/src/main/swagger/server" (path where to put generated server code files)


  These keys can be used to determine what kind of code should be generated:


  - `swaggerGenerateModel` -> true (to be disabled if you do not want model classes to be generated automatically when swagger source code changes)

  - `swaggerGenerateJsonRW` -> true (if you want to generate json Format for your model case classes)

  - `swaggerGenerateClient` -> false (enable this if you want client code to ge generated automatically when swagger source code changes)

  - `swaggerGenerateServer` -> false (enable this if you want client code to ge generated automatically when swagger source code changes)


  Moreover, you can extend this plugin by providing alternative implementations of the generators via:


  - `swaggerModelCodeGenClass` -> new eu.unicredit.swagger.generators.DefaultModelGenerator() (the class used to generate the model classes)

  - `swaggerJsonCodeGenClass` -> new eu.unicredit.swagger.generators.DefaultJsonGenerator() (the class used to generate the json marshaller/unmarshaller)

  - `swaggerServerCodeGenClass` -> new eu.unicredit.swagger.generators.DefaultServerGenerator() (the class used to generate the Server classes)

  - `swaggerClientCodeGenClass` -> new eu.unicredit.swagger.generators.DefaultClientGenerator() (the class used to generate the client classes)


  ## Dependencies


  - scala version 2.12.X

  - [play-ws-standalone-json 1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ws-standalone-json)

  - [play-ahc-ws-standalone 1.1.3](http://mvnrepository.com/artifact/com.typesafe.play/play-ahc-ws-standalone) (only if you use client)


  ### Limitations


  At the moment the project is developed to fulfill some internal projects needs, so do not expect it to cover all the corner cases of the Swagger Spec (i.e. some primitive types in body req or resp).


  ## The road ahead


  We are actively working with and on this project, trying to overcome any arising limitations and support all Swagger-spec properties we need.

  PRs are really welcome and please open an Issue if you find that something is not working.


  ## Authors


  * Andrea Peruffo ([@andreaTP](https://github.com/andreaTP))

  * Francesco Montecuccoli Degli Erri ([@fralken](https://github.com/fralken))

  * Marco Firrincieli ([@mfirry](https://github.com/mfirry))


  ### Acknowledgements


  Thanks to Daniel Wunsch ([@dwunsch](https://github.com/dwunsch)), [@dvirf](https://github.com/dvirf) and Reto Habluetzel ([@rethab](https://github.com/rethab)) for their valuable contributions.


  *** This is a work in progress and we are not done with it! ***
MicroarrayTecnologia/spec-synthase: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24F3187:25ABFB0:678EE364 and timestamp 2025-01-20 23:59:32
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fleekjs/fleek-router: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC7:1EDF9F:24FCDF2:25B5FBB:678EE396 and timestamp 2025-01-21 00:00:22
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Trax-air/swagger-stub: >
  .. image::
  https://travis-ci.org/Trax-air/swagger-stub.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-stub
  .. image:: https://badges.gitter.im/Trax-air/swagger-stub.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-stub
    :target: https://gitter.im/Trax-air/swagger-stub?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-stub.svg
      :target: https://pypi.python.org/pypi/swagger-stub/

  swagger-stub

  ==============


  Swagger-stub create automatically a stub of your swagger REST API. This stub can be used anywhere you want like in a pytest fixture for your unit test.


  In addition of mocking your API, you can mock some call, and check every call that have been made to the API.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger specs into one. Useful for your API gateways!

  * https://github.com/Trax-air/swagger-parser: A helper that parses swagger specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  .. code:: python

    import pytest
    import requests

    from swagger_stub import swagger_stub

    # This is the fixture of your stub
    # You only need to specify the path of the swagger file and the address
    # where you want to bind your stub.
    @pytest.fixture
    def test_stub():
        return swagger_stub([('swagger.yaml', 'http://foo.com')]).next()

    # Then you can use this fixture anywhere you want like your API is really running.
    def test_swagger_stub(test_stub):
        # Get a definition example
        test_stub.definitions['Foo']

        # Check a simple call
        response = requests.get('http://foo.com/v1/bar/')
        assert response.status_code == 200
        assert response.json() == {
          'foo': 'bar'
        }

        # Check that an invalid body cause an error
        response = requests.post('http://foo.com/v1/bar/', data='invalid data')
        assert response.status_code == 400

        # Mock a call
        test_stub.add_mock_call('get', '/test', {'mock': 'call'})
        response = requests.get('http://foo.com/v1/test')
        assert response.json() == {'mock': 'call'}

        # Set some side_effect like in the mock library
        test_stub.add_mock_side_effect('get', '/iter', [{'test': '1'}, {'test': '2'}, {'test': '3'}])
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '1'}
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '2'}
        response = requests.get('http://foo.com/v1/iter')
        assert response.json() == {'test': '3'}

        # This side effect will raise a custom error
        test_stub.add_mock_side_effect('get', '/error', Exception)

        with pytest.raises(Exception):
            response = requests.get('http://foo.com/v1/error')

  Documentation

  -------------


  More documentation is available at https://swagger-stub.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-stub`


  License

  -------


  swagger-stub is licensed under http://opensource.org/licenses/MIT.
Nexmo/oas_parser: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCA:2AAE2C:510D4A3:52C8503:678EE365 and timestamp 2025-01-20 23:59:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ampedandwired/bottle-swagger: >
  =====================

  Bottle Swagger Plugin

  =====================


  About

  -----

  This project is a Bottle plugin for working with Swagger.

  `Bottle <http://bottlepy.org/>`_ is a Python web framework.

  `Swagger (OpenAPI) <http://swagger.io/>`_ is a standard for defining REST APIs.


  So if you are serving a REST API with Bottle,

  and you have a defined a Swagger schema for that API,

  this plugin can:


  * Validate incoming requests and outgoing responses against the swagger schema

  * Return appropriate error responses on validation failures

  * Serve your swagger schema via Bottle (for use in `Swagger UI <http://swagger.io/swagger-ui/>`_ for example)


  Requirements

  ------------


  * Python >= 2.7

  * Bottle >= 0.12

  * Swagger specification >= 2.0


  This project relies on `bravado-core <https://github.com/Yelp/bravado-core>`_ to perform the swagger schema validation,

  so any version of the Swagger spec supported by that project is also supported by this plugin.


  Installation

  ------------

  ::

    $ pip install bottle-swagger

  Usage

  -----

  See the "example" directory for a working example of using this plugin.


  The simplest usage is::

    import bottle

    swagger_def = _load_swagger_def()
    bottle.install(SwaggerPlugin(swagger_def))

  Where "_load_swagger_def" returns a dict representing your swagger specification

  (loaded from a yaml file, for example).


  There are a number of arguments that you can pass to the plugin constructor:


  * ``validate_requests`` - Boolean (default ``True``) indicating if incoming requests should be validated or not

  * ``validate_responses`` - Boolean (default ``True``) indicating if outgoing responses should be validated or not

  * ``ignore_undefined_routes`` - Boolean (default ``False``) indicating if undefined routes
    (that is, routes not defined in the swagger spec) should be passed on ("True") or return a 404 ("False")
  * ``invalid_request_handler`` - Callback called when request validation has failed.
    Default behaviour is to return a "400 Bad Request" response.
  * ``invalid_response_handler`` - Callback called when response validation has failed.
    Default behaviour is to return a "500 Server Error" response.
  * ``swagger_op_not_found_handler`` - Callback called when no swagger operation matching the request was found in the swagger schema.
    Default behaviour is to return a "404 Not Found" response.
  * ``exception_handler=_server_error_handler`` - Callback called when an exception is thrown by downstream handlers (including exceptions thrown by your code).
    Default behaviour is to return a "500 Server Error" response.
  * ``serve_swagger_schema`` - Boolean (default ``True``) indicating if the Swagger schema JSON should be served

  * ``swagger_schema_url`` - URL (default ``/swagger.json``) on which to serve the Swagger schema JSON


  All the callbacks above receive a single parameter representing the ``Exception`` that was raised,

  or in the case of ``swagger_op_not_found_handler`` the ``Route`` that was not found.

  They should all return a Bottle ``Response`` object.


  Contributing

  ------------

  Development happens in the `bottle-swagger GitHub respository <https://github.com/ampedandwired/bottle-swagger>`_.

  Pull requests (with accompanying unit tests), feature suggestions and bug reports are welcome.


  Use "tox" to run the unit tests::

    $ tox
vanderlee/PHPSwaggerGen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCF:2AAE2C:51299F8:52E5393:678EE3E6 and timestamp 2025-01-21 00:01:42
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
garethjevans/swagger-codegen-maven-plugin: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CC0:1F5FC7:551E33F:56DA1EA:678EE39C and timestamp 2025-01-21 00:00:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
noirbizarre/flask-restplus: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CE0:2AAE2C:512010A:52DB7C5:678EE3BD and timestamp 2025-01-21 00:01:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Trax-air/swagger-parser: >
  .. image::
  https://travis-ci.org/Trax-air/swagger-parser.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-parser 
  .. image:: https://badges.gitter.im/Trax-air/swagger-parser.svg
     :alt: Join the chat at https://gitter.im/Trax-air/swagger-parser
     :target: https://gitter.im/Trax-air/swagger-parser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-parser.svg
      :target: https://pypi.python.org/pypi/swagger-parser/

  swagger-parser

  ==============


  Swagger-parser is a python module giving you access to some interesting data about your swagger file. Like getting a dictionary example from a definition name, get the definition of a dictionary, and more.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  * https://github.com/Trax-air/swagger-tester: Auto-test your swagger API in your unit tests. All test calls are generated by your swagger file.

  * https://github.com/Trax-air/swagger-stub: A stub you can use in your client's unit tests. All the HTTP calls to your swagger API are mocked by default. You can also add your own mocked_calls in your test functions.

  * https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger specs into one. Useful for your API gateways!


  Example Usage

  -------------


  .. code:: python

    from swagger_parser import SwaggerParser

    parser = SwaggerParser(swagger_path='swagger_path')  # Init with file
    parser = SwaggerParser(swagger_dict={})  # Init with dictionary

    # Get an example of dict for the definition Foo
    parser.definitions_example.get('Foo')

    # Get the definition of a dictionary
    test = {
      'foo': 'bar'
    }
    parser.get_dict_definition(test)

    # Validate the definition of a dict
    parser.validate_definition('Foo', test)

    # Validate that the given data match a path specification
    parser.validate_request('/foo', 'post', body=test, query={'foo': 'bar'})

    # Get the possible return value of a path
    # It will return a dictionary with keys as status_code
    # and value as example of return value.
    parser.get_request_data('/foo', 'post', body=test)

    # Get an example of a correct body for a path
    parser.get_send_request_correct_body('/foo', 'post')

  Documentation

  -------------


  More documentation is available at https://swagger-parser.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-parser`


  License

  -------


  swagger-parser is licensed under http://opensource.org/licenses/MIT.
elmiko/pecan-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCB:201941:57BF1EA:597B3F1:678EE392 and timestamp 2025-01-21 00:00:18
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
smoketurner/dropwizard-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCB:201941:57CD4D3:5989B0A:678EE3D2 and timestamp 2025-01-21 00:01:22
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Trax-air/swagger-tester: >
  .. image::
  https://travis-ci.org/Trax-air/swagger-tester.svg?branch=master
     :alt: Travis status
     :target: https://travis-ci.org/Trax-air/swagger-tester
  .. image:: https://badges.gitter.im/Trax-air/swagger-tester.svg
    :alt: Join the chat at https://gitter.im/Trax-air/swagger-tester
    :target: https://gitter.im/Trax-air/swagger-tester?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge
  .. image:: https://img.shields.io/pypi/v/swagger-tester.svg
      :target: https://pypi.python.org/pypi/swagger-tester/

  swagger-tester

  ==============


  Swagger-tester will test automatically your swagger API. Swagger API made with connexion (https://github.com/zalando/connexion) are supported directly without running the API server. In the case you use connexion it will automatically run a test server from your swagger file.


  To run the test, swagger-tester will detect every path and actions of your API. And for each, it will send a request and check if the response match the swagger file specification.


  Related Libraries

  -----------------

  You may find related libraries to this one:


  - https://github.com/Trax-air/swagger-stub: A stub you can use in your client's unit tests. All the HTTP calls to your swagger API are mocked by default. You can also add your own mocked_calls in your test functions.

  - https://github.com/Trax-air/swagger-aggregator: Aggregate several swagger specs into one. Useful for your API gateways!

  - https://github.com/Trax-air/swagger-parser: A helper that parses swagger specs. You can access the HTTP actions / paths and some example data


  Example Usage

  -------------


  .. code:: python

   from swagger_tester import swagger_test

    # Dict containing the error you don't want to raise.
    # By default, every status_code over other than 1xx, 2xx or 3xx
    # will be considered as an error.
    authorize_error = {
          'post': {
              '/pet/{petId}': [200],
              '/pet': [200]
          },
          'put': {
              '/user/{username}': [200],
              '/pet': [200]
          },
          'delete': {
              '/pet/{petId}': [200],
              '/store/order/{orderId}': [200],
              '/user/{username}': [200]
          }
      }

    # Run the test with connexion
    # An AssertionError will be raise in case of error.
    swagger_test('path_to_your_swagger.yaml', authorize_error=authorize_error)

    # Or if you have a running API
    swagger_test(app_url='http://petstore.swagger.io/v2', authorize_error=authorize_error)

  Documentation

  -------------


  More documentation is available at https://swagger-tester.readthedocs.org/en/latest/.


  Setup

  -----


  `make install` or `pip install swagger-tester`


  License

  -------


  swagger-tester is licensed under http://opensource.org/licenses/MIT.
cachecontrol/hippie-swagger: >
  ![hippie-swagger](http://i.imgur.com/icjd94P.png)


  _"The confident hippie"_


  [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)

  [![Build Status](https://travis-ci.org/CacheControl/hippie-swagger.svg)](https://travis-ci.org/CacheControl/hippie-swagger)

  [![npm version](https://badge.fury.io/js/hippie-swagger.svg)](https://badge.fury.io/js/hippie-swagger)


  ## Synopsis


  ```hippie-swagger``` is a tool for testing RESTful APIs.  In addition to validating api behavior, it will fail tests when swagger documentation is missing or inaccurate.


  As the test suite runs, any request or response details *not* matching the swagger file will throw an appropriate exception, failing the spec.  This ensures the swagger definition accurately describes application behavior, keeping documentation in sync with reality.


  ```hippie-swagger``` uses [hippie](https://github.com/vesln/hippie) under the hood, an excellent API testing tool.


  ## Features


  * All [hippie](https://github.com/vesln/hippie) features included

  * All aspects of swagger file validated; parameters, request/response body, paths, etc.

  * Checks for extra parameters, paths, headers, etc not mentioned in the swagger file

  * Ensures swagger file accurately describes API behavior

  * Accurate, human readable assertion messages


  ## Installation


  ```

  npm install hippie-swagger --save-dev

  ```


  ## Basic Usage


  ```js

  var hippie = require('hippie-swagger'),
      swagger = require('./my-dereferenced-swagger-file'); // see example for how to dereference swagger

  hippie(app, swagger)

  .get('/users/{username}')

  .pathParams({
    username: 'cachecontrol'
  })

  .expectStatus(200)

  .expectValue('user.first', 'John')

  .expectHeader('cache-control', 'no-cache')

  .end(function(err, res, body) {
    if (err) throw err;
  });

  ```


  ## Usage

  * See [hippie](https://github.com/vesln/hippie) documentation for a description of the base api

  * When specifying a url(.get, .post, .patch, .url, etc), use the [swagger path](http://swagger.io/specification/#pathsObject)

  * Provide any path variables using [pathParams](#pathparams)


  These aside, use hippie as you normally would; see the [example](example/index.js).


  ## Methods


  ### #constructor (Object app, Object swagger, Object [options])


  Test an HTTP app (like express) directly


  ```js

  hippie(app, swagger, options)

  .get('/projects')

  .end(fn);

  ```


  ### #constructor (Object swagger, Object [options])


  Test a remote HTTP app using a fully qualified url


  ```js

  hippie(swagger, options)

  .get('http://localhost:3000/projects')

  .end(fn);

  ```


  ### #pathParams(Object hash)


  Replaces variables contained in the swagger path.


  ```js

  hippie(app, swagger)

  .get('/projects/{projectId}/tasks/{taskId}')

  .pathParams({
    projectId: 123,
    taskId: 99
  })

  .end(fn);

  ```


  ## Options


  To customize behavior, an ```options``` hash may be passed to the constructor.  Typically, ```options``` only need to be specified in situations where the test covers responses to improper requests (e.g. validating the application returns a 422 when a required parameter is not provided).


  ```js

  var options = {
    validateResponseSchema: true,
    validateParameterSchema: true,
    errorOnExtraParameters: true,
    errorOnExtraHeaderParameters: false
  };

  hippie(app, swagger, options)

  ```


  ```validateResponseSchema``` - Validate the server's response against the swagger json-schema definition (default: ```true```)


  ```validateParameterSchema``` - Validate the request parameters against the swagger json-schema definition (default: ```true```)


  ```validateRequiredParameters``` - Validate that required parameters were provided  (default: ```true```)


  ```errorOnExtraParameters``` - Throw an error if a parameter is missing from the swagger file  (default: ```true```)


  ```errorOnExtraHeaderParameters``` - Throw an error if a request header is missing from the swagger file.  By default this is turned off, because it results in every request needing to specify the "Content-Type" and "Accept" headers, which quickly becomes verbose. (default: ```false```)



  ## Example

  See the [example](example/index.js) folder


  ## Validations


  When hippie-swagger detects it is interacting with the app in ways not specified in the swagger file, it will throw an error and fail the test.  The idea is to use hippie's core features to write API tests as per usual, and hippie-swagger will only interject if the swagger contract is violated.


  Below are list of some of the validations that hippie-swagger checks for:


  ### Paths

  ```js

  hippie(app, swagger)

  .get('/pathNotMentionedInSwagger')

  .end(fn);

  // path does not exist in swagger file; throws:

  //    Swagger spec does not define path: pathNotMentionedInSwagger

  ```


  ### Parameter format

  ```js

  hippie(app, swagger)

  .get('/users/{userId}')

  .pathParams({
    userId: 'string-value',
  })

  .end(fn);

  // userId provided as a string, but swagger specifies it as an integer; throws:

  //    Invalid format for parameter {userId}

  ```


  ### Required Parameters

  ```js

  hippie(app, swagger)

  .get('/users/{username}')

  .end(fn);

  // "username" is marked 'required' in swagger file; throws:

  //    Missing required parameter in path: username

  ```


  ### Extraneous Parameters

  ```js

  hippie(app, swagger)

  .get('/users')

  .qs({ page: 2, limit: 30 })

  .end(fn);

  // "page" missing from swagger file; throws:

  //    Error: query parameter not mentioned in swagger spec: "page", available params: limit

  ```


  ### Response format

  ```js

  hippie(app, swagger)

  .get('/users')

  .end(fn);

  // body failed to validate against swagger file's "response" schema; throws:

  //    Response from /users failed validation: [failure description]

  ```


  ### Method validation

  ```js

  hippie(app, swagger)

  .post('/users')

  .end(fn);

  // "post" method not mentioned in swagger file; throws:

  //    Swagger spec does not define method: "post" in path /users

  ```


  ### Post body format

  ```js

  hippie(app, swagger)

  .post('/users')

  .send({"bogus":"post-body"})

  .end(fn);


  // post body fails to validate against swagger file's "body" parameter; throws:

  //    Invalid format for parameter {body}, received: {"bogus":"post-body"}

  ```


  ### Form Url-Encoded Parameters

  ```js

  hippie(app, swagger)

  .form()

  .post('/users')

  .send({})

  .end(fn);


  // "username" is {required: true, in: formData} in swagger; throws:

  //    Missing required parameter in formData: username

  ```


  ### Multipart Forms

  ```js

  hippie(app, swagger)

  .header('Content-Type','multipart/form-data')

  .send()

  .post('/users/upload')

  .end(fn);


  // "fileUpload" is {required: true, in: formData, type: file} in swagger; throws:

  //    Missing required parameter in formData: fileUpload

  ```


  ## Troubleshooting


  The most common mistake is forgetting to dereference the swagger file:


  ```js

  "'Error: cant resolve reference ...'

  ```


  Dereferencing can be accomplished using [swagger-parser](https://github.com/BigstickCarpet/swagger-parser/blob/master/docs/swagger-parser.md#dereferenceapi-options-callback).  The [example](example/index.js) gives a demonstration.


  ## Contributing


  To run the `hippie-swagger` tests:


  ```

  npm test

  ```


  ## License

  [ISC](./LICENSE)
guokr/swagger-py-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC3:4925F:44AC2F8:46231EE:678EE39F and timestamp 2025-01-21 00:00:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
domaindrivendev/rswag: >+
  rswag

  =========

  [![Build Status](https://travis-ci.org/rswag/rswag.svg?branch=master)](https://travis-ci.org/rswag/rswag)

  [![Maintainability](https://api.codeclimate.com/v1/badges/1175b984edc4610f82ab/maintainability)](https://codeclimate.com/github/rswag/rswag/maintainability)


  OpenApi 3.0 and Swagger 2.0 compatible!


  Rswag extends rspec-rails "request specs" with a Swagger-based DSL for describing and testing API operations. You describe your API operations with a succinct, intuitive syntax, and it automaticaly runs the tests. Once you have green tests, run a rake task to auto-generate corresponding Swagger files and expose them as YAML or JSON endpoints. Rswag also provides an embedded version of the awesome [swagger-ui](https://github.com/swagger-api/swagger-ui) that's powered by the exposed file. This toolchain makes it seamless to go from integration specs, which youre probably doing in some form already, to living documentation for your API consumers.


  Api Rswag creates [Swagger](http://swagger.io) tooling for Rails API's. Generate beautiful API documentation, including a UI to explore and test operations, directly from your rspec integration tests.



  And that's not all ...


  Once you have an API that can describe itself in Swagger, you've opened the treasure chest of Swagger-based tools including a client generator that can be targeted to a wide range of popular platforms. See [swagger-codegen](https://github.com/swagger-api/swagger-codegen) for more details.


  ## Compatibility ##


  |Rswag Version|Swagger (OpenAPI) Spec.|swagger-ui|

  |----------|----------|----------|

  |[master](https://github.com/rswag/rswag/tree/master)|3.0.3|3.23.11|

  |[2.3.0](https://github.com/rswag/rswag/tree/2.3.0)|3.0.3|3.23.11|

  |[2.2.0](https://github.com/rswag/rswag/tree/2.2.0)|2.0|3.18.2|

  |[1.6.0](https://github.com/rswag/rswag/tree/1.6.0)|2.0|2.2.5|



  <!-- START doctoc generated TOC please keep comment here to allow auto update -->

  **Table of Contents**


  - [rswag](#rswag)
    - [Compatibility](#compatibility)
    - [Getting Started](#getting-started)
    - [The rspec DSL](#the-rspec-dsl)
      - [Paths, Operations and Responses](#paths-operations-and-responses)
      - [Null Values](#null-values)
      - [Support for oneOf, anyOf or AllOf schemas](#support-for-oneof-anyof-or-allof-schemas)
      - [Global Metadata](#global-metadata)
        - [Supporting multiple versions of API](#supporting-multiple-versions-of-api)
        - [Formatting the description literals:](#formatting-the-description-literals)
      - [Specifying/Testing API Security](#specifyingtesting-api-security)
    - [Configuration & Customization](#configuration--customization)
      - [Output Location for Generated Swagger Files](#output-location-for-generated-swagger-files)
      - [Input Location for Rspec Tests](#input-location-for-rspec-tests)
      - [Referenced Parameters and Schema Definitions](#referenced-parameters-and-schema-definitions)
      - [Response headers](#response-headers)
      - [Response examples](#response-examples)
      - [Enable auto generation examples from responses](#enable-auto-generation-examples-from-responses)
        - [Running tests without documenting](#running-tests-without-documenting)
          - [rswag helper methods](#rswag-helper-methods)
          - [rswag response examples](#rswag-response-examples)
      - [Route Prefix for Swagger JSON Endpoints](#route-prefix-for-swagger-json-endpoints)
      - [Root Location for Swagger Files](#root-location-for-swagger-files)
      - [Dynamic Values for Swagger JSON](#dynamic-values-for-swagger-json)
      - [Custom Headers for Swagger Files](#custom-headers-for-swagger-files)
      - [Enable Swagger Endpoints for swagger-ui](#enable-swagger-endpoints-for-swagger-ui)
      - [Enable Simple Basic Auth for swagger-ui](#enable-simple-basic-auth-for-swagger-ui)
      - [Route Prefix for the swagger-ui](#route-prefix-for-the-swagger-ui)
      - [Customizing the swagger-ui](#customizing-the-swagger-ui)
      - [Serve UI Assets Directly from your Web Server](#serve-ui-assets-directly-from-your-web-server)

  <!-- END doctoc generated TOC please keep comment here to allow auto update -->




  ## Getting Started ##


  1. Add this line to your applications _Gemfile_:

      ```ruby
      gem 'rswag'
      ```

      or if you like to avoid loading rspec in other bundler groups load the rswag-specs component separately.
      Note: Adding it to the :development group is not strictly necessary, but without it, generators and rake tasks must be preceded by RAILS_ENV=test.

      ```ruby
      # Gemfile
      gem 'rswag-api'
      gem 'rswag-ui'

      group :development, :test do
        gem 'rspec-rails'
        gem 'rswag-specs'
      end
      ```

  2. Run the install generator

      ```ruby
      rails g rswag:install
      ```

      Or run the install generators for each package separately if you installed Rswag as separate gems, as indicated above:

      ```ruby
      rails g rswag:api:install
      rails g rswag:ui:install
      RAILS_ENV=test rails g rswag:specs:install
      ```

  3. Create an integration spec to describe and test your API.

  There is also a generator which can help get you started `rails generate rspec:swagger API::MyController`

      ```ruby
      # spec/integration/blogs_spec.rb
      require 'swagger_helper'

      describe 'Blogs API' do

        path '/blogs' do

          post 'Creates a blog' do
            tags 'Blogs'
            consumes 'application/json'
            parameter name: :blog, in: :body, schema: {
              type: :object,
              properties: {
                title: { type: :string },
                content: { type: :string }
              },
              required: [ 'title', 'content' ]
            }

            response '201', 'blog created' do
              let(:blog) { { title: 'foo', content: 'bar' } }
              run_test!
            end

            response '422', 'invalid request' do
              let(:blog) { { title: 'foo' } }
              run_test!
            end
          end
        end

        path '/blogs/{id}' do

          get 'Retrieves a blog' do
            tags 'Blogs'
            produces 'application/json', 'application/xml'
            parameter name: :id, in: :path, type: :string

            response '200', 'blog found' do
              schema type: :object,
                properties: {
                  id: { type: :integer },
                  title: { type: :string },
                  content: { type: :string }
                },
                required: [ 'id', 'title', 'content' ]

              let(:id) { Blog.create(title: 'foo', content: 'bar').id }
              run_test!
            end

            response '404', 'blog not found' do
              let(:id) { 'invalid' }
              run_test!
            end

            response '406', 'unsupported accept header' do
              let(:'Accept') { 'application/foo' }
              run_test!
            end
          end
        end
      end
      ```


  4. Generate the Swagger JSON file(s)

      ```ruby
      rake rswag:specs:swaggerize
      ```

      This common command is also aliased as `rake rswag`.

      Or if you installed your gems separately:
      ```
      RAILS_ENV=test rails rswag
      ```

  5. Spin up your app and check out the awesome, auto-generated docs at _/api-docs_!


  ## The rspec DSL ##


  ### Paths, Operations and Responses ###


  If you've used [Swagger](http://swagger.io/specification) before, then the syntax should be very familiar. To describe your API operations, start by specifying a path and then list the supported operations (i.e. HTTP verbs) for that path. Path parameters must be surrounded by curly braces ({}). Within an operation block (see "post" or "get" in the example above), most of the fields supported by the [Swagger "Operation" object](http://swagger.io/specification/#operationObject) are available as methods on the example group. To list (and test) the various responses for an operation, create one or more response blocks. Again, you can reference the [Swagger "Response" object](http://swagger.io/specification/#responseObject) for available fields.


  Take special note of the __run_test!__ method that's called within each response block. This tells rswag to create and execute a corresponding example. It builds and submits a request based on parameter descriptions and corresponding values that have been provided using the rspec "let" syntax. For example, the "post" description in the example above specifies a "body" parameter called "blog". It also lists 2 different responses. For the success case (i.e. the 201 response), notice how "let" is used to set the blog parameter to a value that matches the provided schema. For the failure case (i.e. the 422 response), notice how it's set to a value that does not match the provided schema. When the test is executed, rswag also validates the actual response code and, where applicable, the response body against the provided [JSON Schema](http://json-schema.org/documentation.html).


  If you want to do additional validation on the response, pass a block to the __run_test!__ method:


  ```ruby

  response '201', 'blog created' do
    run_test! do |response|
      data = JSON.parse(response.body)
      expect(data['title']).to eq('foo')
    end
  end

  ```


  If you'd like your specs to be a little more explicit about what's going on here, you can replace the call to __run_test!__ with equivalent "before" and "it" blocks:


  ```ruby

  response '201', 'blog created' do
    let(:blog) { { title: 'foo', content: 'bar' } }

    before do |example|
      submit_request(example.metadata)
    end

    it 'returns a valid 201 response' do |example|
      assert_response_matches_metadata(example.metadata)
    end
  end

  ```


  ### Null Values ###


  This library is currently using JSON::Draft4 for validation of response models. Nullable properties can be supported with the non-standard property 'x-nullable' to a definition to allow null/nil values to pass. Or you can add the new standard ```nullable``` property to a definition.

  ```ruby

  describe 'Blogs API' do
    path '/blogs' do
      post 'Creates a blog' do
        ...

        response '200', 'blog found' do
          schema type: :object,
            properties: {
              id: { type: :integer },
              title: { type: :string, nullable: true }, # preferred syntax
              content: { type: :string, 'x-nullable': true } # legacy syntax, but still works
            }
          ....
        end
      end
    end
  end

  ```


  ### Support for oneOf, anyOf or AllOf schemas ###


  Open API 3.0 now supports more flexible schema validation with the ```oneOf```, ```anyOf``` and ```allOf``` directives. rswag will handle these definitions and validate them properly.



  Notice the ```schema``` inside the ```response``` section. Placing a ```schema``` method inside the response will validate (and fail the tests)

  if during the integration test run the endpoint response does not match the response schema. This test validation can handle anyOf and allOf as well. See below:


  ```ruby

    path '/blogs/flexible' do
      post 'Creates a blog flexible body' do
        tags 'Blogs'
        description 'Creates a flexible blog from provided data'
        operationId 'createFlexibleBlog'
        consumes 'application/json'
        produces 'application/json'

        parameter name: :blog, in: :body, schema: {
            oneOf: [
              { '$ref' => '#/components/schemas/blog' },
              { '$ref' => '#/components/schemas/flexible_blog' }
            ]
          }

        response '201', 'flexible blog created' do
          schema oneOf: [{ '$ref' => '#/components/schemas/blog' }, { '$ref' => '#/components/schemas/flexible_blog' }]
          run_test!
        end
      end
    end

  ```

  This automatic schema validation is a powerful feature of rswag.


  ### Global Metadata ###


  In addition to paths, operations and responses, Swagger also supports global API metadata. When you install rswag, a file called _swagger_helper.rb_ is added to your spec folder. This is where you define one or more Swagger documents and provide global metadata. Again, the format is based on Swagger so most of the global fields supported by the top level ["Swagger" object](http://swagger.io/specification/#swaggerObject) can be provided with each document definition. As an example, you could define a Swagger document for each version of your API and in each case specify a title, version string. In Open API 3.0 the pathing and server definitions have changed a bit [Swagger host/basePath](https://swagger.io/docs/specification/api-host-and-base-path/):


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        openapi: '3.0.1',
        info: {
          title: 'API V1',
          version: 'v1',
          description: 'This is the first version of my API'
        },
        servers: [
          {
            url: 'https://{defaultHost}',
            variables: {
              defaultHost: {
                  default: 'www.example.com'
              }
            }
          }
        ]
      },

      'v2/swagger.yaml' => {
        openapi: '3.0.1',
        info: {
          title: 'API V2',
          version: 'v2',
          description: 'This is the second version of my API'
        },
        servers: [
          {
            url: 'https://{defaultHost}',
            variables: {
              defaultHost: {
                  default: 'www.example.com'
              }
            }
          }
        ]
      }
    }
  end

  ```


  #### Supporting multiple versions of API ####

  By default, the paths, operations and responses defined in your spec files will be associated with the first Swagger document in _swagger_helper.rb_. If your API has multiple versions, you should be using separate documents to describe each of them. In order to assign a file with a given version of API, you'll need to add the ```swagger_doc``` tag to each spec specifying its target document name:


  ```ruby

  # spec/integration/v2/blogs_spec.rb

  describe 'Blogs API', swagger_doc: 'v2/swagger.yaml' do

    path '/blogs' do
    ...

    path '/blogs/{id}' do
    ...
  end

  ```


  #### Formatting the description literals: ####

  Swagger supports the Markdown syntax to format strings. This can be especially handy if you were to provide a long description of a given API version or endpoint. Use [this guide](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) for reference.


  __NOTE:__ There is one difference between the official Markdown syntax and Swagger interpretation, namely tables. To create a table like this:


  | Column1 | Collumn2 |

  | ------- | -------- |

  | cell1   | cell2    |


  you should use the folowing syntax, making sure there are no whitespaces at the start of any of the lines:


  ```

  &#13;

  | Column1 | Collumn2 |&#13;

  | ------- | -------- |&#13;

  | cell1   | cell2    |&#13;

  &#13;

  ```


  ### Specifying/Testing API Security ###


  Swagger allows for the specification of different security schemes and their applicability to operations in an API. 

  To leverage this in rswag, you define the schemes globally in _swagger_helper.rb_ and then use the "security" attribute at the operation level to specify which schemes, if any, are applicable to that operation. 

  Swagger supports :basic, :bearer, :apiKey and :oauth2 and :openIdConnect scheme types. See [the spec](https://swagger.io/docs/specification/authentication/) for more info, as this underwent major changes between Swagger 2.0 and Open API 3.0


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/swagger'

    config.swagger_docs = {
      'v1/swagger.json' => {
        ...  # note the new Open API 3.0 compliant security structure here, under "components"
        components: {
          securitySchemes: {
            basic_auth: {
              type: :http,
              scheme: :basic
            },
            api_key: {
              type: :apiKey,
              name: 'api_key',
              in: :query
            }
          }
        }
      }
    }
  end


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do
        tags 'Blogs'
        security [ basic_auth: [] ]
        ...

        response '201', 'blog created' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          run_test!
        end

        response '401', 'authentication failed' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('bogus:bogus')}" }
          run_test!
        end
      end
    end
  end


  # example of documenting an endpoint that handles basic auth and api key based security

  describe 'Auth examples API' do 
    path '/auth-tests/basic-and-api-key' do
      post 'Authenticates with basic auth and api key' do
        tags 'Auth Tests'
        operationId 'testBasicAndApiKey'
        security [{ basic_auth: [], api_key: [] }]

        response '204', 'Valid credentials' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          let(:api_key) { 'foobar' }
          run_test!
        end

        response '401', 'Invalid credentials' do
          let(:Authorization) { "Basic #{::Base64.strict_encode64('jsmith:jspass')}" }
          let(:api_key) { 'barfoo' }
          run_test!
        end
      end
    end
  end
   

  ```


  __NOTE:__ Depending on the scheme types, you'll be required to assign a corresponding parameter value with each example. 

  For example, :basic auth is required above and so the :Authorization (header) parameter must be set accordingly


  ## Configuration & Customization ##


  The steps described above will get you up and running with minimal setup. However, rswag offers a lot of flexibility to customize as you see fit. Before exploring the various options, you'll need to be aware of it's different components. The following table lists each of them and the files that get added/updated as part of a standard install.


  |Gem|Description|Added/Updated|

  |---------|-----------|-------------|

  |__rswag-specs__|Swagger-based DSL for rspec & accompanying rake task for generating Swagger files|_spec/swagger_helper.rb_|

  |__rswag-api__  |Rails Engine that exposes your Swagger files as JSON endpoints|_config/initializers/rswag_api.rb, config/routes.rb_|

  |__rswag-ui__   |Rails Engine that includes [swagger-ui](https://github.com/swagger-api/swagger-ui) and powers it from your Swagger endpoints|_config/initializers/rswag-ui.rb, config/routes.rb_|


  ### Output Location for Generated Swagger Files ###


  You can adjust this in the _swagger_helper.rb_ that's installed with __rswag-specs__:


  ```ruby

  # spec/swagger_helper.rb

  RSpec.configure do |config|
    config.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you do change this, you'll also need to update the rswag_api.rb initializer (assuming you're using rswag-api). More on this later.


  ### Input Location for Rspec Tests ###


  By default, rswag will search for integration tests in _spec/requests_, _spec/api_ and _spec/integration_. If you want to use tests from other locations, provide the PATTERN argument to rake:


  ```ruby

  # search for tests in spec/swagger

  rake rswag:specs:swaggerize PATTERN="spec/swagger/**/*_spec.rb"

  ```


  ### Referenced Parameters and Schema Definitions ###


  Swagger allows you to describe JSON structures inline with your operation descriptions OR as referenced globals. 

  For example, you might have a standard response structure for all failed operations.

  Again, this is a structure that changed since swagger 2.0. Notice the new "schemas" section for these. 

  Rather than repeating the schema in every operation spec, you can define it globally and provide a reference to it in each spec:


  ```ruby

  # spec/swagger_helper.rb

  config.swagger_docs = {
    'v1/swagger.json' => {
      openapi: '3.0.0',
      info: {
        title: 'API V1'
      },
      components: {
        schemas: {
          errors_object: {
            type: 'object',
            properties: {
              errors: { '$ref' => '#/components/schemas/errors_map' }
            }
          },
          errors_map: {
            type: 'object',
            additionalProperties: {
              type: 'array',
              items: { type: 'string' }
            }
          },
          blog: {
            type: 'object',
            properties: {
              id: { type: 'integer' },
              title: { type: 'string' },
              content: { type: 'string', nullable: true },
              thumbnail: { type: 'string', nullable: true }
            },
            required: %w[id title]
          }
        }
      }
    }
  }


  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs' do

      post 'Creates a blog' do

        response 422, 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
    ...
  end


  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
    ...
  end

  ```


  ### Response headers ###


  In Rswag, you could use `header` method inside the response block to specify header objects for this response. 

  Rswag will validate your response headers with those header objects and inject them into the generated swagger file:


  ```ruby

  # spec/integration/comments_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}/comments' do

      post 'Creates a comment' do

        response 422, 'invalid request' do
          header 'X-Rate-Limit-Limit', type: :integer, description: 'The number of allowed requests in the current period'
          header 'X-Rate-Limit-Remaining', type: :integer, description: 'The number of remaining requests in the current period'
    ...
  end

  ```


  ### Response examples ###


  You can provide custom response examples to the generated swagger file by calling the method `examples` inside the response block:

  However, auto generated example responses are now enabled by default in rswag. See below.

  ```ruby

  # spec/integration/blogs_spec.rb

  describe 'Blogs API' do

    path '/blogs/{blog_id}' do

      get 'Retrieves a blog' do

        response 200, 'blog found' do
          examples 'application/json' => {
              id: 1,
              title: 'Hello world!',
              content: '...'
            }
    ...
  end

  ```



  ### Enable auto generation examples from responses ###



  To enable examples generation from responses add callback above run_test! like:


  ```

  after do |example|
    example.metadata[:response][:examples] = { 'application/json' => JSON.parse(response.body, symbolize_names: true) }
  end

  ```


  You need to disable --dry-run option for Rspec > 3


  <!-- This is now enabled by default in rswag. 

  You need to set the ``` config.swagger_dry_run = false``` value in the spec/spec_helper.rb file.

  This is one of the more powerful features of rswag. When rswag runs your integration test suite via ```bundle exec rspec```, it will capture the request and response bodies and output those values in the examples section.

  These integration tests are usually written with ```let``` variables for post body parameters, and since its an integration test the service is returning actual values. 

  We might as well re-use these values and embed them into the generated swagger to provide a more real world example for request/response examples. -->


  Add to config/environments/test.rb:

  ```ruby

  RSpec.configure do |config|
    config.swagger_dry_run = false
  end

  ```


  #### Running tests without documenting ####


  If you want to use Rswag for testing without adding it to you swagger docs, you can provide the document tag:

  ```ruby

  describe 'Blogs API' do
    path '/blogs/{blog_id}' do
      get 'Retrieves a blog' do
        # documentation is now disabled for this response only
        response 200, 'blog found', document: false do
          ...
  ```


  You can also reenable documentation for specific responses only:

  ```ruby

  # documentation is now disabled

  describe 'Blogs API', document: false do
    path '/blogs/{blog_id}' do
      get 'Retrieves a blog' do
        # documentation is reenabled for this response only
        response 200, 'blog found', document: true do
          ...
        end

        response 401, 'special case' do
          ...
        end
  ```


  ##### rswag helper methods #####

  <!-- 

  There are some helper methods to help with documenting request bodies. 

  ```ruby

  describe 'Blogs API', type: :request, swagger_doc: 'v1/swagger.json' do
    let(:api_key) { 'fake_key' }

    path '/blogs' do
      post 'Creates a blog' do
        tags 'Blogs'
        description 'Creates a new blog from provided data'
        operationId 'createBlog'
        consumes 'application/json'
        produces 'application/json'

        request_body_json schema: { '$ref' => '#/components/schemas/blog' },
                          examples: :blog

        request_body_text_plain
        request_body_xml schema: { '$ref' => '#/components/schemas/blog' }

        let(:blog) { { blog: { title: 'foo', content: 'bar' } } }

        response '201', 'blog created' do
          schema '$ref' => '#/components/schemas/blog'
          run_test!
        end

        response '422', 'invalid request' do
          schema '$ref' => '#/components/schemas/errors_object'
          let(:blog) { { blog: { title: 'foo' } } }

          run_test! do |response|
            expect(response.body).to include("can't be blank")
          end
        end
      end
    end
  end    

  ```


  In the above example, we see methods ```request_body_json``` ```request_body_plain``` ```request_body_xml```.

  These methods can be used to describe json, plain text and xml body. They are just wrapper methods to setup posting JSON, plain text or xml into your endpoint.

  The simplest most common usage is for json formatted body to use the schema: to specify the location of the schema for the request body

  and the examples: :blog which will create a named example "blog" under the "requestBody / content / application/json / examples" section.

  Again, documenting request response examples changed in Open API 3.0. The example above would generate a swagger.json snippet that looks like this:


  ```json
          ... 
          {"requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "examples": {
                  "blog": {  // takes the name from  examples: :blog above
                    "value": {  //this is open api 3.0 structure -> https://swagger.io/docs/specification/adding-examples/
                      "blog": { // here is the actual JSON payload that is submitted to the service, and shows up in swagger UI as an example
                        "title": "foo",
                        "content": "bar"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              },
              "test/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/blog"
                }
              }
            }
          },
          }
  ```


  *NOTE:* for this example request body to work in the tests properly, you need to ``let`` a variable named *blog*. 

  The variable with the matching name (blog in this case) is eval-ed and captured to be placed in the examples section.

  This ```let``` value is used in the integration test to run the test AND captured and injected into the requestBody section. 


  ##### rswag response examples #####


  In the same way that requestBody examples can be captured and injected into the swagger output, response examples can also be captured.

  Using the above example, when the integration test is run - the swagger would include the following snippet providing more useful real world examples

  capturing the response from the execution of the integration test. Again 3.0 swagger changed the structure of how these are documented.


  ```json
         ...  "responses": {
            "201": {
              "description": "blog created",
              "content": {
                "application/json": {
                  "example": {
                    "id": 1,
                    "title": "foo",
                    "content": "bar",
                    "thumbnail": null
                  },
                  "schema": {
                    "$ref": "#/components/schemas/blog"
                  }
                }
              }
            },
            "422": {
              "description": "invalid request",
              "content": {
                "application/json": {
                  "example": {
                    "errors": {
                      "content": [
                        "can't be blank"
                      ]
                    }
                  },
                  "schema": {
                    "$ref": "#/components/schemas/errors_object"
                  }
                }
              }
            }
          }
  ```
   -->
  ### Route Prefix for Swagger JSON Endpoints ###


  The functionality to expose Swagger files, such as those generated by rswag-specs, as JSON endpoints is implemented as a Rails Engine. As with any Engine, you can change it's mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'your-custom-prefix'
  end

  ```


  Assuming a Swagger file exists at &lt;swagger_root&gt;/v1/swagger.json, this configuration would expose the file as the following JSON endpoint:


  ```

  GET http://<hostname>/your-custom-prefix/v1/swagger.json

  ```


  ### Root Location for Swagger Files ###


  You can adjust this in the _rswag_api.rb_ initializer that's installed with __rspec-api__:


  ```ruby

  Rswag::Api.configure do |c|
    c.swagger_root = Rails.root.to_s + '/your-custom-folder-name'
    ...
  end

  ```


  __NOTE__: If you're using rswag-specs to generate Swagger files, you'll want to ensure they both use the same &lt;swagger_root&gt;. The reason for separate settings is to maintain independence between the two gems. For example, you could install rswag-api independently and create your Swagger files manually.


  ### Dynamic Values for Swagger JSON ##


  There may be cases where you need to add dynamic values to the Swagger JSON that's returned by rswag-api. For example, you may want to provide an explicit host name. Rather than hardcoding it, you can configure a filter that's executed prior to serializing every Swagger document:


  ```ruby

  Rswag::Api.configure do |c|
    ...

    c.swagger_filter = lambda { |swagger, env| swagger['host'] = env['HTTP_HOST'] }
  end

  ```


  Note how the filter is passed the rack env for the current request. This provides a lot of flexibilty. For example, you can assign the "host" property (as shown) or you could inspect session information or an Authorization header and remove operations based on user permissions.


  ### Custom Headers for Swagger Files ###


  You can specify custom headers for serving your generated Swagger JSON. For example you may want to force a specific charset for the 'Content-Type' header. You can configure a hash of headers to be sent with the request:


  ```ruby

  Rswag::Api.configure do |c|
    ...
    
    c.swagger_headers = { 'Content-Type' => 'application/json; charset=UTF-8' }
  end

  ```


  Take care when overriding Content-Type if you serve both YAML and JSON files as it will no longer switch the Content-Type header correctly.



  ### Enable Swagger Endpoints for swagger-ui ###


  You can update the _rswag-ui.rb_ initializer, installed with rswag-ui, to specify which Swagger endpoints should be available to power the documentation UI. If you're using rswag-api, these should correspond to the Swagger endpoints it exposes. When the UI is rendered, you'll see these listed in a drop-down to the top right of the page:


  ```ruby

  Rswag::Ui.configure do |c|
    c.swagger_endpoint '/api-docs/v1/swagger.json', 'API V1 Docs'
    c.swagger_endpoint '/api-docs/v2/swagger.json', 'API V2 Docs'
  end

  ```


  ### Enable Simple Basic Auth for swagger-ui


  You can also update the _rswag-ui.rb_ initializer, installed with rswag-ui to specify a username and password should you want to keep your documentation private.


  ```ruby

  Rswag::Ui.configure do |c|
    c.basic_auth_enabled = true
    c.basic_auth_credentials 'username', 'password'
  end

  ```


  ### Route Prefix for the swagger-ui ###


  Similar to rswag-api, you can customize the swagger-ui path by changing it's mount prefix in _routes.rb_:


  ```ruby

  TestApp::Application.routes.draw do
    ...

    mount Rswag::Api::Engine => 'api-docs'
    mount Rswag::Ui::Engine => 'your-custom-prefix'
  end

  ```


  ### Customizing the swagger-ui ###


  The swagger-ui provides several options for customizing it's behavior, all of which are documented here https://github.com/swagger-api/swagger-ui/tree/2.x#swaggerui. If you need to tweak these or customize the overall look and feel of your swagger-ui, then you'll need to provide your own version of index.html. You can do this with the following generator.


  ```ruby

  rails g rswag:ui:custom


  ```


  This will add a local version that you can modify at _app/views/rswag/ui/home/index.html.erb_


  ### Serve UI Assets Directly from your Web Server


  Rswag ships with an embedded version of the [swagger-ui](https://github.com/swagger-api/swagger-ui), which is a static collection of JavaScript and CSS files. These assets are served by the rswag-ui middleware. However, for optimal performance you may want to serve them directly from your web server (e.g. Apache or NGINX). To do this, you'll need to copy them to the web server root. This is the "public" folder in a typical Rails application.


  ```

  bundle exec rake rswag:ui:copy_assets[public/api-docs]

  ```


  __NOTE:__: The provided subfolder MUST correspond to the UI mount prefix - "api-docs" by default.



  Notes to test swagger output locally with swagger editor

  ```

  docker pull swaggerapi/swagger-editor

  ```

  ```

  docker run -d -p 80:8080 swaggerapi/swagger-editor

  ```

  This will run the swagger editor in the docker daemon and can be accessed 

  at ```http://localhost```. From here, you can use the UI to load the generated swagger.json to validate the output.

drewish/rspec-rails-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24FBBA1:25B4D12:678EE391 and timestamp 2025-01-21 00:00:17
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
zalando/connexion: >
  Connexion

  =========


  .. image:: https://badges.gitter.im/zalando/connexion.svg
     :alt: Join the chat at https://gitter.im/zalando/connexion
     :target: https://gitter.im/zalando/connexion?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge

  .. image:: https://github.com/zalando/connexion/actions/workflows/pipeline.yml/badge.svg
     :alt: Build status
     :target: https://github.com/zalando/connexion/actions/workflows/pipeline.yml

  .. image:: https://coveralls.io/repos/github/zalando/connexion/badge.svg?branch=main
     :target: https://coveralls.io/github/zalando/connexion?branch=main
     :alt: Coveralls status

  .. image:: https://img.shields.io/pypi/v/connexion.svg
     :target: https://pypi.python.org/pypi/connexion
     :alt: Latest Version

  .. image:: https://img.shields.io/pypi/status/connexion.svg
     :target: https://pypi.python.org/pypi/connexion
     :alt: Development Status

  .. image:: https://img.shields.io/pypi/pyversions/connexion.svg
     :target: https://pypi.python.org/pypi/connexion
     :alt: Python Versions

  .. image:: https://img.shields.io/pypi/l/connexion.svg
     :target: https://github.com/zalando/connexion/blob/main/LICENSE.txt
     :alt: License

  Connexion is a framework that automagically handles HTTP requests based on `OpenAPI Specification`_

  (formerly known as Swagger Spec) of your API described in `YAML format`_. Connexion allows you to

  write an OpenAPI specification, then maps the endpoints to your Python functions; this makes it

  unique, as many tools generate the specification based on your Python code. You can describe your

  REST API in as much detail as you want; then Connexion guarantees that it will work as you

  specified.


  We built Connexion this way in order to:


  - simplify the development process

  - confirm expectations about what your API will look like


  Connexion Features:

  -------------------


  - Validates requests and endpoint parameters automatically, based on
    your specification
  - Provides a Web Swagger Console UI so that the users of your API can
    have live documentation and even call your API's endpoints
    through it
  - Handles OAuth 2 token-based authentication

  - Supports API versioning

  - Supports automatic serialization of payloads. If your
    specification defines that an endpoint returns JSON, Connexion will
    automatically serialize the return value for you and set the right
    content type in the HTTP header.

  Why Connexion

  -------------


  With Connexion, you write the spec first. Connexion then calls your Python

  code, handling the mapping from the specification to the code. This

  incentivizes you to write the specification so that all of your

  developers can understand what your API does, even before you write a

  single line of code.


  If multiple teams depend on your APIs, you can use Connexion to easily send them the documentation of your API. This guarantees that your API will follow the specification that you wrote. This is a different process from that offered by frameworks such as Hug_, which generates a specification *after* you've written the code. Some disadvantages of generating specifications based on code is that they often end up lacking details or mix your documentation with the code logic of your application.


  Other Sources/Mentions

  ----------------------


  - Zalando RESTful API guidelines with `API First`_

  - Connexion listed on Swagger_'s website

  - Blog post: `Crafting effective Microservices in Python`_


  New in Connexion 2.0:

  ---------------------

  - App and Api options must be provided through the "options" argument (``old_style_options`` have been removed).

  - You must specify a form content-type in 'consumes' in order to consume form data.

  - The `Operation` interface has been formalized in the `AbstractOperation` class.

  - The `Operation` class has been renamed to `Swagger2Operation`.

  - Array parameter deserialization now follows the Swagger 2.0 spec more closely.
    In situations when a query parameter is passed multiple times, and the collectionFormat is either csv or pipes, the right-most value will be used.
    For example, `?q=1,2,3&q=4,5,6` will result in `q = [4, 5, 6]`.
    The old behavior is available by setting the collectionFormat to `multi`, or by importing `decorators.uri_parsing.AlwaysMultiURIParser` and passing `parser_class=AlwaysMultiURIParser` to your Api.
  - The spec validator library has changed from `swagger-spec-validator` to `openapi-spec-validator`.

  - Errors that previously raised `SwaggerValidationError` now raise the `InvalidSpecification` exception.
    All spec validation errors should be wrapped with `InvalidSpecification`.
  - Support for nullable/x-nullable, readOnly and writeOnly/x-writeOnly has been added to the standard json schema validator.

  - Custom validators can now be specified on api level (instead of app level).

  - Added support for basic authentication and apikey authentication

  - If unsupported security requirements are defined or ``x-tokenInfoFunc``/``x-tokenInfoUrl`` is missing, connexion now denies requests instead of allowing access without security-check.

  - Accessing ``connexion.request.user`` / ``flask.request.user`` is no longer supported, use ``connexion.context['user']`` instead


  How to Use

  ==========


  Prerequisites

  -------------


  Python 3.6+


  Installing It

  -------------


  In your command line, type:


  .. code-block:: bash

      $ pip install connexion

  Running It

  ----------


  Place your API YAML inside a folder in the root

  path of your application (e.g ``swagger/``). Then run:


  .. code-block:: python

      import connexion

      app = connexion.App(__name__, specification_dir='swagger/')
      app.add_api('my_api.yaml')
      app.run(port=8080)

  See the `Connexion Pet Store Example Application`_ for a sample

  specification.


  Now you're able to run and use Connexion!



  OAuth 2 Authentication and Authorization

  ----------------------------------------


  Connexion supports one of the three OAuth 2 handling methods. (See

  "TODO" below.) With Connexion, the API security definition **must**

  include a 'x-tokenInfoUrl' or 'x-tokenInfoFunc (or set ``TOKENINFO_URL``

  or ``TOKENINFO_FUNC`` env var respectively). 'x-tokenInfoUrl' must contain an

  URL to validate and get the `token information`_ and 'x-tokenInfoFunc must

  contain a reference to a function used to obtain the token info. When both 'x-tokenInfoUrl'

  and 'x-tokenInfoFunc' are used, Connexion will prioritize the function method. Connexion expects to

  receive the OAuth token in the ``Authorization`` header field in the

  format described in `RFC 6750 <rfc6750_>`_ section 2.1. This aspect

  represents a significant difference from the usual OAuth flow.


  Dynamic Rendering of Your Specification

  ---------------------------------------


  Connexion uses Jinja2_ to allow specification parameterization through the ``arguments`` parameter. You can define specification arguments for the application either globally (via the ``connexion.App`` constructor) or for each specific API (via the ``connexion.App#add_api`` method):


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='swagger/',
                          arguments={'global': 'global_value'})
      app.add_api('my_api.yaml', arguments={'api_local': 'local_value'})
      app.run(port=8080)

  When a value is provided both globally and on the API, the API value will take precedence.


  Endpoint Routing to Your Python Views

  -------------------------------------


  Connexion uses the ``operationId`` from each `Operation Object`_ to

  identify which Python function should handle each URL.


  **Explicit Routing**:


  .. code-block:: yaml

      paths:
        /hello_world:
          post:
            operationId: myapp.api.hello_world

  If you provide this path in your specification POST requests to

  ``http://MYHOST/hello_world``, it will be handled by the function

  ``hello_world`` in the ``myapp.api`` module. Optionally, you can include

  ``x-swagger-router-controller`` (or ``x-openapi-router-controller``) in your

  operation definition, making ``operationId`` relative:


  .. code-block:: yaml

      paths:
        /hello_world:
          post:
            x-swagger-router-controller: myapp.api
            operationId: hello_world

  Keep in mind that Connexion follows how `HTTP methods work in Flask`_ and therefore HEAD requests will be handled by the ``operationId`` specified under GET in the specification. If both methods are supported, ``connexion.request.method`` can be used to determine which request was made.


  Automatic Routing

  -----------------


  To customize this behavior, Connexion can use alternative

  ``Resolvers``--for example, ``RestyResolver``. The ``RestyResolver``

  will compose an ``operationId`` based on the path and HTTP method of

  the endpoints in your specification:


  .. code-block:: python

      from connexion.resolver import RestyResolver

      app = connexion.App(__name__)
      app.add_api('swagger.yaml', resolver=RestyResolver('api'))

  .. code-block:: yaml

     paths:
       /:
         get:
            # Implied operationId: api.get
       /foo:
         get:
            # Implied operationId: api.foo.search
         post:
            # Implied operationId: api.foo.post

       '/foo/{id}':
         get:
            # Implied operationId: api.foo.get
         put:
            # Implied operationId: api.foo.put
         copy:
            # Implied operationId: api.foo.copy
         delete:
            # Implied operationId: api.foo.delete

  ``RestyResolver`` will give precedence to any ``operationId`` encountered in the specification. It will also respect

  ``x-router-controller``. You can import and extend ``connexion.resolver.Resolver`` to implement your own ``operationId``

  (and function) resolution algorithm.


  Automatic Parameter Handling

  ----------------------------


  Connexion automatically maps the parameters defined in your endpoint specification to arguments of your Python views as named parameters, and, whenever possible, with value casting. Simply define the endpoint's parameters with the same names as your views arguments.


  As an example, say you have an endpoint specified as:


  .. code-block:: yaml

      paths:
        /foo:
          get:
            operationId: api.foo_get
            parameters:
              - name: message
                description: Some message.
                in: query
                type: string
                required: true

  And the view function:


  .. code-block:: python

      # api.py file

      def foo_get(message):
          # do something
          return 'You send the message: {}'.format(message), 200

  In this example, Connexion automatically recognizes that your view

  function expects an argument named ``message`` and assigns the value

  of the endpoint parameter ``message`` to your view function.


  .. note:: In the OpenAPI 3.x.x spec, the requestBody does not have a name.
            By default it will be passed in as 'body'. You can optionally
            provide the x-body-name parameter in your requestBody
            (or legacy position within the requestBody schema)
            to override the name of the parameter that will be passed to your
            handler function.

  .. code-block:: yaml


      /path
        post:
          requestBody:
            x-body-name: body
            content:
              application/json:
                schema:
                  # legacy location here should be ignored because the preferred location for x-body-name is at the requestBody level above
                  x-body-name: this_should_be_ignored
                  $ref: '#/components/schemas/someComponent'

  .. warning:: When you define a parameter at your endpoint as *not* required, and
      this argument does not have default value in your Python view, you will get
      a "missing positional argument" exception whenever you call this endpoint
      WITHOUT the parameter. Provide a default value for a named argument or use
      ``**kwargs`` dict.

  Type casting

  ^^^^^^^^^^^^


  Whenever possible, Connexion will try to parse your argument values and

  do type casting to related Python native values. The current

  available type castings are:


  +--------------+-------------+

  | OpenAPI Type | Python Type |

  +==============+=============+

  | integer      | int         |

  +--------------+-------------+

  | string       | str         |

  +--------------+-------------+

  | number       | float       |

  +--------------+-------------+

  | boolean      | bool        |

  +--------------+-------------+

  | array        | list        |

  +--------------+-------------+

  | null         | None        |

  +--------------+-------------+

  | object       | dict        |

  +--------------+-------------+


  If you use the ``array`` type In the Swagger definition, you can define the

  ``collectionFormat`` so that it won't be recognized. Connexion currently

  supports collection formats "pipes" and "csv". The default format is "csv".


  Connexion is opinionated about how the URI is parsed for ``array`` types.

  The default behavior for query parameters that have been defined multiple

  times is to use the right-most value. For example, if you provide a URI with

  the the query string ``?letters=a,b,c&letters=d,e,f``, connexion will set

  ``letters = ['d', 'e', 'f']``.


  You can override this behavior by specifying the URI parser in the app or

  api options.


  .. code-block:: python

     from connexion.decorators.uri_parsing import AlwaysMultiURIParser
     options = {'uri_parser_class': AlwaysMultiURIParser}
     app = connexion.App(__name__, specification_dir='swagger/', options=options)

  You can implement your own URI parsing behavior by inheriting from

  ``connexion.decorators.uri_parsing.AbstractURIParser``.


  There are a handful of URI parsers included with connection.


  +----------------------+---------------------------------------------------------------------------+

  | OpenAPIURIParser     | This parser adheres to the OpenAPI 3.x.x spec, and uses the ``style``     |

  | default: OpenAPI 3.0 | parameter. Query parameters are parsed from left to right, so if a query  |

  |                      | parameter is defined twice, then the right-most definition will take      |

  |                      | precedence. For example, if you provided a URI with the query string      |

  |                      | ``?letters=a,b,c&letters=d,e,f``, and ``style: simple``, then connexion   |

  |                      | will set ``letters = ['d', 'e', 'f']``. For additional information see    |

  |                      | `OpenAPI 3.0 Style Values`_.                                              |

  +----------------------+---------------------------------------------------------------------------+

  | Swagger2URIParser    | This parser adheres to the Swagger 2.0 spec, and will only join together  |

  | default: OpenAPI 2.0 | multiple instance of the same query parameter if the ``collectionFormat`` |

  |                      | is set to ``multi``. Query parameters are parsed from left to right, so   |

  |                      | if a query parameter is defined twice, then the right-most definition     |

  |                      | wins. For example, if you provided a URI with the query string            |

  |                      | ``?letters=a,b,c&letters=d,e,f``, and ``collectionFormat: csv``, then     |

  |                      | connexion will set ``letters = ['d', 'e', 'f']``                          |

  +----------------------+---------------------------------------------------------------------------+

  | FirstValueURIParser  | This parser behaves like the Swagger2URIParser, except that it prefers    |

  |                      | the first defined value. For example, if you provided a URI with the query|

  |                      | string ``?letters=a,b,c&letters=d,e,f`` and ``collectionFormat: csv``     |

  |                      | hen connexion will set ``letters = ['a', 'b', 'c']``                      |

  +----------------------+---------------------------------------------------------------------------+

  | AlwaysMultiURIParser | This parser is backwards compatible with Connexion 1.x. It joins together |

  |                      | multiple instances of the same query parameter.                           |

  +----------------------+---------------------------------------------------------------------------+



  Parameter validation

  ^^^^^^^^^^^^^^^^^^^^


  Connexion can apply strict parameter validation for query and form data

  parameters.  When this is enabled, requests that include parameters not defined

  in the swagger spec return a 400 error.  You can enable it when adding the API

  to your application:


  .. code-block:: python

      app.add_api('my_apy.yaml', strict_validation=True)

  API Versioning and basePath

  ---------------------------


  Setting a base path is useful for versioned APIs. An example of

  a base path would be the ``1.0`` in ``http://MYHOST/1.0/hello_world``.


  If you are using OpenAPI 3.x.x, you set your base URL path in the

  servers block of the specification. You can either specify a full

  URL, or just a relative path.


  .. code-block:: yaml

      servers:
        - url: https://MYHOST/1.0
          description: full url example
        - url: /1.0
          description: relative path example

      paths:
        ...

  If you are using OpenAPI 2.0, you can define a ``basePath`` on the top level

  of your OpenAPI 2.0 specification.


  .. code-block:: yaml

      basePath: /1.0

      paths:
        ...

  If you don't want to include the base path in your specification, you

  can provide it when adding the API to your application:


  .. code-block:: python

      app.add_api('my_api.yaml', base_path='/1.0')

  Swagger JSON

  ------------

  Connexion makes the OpenAPI/Swagger specification in JSON format

  available from either ``swagger.json`` (for OpenAPI 2.0) or

  ``openapi.json`` (for OpenAPI 3.x.x) at the base path of the API.

  For example, if your base path was ``1.0``, then your spec would be

  available at ``/1.0/openapi.json``.


  You can disable serving the spec JSON at the application level:


  .. code-block:: python

      options = {"serve_spec": False}
      app = connexion.App(__name__, specification_dir='openapi/',
                          options=options)
      app.add_api('my_api.yaml')

  You can also disable it at the API level:


  .. code-block:: python

      options = {"serve_spec": False}
      app = connexion.App(__name__, specification_dir='openapi/')
      app.add_api('my_api.yaml', options=options)

  HTTPS Support

  -------------


  When specifying HTTPS as the scheme in the API YAML file, all the URIs

  in the served Swagger UI are HTTPS endpoints. The problem: The default

  server that runs is a "normal" HTTP server. This means that the

  Swagger UI cannot be used to play with the API. What is the correct

  way to start a HTTPS server when using Connexion?


  One way, `described by Flask`_, looks like this:


  .. code-block:: python

     from OpenSSL import SSL
     context = SSL.Context(SSL.SSLv23_METHOD)
     context.use_privatekey_file('yourserver.key')
     context.use_certificate_file('yourserver.crt')

     app.run(host='127.0.0.1', port='12344',
             debug=False/True, ssl_context=context)

  However, Connexion doesn't provide an ssl_context parameter. This is

  because Flask doesn't, either--but it uses ``**kwargs`` to send the

  parameters to the underlying `werkzeug`_ server.


  The Swagger UI Console

  ----------------------


  The Swagger UI for an API is available through pip extras.

  You can install it with ``pip install connexion[swagger-ui]``.

  It will be served up at ``{base_path}/ui/`` where ``base_path`` is the

  base path of the API.


  You can disable the Swagger UI at the application level:


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='openapi/',
                          options={"swagger_ui": False})
      app.add_api('my_api.yaml')


  You can also disable it at the API level:


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='openapi/')
      app.add_api('my_api.yaml', options={"swagger_ui": False})

  If necessary, you can explicitly specify the path to the directory with

  swagger-ui to not use the connexion[swagger-ui] distro.

  In order to do this, you should specify the following option:


  .. code-block:: python

     options = {'swagger_path': '/path/to/swagger_ui/'}
     app = connexion.App(__name__, specification_dir='openapi/', options=options)

  If you wish to provide your own swagger-ui distro, note that connexion

  expects a jinja2 file called ``swagger_ui/index.j2`` in order to load the

  correct ``swagger.json`` by default. Your ``index.j2`` file can use the

  ``openapi_spec_url`` jinja variable for this purpose:


  .. code-block::

      const ui = SwaggerUIBundle({ url: "{{ openapi_spec_url }}"})

  Additionally, if you wish to use swagger-ui-3.x.x, it is also provided by

  installing connexion[swagger-ui], and can be enabled like this:


  .. code-block:: python

     from swagger_ui_bundle import swagger_ui_3_path
     options = {'swagger_path': swagger_ui_3_path}
     app = connexion.App(__name__, specification_dir='swagger/', options=options)


  Server Backend

  --------------


  By default Connexion uses the Flask_ server. For asynchronous

  applications, you can also use Tornado_ as the HTTP server. To do

  this, set your server to ``tornado``:


  .. code-block:: python

      import connexion

      app = connexion.App(__name__, specification_dir='swagger/')
      app.run(server='tornado', port=8080)

  You can use the Flask WSGI app with any WSGI container, e.g. `using

  Flask with uWSGI`_ (this is common):


  .. code-block:: python

      app = connexion.App(__name__, specification_dir='swagger/')
      application = app.app # expose global WSGI application object

  You can use the ``aiohttp`` framework as server backend as well:


  .. code-block:: python

      import connexion

      app = connexion.AioHttpApp(__name__, specification_dir='swagger/')
      app.run(port=8080)

  .. note:: Also check aiohttp handler examples_.


  Set up and run the installation code:


  .. code-block:: bash

      $ sudo pip3 install uwsgi
      $ uwsgi --http :8080 -w app -p 16  # use 16 worker processes

  See the `uWSGI documentation`_ for more information.


  .. _using Flask with uWSGI: http://flask.pocoo.org/docs/latest/deploying/uwsgi/

  .. _uWSGI documentation: https://uwsgi-docs.readthedocs.org/

  .. _examples: https://docs.aiohttp.org/en/stable/web.html#handler



  Documentation

  =============

  Additional information is available at `Connexion's Documentation Page`_.


  Changes

  =======


  A full changelog is maintained on the `GitHub releases page`_.


  .. _GitHub releases page: https://github.com/zalando/connexion/releases


  Contributing to Connexion/TODOs

  ===============================


  We welcome your ideas, issues, and pull requests. Just follow the

  usual/standard GitHub practices.


  For easy development, install connexion using poetry with all extras, and

  install the pre-commit hooks to automatically run black formatting and static analysis checks.


  .. code-block:: bash

      poetry install --all-extras
      pre-commit install

  You can find out more about how Connexion works and where to apply your changes by having a look

  at our `ARCHITECTURE.rst <ARCHITECTURE.rst>`_.


  Unless you explicitly state otherwise in advance, any non trivial

  contribution intentionally submitted for inclusion in this project by you

  to the steward of this repository (Zalando SE, Berlin) shall be under the

  terms and conditions of Apache License 2.0 written below, without any

  additional copyright information, terms or conditions.


  TODOs

  -----



  If you'd like to become a more consistent contributor to Connexion, we'd love your help working on

  these we have a list of `issues where we are looking for contributions`_.


  Thanks

  ===================


  We'd like to thank all of Connexion's contributors for working on this

  project, and to Swagger/OpenAPI for their support.


  License

  ===================


  Copyright 2015 Zalando SE


  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.


  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.


  .. _Flask: http://flask.pocoo.org/

  .. _issues waffle board: https://waffle.io/zalando/connexion

  .. _API First: https://opensource.zalando.com/restful-api-guidelines/#api-first

  .. _Hug: https://github.com/timothycrosley/hug

  .. _Swagger: http://swagger.io/open-source-integrations/

  .. _Jinja2: http://jinja.pocoo.org/

  .. _rfc6750: https://tools.ietf.org/html/rfc6750

  .. _OpenAPI Specification: https://www.openapis.org/

  .. _OpenAPI 3.0 Style Values: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#style-values

  .. _Operation Object: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object

  .. _swager.spec.security_definition: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-definitions-object

  .. _swager.spec.security_requirement: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-requirement-object

  .. _YAML format: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#format

  .. _token information: https://tools.ietf.org/html/rfc6749

  .. _Tornado: http://www.tornadoweb.org/en/stable/

  .. _Connexion Pet Store Example Application: https://github.com/hjacobs/connexion-example

  .. _described by Flask: http://flask.pocoo.org/snippets/111/

  .. _werkzeug: http://werkzeug.pocoo.org/

  .. _Connexion's Documentation Page: http://connexion.readthedocs.org/en/latest/

  .. _Crafting effective Microservices in Python: https://jobs.zalando.com/tech/blog/crafting-effective-microservices-in-python/

  .. _issues where we are looking for contributions: https://github.com/zalando/connexion/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22

  .. _HTTP Methods work in Flask: http://flask.pocoo.org/docs/1.0/quickstart/#http-methods
rochacbruno/flasgger: >+
  # Flasgger

  ## Easy Swagger UI for your Flask API


  [![Build Status](https://travis-ci.com/flasgger/flasgger.svg?branch=master)](https://travis-ci.com/flasgger/flasgger)

  [![Code Health](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)

  [![Coverage Status](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)

  [![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)
   <a target="_blank" href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest"><img alt='Donate with Paypal' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>


  ![flasgger](docs/flasgger.png)


  Flasgger is a Flask extension to **extract [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)** from all Flask views registered in your API.


  Flasgger also comes with **[SwaggerUI](http://swagger.io/swagger-ui/) embedded** so you can access [http://localhost:5000/apidocs](localhost:5000/apidocs) and visualize and interact with your API resources.


  Flasgger also **provides validation** of the incoming data, using the same specification it can validates if the data received as as a POST, PUT, PATCH is valid against the schema defined using **YAML**, **Python dictionaries** or **Marshmallow Schemas**.


  Flasgger can work with simple function views or MethodViews using docstring as specification, or using `@swag_from` decorator to get specification from **YAML** or **dict** and also provides **SwaggerView** which can use **Marshmallow Schemas**  as specification.


  Flasgger is compatible with `Flask-RESTful` so you can use `Resources` and `swag` specifications together, take a look at [restful example.](examples/restful.py)


  Flasgger also supports `Marshmallow APISpec` as base template for specification, if you are using APISPec from Marshmallow take a look at [apispec example.](examples/apispec_example.py)


  # Top Contributors


  [![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)


  # Examples and demo app


  There are some [example applications](examples/) and you can also play with examples in [Flasgger demo app](http://flasgger.pythonanywhere.com/)


  > NOTE: all the examples apps are also test cases and run automatically in Travis CI to ensure quality and coverage.


  ## Docker


  The examples and demo app can also be built and run as a Docker image/container:


  ```

  docker build -t flasgger .

  docker run -it --rm -p 5000:5000 --name flasgger flasgger

  ```

  Then access the Flasgger demo app at http://localhost:5000 .


  # Installation


  > under your virtualenv do:


  Ensure you have latest setuptools

  ```

  pip install -U setuptools

  ```


  then


  ```

  pip install flasgger

  ```


  or (dev version)


  ```

  pip install https://github.com/rochacbruno/flasgger/tarball/master

  ```


  > NOTE: If you want to use **Marshmallow Schemas** you also need to run `pip install marshmallow apispec`


  # Getting started


  ## Using docstrings as specification


  Create a file called for example `colors.py`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      This is using docstrings for specifications.
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      definitions:
        Palette:
          type: object
          properties:
            palette_name:
              type: array
              items:
                $ref: '#/definitions/Color'
        Color:
          type: string
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            $ref: '#/definitions/Palette'
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  Now run:


  ```

  python colors.py

  ```


  And go to: [http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)


  You should get:


  ![colors](docs/colors.png)


  ## Using external YAML files


  Save a new file `colors.yml`


  ```yaml

  Example endpoint returning a list of colors by palette

  In this example the specification is taken from external YAML file

  ---

  parameters:
    - name: palette
      in: path
      type: string
      enum: ['all', 'rgb', 'cmyk']
      required: true
      default: all
  definitions:
    Palette:
      type: object
      properties:
        palette_name:
          type: array
          items:
            $ref: '#/definitions/Color'
    Color:
      type: string
  responses:
    200:
      description: A list of colors (may be filtered by palette)
      schema:
        $ref: '#/definitions/Palette'
      examples:
        rgb: ['red', 'green', 'blue']
  ```



  lets use the same example changing only the view function.


  ```python

  from flasgger import swag_from


  @app.route('/colors/<palette>/')

  @swag_from('colors.yml')

  def colors(palette):
      ...
  ```


  If you do not want to use the decorator you can use the docstring `file:` shortcut.


  ```python

  @app.route('/colors/<palette>/')

  def colors(palette):
      """
      file: colors.yml
      """
      ...
  ```



  ## Using dictionaries as raw specs


  Create a Python dictionary as:


  ```python

  specs_dict = {
    "parameters": [
      {
        "name": "palette",
        "in": "path",
        "type": "string",
        "enum": [
          "all",
          "rgb",
          "cmyk"
        ],
        "required": "true",
        "default": "all"
      }
    ],
    "definitions": {
      "Palette": {
        "type": "object",
        "properties": {
          "palette_name": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Color"
            }
          }
        }
      },
      "Color": {
        "type": "string"
      }
    },
    "responses": {
      "200": {
        "description": "A list of colors (may be filtered by palette)",
        "schema": {
          "$ref": "#/definitions/Palette"
        },
        "examples": {
          "rgb": [
            "red",
            "green",
            "blue"
          ]
        }
      }
    }
  }

  ```


  Now take the same function and use the dict in the place of YAML file.


  ```python

  @app.route('/colors/<palette>/')

  @swag_from(specs_dict)

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      In this example the specification is taken from specs_dict
      """
      ...
  ```


  ## Using Marshmallow Schemas


  > FIRST: `pip install marshmallow apispec`


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, SwaggerView, Schema, fields



  class Color(Schema):
      name = fields.Str()

  class Palette(Schema):
      pallete_name = fields.Str()
      colors = fields.Nested(Color, many=True)

  class PaletteView(SwaggerView):
      parameters = [
          {
              "name": "palette",
              "in": "path",
              "type": "string",
              "enum": ["all", "rgb", "cmyk"],
              "required": True,
              "default": "all"
          }
      ]
      responses = {
          200: {
              "description": "A list of colors (may be filtered by palette)",
              "schema": Palette
          }
      }

      def get(self, palette):
          """
          Colors API using schema
          This example is using marshmallow schemas
          """
          all_colors = {
              'cmyk': ['cian', 'magenta', 'yellow', 'black'],
              'rgb': ['red', 'green', 'blue']
          }
          if palette == 'all':
              result = all_colors
          else:
              result = {palette: all_colors.get(palette)}
          return jsonify(result)

  app = Flask(__name__)

  swagger = Swagger(app)


  app.add_url_rule(
      '/colors/<palette>',
      view_func=PaletteView.as_view('colors'),
      methods=['GET']
  )


  app.run(debug=True)


  ```


  > NOTE: take a look at `examples/validation.py` for a more complete example.



  > NOTE: when catching arguments in path rule always use explicit types, bad: ``/api/<username>`` good: ``/api/<string:username>``



  ## Using **Flask RESTful** Resources


  Flasgger is compatible with Flask-RESTful you only need to install `pip install flask-restful` and then:


  ```python


  from flask import Flask

  from flasgger import Swagger

  from flask_restful import Api, Resource


  app = Flask(__name__)

  api = Api(app)

  swagger = Swagger(app)


  class Username(Resource):
      def get(self, username):
         """
         This examples uses FlaskRESTful Resource
         It works also with swag_from, schemas and spec_dict
         ---
         parameters:
           - in: path
             name: username
             type: string
             required: true
         responses:
           200:
             description: A single user item
             schema:
               id: User
               properties:
                 username:
                   type: string
                   description: The name of the user
                   default: Steven Wilson
          """
          return {'username': username}, 200


  api.add_resource(Username, '/username/<username>')


  app.run(debug=True)


  ```


  ## Auto-parsing external YAML docs and `MethodView`s


  Flasgger can be configured to auto-parse external YAML API docs.  [Set a `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16) in your `app.config['SWAGGER']` and Swagger will load API docs by looking in `doc_dir` for YAML files stored by endpoint-name and method-name.  For example, `'doc_dir': './examples/docs/'` and a file `./examples/docs/items/get.yml` will provide a Swagger doc for `ItemsView` method `get`.


  Additionally, when using **Flask RESTful** per above, by passing `parse=True` when constructing `Swagger`, Flasgger will use  `flask_restful.reqparse.RequestParser`, locate all `MethodView`s and parsed and validated data will be stored in `flask.request.parsed_data`.


  ## Handling multiple http methods and routes for a single function


  You can separate specifications by endpoint or methods


  ```python

  from flasgger.utils import swag_from


  @app.route('/api/<string:username>', endpoint='with_user_name', methods=['PUT', 'GET'])

  @app.route('/api/', endpoint='without_user_name')

  @swag_from('path/to/external_file.yml', endpoint='with_user_name')

  @swag_from('path/to/external_file_no_user_get.yml', endpoint='without_user_name', methods=['GET'])

  @swag_from('path/to/external_file_no_user_put.yml', endpoint='without_user_name', methods=['PUT'])

  def fromfile_decorated(username=None):
      if not username:
          return "No user!"
      return jsonify({'username': username})
  ```


  And the same can be achieved with multiple methods in a `MethodView` or `SwaggerView` by

  registering the `url_rule` many times. Take a look at `examples/example_app`



  # Use the same data to validate your API POST body.


  Setting `swag_from`'s _validation_ parameter to `True` will validate incoming data automatically:


  ```python

  from flasgger import swag_from


  @swag_from('defs.yml', validation=True)

  def post():
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Using `swagger.validate` annotation is also possible:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('UserSchema')

  def post():
      '''
      file: defs.yml
      '''
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  Yet you can call `validate` manually:


  ```python

  from flasgger import swag_from, validate


  @swag_from('defs.yml')

  def post():
      validate(request.json, 'UserSchema', 'defs.yml')
      # if not validate returns ValidationError response with status 400
      # also returns the validation message.
  ```


  It is also possible to define `validation=True` in `SwaggerView` and also use

  `specs_dict` for validation.


  Take a look at `examples/validation.py` for more information.


  All validation options can be found at http://json-schema.org/latest/json-schema-validation.html


  ### Custom validation


  By default Flasgger will use [python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)

  to perform validation.


  Custom validation functions are supported as long as they meet the requirements:
   - take two, and only two, positional arguments:
      - the data to be validated as the first; and
      - the schema to validate against as the second argument
   - raise any kind of exception when validation fails.

  Any return value is discarded.



  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_function=my_validation_function)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from('spec.yml', validation=True, validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_function=my_function)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml', validation_function=my_function)
  ```


  ### Validation Error handling


  By default Flasgger will handle validation errors by aborting the

  request with a 400 BAD REQUEST response with the error message.


  A custom validation error handling function can be provided to

  supersede default behavior as long as it meets the requirements:
   - take three, and only three, positional arguments:
      - the error raised as the first;
      - the data which failed validation as the second; and
      - the schema used in to validate as the third argument


  Providing the function to the Swagger instance will make it the default:


  ```python

  from flasgger import Swagger


  swagger = Swagger(app, validation_error_handler=my_handler)

  ```


  Providing the function as parameter of `swag_from` or `swagger.validate`

  annotations or directly to the `validate` function will force it's use

  over the default validation function for Swagger:


  ```python

  from flasgger import swag_from


  @swag_from(
      'spec.yml', validation=True, validation_error_handler=my_handler)
  ...

  ```


  ```python

  from flasgger import Swagger


  swagger = Swagger(app)


  @swagger.validate('Pet', validation_error_handler=my_handler)

  ...

  ```


  ```python

  from flasgger import validate


  ...

      validate(
          request.json, 'Pet', 'defs.yml',
          validation_error_handler=my_handler)
  ```


  Examples of use of a custom validation error handler function can be

  found at [example validation_error_handler.py](examples/validation_error_handler.py)


  # Get defined schemas as python dictionaries


  You may wish to use schemas you defined in your Swagger specs as dictionaries

  without replicating the specification. For that you can use the `get_schema`

  method:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger, swag_from


  app = Flask(__name__)

  swagger = Swagger(app)


  @swagger.validate('Product')

  def post():
      """
      post endpoint
      ---
      tags:
        - products
      parameters:
        - name: body
          in: body
          required: true
          schema:
            id: Product
            required:
              - name
            properties:
              name:
                type: string
                description: The product's name.
                default: "Guarana"
      responses:
        200:
          description: The product inserted in the database
          schema:
            $ref: '#/definitions/Product'
      """
      rv = db.insert(request.json)
      return jsonify(rv)

  ...


  product_schema = swagger.get_schema('product')

  ```


  This method returns a dictionary which contains the Flasgger schema id,

  all defined parameters and a list of required parameters.


  # HTML sanitizer


  By default Flasgger will try to sanitize the content in YAML definitions

  replacing every ```\n``` with ```<br>``` but you can change this behaviour

  setting another kind of sanitizer.


  ```python

  from flasgger import Swagger, NO_SANITIZER


  app =Flask()

  swagger = Swagger(app, sanitizer=NO_SANITIZER)

  ```


  You can write your own sanitizer


  ```python

  swagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))

  ```


  There is also a Markdown parser available, if you want to be able to render

  Markdown in your specs description use **MK_SANITIZER**



  # Swagger UI and templates


  You can override the `templates/flasgger/index.html` in your application and

  this template will be the `index.html` for SwaggerUI. Use `flasgger/ui2/templates/index.html`

  as base for your customization.


  Flasgger supports Swagger UI versions 2 and 3, The version 3 is still experimental but you

  can try setting `app.config['SWAGGER']['uiversion']`.


  ```python

  app = Flask(__name__)

  app.config['SWAGGER'] = {
      'title': 'My API',
      'uiversion': 3
  }

  swagger = Swagger(app)


  ```


  # OpenAPI 3.0 Support


  There is experimental support for OpenAPI 3.0 that should work when using SwaggerUI 3. To use OpenAPI 3.0, set `app.config['SWAGGER']['openapi']` to a version that the current SwaggerUI 3 supports such as `'3.0.2'`.


  For an example of this that uses `callbacks` and `requestBody`, see the [callbacks example](examples/callbacks.py).


  ## Externally loading Swagger UI and jQuery JS/CSS


  Starting with Flasgger 0.9.2 you can specify external URL locations for loading the JavaScript and CSS for the Swagger and jQuery libraries loaded in the Flasgger default templates.  If the configuration properties below are omitted, Flasgger will serve static versions it includes - these versions may be older than the current Swagger UI v2 or v3 releases.


  The following example loads Swagger UI and jQuery versions from unpkg.com:


  ```

  swagger_config = Swagger.DEFAULT_CONFIG

  swagger_config['swagger_ui_bundle_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'

  swagger_config['swagger_ui_standalone_preset_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'

  swagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'

  swagger_config['swagger_ui_css'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'

  Swagger(app, config=swagger_config)

  ```


  # Initializing Flasgger with default data.


  You can start your Swagger spec with any default data providing a template:


  ```python

  template = {
    "swagger": "2.0",
    "info": {
      "title": "My API",
      "description": "API for my data",
      "contact": {
        "responsibleOrganization": "ME",
        "responsibleDeveloper": "Me",
        "email": "me@me.com",
        "url": "www.me.com",
      },
      "termsOfService": "http://me.com/terms",
      "version": "0.0.1"
    },
    "host": "mysite.com",  # overrides localhost:500
    "basePath": "/api",  # base bash for blueprint registration
    "schemes": [
      "http",
      "https"
    ],
    "operationId": "getmyData"
  }


  swagger = Swagger(app, template=template)


  ```


  And then the template is the default data unless some view changes it. You

  can also provide all your specs as template and have no views. Or views in

  external APP.


  ## Getting default data at runtime


  Sometimes you need to get some data at runtime depending on dynamic values ex: you want to check `request.is_secure` to decide if `schemes` will be `https` you can do that by using `LazyString`.


  ```py

  from flask import Flask

  from flasgger import, Swagger, LazyString, LazyJSONEncoder


  app = Flask(__init__)


  # Set the custom Encoder (Inherit it if you need to customize)

  app.json_encoder = LazyJSONEncoder



  template = dict(
      info={
          'title': LazyString(lambda: 'Lazy Title'),
          'version': LazyString(lambda: '99.9.9'),
          'description': LazyString(lambda: 'Hello Lazy World'),
          'termsOfService': LazyString(lambda: '/there_is_no_tos')
      },
      host=LazyString(lambda: request.host),
      schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],
      foo=LazyString(lambda: "Bar")
  )

  Swagger(app, template=template)


  ```


  The `LazyString` values will be evaluated only when `jsonify` encodes the value at runtime, so you have access to Flask `request, session, g, etc..` and also may want to access a database.


  ## Behind a reverse proxy


  Sometimes you're serving your swagger docs behind an reverse proxy (e.g. NGINX).  When following the [Flask guidance](http://flask.pocoo.org/snippets/35/),

  the swagger docs will load correctly, but the "Try it Out" button points to the wrong place.  This can be fixed with the following code:


  ```python

  from flask import Flask, request

  from flasgger import Swagger, LazyString, LazyJSONEncoder


  app = Flask(__name__)

  app.json_encoder = LazyJSONEncoder


  template = dict(swaggerUiPrefix=LazyString(lambda : request.environ.get('HTTP_X_SCRIPT_NAME', '')))

  swagger = Swagger(app, template=template)


  ``` 


  # Customize default configurations


  Custom configurations such as a different specs route or disabling Swagger UI can be provided to Flasgger:


  ```python

  swagger_config = {
      "headers": [
      ],
      "specs": [
          {
              "endpoint": 'apispec_1',
              "route": '/apispec_1.json',
              "rule_filter": lambda rule: True,  # all in
              "model_filter": lambda tag: True,  # all in
          }
      ],
      "static_url_path": "/flasgger_static",
      # "static_folder": "static",  # must be set by user
      "swagger_ui": True,
      "specs_route": "/apidocs/"
  }


  swagger = Swagger(app, config=swagger_config)


  ```


  ## Extracting Definitions


  Definitions can be extracted when `id` is found in spec, example:


  ```python

  from flask import Flask, jsonify

  from flasgger import Swagger


  app = Flask(__name__)

  swagger = Swagger(app)


  @app.route('/colors/<palette>/')

  def colors(palette):
      """Example endpoint returning a list of colors by palette
      ---
      parameters:
        - name: palette
          in: path
          type: string
          enum: ['all', 'rgb', 'cmyk']
          required: true
          default: all
      responses:
        200:
          description: A list of colors (may be filtered by palette)
          schema:
            id: Palette
            type: object
            properties:
              palette_name:
                type: array
                items:
                  schema:
                    id: Color
                    type: string
          examples:
            rgb: ['red', 'green', 'blue']
      """
      all_colors = {
          'cmyk': ['cian', 'magenta', 'yellow', 'black'],
          'rgb': ['red', 'green', 'blue']
      }
      if palette == 'all':
          result = all_colors
      else:
          result = {palette: all_colors.get(palette)}

      return jsonify(result)

  app.run(debug=True)

  ```


  In this example you do not have to pass `definitions` but need to add `id` to

  your schemas.

fotinakis/swagger-blocks: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:5118307:52D3739:678EE39A and timestamp 2025-01-21 00:00:26
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
westfieldlabs/apivore: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:537EC47:553B319:678EE3E8 and timestamp 2025-01-21 00:01:44
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
slanatech/swagger-stats: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:5124B14:52E030D:678EE3D0 and timestamp 2025-01-21 00:01:20
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
notonthehighstreet/svelte: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CE2:B00D1:522CC2D:53E9831:678EE3BD and timestamp 2025-01-21 00:01:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
domaindrivendev/Swashbuckle.AspNetCore: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CC6:201941:57BE69D:597A877:678EE38F and timestamp 2025-01-21 00:00:15
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
z0mt3c/hapi-swaggered: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD4:2B946D:5380232:553C98B:678EE3EF and timestamp 2025-01-21 00:01:51
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
jfinkhaeuser/prance: >+
  |Posix Build Status| |Windows Build Status| |Docs|
  |License|

  |PyPI| |Python Versions| |Package Format| |Package Status| |FOSSA Status| |Liberapay|


  |Logo|


  Prance provides parsers for `Swagger/OpenAPI

  2.0 and 3.0 <http://swagger.io/specification/>`__ API specifications in Python.

  It uses `openapi\_spec\_validator <https://github.com/p1c2u/openapi-spec-validator>`__,

  `swagger\_spec\_validator <https://github.com/Yelp/swagger_spec_validator>`__ or

  `flex <https://github.com/pipermerriam/flex>`__

  to validate specifications, but additionally resolves `JSON

  references <https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03>`__

  in accordance with the OpenAPI spec.


  Mostly the latter involves handling non-URI references; OpenAPI is fine

  with providing relative file paths, whereas JSON references require URIs

  at this point in time.


  Prance is `up for adoption <https://github.com/jfinkhaeuser/prance/issues/91>`__.


  Usage

  =====


  Installation

  ------------


  Prance is available from PyPI, and can be installed via pip:


  .. code:: bash

      $ pip install prance

  Note that this will install the code, but additional subpackages must be specified

  to unlock various pieces of functionality. At minimum, a parsing backend must be

  installed. For the CLI functionality, you need further dependencies.


  The recommended installation installs the CLI, uses ICU and installs one validation

  backend:


  .. code:: bash

      $ pip install prance[osv,icu,cli]

  Make sure you have `ICU Unicode Library <http://site.icu-project.org/home>`__ installed,

  as well as Python dev library before running the commands above. If not, use the

  following commands:


  **Ubuntu**


  .. code:: bash

      $ sudo apt-get install libicu-dev
      $ sudo apt-get install python3-dev


  Command Line Interface

  ----------------------


  After installing prance, a CLI is available for validating (and resolving

  external references in) specs:


  .. code:: bash

      # Validates with resolving
      $ prance validate path/to/swagger.yml

      # Validates without resolving
      $ prance validate --no-resolve path/to/swagger.yml

      # Fetch URL, validate and resolve.
      $ prance validate http://petstore.swagger.io/v2/swagger.json
      Processing "http://petstore.swagger.io/v2/swagger.json"...
       -> Resolving external references.
      Validates OK as Swagger/OpenAPI 2.0!

  Validation is not the only feature of prance. One of the side effects of

  resolving is that from a spec with references, one can create a fully resolved

  output spec. In the past, this was done via options to the ``validate`` command,

  but now there's a specific command just for this purpose:


  .. code:: bash

      # Compile spec
      $ prance compile path/to/input.yml path/to/output.yml


  Lastly, with the arrival of OpenAPI 3.0.0, it becomes useful for tooling to

  convert older specs to the new standard. Instead of re-inventing the wheel,

  prance just provides a CLI command for passing specs to the web API of

  `swagger2openapi <https://github.com/Mermade/swagger2openapi>`__ - a working

  internet connection is therefore required for this command:


  .. code:: bash

      # Convert spec
      $ prance convert path/to/swagger.yml path/to/openapi.yml


  Code

  ----


  Most likely you have spec file and want to parse it:


  .. code:: python

      from prance import ResolvingParser
      parser = ResolvingParser('path/to/my/swagger.yaml')
      parser.specification  # contains fully resolved specs as a dict

  Prance also includes a non-resolving parser that does not follow JSON

  references, in case you prefer that.


  .. code:: python

      from prance import BaseParser
      parser = BaseParser('path/to/my/swagger.yaml')
      parser.specification  # contains specs as a dict still containing JSON references

  On Windows, the code reacts correctly if you pass posix-like paths

  (``/c:/swagger``) or if the path is relative.  If you pass absolute

  windows path (like ``c:\swagger.yaml``), you can use

  ``prance.util.fs.abspath`` to convert them.


  URLs can also be parsed:


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json')

  Largely, that's it. There is a whole slew of utility code that you may

  or may not find useful, too. Look at the `full documentation

  <https://jfinkhaeuser.github.io/prance/#api-modules>`__ for details.



  Compatibility

  -------------


  *Python Versions*


  Version 0.16.2 is the last version supporting Python 2. It was released on

  Nov 12th, 2019. Python 2 reaches end of life at the end of 2019. If you wish

  for updates to the Python 2 supported packages, please contact the maintainer

  directly.


  Until fairly recently, we also tested with `PyPy <https://www.pypy.org/>`__.

  Unfortunately, Travis isn't very good at supporting this. So in the absence

  of spare time, they're disabled. `Issue 50 <https://github.com/jfinkhaeuser/prance/issues/50>`__

  tracks progress on that.


  Similarly, but less critically, Python 3.4 is no longer receiving a lot of

  love from CI vendors, so automated builds on that version are no longer

  supported.


  *Backends*


  Different validation backends support different features.


  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | Backend                | Python Version | OpenAPI Version | Strict Mode | Notes                                                 | Available From | Link                                                                              |

  +========================+================+=================+=============+=======================================================+================+===================================================================================+

  | swagger-spec-validator | 2 and 3        | 2.0 only        | yes         | Slow; does not accept integer keys (see strict mode). | prance 0.1     | `swagger\_spec\_validator <https://github.com/Yelp/swagger_spec_validator>`__     |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | flex                   | 2 and 3        | 2.0 only        | n/a         | Fastest; unfortunately deprecated.                    | prance 0.8     | `flex <https://github.com/pipermerriam/flex>`__                                   |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+

  | openapi-spec-validator | 2 and 3        | 2.0 and 3.0     | yes         | Slow; does not accept integer keys (see strict mode). | prance 0.11    | `openapi\_spec\_validator <https://github.com/p1c2u/openapi-spec-validator>`__    |

  +------------------------+----------------+-----------------+-------------+-------------------------------------------------------+----------------+-----------------------------------------------------------------------------------+


  You can select the backend in the constructor of the parser(s):


  .. code:: python

      parser = ResolvingParser('http://petstore.swagger.io/v2/swagger.json', backend = 'openapi-spec-validator')


  No backend is included in the dependencies; they are detected at run-time. If you install them,

  they can be used:


  .. code:: bash

      $ pip install openapi-spec-validator
      $ pip install prance
      $ prance validate --backend=openapi-spec-validator path/to/spec.yml

  *A note on flex usage:* While flex is the fastest validation backend, unfortunately it is no longer

  maintained and there are issues with its dependencies. For one thing, it depends on a version of `PyYAML`

  that contains security flaws. For another, it depends explicitly on older versions of `click`.


  If you use the flex subpackage, therefore, you do so at your own risk.


  *Compatibility*


  See `COMPATIBILITY.rst <https://github.com/jfinkhaeuser/prance/blob/master/COMPATIBILITY.rst>`__

  for a list of known issues.



  Partial Reference Resolution

  ----------------------------


  It's possible to instruct the parser to only resolve some kinds of references.

  This allows e.g. resolving references from external URLs, whilst keeping local

  references (i.e. to local files, or file internal) intact.


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP)


  Multiple types can be specified by OR-ing constants together:


  .. code:: python

      from prance import ResolvingParser
      from prance.util.resolver import RESOLVE_HTTP, RESOLVE_FILES

      parser = ResolvingParser('/path/to/spec', resolve_types = RESOLVE_HTTP | RESOLVE_FILES)


  Extensions

  ----------


  Prance includes the ability to reference outside swagger definitions

  in outside Python packages. Such a package must already be importable

  (i.e. installed), and be accessible via the

  `ResourceManager API <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#resourcemanager-api>`__

  (some more info `here <https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files>`__).


  For example, you might create a package ``common_swag`` with the file

  ``base.yaml`` containing the definition


  .. code:: yaml

      definitions:
        Severity:
          type: string
          enum:
          - INFO
          - WARN
          - ERROR
          - FATAL

  In the ``setup.py`` for ``common_swag`` you would add lines such as


  .. code:: python

      packages=find_packages('src'),
      package_dir={'': 'src'},
      package_data={
          '': '*.yaml'
      }

  Then, having installed ``common_swag`` into some application, you could

  now write


  .. code:: yaml

      definitions:
        Message:
          type: object
          properties:
            severity:
              $ref: 'python://common_swag/base.yaml#/definitions/Severity'
            code:
              type: string
            summary:
              type: string
            description:
              type: string
          required:
          - severity
          - summary

  Contributing

  ============


  See `CONTRIBUTING.md <https://github.com/jfinkhaeuser/prance/blob/master/CONTRIBUTING.md>`__ for details.


  Professional support is available through `finkhaeuser consulting <https://finkhaeuser.de>`__.


  License

  =======


  Licensed under MITNFA (MIT +no-false-attribs) License. See the

  `LICENSE.txt <https://github.com/jfinkhaeuser/prance/blob/master/LICENSE.txt>`__ file for details.


  "Prancing unicorn" logo image Copyright (c) Jens Finkhaeuser.

  Made by `Moreven B <http://morevenb.com/>`__. Use of the logo is permitted under

  the `Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International license <https://creativecommons.org/licenses/by-nc-sa/4.0/>`__.


  .. |Posix Build Status| image:: https://travis-ci.org/jfinkhaeuser/prance.svg?branch=master
     :target: https://travis-ci.org/jfinkhaeuser/prance
  .. |Windows Build Status| image:: https://ci.appveyor.com/api/projects/status/ic7lo8r95mkee7di/branch/master?svg=true
     :target: https://ci.appveyor.com/project/jfinkhaeuser/prance
  .. |Docs| image:: https://img.shields.io/badge/docs-passing-brightgreen.svg
     :target: https://jfinkhaeuser.github.io/prance/
  .. |License| image:: https://img.shields.io/pypi/l/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |PyPI| image:: https://img.shields.io/pypi/v/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Format| image:: https://img.shields.io/pypi/format/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Python Versions| image:: https://img.shields.io/pypi/pyversions/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |Package Status| image:: https://img.shields.io/pypi/status/prance.svg
     :target: https://pypi.python.org/pypi/prance/
  .. |FOSSA Status| image:: https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance.svg?type=shield
     :target: https://app.fossa.io/projects/git%2Bgithub.com%2Fjfinkhaeuser%2Fprance?ref=badge_shield
  .. |Liberapay| image:: http://img.shields.io/liberapay/receives/jfinkhaeuser.svg?logo=liberapay
     :target: https://liberapay.com/jfinkhaeuser/donate
  .. |Logo| image:: https://raw.githubusercontent.com/jfinkhaeuser/prance/master/docs/images/prance_logo_256.png

swimlane/qswag: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CDA:1EDF9F:250D088:25C671F:678EE3DC
  and timestamp 2025-01-21 00:01:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
frankiesardo/pedestal-swagger: >
  # route-swagger


  [![Build status](https://circleci.com/gh/frankiesardo/route-swagger.svg?style=shield)](https://circleci.com/gh/frankiesardo/route-swagger)


  Generate Swagger documentation from pedestal (or tripod) routes


  - [Demo](https://pedestal-swagger.herokuapp.com)


  ## For old pedestal-swagger users


  This project now focuses solely on route transformation and schema validation and thus is pedestal-agnostic.


  Route-swagger is a much lower level library. Everything the old pedestal-swagger did is still possible (look at the example repo) but requires a bit more boilerplate. The major breaking difference is that now route-swagger uses ring specific keys for describing the schema rather than swagger ones, e.g.


  ```clj

  {:parameters {:body-params ..
                :form-params ..
                :query-params ..
                :path-params ..
                :headers ..}
    :responses {500 {:body .. :headers ..}}}            
  ```


  Instead of `body`, `formData`, `query`, `schema`, etc. That should make it much more user friendly for clojure users.


  For a nicer integration with pedestal, extra features and easier migration path from the old pedestal-swagger check out [pedestal-api](https://github.com/oliyh/pedestal-api).


  ## Download


  [![Clojars Project](http://clojars.org/frankiesardo/route-swagger/latest-version.svg)](http://clojars.org/frankiesardo/route-swagger)


  ## Usage


  Have a look at the project under the example folder for a working pedestal app


  ## License


  Copyright © 2015 Frankie Sardo


  Distributed under the Eclipse Public License either version 1.0 or (at

  your option) any later version.
gengo/grpc-gateway: >
  # grpc-gateway


  [![release](https://img.shields.io/github/release/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](https://github.com/grpc-ecosystem/grpc-gateway/releases) [![CircleCI](https://img.shields.io/circleci/project/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://circleci.com/gh/grpc-ecosystem/grpc-gateway) [![fuzzit](https://app.fuzzit.dev/badge?org_id=grpc-gateway)](https://app.fuzzit.dev/orgs/grpc-gateway/dashboard) [![coverage](https://img.shields.io/codecov/c/github/grpc-ecosystem/grpc-gateway/master.svg?style=flat-square)](https://codecov.io/gh/grpc-ecosystem/grpc-gateway) [![license](https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway.svg?style=flat-square)](LICENSE.txt)


  The grpc-gateway is a plugin of the Google protocol buffers compiler

  [protoc](https://github.com/protocolbuffers/protobuf).

  It reads protobuf service definitions and generates a reverse-proxy server which

  'translates a RESTful HTTP API into gRPC. This server is generated according to the

  [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotations in your service definitions.


  This helps you provide your APIs in both gRPC and RESTful style at the same time.


  ![architecture introduction diagram](https://docs.google.com/drawings/d/12hp4CPqrNPFhattL_cIoJptFvlAqm5wLQ0ggqI5mkCg/pub?w=749&amp;h=370)


  ## Check out our [documentation](https://grpc-ecosystem.github.io/grpc-gateway/)!


  ## Background

  gRPC is great -- it generates API clients and server stubs in many programming

  languages, it is fast, easy-to-use, bandwidth-efficient and its design is

  combat-proven by Google. However, you might still want to provide a traditional

  RESTful JSON API as well. Reasons can range from maintaining

  backwards-compatibility, supporting languages or clients not well supported by

  gRPC, to simply maintaining the aesthetics and tooling involved with a RESTful

  JSON architecture.


  This project aims to provide that HTTP+JSON interface to your gRPC service.

  A small amount of configuration in your service to attach HTTP semantics is all

  that's needed to generate a reverse-proxy with this library.


  ## Installation


  The grpc-gateway requires a local installation of the Google protocol buffers

  compiler `protoc` v3.0.0 or above. Please install this via your local package

  manager or by downloading one of the releases from the official repository:


  https://github.com/protocolbuffers/protobuf/releases


  The following instructions assume you are using

  [Go Modules](https://github.com/golang/go/wiki/Modules) for dependency

  management. Use a

  [tool dependency](https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module)

  to track the versions of the following executable packages:


  ```go

  // +build tools


  package tools


  import (
      _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway"
      _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger"
      _ "github.com/golang/protobuf/protoc-gen-go"
  )

  ```


  Run `go mod tidy` to resolve the versions. Install by running


  ```sh

  $ go install \
      github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway \
      github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger \
      github.com/golang/protobuf/protoc-gen-go
  ```


  This will place three binaries in your `$GOBIN`;


  * `protoc-gen-grpc-gateway`

  * `protoc-gen-swagger`

  * `protoc-gen-go`


  Make sure that your `$GOBIN` is in your `$PATH`.


  ## Usage


  1. Define your [gRPC](https://grpc.io/docs/) service using protocol buffers 

     `your_service.proto`:
     ```protobuf
     syntax = "proto3";
     package example;
     message StringMessage {
       string value = 1;
     }

     service YourService {
       rpc Echo(StringMessage) returns (StringMessage) {}
     }
     ```

  2. Add a [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)

  annotation to your .proto file

     `your_service.proto`:
     ```diff
      syntax = "proto3";
      package example;
     +
     +import "google/api/annotations.proto";
     +
      message StringMessage {
        string value = 1;
      }

      service YourService {
     -  rpc Echo(StringMessage) returns (StringMessage) {}
     +  rpc Echo(StringMessage) returns (StringMessage) {
     +    option (google.api.http) = {
     +      post: "/v1/example/echo"
     +      body: "*"
     +    };
     +  }
      }
     ```

     See [a_bit_of_everything.proto](examples/internal/proto/examplepb/a_bit_of_everything.proto)
     for examples of more annotations you can add to customize gateway behavior
     and generated Swagger output.

     If you do not want to modify the proto file for use with grpc-gateway you can
     alternatively use an external
     [gRPC Service Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config) file.
     [Check our documentation](https://grpc-ecosystem.github.io/grpc-gateway/docs/grpcapiconfiguration.html)
     for more information.

  3. Generate gRPC stub

     The following generates gRPC code for Golang based on `path/to/your_service.proto`:
     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --go_out=plugins=grpc:. \
       path/to/your_service.proto
     ```

     It will generate a stub file `path/to/your_service.pb.go`.

  4. Implement your service in gRPC as usual

     1. (Optional) Generate gRPC stub in the [other programming languages](https://grpc.io/docs/).

       For example, the following generates gRPC code for Ruby based on `path/to/your_service.proto`:
       ```sh
       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --ruby_out=. \
         path/to/your_service.proto

       protoc -I/usr/local/include -I. \
         -I$GOPATH/src \
         -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
         --plugin=protoc-gen-grpc=grpc_ruby_plugin \
         --grpc-ruby_out=. \
         path/to/your_service.proto
       ```
     2. Add the googleapis-common-protos gem (or your language equivalent) as a dependency to your project.
     3. Implement your gRPC service stubs

  5. Generate reverse-proxy using `protoc-gen-grpc-gateway`

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --grpc-gateway_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

     It will generate a reverse proxy `path/to/your_service.pb.gw.go`.

  6. Write an entrypoint for the HTTP reverse-proxy server

     ```go
     package main
   
     import (
       "context"  // Use "golang.org/x/net/context" for Golang version <= 1.6
       "flag"
       "net/http"
   
       "github.com/golang/glog"
       "github.com/grpc-ecosystem/grpc-gateway/runtime"
       "google.golang.org/grpc"
   
       gw "path/to/your_service_package"  // Update
     )
   
     var (
       // command-line options:
       // gRPC server endpoint
       grpcServerEndpoint = flag.String("grpc-server-endpoint",  "localhost:9090", "gRPC server endpoint")
     )
   
     func run() error {
       ctx := context.Background()
       ctx, cancel := context.WithCancel(ctx)
       defer cancel()
   
       // Register gRPC server endpoint
       // Note: Make sure the gRPC server is running properly and accessible
       mux := runtime.NewServeMux()
       opts := []grpc.DialOption{grpc.WithInsecure()}
       err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)
       if err != nil {
         return err
       }
   
       // Start HTTP server (and proxy calls to gRPC server endpoint)
       return http.ListenAndServe(":8081", mux)
     }
   
     func main() {
       flag.Parse()
       defer glog.Flush()
   
       if err := run(); err != nil {
         glog.Fatal(err)
       }
     }
     ```

  7. (Optional) Generate swagger definitions using `protoc-gen-swagger`

     ```sh
     protoc -I/usr/local/include -I. \
       -I$GOPATH/src \
       -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \
       --swagger_out=logtostderr=true:. \
       path/to/your_service.proto
     ```

  ## Video intro


  This GopherCon UK 2019 presentation from our maintainer

  [@JohanBrandhorst](https://github.com/johanbrandhorst) provides a good intro to

  using the grpc-gateway. It uses the following boilerplate repo as a base:

  https://github.com/johanbrandhorst/grpc-gateway-boilerplate.


  [![gRPC-Gateway presentation](https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg)](https://www.youtube.com/watch?v=Pq1paKC-fXk)


  ## Parameters and flags


  During code generation with `protoc`, flags to grpc-gateway tools must be passed

  through protoc using the `--<tool_suffix>_out=<flags>:<path>` pattern, for

  example:


  ```sh

  --grpc-gateway_out=logtostderr=true,repeated_path_param_separator=ssv:.

  --swagger_out=logtostderr=true,repeated_path_param_separator=ssv:.

  ```


  `protoc-gen-grpc-gateway` supports custom mapping from Protobuf `import` to

  Golang import paths. They are compatible to

  [the parameters with same names in `protoc-gen-go`](https://github.com/golang/protobuf#parameters)

  (except `source_relative`).


  In addition we also support the `request_context` parameter in order to use the

  `http.Request`'s Context (only for Go 1.7 and above). This parameter can be

  useful to pass request scoped context between the gateway and the gRPC service.


  `protoc-gen-grpc-gateway` also supports some more command line flags to control

  logging. You can give these flags together with parameters above. Run

  `protoc-gen-grpc-gateway --help` for more details about the flags.


  Similarly, `protoc-gen-swagger` supports command-line flags to control Swagger

  output (for example, `json_names_for_fields` to output JSON names for fields

  instead of protobuf names). Run `protoc-gen-swagger --help` for more flag

  details. Further Swagger customization is possible by annotating your `.proto`

  files with options from

  [openapiv2.proto](protoc-gen-swagger/options/openapiv2.proto) - see

  [a_bit_of_everything.proto](examples/internal/proto/examplepb/a_bit_of_everything.proto)

  for examples.


  ## More Examples

  More examples are available under `examples` directory.

  * `proto/examplepb/echo_service.proto`, `proto/examplepb/a_bit_of_everything.proto`, `proto/examplepb/unannotated_echo_service.proto`: service definition
    * `proto/examplepb/echo_service.pb.go`, `proto/examplepb/a_bit_of_everything.pb.go`, `proto/examplepb/unannotated_echo_service.pb.go`: [generated] stub of the service
    * `proto/examplepb/echo_service.pb.gw.go`, `proto/examplepb/a_bit_of_everything.pb.gw.go`, `proto/examplepb/uannotated_echo_service.pb.gw.go`: [generated] reverse proxy for the service
    * `proto/examplepb/unannotated_echo_service.yaml`: gRPC API Configuration for ```unannotated_echo_service.proto```
  * `server/main.go`: service implementation

  * `main.go`: entrypoint of the generated reverse proxy


  To use the same port for custom HTTP handlers (e.g. serving `swagger.json`),

  gRPC-gateway, and a gRPC server, see

  [this example by CoreOS](https://github.com/philips/grpc-gateway-example/blob/master/cmd/serve.go)

  (and its accompanying [blog post](https://coreos.com/blog/grpc-protobufs-swagger.html)).


  ## Features


  ### Supported


  * Generating JSON API handlers.

  * Method parameters in request body.

  * Method parameters in request path.

  * Method parameters in query string.

  * Enum fields in path parameter (including repeated enum fields).

  * Mapping streaming APIs to newline-delimited JSON streams.

  * Mapping HTTP headers with `Grpc-Metadata-` prefix to gRPC metadata (prefixed with `grpcgateway-`)

  * Optionally emitting API definitions for

  [OpenAPI (Swagger) v2](https://swagger.io/docs/specification/2-0/basic-structure/).

  * Setting [gRPC timeouts](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests)

  through inbound HTTP `Grpc-Timeout` header.

  * Partial support for [gRPC API Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config)

  files as an alternative to annotation.

  * Automatically translating PATCH requests into Field Mask gRPC requests. See

  [the docs](https://grpc-ecosystem.github.io/grpc-gateway/docs/patch.html)

  for more information.


  ### No plan to support

  But patch is welcome.

  * Method parameters in HTTP headers.

  * Handling trailer metadata.

  * Encoding request/response body in XML.

  * True bi-directional streaming.


  # Mapping gRPC to HTTP


  * [How gRPC error codes map to HTTP status codes in the response](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/runtime/errors.go#L15).

  * HTTP request source IP is added as `X-Forwarded-For` gRPC request header.

  * HTTP request host is added as `X-Forwarded-Host` gRPC request header.

  * HTTP `Authorization` header is added as `authorization` gRPC request header.

  * Remaining Permanent HTTP header keys (as specified by the IANA

  [here](http://www.iana.org/assignments/message-headers/message-headers.xhtml)

  are prefixed with `grpcgateway-` and added with their values to gRPC request

  header.

  * HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata

  (prefixed with `grpcgateway-`).

  * While configurable, the default {un,}marshaling uses

  [jsonpb](https://godoc.org/github.com/golang/protobuf/jsonpb) with

  `OrigName: true`.


  # Contribution

  See [CONTRIBUTING.md](http://github.com/grpc-ecosystem/grpc-gateway/blob/master/CONTRIBUTING.md).


  # License

  grpc-gateway is licensed under the BSD 3-Clause License.

  See [LICENSE.txt](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt) for more details.
BigstickCarpet/swagger-express-middleware: >
  Swagger Express Middleware

  ============================

  ### Swagger 2.0 middleware and mocks for Express.js


  [![Cross-Platform Compatibility](https://apitools.dev/img/badges/os-badges.svg)](https://github.com/APIDevTools/swagger-express-middleware/blob/master/.github/workflows/CI-CD.yaml)

  [![Build Status](https://github.com/APIDevTools/swagger-express-middleware/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-express-middleware/blob/master/.github/workflows/CI-CD.yaml)


  [![Coverage Status](https://coveralls.io/repos/github/APIDevTools/swagger-express-middleware/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-express-middleware)

  [![Tested on APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-express-middleware.svg)](https://david-dm.org/APIDevTools/swagger-express-middleware)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-express-middleware.svg)](https://www.npmjs.com/package/@apidevtools/swagger-express-middleware)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-express-middleware.svg)](LICENSE)

  [![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)




  Features

  --------------------------

  - **Supports Swagger 2.0 specs in JSON or YAML** <br>

  Swagger Express Middleware uses [Swagger-Parser](https://github.com/APIDevTools/swagger-parser) to parse, validate, and dereference Swagger files.  You can even split your spec into multiple different files using `$ref` pointers.


  - **Thoroughly tested**<br>

  Over 1,000 unit tests and integration tests with 100% code coverage.  Tested on [**over 1,000 real-world APIs**](https://apis.guru/browse-apis/) from Google, Instagram, Spotify, etc.  All tests are run on Mac, Linux, and Windows using all LTS versions of Node.


  - [**Mock middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/mock.html)<br>

  **Fully-functional mock** implementations for every operation in your API, including data persistence, all with **zero code!**  This is a great way to test-drive your API as you write it, or for quick demos and POCs.  You can even extend the mock middleware with your own logic and data to fill in any gaps.


  - [**Metadata middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/metadata.html)<br>

  Annotates each request with all the relevant information from the Swagger definition.  The path, the operation, the parameters, the security requirements - they're all easily accessible at `req.swagger`.


  - [**Parse Request middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/parseRequest.html)<br>

  Parses incoming requests and converts everything into the correct data types, according to your Swagger API definition.


  - [**Validate Request middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/validateRequest.html)<br>

  Ensures that every request complies with your Swagger API definition, or returns the appropriate HTTP error codes if needed.  Of course, you can catch any validation errors and handle them however you want.


  - [**CORS middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/CORS.html)<br>

  Adds the appropriate CORS headers to each request and automatically responds to CORS preflight requests, all in compliance with your Swagger API definition.


  - [**Files middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/files.html)<br>

  Serves the Swagger API file(s) in JSON or YAML format so they can be used with front-end tools like [Swagger UI](http://www.swagger.io), [Swagger Editor](http://editor.swagger.io), and [Postman](http://getpostman.com).




  Installation and Use

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/).


  ```bash

  npm install @apidevtools/swagger-express-middleware

  ```

  Then use it in your [Node.js](http://nodejs.org/) script like this:


  ```javascript

  const express = require('express');

  const createMiddleware = require('@apidevtools/swagger-express-middleware');


  let app = express();


  createMiddleware('PetStore.yaml', app, function(err, middleware) {
      // Add all the Swagger Express Middleware, or just the ones you need.
      // NOTE: Some of these accept optional options (omitted here for brevity)
      app.use(
          middleware.metadata(),
          middleware.CORS(),
          middleware.files(),
          middleware.parseRequest(),
          middleware.validateRequest(),
          middleware.mock()
      );

      app.listen(8000, function() {
          console.log('The PetStore sample is now running at http://localhost:8000');
      });
  });

  ```




  Samples & Walkthroughs

  --------------------------

  Swagger Express Middleware comes two samples that use the [Swagger Pet Store API](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/PetStore.yaml).


  #### Sample 1

  This sample demonstrates the most simplistic usage of Swagger Express Middleware. It simply creates a new Express Application and adds all of the Swagger middleware without changing any options, and without adding any custom middleware.


  * [Source Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample1.js)

  * [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/running.html)



  #### Sample 2

  This sample demonstrates a few more advanced features of Swagger Express Middleware, such as setting a few options, initializing the mock data store, and adding custom middleware logic.


  * [Source Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample2.js)

  * [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/walkthrough2.html)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [File an issue](https://github.com/APIDevTools/swagger-express-middleware/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/swagger-express-middleware/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-express-middleware.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`


  4. **Run the sample app**<br>

  `npm start`




  License

  --------------------------

  Swagger Express Middleware is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/APIDevTools/swagger-express-middleware) to thank us for our work. By contributing to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers ❤


  [![Travis CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
RobWin/swagger2markup-gradle-plugin: >
  = Swagger2Markup Gradle Plugin

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin.svg?branch=master["Build Status", link="https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin"] image:https://coveralls.io/repos/Swagger2Markup/swagger2markup-gradle-plugin/badge.svg["Coverage Status", link="https://coveralls.io/r/Swagger2Markup/swagger2markup-gradle-plugin"] image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup-gradle-plugin/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup-gradle-plugin/_latestVersion"] image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2", link="http://www.apache.org/licenses/LICENSE-2.0.txt"] image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter", link="https://twitter.com/rbrtwnklr"] image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/Swagger2Markup/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]


  == Reference documentation


  The documentation can be found at https://github.com/Swagger2Markup/swagger2markup#reference-documentation[Reference documentation]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
raphael/goa: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CCD:2AAE2C:5122256:52DD992:678EE3C5
  and timestamp 2025-01-21 00:01:09
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
BigstickCarpet/swagger-parser#swagger-parser: '{"id":25453221,"node_id":"MDEwOlJlcG9zaXRvcnkyNTQ1MzIyMQ==","name":"swagger-parser","full_name":"APIDevTools/swagger-parser","private":false,"owner":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"html_url":"https://github.com/APIDevTools/swagger-parser","description":"Swagger
  2.0 and OpenAPI 3.0
  parser/validator","fork":false,"url":"https://api.github.com/repos/APIDevTools/swagger-parser","forks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/forks","keys_url":"https://api.github.com/repos/APIDevTools/swagger-parser/keys{/key_id}","collaborators_url":"https://api.github.com/repos/APIDevTools/swagger-parser/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/APIDevTools/swagger-parser/teams","hooks_url":"https://api.github.com/repos/APIDevTools/swagger-parser/hooks","issue_events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/events{/number}","events_url":"https://api.github.com/repos/APIDevTools/swagger-parser/events","assignees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/assignees{/user}","branches_url":"https://api.github.com/repos/APIDevTools/swagger-parser/branches{/branch}","tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/tags","blobs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/refs{/sha}","trees_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/trees{/sha}","statuses_url":"https://api.github.com/repos/APIDevTools/swagger-parser/statuses/{sha}","languages_url":"https://api.github.com/repos/APIDevTools/swagger-parser/languages","stargazers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/stargazers","contributors_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contributors","subscribers_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscribers","subscription_url":"https://api.github.com/repos/APIDevTools/swagger-parser/subscription","commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/commits{/sha}","git_commits_url":"https://api.github.com/repos/APIDevTools/swagger-parser/git/commits{/sha}","comments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/comments{/number}","issue_comment_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues/comments{/number}","contents_url":"https://api.github.com/repos/APIDevTools/swagger-parser/contents/{+path}","compare_url":"https://api.github.com/repos/APIDevTools/swagger-parser/compare/{base}...{head}","merges_url":"https://api.github.com/repos/APIDevTools/swagger-parser/merges","archive_url":"https://api.github.com/repos/APIDevTools/swagger-parser/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/APIDevTools/swagger-parser/downloads","issues_url":"https://api.github.com/repos/APIDevTools/swagger-parser/issues{/number}","pulls_url":"https://api.github.com/repos/APIDevTools/swagger-parser/pulls{/number}","milestones_url":"https://api.github.com/repos/APIDevTools/swagger-parser/milestones{/number}","notifications_url":"https://api.github.com/repos/APIDevTools/swagger-parser/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/APIDevTools/swagger-parser/labels{/name}","releases_url":"https://api.github.com/repos/APIDevTools/swagger-parser/releases{/id}","deployments_url":"https://api.github.com/repos/APIDevTools/swagger-parser/deployments","created_at":"2014-10-20T06:14:51Z","updated_at":"2020-04-06T17:57:45Z","pushed_at":"2020-04-01T13:01:11Z","git_url":"git://github.com/APIDevTools/swagger-parser.git","ssh_url":"git@github.com:APIDevTools/swagger-parser.git","clone_url":"https://github.com/APIDevTools/swagger-parser.git","svn_url":"https://github.com/APIDevTools/swagger-parser","homepage":"https://apitools.dev/swagger-parser","size":32415,"stargazers_count":584,"watchers_count":584,"language":"JavaScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"forks_count":93,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":41,"license":{"key":"mit","name":"MIT
  License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"forks":93,"open_issues":41,"watchers":584,"default_branch":"master","permissions":{"admin":false,"push":false,"pull":true},"temp_clone_token":"","organization":{"login":"APIDevTools","id":43750074,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQzNzUwMDc0","avatar_url":"https://avatars0.githubusercontent.com/u/43750074?v=4","gravatar_id":"","url":"https://api.github.com/users/APIDevTools","html_url":"https://github.com/APIDevTools","followers_url":"https://api.github.com/users/APIDevTools/followers","following_url":"https://api.github.com/users/APIDevTools/following{/other_user}","gists_url":"https://api.github.com/users/APIDevTools/gists{/gist_id}","starred_url":"https://api.github.com/users/APIDevTools/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/APIDevTools/subscriptions","organizations_url":"https://api.github.com/users/APIDevTools/orgs","repos_url":"https://api.github.com/users/APIDevTools/repos","events_url":"https://api.github.com/users/APIDevTools/events{/privacy}","received_events_url":"https://api.github.com/users/APIDevTools/received_events","type":"Organization","site_admin":false},"network_count":93,"subscribers_count":17}'
kogosoftwarellc/express-openapi: >
  # @open-api [![Build
  Status][travis-image]][travis-url] [![Coveralls
  Status][coveralls-image]][coveralls-url] [![Gitter
  chat][gitter-image]][gitter-url] [![Greenkeeper
  badge](https://badges.greenkeeper.io/kogosoftwarellc/open-api.svg)](https://greenkeeper.io/)

  > A Monorepo of various packages to power OpenAPI in node.


  ## Quick Start Express


  * See [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)&nbsp;&nbsp;&nbsp;[![express-openapi Downloads][express-openapi-downloads-image]][express-openapi-npm-url]


  ## Quick Start Koa

  * See [koa-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/koa-openapi)&nbsp;&nbsp;&nbsp;[![koa-openapi Downloads][koa-openapi-downloads-image]][koa-openapi-npm-url]


  ## Packages

  * [express-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/express-openapi)

  * [fetch-openapi](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fetch-openapi)

  * [fs-routes](https://github.com/kogosoftwarellc/open-api/tree/master/packages/fs-routes)

  * [openapi-default-setter](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-default-setter)

  * [openapi-framework](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-framework)

  * [openapi-jsonschema-parameters](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-jsonschema-parameters)

  * [openapi-request-coercer](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-coercer)

  * [openapi-request-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-request-validator)

  * [openapi-response-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-response-validator)

  * [openapi-schema-validator](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-schema-validator)

  * [openapi-types](https://github.com/kogosoftwarellc/open-api/tree/master/packages/openapi-types)


  ## Development


  _Note:  One of the goals of this monorepo is to support independent package versions.  The author has used other popular options out there (like lerna), and has found independent versioning to behave strangely with them.  Another goal with the current approach is to reduce boilerplate code as much as possible (something tools like lerna don't help with).  The inspiration for the current approach came from [boennemann/alle](https://github.com/boennemann/alle).  The author isn't

  married to the current approach, so if you have ideas on how to simplify the development of this monorepo by all means please [open an issue](https://github.com/kogosoftwarellc/open-api/issues/new)._


  ### Typical Workflow for Contributors


  Let's say you're working on a package under [./packages](https://github.com/kogosoftwarellc/open-api/tree/master/packages).  Here's what you do:


  1. `cd open-api`

  1. `./bin/test packages/<package_you're_working_on>`

  1. Make your changes.
    1. _Do not bump the version in package.json._  A maintainer will handle that once your PR is merged.
  1. Once you're satisfied with your changes:
    1. Create a new branch `git checkout -b my-branch` (in case you haven't done so already).
    1. `./bin/commit packages/<package_you're_working_on> 'commit message describing your change.  can be multi line here.  just close with a single quote like so:'`
    1. Push your change to your fork
    1. Open a PR.

  ### bin


  Several scripts have been created to aid in the development of this monorepo (see [./bin](./bin)).  They assume that your `$PWD` is the root of the repository.  Here is a brief summary of common actions:


  * Testing
    * (Note: `./bin/test` will run `npm i` in the package _prior_ to running the tests)
    * Test a single package - `./bin/test packages/<package_to_test>` (starts the test in watch mode)
    * Test all packages - `./bin/test`
  * Commit changes to a package - `./bin/commit packages/<package_to_commit> 'Commit message'` (the commit message will be prepended with the package name e.g. `<package_to_commit>: Commit message`


  #### dev-tools

  Scripts in this directory wrap common tools, like `nyc`, `tsc`, and `mocha`.  They reduce boilerplate and are called from npm scripts.


  ## LICENSE


  ```

  The MIT License (MIT)


  Copyright (c) 2018 Kogo Software LLC


  Permission is hereby granted, free of charge, to any person obtaining a copy

  of this software and associated documentation files (the "Software"), to deal

  in the Software without restriction, including without limitation the rights

  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell

  copies of the Software, and to permit persons to whom the Software is

  furnished to do so, subject to the following conditions:


  The above copyright notice and this permission notice shall be included in

  all copies or substantial portions of the Software.


  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER

  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,

  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN

  THE SOFTWARE.

  ```


  [express-openapi-downloads-image]: http://img.shields.io/npm/dm/express-openapi.svg

  [express-openapi-npm-url]: https://npmjs.org/package/express-openapi

  [koa-openapi-downloads-image]: http://img.shields.io/npm/dm/koa-openapi.svg

  [koa-openapi-npm-url]: https://npmjs.org/package/koa-openapi


  [travis-url]: https://travis-ci.org/kogosoftwarellc/open-api

  [travis-image]: https://api.travis-ci.org/kogosoftwarellc/open-api.svg?branch=master


  [coveralls-url]: https://coveralls.io/r/kogosoftwarellc/open-api

  [coveralls-image]: https://coveralls.io/repos/github/kogosoftwarellc/open-api/badge.svg?branch=master


  [gitter-url]: https://gitter.im/kogosoftwarellc/open-api

  [gitter-image]: https://badges.gitter.im/kogosoftwarellc/open-api.png
inaka/cowboy-swagger: >
  <img
  src="http://www.braveterry.com/wp-content/uploads/2015/03/swagger2.png"/>


  # cowboy-swagger

  [Swagger](http://swagger.io/) integration for [Cowboy](https://github.com/ninenines/cowboy) (built on [trails](https://github.com/inaka/cowboy-trails)).


  ## Contact Us

  If you find any **bugs** or have a **problem** while using this library, please

  [open an issue](https://github.com/inaka/elvis/issues/new) in this repo

  (or a pull request :)).


  ## Requirements

  Cowboy Swagger requires Erlang 18+ after 0.1.0 version


  ## Why Cowboy Swagger?

  Simple, because there isn't a tool in Erlang to document Cowboy RESTful APIs easy and fast,

  and to improve development productivity.


  With `cowboy_swagger` is possible to integrate Swagger to your Erlang projects that use Cowboy as a web server.

  It is extremely easy to use, and with just a few steps you'll have a nice Web documentation for your RESTful APIs.


  To learn a bit more about Swagger, please check this [blog post](http://inaka.net/blog/2015/06/23/erlang-swagger-2015/).


  ## How to Use it?

  This is the best part. It is extremely easy.


  ### 1. Document each Cowboy Handler

  Because `cowboy_swagger` runs on top of `trails`, the first thing that you have to do

  is document all about your handler within the trails metadata. Keep in mind that

  all fields defined within each method into the metadata must be compliant with the

  [Swagger specification](http://swagger.io/specification).


  For example, suppose that you have `example_echo_handler`, so it must implement the `trails/0`

  callback from `trails_handler` behaviour:


  ```erlang

  trails() ->
    Metadata =
      #{get =>
        #{tags => ["echo"],
          description => "Gets echo var from the server",
          produces => ["text/plain"]
        },
        put =>
        #{tags => ["echo"],
          description => "Sets echo var in the server",
          produces => ["text/plain"],
          parameters => [
            #{name => <<"echo">>,
              description => <<"Echo message">>,
              in => <<"path">>,
              required => false,
              type => <<"string">>}
          ]
        }
      },
    [trails:trail("/message/[:echo]", example_echo_handler, [], Metadata)].
  ```


  To get a better idea of how your handler should look like, please check [here](./example/src/example_echo_handler.erl).


  ### 2. Include cowboy_swagger in your app

  First, you need to include `cowboy_swagger_handler` module in your list of trails to be compiled.


  ```erlang

  % Include cowboy_swagger_handler in the trails list

  Trails = trails:trails([example_echo_handler,
                          example_description_handler,
                          cowboy_swagger_handler]),
  % store them

  trails:store(Trails),

  % and then compile them

  Dispatch = trails:single_host_compile(Trails),

  ```


  The snippet of code above is usually placed when you start `cowboy`. Check it [here](./example/src/example.erl#L31).


  Then add `cowboy_swagger` to the list of apps to be loaded in your `*.app.src` file.


  ```erlang

  {application, example,
   [
    {description, "Cowboy Swagger Basic Example."},
    {vsn, "0.1"},
    {applications,
     [kernel,
      stdlib,
      jsx,
      cowboy,
      trails,
      cowboy_swagger
     ]},
    {modules, []},
    {mod, {example, []}},
    {registered, []},
    {start_phases, [{start_trails_http, []}]}
   ]
  }.

  ```


  And that's it, you got it. Now start your application and then you will have access to the API docs

  under the path `/api-docs`. Supposing that you're running the app on `localhost:8080`,

  that will be [http://localhost:8080/api-docs](http://localhost:8080/api-docs).


  ## Configuration


  Additionally, `cowboy_swagger` can be configured/customized from a `*.config` file:


  ### app.config


  ```erlang

  [
   %% Other apps ...

   %% cowboy_swagger config
   {cowboy_swagger,
    [
     %% `static_files`: Static content directory. This is where Swagger-UI
     %% is located. Default: `priv/swagger`.
     %% Remember that Swagger-UI is embedded into `cowboy-swagger` project,
     %% within `priv/swagger` folder. BUT you have to reference that path,
     %% and depending on how you're using `cowboy-swagger` it will be different.
     %% For example, assuming that you want to run your app which has
     %% `cowboy-swagger` as dependency from the console, `static_files` will be:
     {static_files, "./deps/cowboy_swagger/priv/swagger"},

     %% `global_spec`: Global fields for Swagger specification.
     %% If these fields are not set, `cowboy_swagger` will set default values.
     {global_spec,
      #{swagger => "2.0",
        info => #{title => "Example API"},
        basePath => "/api-docs"
       }
     }
    ]
   }
  ].

  ```


  ### Definitions


  [Definitions](http://swagger.io/specification/#definitionsObject) can be used for describing

  [parameters](http://swagger.io/specification/#parametersDefinitionsObject),

  [responses](http://swagger.io/specification/#responsesDefinitionsObject) and

  [security](http://swagger.io/specification/#securityDefinitionsObject) schemas.


  For adding definitions to your app, you have 2 choices:


  1. Add a `definitions` key to your cowboy_swagger `global_spec` map.

  2. Add them by calling `cowboy_swagger:add_definition/2` and send the
     definition's name and properties.

  Let's say you want to describe a `POST` call to a `newspapers` endpoint that requires

  `name` and `description` fields only, you can do it like this:


  **Option 1:**

  ```erlang

  [ ... % other configurations

  , { cowboy_swagger
    , [ { global_spec
        , #{ swagger => "2.0"
           , info => #{title => "My app API"}
           , definitions => #{
               "RequestBody" =>
                 #{ "name" =>
                     #{ "type" => "string"
                      , "description" => "Newspaper name"
                      }
                  , "description" =>
                      #{ "type" => "string"
                       , "description" => "Newspaper description"
                       }
                  }
             }
           }
        }
      ]
    }
  ]

  ```


  **Option 2:**


  For the second choice, you can do it for example in one or several `start_phases`,

  directly in your handler or any other place you want.


  ```erlang

  -spec trails() -> trails:trails().

  trails() ->
    DefinitionName = <<"RequestBody">>,
    DefinitionProperties =
      #{ <<"name">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper name">>
            }
       , <<"description">> =>
           #{ type => <<"string">>
            , description => <<"Newspaper description">>
            }
       },
    % Add the definition
    ok = cowboy_swagger:add_definition(DefinitionName, DefinitionProperties),
    ...
  ```



  Now in your handler's trails callback function you can use it:


  ```erlang

  ...
    RequestBody =
      #{ name => <<"request body">>
       , in => body
       , description => <<"request body (as json)">>
       , required => true
         % Use the previously created `RequestBody' definition
       , schema => cowboy_swagger:schema(<<"RequestBody">>)
       },
    Metadata =
      #{ get =>
         #{ tags => ["newspapers"]
          , description => "Returns the list of newspapers"
          , produces => ["application/json"]
          }
       , post =>
         # { tags => ["newspapers"]
           , description => "Creates a new newspaper"
           , consumes => ["application/json"]
           , produces => ["application/json"]
           , parameters => [RequestBody] % and then use that parameter here
           }
       },
    Path = "/newspapers",
    Options = #{path => Path},
    [trails:trail(Path, newspapers_handler, Options, Metadata)].
  ```


  What this does for you is add a nice `response`, `parameter` or `security`

  model in swagger-ui, so client developers will know exactly what parameters

  the API expects for every endpoint.


  ## Example

  For more information about `cowboy_swagger` and how to use it, please check this [Example](./example).
gedaiu/swaggarize: >
  # OpenApi


  I will not mantain this project in the future. Please have a loog at this fork: [https://github.com/gedaiu/OpenApi](https://github.com/gedaiu/OpenApi)
tjwebb/sails-swagger: >
  # sails-swagger


  [![NPM version][npm-image]][npm-url]

  [![Build status][ci-image]][ci-url]

  [![Dependency Status][daviddm-image]][daviddm-url]

  [![Code Climate][codeclimate-image]][codeclimate-url]



  [swagger.io](http://swagger.io/) (v2.0) hook for Sails. The application's models, controllers, and routes are aggregated and transformed into a Swagger Document. Supports the Swagger 2.0 specification.


  ## Install


  ```sh

  $ npm install sails-swagger --save

  ```


  ## Configuration

  ```js

  // config/swagger.js

  module.exports.swagger = {
    /**
     * require() the package.json file for your Sails app.
     */
    pkg: require('../package'),
    ui: {
      url: 'http://swagger.balderdash.io'
    }
  };

  ```


  ## Usage

  After installing and configuring swagger, you can find the docs output on the [/swagger/doc](http://localhost:1337/swagger/doc) route.


  You may also specify additional swagger endpoints by specifying the swagger spec in config/routes.js


  ```

  /**
   * Route Mappings
   * @file config/routes.js
   * (sails.config.routes)
   *
   * Your routes map URLs to views and controllers.
   */

  module.exports.routes = {

      /***************************************************************************
       *                                                                          *
       * Make the view located at `views/homepage.ejs` (or `views/homepage.jade`, *
       * etc. depending on your default view engine) your home page.              *
       *                                                                          *
       * (Alternatively, remove this and add an `index.html` file in your         *
       * `assets` directory)                                                      *
       *                                                                          *
       ***************************************************************************/

      '/': {
          view: 'homepage'
      },

      /***************************************************************************
       *                                                                          *
       * Custom routes here...                                                    *
       *                                                                          *
       * If a request to a URL doesn't match any of the custom routes above, it   *
       * is matched against Sails route blueprints. See `config/blueprints.js`    *
       * for configuration options and examples.                                  *
       *                                                                          *
       ***************************************************************************/
      'get /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['GET', 'POST'],
              summary: ' Get Groups ',
              description: 'Get Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'List of Groups',
                      schema: 'Group', // api/model/Group.js,
                      type: 'array'
                  }
              },
              parameters: []

          }
      },
      'put /groups/:id': {
          controller: 'GroupController',
          action: 'test',
          skipAssets: 'true',
          //swagger path object
          swagger: {
              methods: ['PUT', 'POST'],
              summary: 'Update Groups ',
              description: 'Update Groups Description',
              produces: [
                  'application/json'
              ],
              tags: [
                  'Groups'
              ],
              responses: {
                  '200': {
                      description: 'Updated Group',
                      schema: 'Group' // api/model/Group.js
                  }
              },
              parameters: [
                  'Group' // api/model/Group.js
              ]

          }
      }
  };



  ```


  ## License

  MIT


  ## Maintained By

  [<img src='http://i.imgur.com/Y03Jgmf.png' height='64px'>](http://langa.io)


  [sails-version-image]: https://goo.gl/gTUV5x

  [sails-url]: http://sailsjs.org

  [npm-image]: https://img.shields.io/npm/v/sails-swagger.svg?style=flat

  [npm-url]: https://npmjs.org/package/sails-swagger

  [ci-image]: https://img.shields.io/travis/langateam/sails-swagger/master.svg?style=flat

  [ci-url]: https://travis-ci.org/langateam/sails-swagger

  [daviddm-image]: http://img.shields.io/david/langateam/sails-swagger.svg?style=flat

  [daviddm-url]: https://david-dm.org/langateam/sails-swagger

  [codeclimate-image]: https://img.shields.io/codeclimate/github/langateam/sails-swagger.svg?style=flat

  [codeclimate-url]: https://codeclimate.com/github/langateam/sails-swagger
sarnowski/swagger1st: >
  ## swagger1st: A Swagger-First Clojure Ring handler


  ![Maven Central](https://img.shields.io/maven-central/v/org.zalando/swagger1st.svg)

  [![Build Status](https://travis-ci.org/zalando-stups/swagger1st.svg?branch=master)](https://travis-ci.org/zalando-stups/swagger1st)

  [![codecov](https://codecov.io/gh/zalando-stups/swagger1st/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando-stups/swagger1st)


  swagger1st is a Clojure [Ring](https://github.com/ring-clojure/ring) handler that parses, validates and routes requests

  based on your [Swagger](http://swagger.io/)/OpenAPI definition. It takes the opposite approach of [ring-swagger](https://github.com/metosin/ring-swagger)—which enables you to generate your Swagger spec from your Clojure code—by allowing you to use your Swagger spec to generate Clojure code.


  Instead of defining routes and validation rules in your code, you can use swagger1st along with [Swagger/OpenAPI's great tool set](http://editor.swagger.io/) to specify your API according to the [Swagger/Open API 2.0 Specification](https://github.com/swagger-api/swagger-spec). This enables you to specify your API in an API-First, technology-independent format. The resulting definition is the ultimate format for publishing, sharing and reviewing your API.


  #### Compatibility Overview

  swagger1st aims to implement all of the Swagger/OpenAPI spec's features, so that you only have to write your business logic. [This document](https://github.com/zalando-stups/swagger1st/blob/master/comp-2.0.md) shows which aspects of the spec it currently supports.


  swagger1st will use the Swagger definition of your API as a configuration file for processing incoming requests—ensuring that your implementation and specification always remain in sync. During runtime, you can inspect and easily test

  your API with the built-in [Swagger UI](http://petstore.swagger.io/). You can also extend the interpretation of

  your definition according to your own needs.


  Imagine a simple API definition like this:


  ```yaml

  swagger: '2.0'


  info:
    title: Example API
    version: '0.1'

  paths:
    /helloworld:
      get:
        summary: Returns a greeting.
        operationId: example.api/generate-greeting
        parameters:
          - name: firstname
            in: query
            type: string
            pattern: "^[A-Z][a-z]+"
        responses:
            200:
                description: say hello
  ```


  By default, this definition is connected to your business logic via the `operationId`, which might be defined like so:


  ```clojure

  (ns example.api
    (:require [ring.util.response :as r]))

  (defn generate-greeting [request]
    (let [firstname (-> request :parameters :query :firstname)]
      (-> (r/response (str "Hello " firstname "!"))
          (r/content-type "plain/text"))))
  ```


  This is all you need to do to define and implement your API. Only fully validated requests get to your function,

  so you can rely on swagger1st to properly check all input parameters according to your definition. The function itself

  is a normal Clojure function without any dependencies to swagger1st - simple as that.


  ### Quickstart


  The following provides instructions for simple, complex and manual setups. For all three approaches you'll need to install [Leiningen](http://leiningen.org/) as the build tool.


  #### Simple Setup

  If you're bootstrapping a completely new project, or just want to try out swagger1st, you can use this Leiningen template:


  ```

  $ lein new swagger1st myproject

  $ cd myproject

  $ lein ring server-headless

  ```


  This will run a local web server on port 3000, so you can interact with the API at <http://localhost:3000/>. Also, you might want to have a look at <http://localhost:3000/ui/> for a graphical interface to explore and experiment with your API (using [Swagger UI](http://petstore.swagger.io/)).


  ### Complex Setup


  To see how you can handle dependency injection with swagger1st, generate a project setup that includes Stuart Sierra's

  [component](https://github.com/stuartsierra/component) framework:


  ```

  $ lein new swagger1st myproject +component

  $ cd myproject

  $ lein run -m myproject.core

  ```


  As with the simple setup above, this will launch a local web server on port 3000.


  ### Manual Setup


  The following steps describe how to manually set up swagger1st in a Clojure project. This is especially useful if you want to integrate it into an existing project or cannot use the provided template for other reasons.


  Use the following dependency in your [Leiningen](http://leiningen.org/) project:

      [org.zalando/swagger1st "<latest>"]

  This creates a Ring-compliant handler:


  ```clojure

  (ns example
    (:require [io.sarnowski.swagger1st.core :as s1st]
              [io.sarnowski.swagger1st.util.security :as s1stsec]))

  (def app
    (-> (s1st/context :yaml-cp "my-swagger-api.yaml")
        (s1st/discoverer)
        (s1st/mapper)
        (s1st/parser)
        (s1st/protector {"oauth2" (s1stsec/allow-all)})
        (s1st/executor)))
  ```


  ### Commands for Development


  ```shell

  # get the source

  $ git clone https://github.com/zalando-stups/swagger1st.git

  $ cd swagger1st


  # run the tests

  $ lein test


  # run all tests, including performance benchmarks

  $ lein test :all


  # build an own artifact for local development

  $ lein install


  # release a new version

  $ lein release :minor

  ```


  For interactive development, you can start a REPL by typing `lein repl`.


  ### Projects Using Swagger1st in Production


  - [Friboo](https://github.com/zalando/friboo), a utility library for writing microservices in Clojure, with support for Swagger and OAuth. It uses swagger1st at its base for RESTful HTTP endpoints and also integrates with the [component](https://github.com/stuartsierra/component) framework.

  - [STUPS.io](https://stups.io/) components [Kio](https://github.com/zalando-stups/kio), [PierOne](https://github.com/zalando-stups/pierone) (a complete Docker registry based on S3), [Essentials](https://github.com/zalando-stups/essentials), [TWINTIP](https://github.com/zalando-stups/twintip-storage) and [mint](https://github.com/zalando-stups/mint-storage)


  ### The Ring Handler in Detail


  * `s1st/context` (required)
      * Creates a new context from a given definition. This context will be used by the next steps to prepare the
        execution of requests.
  * `s1st/discoverer` (optional)
      * The discoverer enables certain HTTP endpoints, that makes it easy to work with your API. In particular, this
        enables the Swagger UI under the path `/ui/` and exposes the Swagger definition under `/swagger.json`.
  * `s1st/mapper` (required)
      * The mapper denormalizes the given definition (e.g. resolves all `$ref`s) and figures out, which request definition
        maps to the actual incoming request. After this function, your `request` map contains the `:swagger` key, which
        contains a `:request` key containing the denormalized definition of the request and a `:key` key which can be used
        to uniquely identify a request.
  * `s1st/parser` (required)
      * The parser parses the incoming request according to the definition and validates all inputs.
  * `s1st/protector` (optional)
      * The protector can enforce all security definitions for you. As the security check implementations vary depending
        on your environment, this is only a framework to hook into the system and define callbacks for the actual checks.
  * `s1st/executor` (required)
      * The executor executes your defined function in the end. At this point, the whole definition was validated and only
        valid requests make it up until here. You can also specify an own function resolver function in order to hook into
        your own framework.

  ### License


  Copyright (c) 2015, Tobias Sarnowski

  Copyright (c) 2016, Zalando SE


  Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,

  provided that the above copyright notice and this permission notice appear in all copies.


  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL

  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,

  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN

  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF

  THIS SOFTWARE.
lucybot/api-spec-converter: >
  # api-spec-converter

  [![Share on Twitter][twitter-image]][twitter-link]


  [![Chat on gitter][gitter-image]][gitter-link]

  [![NPM version][npm-image]][npm-link]

  [![Build status][travis-image]][travis-link]


  [![Dependency status][deps-image]][deps-link]

  [![devDependency status][devdeps-image]][devdeps-link]


  Convert between API description formats such as [Swagger](http://swagger.io/) and [RAML](http://raml.org/)


  **Currently only supports conversion to OpenAPI(fka Swagger) 2.0 format, and from OpenAPI 2.0 to OpenAPI 3.0.x**


  You can also use the online version at https://lucybot-inc.github.io/api-spec-converter/.


  ## Installation


  ### Command Line

  > Problems? See [issue #132](https://github.com/LucyBot-Inc/api-spec-converter/issues/132)

  ```bash

  npm install -g api-spec-converter

  ```


  ### NodeJS/Browser

  ```bash

  npm install --save api-spec-converter

  ```


  ## Usage


  ### Command Line

  ```bash

  $ api-spec-converter -h

    Usage: api-spec-converter [options] <URL|filename>

    Convert API descriptions between popular formats.

    Supported formats:
      * swagger_1
      * swagger_2
      * openapi_3
      * api_blueprint
      * io_docs
      * google
      * raml
      * wadl

    Options:

      -h, --help              output usage information
      -V, --version           output the version number
      -f, --from <format>     Specifies format to convert
      -t, --to <format>       Specifies output format
      -s, --syntax [syntax]   Specifies output data syntax: json or yaml. Defaults to json
      -o, --order [sortOrder] Specifies top fields ordering: openapi or alpha. Defaults to openapi
      -c, --check             Check if result is valid spec
      -d, --dummy             Fill missing required fields with dummy data
  ```


  Example:

  ```bash

  $ api-spec-converter --from=swagger_1 --to=swagger_2 --syntax=yaml --order=alpha https://raw.githubusercontent.com/LucyBot-Inc/api-spec-converter/master/test/input/swagger_1/petstore/pet.json > swagger.json

  ```


  ### NodeJS


  ### Options

  * `from` - source format (see formats below)

  * `to` - desired format (see formats below)

  * `source` - Filename, URL, or JS object for the source

  ### Simple example:

  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  }, function(err, converted) {
    console.log(converted.stringify());
    // For yaml and/or OpenApi field order output replace above line
    // with an options object like below
    //   var  options = {syntax: 'yaml', order: 'openapi'}
    //   console.log(converted.stringify(options));
  })

  ```

  ### Callback vs Promises

  This library has full support for both callback and promises.

  All async functions return promises but also will execute callback if provided.


  ```js

  var Converter = require('api-spec-converter');


  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })

  .then(function(converted) {
    console.log(converted.stringify());
  });

  ```

  ### Advanced features:

  ```js

  var Converter = require('api-spec-converter');

  Converter.convert({
    from: 'swagger_1',
    to: 'swagger_2',
    source: 'https://api.gettyimages.com/swagger/api-docs',
  })
    .then(function(converted) {
      // [Optional] Fill missing fields with dummy values
      converted.fillMissing();

      // [Optional] Validate converted spec
      return converted.validate()
        .then(function (result) {
          if (result.errors)
            return console.error(JSON.stringify(errors, null, 2));
          if (result.warnings)
            return console.error(JSON.stringify(warnings, null, 2));

          fs.writeFileSync('swagger2.json', converted.stringify());
        });
    });
  ```


  ### Browser

  ```js

  <script src="node_modules/api-spec-converter/dist/api-spec-converter.js"></script>

  APISpecConverter.convert(...)

  ```


  ## Supported Formats


  * [Swagger 1.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/1.2.md) (swagger_1)

  * [OpenAPI(fka Swagger) 2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) (swagger_2)

  * [OpenAPI 3.0.x](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md) (openapi_3)

  * [I/O Docs](https://github.com/mashery/iodocs) (io_docs)

  * [API Blueprint](https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md) (api_blueprint)

  * [Google API Discovery](https://developers.google.com/discovery/v1/reference/apis) (google)

  * [RAML](http://raml.org/spec.html) (raml)

  * [WADL](http://www.w3.org/Submission/wadl/) (wadl)



  ## Conversion Table


  |from:             |swagger_1|swagger_2|openapi_3|io_docs|api_blueprint|google|raml|wadl|

  -------------------|:-------:|:-------:|:-----:|:-----:|:-----------:|:----:|:--:|:--:|

  |to swagger_1      |  n/a    |         |       |       |             |      |    |    |

  |to swagger_2      | :white_check_mark: |    n/a  | :white_check_mark:  | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |

  |to openapi_3      |   :eight_spoked_asterisk:     | :white_check_mark: |  n/a  |   :eight_spoked_asterisk:  | :eight_spoked_asterisk: |  :eight_spoked_asterisk:   | :eight_spoked_asterisk:  | :eight_spoked_asterisk:  |

  |to io_docs        |         |         |       |  n/a  |             |      |    |    |

  |to api_blueprint  |         |         |       |       |    n/a      |      |    |    |

  |to google         |         |         |       |       |             |  n/a |    |    |

  |to raml           |         |         |       |       |             |      | n/a|    |

  |to wadl           |         |         |       |       |             |      |    | n/a|


  #### Key

  * :white_check_mark: - direct conversion

  * :eight_spoked_asterisk: - conversion via swagger_2


  ## Contributing

  Contributions are welcome and encouraged.


  ### Testing

  Please add a test case if you're adding features or fixing bugs. To run the tests:


  ```bash

  WRITE_GOLDEN=true npm test

  ```


  ### Releases

  ```

  npm run browserify

  git commit -a -m "Build browser distribution"

  npm version minor # or major/patch

  npm publish

  git push --follow-tags

  ```


  [twitter-image]: https://img.shields.io/twitter/url/http/lucybot.github.io/api-spec-converter.svg?style=social

  [twitter-link]: https://twitter.com/intent/tweet?text=Convert+between+API+description+formats+such+as+Swagger+and+RAML:&url=http%3A%2F%2Flucybot.github.io%2Fapi-spec-converter

  [gitter-image]: https://img.shields.io/gitter/room/lucybot/api-spec-converter.svg

  [gitter-link]: https://gitter.im/lucybot/api-spec-converter

  [npm-image]: https://img.shields.io/npm/v/api-spec-converter.svg

  [npm-link]: https://npmjs.org/package/api-spec-converter

  [travis-image]: https://img.shields.io/travis/LucyBot-Inc/api-spec-converter.svg

  [travis-link]: https://travis-ci.org/LucyBot-Inc/api-spec-converter

  [deps-image]: https://img.shields.io/david/lucybot/api-spec-converter.svg

  [deps-link]: https://david-dm.org/lucybot/api-spec-converter

  [devdeps-image]: https://img.shields.io/david/dev/lucybot/api-spec-converter.svg

  [devdeps-link]: https://david-dm.org/lucybot/api-spec-converter#info=devDependencies
zalando/play-swagger: >
  ## The Play-Swagger plugin is now renamed
  [api-first-hand](https://github.com/zalando/api-first-hand). This version is
  no longer under active development.

  ## Api-First-Hand is actively mantained and offers full functionality of Play-Swagger with an exception of Play 2.4 support. Please navigate to [api-first-hand](https://github.com/zalando/api-first-hand) if you'd like to check out Play-Swagger or create an issue.


  --

  --

  --

  --



  # Play-Swagger


  [![Build Status](https://travis-ci.org/zalando/play-swagger.svg)](https://travis-ci.org/zalando/play-swagger)

  [![codecov](https://codecov.io/gh/zalando/play-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/zalando/play-swagger)

  [![Gitter Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/zalando/play-swagger?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)


  ## Compatibility


  - Play 2.4

  - Swagger (OpenAPI) 2.0


  ## Status


  This plugin should be enabled using the [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service) activator template 

  as the version in this repository is under active development. The status of this software is beta, 

  an end-to-end functional release intended to demonstrate the possibility to generate following from a Swagger specification:


  - Play route files

  - Generators of random test data

  - Wrappers for Play route files to convert semantics from http-related to domain-related (controller_base)

  - Skeletons for the domain-driven controller implementation

  - Model classes and validation rules

  - Unit tests for invalid and valid parameter sets

  - Security extractors (if needed)

  - Skeletons for custom deserializers (if needed)


  We benefit from community feedback. All comments are welcome!


  # Play-Swagger Tutorial


  This tutorial is based on the [play-swagger-service](http://www.typesafe.com/activator/template/play-swagger-service) activator template.


  ```bash

  $ activator new playground play-swagger-service

  ```


  The template project contains following:


  - `tutorial` folder with HTML tutorial

  - `public/swagger` folder containing static files needed for swagger UI

  - `project` folder containing pre-configured `plugins.sbt` file with a definition of all required resolvers and plugins

  - `conf` folder with following customized contents:
      * `routes` file with route configuration for Swagger UI, example specification and commented out links to other examples
      * `example.yaml`, a demo Swagger specification. The specification has a dummy implementation in `app` folder. 
      * `examples` folder containing other different Swagger specification examples. Each specification in this folder represents some aspect of the Play-Swagger plugin in more details.
          For the specification to be picked up by the plugin it must be moved into the `conf` folder. It is allowed to have multiple Swagger specifications in the `conf` folder at the same time. 
  - `app` directory with following template implementations:
      * `controllers/Swagger.scala` - a backend side of the Swagger UI
      * `generated_controllers/example.yaml.scala` - a dummy implementation of the example controller. Will be (re)generated if deleted
      * `security/example.yaml.scala` - a marshaller for OAuth2 tokens. Will not be regenerated until 
          a) deleted or renamed
          b) explicitly requested by issuing a `apiFirstSecurity` command 


  ## Welcome to Play-Swagger


  Congratulations, you just created a new Play-Swagger application!


  The [Play Framework](http://www.playframework.com/) with the [Play-Swagger](https://github.com/zalando/play-Swagger/) 

  plugin make it easy to build RESTful web services from a Swagger API specification as the single source of truth. 

  Play is based on a lightweight, stateless, web-friendly architecture. Built on [Akka](http://akka.io), 

  Play provides predictable and minimal resource consumption for highly-scalable applications. 

  The Play-Swagger plugin takes Swagger API definitions and treats them as the single source of truth of your REST services.


  Play-Swagger supports round-trip regeneration and compilation of:


  - Play routes definitions (managed).

  - Swagger domain model definitions and parameters onto Scala case classes (managed).

  - Swagger domain model constraints onto Play validations (managed).

  - Generators for random test data generation of parameter values (managed).

  - Unit tests for validating your service at the API boundary (managed).

  - Swagger path definitions onto skeletons for Play controller implementations (unmanaged).


  In the list above, "(managed)" means that the code is managed by sbt. The code is not controlled 

  and altered by you, the programmer of the REST service. The plugin takes your Swagger API definition as the single 

  source of truth and regenerates these code parts in a consistent manner.

  You'll instead be focusing on implementing the service business logic in an (unmanaged) Play controller class 

  that is generated once. Subsequent regenerations keep the code that you have added, either by commenting out the 

  parts that are no longer valid, or by adding parts that are needed because you have made a change to the API.


  Manual generation and compilation of:


  - Security extractors

  - Unmarshallers for custom content types 


  is supported in the case if


  a) No security extractor or unmarshaller with the same name already exists

  b) The developer issues `apiFirstSecurity` or `apiFirstMarshallers` sbt command 


  ## Run Your Application


  Before we go any further, let's run the application.


  - Open a shell and `cd` into your service project directory.

  - Start `sbt` and `run` the service.

  - View the running application at [http://localhost:9000](http://localhost:9000).


  The service template comes with the Swagger UI frontend included, 

  run statically from the within Play, which provides a sandbox for your service. 

  The template is configured with a template Swagger API definition called `example.yaml` 

  and located in the `conf` directory of the Play application. 


  The `example.yaml` definition provides an example [API description](https://github.com/zalando/play-swagger-service/blob/master/conf/example.yaml)


  This definition contains three end points: 

  - the `/token` path, which accept the `GET` and `POST` methods

  - the `/todos/{user_id}`, which accepts the `GET` method. 


  The `GET /token` API plays a role of an authentication server and is used by the Swagger UI for OAuth token requests.

  The `POST /token` API represents an authorization server and is used by the security part of the 

  generated code to validate OAuth tokens.
   
  The `GET /todos/{user_id}` takes a path parameter `user_id` and returns a TODO list for given user. 

  For the client to be allowed to access this endpoint, it must provide an OAuth token with the scope `admin:org`. 

  The token can be requested using the Swagger UI.


  Try it out for yourself: 


  Click the [default](http://localhost:9000/) button to expand the API definition in the Swagger UI.



  # Play Routes Integration


  As a Play application developer, you are used to defining your endpoints in the `conf/routes` file. 

  Not so with the Play-Swagger plugin! Swagger API specifications already define endpoints as `path` definitions, 

  as seen in the example above. So why do the work twice, right? Instead, the Play-Swagger plugin requires you to 

  link your API definition in the routes file ones—making all Swagger API-defined endpoints available as children 

  of one single path context location, and generating Play route definitions from them (as shown below):


  ```

  ->      /example        example.yaml.Routes

  ```


  Note that the `conf/routes` file provided by this activator template also contains a couple of additional `GET` 

  mappings required for the the Swagger UI sandbox.


  There are a couple of commented out links to other examples. If you activate some specification by moving it from 

  the `examples` folder into the `conf` folder, you'll need to uncomment an appropriate line in the `routes` file in

  order for play to be able to find it.  



  ## Swagger Domain Definitions


  Scala domain model definitions are generated for all data types defined as Swagger parameters in an API specification. 

  Swagger parameters can be of path, query, header, form or body types, and consist of either primitive data types or 

  more complex types composed from objects and arrays with primitives as leaves. 


  Both primitive types and complex types are mapped to scala.


  As an example, let's look at the Swagger API specification file [`simple.petstore.api.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/simple.petstore.api.yaml), 

  which defines the API of a simple pet store. It contains a model definition for a pet.


  ```yaml

  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
  ```


  This definition consists of an object `pet` containing the required properties `id` and `name` 

  and the optional property `tag`. The Swagger primitive types of these properties are a 64-bit `integer` 

  and (twice) a `string`, successively.  The Play-Swagger plugin will map this definition on to a generated Scala model.


  ```scala

  package simple.petstore.api


  package object yaml {

      type PetTag = Option[String]

      case class Pet(id: Long, name: String, tag: PetTag)
  }

  ```


  This generated model contains a type definition `PetTag`, which declares a type alias for the optional `tag` property, 

  and a `Pet` case class with the properties as named in the Swagger API definition and mapped on the subsequent 

  Scala primitive or declared types. The case class and type alias are generated in an package object `yaml`, 

  this package  object itself is contained in the package `simple.petstore.api` so that full object name corresponds 

  to the API filename.


  Note that models are generated within a Play application as _managed_ code in the target folder. 

  Generated model code is not intended to be altered.  We should instead look upon the Swagger definition as the single 

  source of truth, and as the source code that defines our model.

  The Swagger specification file of our API is, in that sense, part of the codebase. 

  Even though the generated `Pet` case class is managed by the plugin, and not us, it can (of course) 

  be used in our application codebase after being imported.


  ```scala

  import simple.petstore.api.yaml._


  val pet = Pet(0L, "Tucker", Some("Greyhound"))

  ```


  ## Specification Cross-References


  A `$ref` element of the specification is allowed to contain a name of file as it's part. Because of this, it is possible to split 

  a single specification into multiple files as shown in [`cross_spec_references.yaml`](https://github.com/zalando/play-swagger-service/blob/master/conf/examples/cross_spec_references.yaml) 

  example. It is also possible to reference a definition in one specification from another specification. 

  In this case for each reference an independent copy of the class definition will be created for each referencing specification. 

  The definition is then placed into the appropriate package for each specification. 


  Thus, even if multiple classes with  the same name and structure might be generated, they all will coexist in their 

  own separate namespaces and won't be interchangeable.



  ## Primitive Types


  Swagger version 2.0 allows for primitive data types based on the types defined by 

  [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8).


  When generated as Scala, the following mapping applies:


  | Common Name | Swagger Type | Swagger Format | Scala Type                                  |

  |-------------|--------------|----------------|---------------------------------------------|

  | integer     | integer      | int32          | scala.Int                                   |

  | long        | integer      | int64          | scala.Long                                  |

  | float       | number       | float          | scala.Float                                 |

  | double      | number       | double         | scala.Double                                |

  | big int     | integer      |                | scala.math.BigInt                           |

  | big decimal | number       |                | scala.math.BigDecimal                       |

  | boolean     | boolean      |                | scala.Boolean                               |

  | string      | string       |                | scala.String                                |

  | byte        | string       | byte           | de.zalando.play.controllers.Base64String    |

  | binary      | string       | binary         | de.zalando.play.controllers.BinaryString    |

  | date        | string       | date           | org.joda.time.LocalDate                     |

  | datetime    | string       | date-time      | org.joda.time.DateTime                      |

  | password    | string       | password       | scala.String                                |

  | file        | file         |                | java.io.File                                |


  Additionally, if a validation of type "enum" is defined for some primitive type, a trait and a set of case objects forming an ADT 

  will be generated for this enum.


  ## Complex Types


  Complex types are made up of primitive objects, or nested objects.


  ### Objects


  Complex object types are defined in Swagger model definitions as either objects or arrays.


  Objects are, again, based on the [JSON-Schema](http://json-schema.org/latest/json-schema-core.html#anchor8) specification 

  and defined as Swagger [Schema Objects](https://github.com/Swagger-api/Swagger-spec/blob/master/versions/2.0.md#schema-object) 

  for parameter definitions of `type: "object"`.

  For example, given a Swagger API definition file `api.yaml` containing a model that defines a `person` as an object 

  with the properties `name` and `age` of the primitive types `string` and `integer` subsequently, 

  this object will be mapped on a Scala case class, and generated in a Scala package object (namespace) with the same name 

  as the extension of the file the specification is read from and in a package with the same name as the 

  Swagger definition file in which the model is defined—that is, `api`


  ```yaml

  definitions:
    person:
      type: object
      required:
        - name
        - age
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Person(name: String, age: Int) 
  }

  ```


  ### Nested Objects


  Nested objects are generated adjourned but referenced hierarchically. E.g.


  ```yaml

  definitions:
    parent:
      type: object
      required:
        - child
      properties:
        child:
          type: object
          required:
            - name
          properties:
            name:
              type: string
  ```


  Is generated into:


  ```scala

  package api

  package object yaml {
      case class Parent(child: ParentChild) 
      case class ParentChild(name: String) 
  }


  ```


  ### Optionality


  Swagger, by default, defines object properties to be optional, which can be overridden by providing a list of `required` 

  object properties as already used in the examples above. Optional properties are mapped upon Scala's `Option` type, 

  for which a type alias is generated for each property that is optional. E.g.


  ```yaml

  definitions:
    product:
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type ProductTag = Option[String]
      case class Product(name: String, tag: ProductTag) 
  }


  ```


  As objects can be nested, so can object property optionality. To facilitate for nested optionality, we generate a nested scala `Option` type alias. E.g.


  ```yaml

  definitions:
    Basic:
      properties:
        optional:
          type: object
          properties:
            nested:
              type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
      type BasicOptional = Option[BasicOptionalOpt]
      type BasicOptionalNested = Option[String]

      case class BasicOptionalOpt(nested: BasicOptionalNested) 
      case class Basic(optional: BasicOptional) 
  }

  ```



  ### Parameter optionality


  As object properties can be optional, so can be query, header, body or form parameters. 

  In the case if they are not required, they are mapped to the Scala's `Option` type. 


  Path parameters are _must_ be declared as required.


  In the case, if a parameter is _not_ required, it is allowed to have a default value.



  ### Extension


  Objects can extend other objects via employment of Swagger's `allOff` property. In the example below, the `ExtendedErrorModel` inherits _all of_ the properties of the `ErrorModel` which it refers to—that is, the properties `message` and `code`—and _extends_ this model with the property `rootCause`. Swagger object extension is mapped by duplicating inherited properties in the object that extends. E.g.


  ```yaml

  definitions:
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
        code:
          type: integer
    ExtendedErrorModel:
      allOf:
      - $ref: '#/definitions/ErrorModel'
      - type: object
        required:
        - rootCause
        properties:
          rootCause:
            type: string
  ```


  Which is generated as:


  ```scala

  package api

  package object yaml {
    import scala.math.BigInt
    case class ErrorModel(message: String, code: BigInt) 
    case class ExtendedErrorModel(message: String, code: BigInt, rootCause: String) 
  }


  ```


  ### Polymorphism


  Polymorphic object definitions are possible through employment of the Swagger `discriminator` property. 

  In the example definition below, an abstract `Pet` defines what concrete `Cat` and `Dog`s have in common. 

  Swagger object models define data, so a discriminator property is required to distinguish concrete cat and dog 

  instances as they are serialised to and from the API. In this sense, the discriminator property works 

  in the same way as a discriminator column works in ORM frameworks when mapping a class hierarchy onto a single table. 

  It simply contains a value that maps onto one of the concrete types—for example, `petType: "Cat"` or `petType: "Dog"`.


  ```yaml

  definitions:
    Pet:
      discriminator: petType
      properties:
        name:
          type: string
        petType:
          type: string
      required:
      - name
      - petType
    Cat:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          huntingSkill:
            type: string
            default: lazy
            enum:
            - clueless
            - lazy
            - adventurous
            - aggressive
        required:
        - huntingSkill
    Dog:
      allOf:
      - $ref: '#/definitions/Pet'
      - properties:
          packSize:
            type: integer
            format: int32
        required:
        - packSize
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      trait IPet {
          def name: String
          def petType: String
      }

      case class Cat(name: String, petType: String, huntingSkill: CatHuntingSkill) extends IPet
      case class Dog(name: String, petType: String, packSize: Int) extends IPet
      case class Pet(name: String, petType: String) extends IPet

      sealed trait CatHuntingSkill { def value: String }
      case object Clueless extends CatHuntingSkill { val value = "clueless" }
      case object Lazy extends CatHuntingSkill { val value = "lazy" }
      case object Adventurous extends CatHuntingSkill { val value = "adventurous" }
      case object Aggressive extends CatHuntingSkill { val value = "aggressive" }
      implicit def stringToCatHuntingSkill(in: String): CatHuntingSkill = in match {
          case "clueless" => Clueless
          case "lazy" => Lazy
          case "adventurous" => Adventurous
          case "aggressive" => Aggressive
      }
  }


  ```


  Please note how the enumeration of cat's `huntingSkill`'s get's translated into the ADT with a sealed trait `CatHuntingSkill`

  and four case objects implementing that trait.


  ### Additional Properties


  Swagger's model language allows objects' additional properties to be loosely defined employing the `additionalProperties` annotation 

  in order to model dictionaries. These dictionaries are mapped to Scala's `Map` type, for which a type alias is 

  generated following the same (by now) well-known pattern as for optional properties, with the map's key parameter type being a Scala `String`.


  A Swagger additional property definition takes as its type property the element type of the dictionary, 

  which can be of primitive or complex type and which is mapped on Scala as the map's value parameter type. 

  Swagger allows for one `additionalProperties` annotation per object definition, so we can generate this Scala parameter 

  with the static name `additionalProperties`.


  In the following example we define a Swagger model object definition `KeyedArray` that uses the `additionalProperties` 

  annotation to provide the object with a set of key value mappings from string to array. E.g.


  ```yaml

  definitions:
    KeyedArrays:
      type: object
      additionalProperties:
        type: array
        items:
          type: integer
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper
      import scala.math.BigInt
      import scala.collection.immutable.Map

      type KeyedArraysAdditionalPropertiesCatchAll = ArrayWrapper[BigInt]
      type KeyedArraysAdditionalProperties = Map[String, KeyedArraysAdditionalPropertiesCatchAll]
      case class KeyedArrays(additionalProperties: KeyedArraysAdditionalProperties) 
  }

  ```


  ## Arrays


  Swagger's `array` is used to define properties that hold sets or lists of model values—possibly of a primitive type, 

  but complex element types are also allowed. Depending on the place where the array definition appears, Swagger array can be mapped to one of two Scala types, parametrised for the element type that it contains:

  - if an array only defined inline as a part of the response definition, it is translated to a `Seq` type

  - otherwise (array appears in the parameter definition or in the `definitions` part of the specification) it is 

  defined as a `de.zalando.play.controllers.ArrayWrapper`


  For example, in the snippet below, an `Activity` object definition is referred to as an item element in the 

  `messages` property of `type: array` of the containing object definition `Example`. 

  A Scala type alias will be generated for the array type (just as we've seen before with optional properties), 

  after which the array-containing property can be generated within the case class as being of this alias type. 

  E.g. in the Swagger definition and code


  ```yaml

  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
    Example:
      type: object
      required:
      - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/definitions/Activity'
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessages = ArrayWrapper[Activity]

      case class Activity(actions: String) 
      case class Example(messages: ExampleMessages) 
  }


  ```


  If the description of the same array is inlined as a part of the response definition like that:


  ```yaml

  paths:
    /api:
      get:
        responses:
          200:
            schema:
              type: object
              required:
              - messages
              properties:
                messages:
                  type: array
                  items:
                    $ref: '#/definitions/Activity'
            description: array payload
  definitions:
    Activity:
      type: object
      required:
      - actions
      properties:
        actions:
          type: string
  ```


  than the `Seq` scala type will be used:

  ```scala

  package api

  package object yaml {
      type ApiGetResponses200Messages = Seq[Activity]
      case class Activity(actions: String) 
      case class ApiGetResponses200(messages: ApiGetResponses200Messages) 
  }

  ```



  ### Nested Arrays


  Array definition types can be nested and are possibly optional. 

  The following (contrived) snippet depicts the generated Scala code when both definition types are 

  employed in a somewhat non-useful manner. The intent of this example is to show that the case 

  class definitions are rather concisely generated, even though a stack of type aliases is needed 

  to make sure that we still refer in Scala code to an aptly named Swagger definition—especially 

  in conjunction with the object properties being optional. Next to its benefits, 

  type safety against `null` pointers does have an associated cost as well.


  ```yaml

  definitions:
    Activity:
      type: object
      properties:
        actions:
          type: string
    Example:
      type: object
      properties:
        messages:
          type: array
          items:
            type: array
            items:
              $ref: '#/definitions/Activity'
        nested:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  type: string
  ```


  Which is generated as:


  ```scala

  package api


  package object yaml {

      import de.zalando.play.controllers.ArrayWrapper

      type ExampleMessagesOpt = ArrayWrapper[ExampleMessagesOptArr]
      type ExampleMessages = Option[ExampleMessagesOpt]
      type ExampleNested = Option[ExampleNestedOpt]
      type ExampleMessagesOptArr = ArrayWrapper[Activity]
      type ExampleNestedOptArrArrArr = ArrayWrapper[String]
      type ExampleNestedOptArrArr = ArrayWrapper[ExampleNestedOptArrArrArr]
      type ActivityActions = Option[String]
      type ExampleNestedOptArr = ArrayWrapper[ExampleNestedOptArrArr]
      type ExampleNestedOpt = ArrayWrapper[ExampleNestedOptArr]

      case class Activity(actions: ActivityActions) 
      case class Example(messages: ExampleMessages, nested: ExampleNested) 
  }


  ```


  ## Swagger Validations


  Swagger API definitions allow for constraints to be put on parameter types. 

  We have already seen the `required` constraint, used to mark a parameter or specific field within 

  a domain definition to be required upon input. Additional constraints, as defined by the 

  [Parameter Object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameterObject), 

  can be added to your API definition. The Play-Swagger plugin will generate validations for these parameter 

  constraints and make sure that your controller methods are only called if the input of your service 

  complies to those constraints. 


  In the example below, the API definition of the `token` parameter of 

  type `Base64String`, as the form parameter, contains validation rules for the lenght of the perameter as well as a regexp pattern the value of the parameter must confirm to.

  The parameter is also required.


  ```yaml

  ...

  parameters:
        - name: token
          in: formData
          description: oauth2 token
          type: string
          format: byte
          pattern: "[A-Za-z0-9]*"
          minLength: 5
          maxLength: 100
          required: true
  ...

  ```


  Let's take another example:


  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: string
          minLength: 1
          maxLength: 110
          required: false
  ...

  ```


  The `state` parameter is of type string, is not required and has no default value. 

  It is also only allowed to have a state of length between 1 and 110, otherwise it won't pass validation. 

  For the demo purposes, let's change it's type to `integer` and make it required. 


  As the parameter is required now, the `default` value cannot be present. The `maxLength` and `maxLength` validations 

  are not allowed for integer parameters, therefore let's replace them with `minimum` and `maximum` values:
      
  ```yaml

  ...
      get:
        parameters:
        - name: state
          in: query
          description: Any application state to be forwarded back to the frontend
          type: integer
          format: int32
          required: true
          minimum: 2000
          maximum: 2100      
  ...

  ```    



  As we just changed the parameter type, refreshing Swagger UI will, in addition to generating validations 

  for that parameter type, also force a regeneration of the model consistent with the validation. 

  That's nice, but note that it will break the current implementation of the controller class, as the 

  implementation of the `postAction` expects `state` to be of type `String`.


  ![Validation screenshot](/docs/validations-01.png)


  Let's change the implementation. The second parameter `state` is no longer 

  of type `Option[String]` but of type `Int`. We change the implementation to take this fact into the account:


  ```scala

  ...

  val tokenGet = tokenGetAction { input: (String, String, String, Int) =>
      val (redirect_uri, scope, response_type, state) = input
      // ----- Start of unmanaged code area for action  TokenService.tokenGet
      val statePart = s"""state=$state"""
  ...

  }

  ```


  Refreshing Swagger UI and trying out a couple of integer values for `state` shows that the service 

  now excepts value within the range `[2000..2100]`, but returns a descriptive error when outside. I.e.


  ```json

  [
    {
      "messages": [
        "error.max"
      ],
      "args": [
        2100
      ]
    }
  ]

  ```


  ## Test Generators


  Having an API definition as the single source of truth in your codebase—with formal type specification of the in- and output values, 

  including their constraints—provides for a powerful feature when it comes to testing. 

  The Play-Swagger plugin automates the creation of test data generators that can drive property checks directly 

  from the API specification. Play-Swagger derives data generators and unit tests directly from your Swagger API specification.


  Property-based testing using generator-driven property checks is a cool way to test the validity of your application 

  according to the rules or properties that apply to your application. Properties, in this sense, are high-level 

  specifications that should always hold for a range of data values. The idea is to generate a range of data 

  values for your data types and let (also generated) tests assert that the properties of these data types hold. 

  A Swagger API definition contains formal type definitions _and_ constraints for all data values, and the Play-Swagger 

  plugin maps these types on managed Scala source code that represents the data types, so it is also possible to map 

  these API definitions on test data generators that provide a range of data values for these types. 

  The plugin does exactly that: It creates managed test data generators and unit tests that assert whether your 

  application still complies to your specification. It does so in a single-source-of-truth manner, 

  taking the Swagger API definition as the source.


  We employ the ScalaTest [property-based testing](http://www.scalatest.org/user_guide/property_based_testing) 

  functionality as the framework to generate the data values, and map the data types of our API definition on 

  the test data generators that are created by the plugin. ScalaTest provides 

  `org.scalacheck.Gen` and `org.scalacheck.Arbitrary` objects with utility methods that help generate a range of 

  (possibly arbitrary) data values for common Scala types and primitives. The Play-Swagger plugin uses these 

  methods to create test data generators specific for the data types of our API definition. When necessary, 

  it composes generators from primitive types into generators for complex types, so that you end up with a 

  set of generators that provide test data for your complete API.


  As an example, let's take the API definition for the simple pet store—trimmed down to the parts defining 

  parameter types, and (for brevity) omitting any non-data definitions and error definitions:


  ```yaml

  paths:
    /pets:
      get:
        parameters:
          - name: limit
            in: query
            required: false
            type: integer
            format: int32
        responses:
          default:
            description: error payload
      post:
        parameters:
          - name: pet
            in: body
            required: true
            schema:
              $ref: '#/definitions/newPet'
        responses:
          default:
            description: error payload
    /pets/{id}:
      get:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
      delete:
        parameters:
          - name: id
            in: path
            required: true
            type: integer
            format: int64
        responses:
          default:
            description: error payload
  definitions:
    pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    newPet:
        required:
          - name
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          tag:
            type: string
  ```


  The `get` method on path `/pets` takes an optional `limit` parameter of common type `integer`. 

  The `post` method takes a `newPet` body parameter comprising of the primitive attributes `id`, `name` and `tag`, 

  subsequently of common types `long` and `string` (twice). Of these, only the `name` attribute is mandatory. 

  The `get` method on the path `/pets/{id}` takes the path parameter `id` of common type `long` and returns 

  an array of `pet`s consisting of the same attributes and primitive types as a `newPet` - but this time 

  with both `name` and `id` being mandatory. This specification maps to the following managed Scala domain model code:



  ```scala

  package example


  package object yaml {

      import de.zalando.play.controllers.PlayPathBindables

      type PetsIdDeleteResponsesDefault = Null
      type NewPetTag = Option[String]
      type PetsIdDeleteId = Long
      type PetsGetLimit = Option[Int]
      type NewPetId = Option[Long]

      case class Pet(id: Long, name: String, tag: NewPetTag) 
      case class NewPet(name: String, id: NewPetId, tag: NewPetTag) 

      implicit val bindable_OptionIntQuery = PlayPathBindables.createOptionQueryBindable[Int]
  }

  ```


  We want to have test data generators that generate an arbitrary range of values for the model 

  code shown above - composed from primitive, and sometimes optional, data definitions. 

  The Play-Swagger plugin does this by generating two Scala objects: one for the Swagger API definition, 

  and one for the API path parts. Each object contains generator factory methods for the defined data types, 

  prefixed by `create`, which returns a generator function. A generator function takes a given integer count 

  and returns a generated amount of test data for the data type it was created for.


  Data types are composed from primitive types, Scala optional types, and possibly more complex types. 

  Test data values for the primitive types are generated arbitrarily, employing the ScalaCheck 

  `org.scalacheck.Arbitrary.arbitrary[T]` method (the type parameter, replaced with Scala's primitive type, 

  on which the Swagger common type is mapped).


  In the code shown below, starting with primitive leaf data values, the `pet` parameter's attribute `id` 

  of common type `long` is arbitrarily generated from a `scala.Long`.  Note that the `id` attribute is optional, 

  though, for the `newPet` definition. As with the generated model, we created a `NewPetIdGenerator` value that 

  takes an arbitrarily generated `scala.Long` id value and generates an option value from it, employing the 

  ScalaCheck `org.scalacheck.Gen.option[T]`.  This generator will generate test data values comprising of `None` 

  and `Some` arbitrarily id value. It's probably best to let the Scala generator code speak for itself. 

  Note how it composes according to the same structure as the Scala model code.


  ```scala

  package example.yaml


  import org.scalacheck.Gen

  import org.scalacheck.Arbitrary

  import play.api.libs.json.scalacheck.JsValueGenerators

  import Arbitrary._


  object Generators extends JsValueGenerators {

      def createNullGenerator = _generate(NullGenerator)
      def createNewPetTagGenerator = _generate(NewPetTagGenerator)
      def createLongGenerator = _generate(LongGenerator)
      def createPetsGetLimitGenerator = _generate(PetsGetLimitGenerator)
      def createNewPetIdGenerator = _generate(NewPetIdGenerator)

      def createPetGenerator = _generate(PetGenerator)
      def createNewPetGenerator = _generate(NewPetGenerator)

      def NullGenerator = arbitrary[Null]
      def NewPetTagGenerator = Gen.option(arbitrary[String])
      def LongGenerator = arbitrary[Long]
      def PetsGetLimitGenerator = Gen.option(arbitrary[Int])
      def NewPetIdGenerator = Gen.option(arbitrary[Long])

      def PetGenerator = for {
          id <- arbitrary[Long]
          name <- arbitrary[String]
          tag <- NewPetTagGenerator
      } yield Pet(id, name, tag)
      def NewPetGenerator = for {
          name <- arbitrary[String]
          id <- NewPetIdGenerator
          tag <- NewPetTagGenerator
      } yield NewPet(name, id, tag)

      def _generate[T](gen: Gen[T]) = (count: Int) => for (i <- 1 to count) yield gen.sample
  }

  ```


  A `PetGenerator` and `NewPetGenerator` are created and implemented by the plugin as a for comprehension 

  that generates data values for each attribute, yielding an instance of a test pet. Other generators follow 

  the same pattern but, if necessary, delegate to different child generators. From this we acquire a set of 

  test data generators to implement our property-based testing.


  Running the test is as simple as running a test set from sbt. Just type `test` from your `sbt` prompt.


  # Building a Play-Swagger Plugin


  To build a plugin, do the following:


  - Clone the repository to your local filesystem

  - Run ```sbt +publishLocal``` in the Play-Swagger directory. This will publish the plugin into your local ivy repository


  To use the plugin in a plain Play project:


  - Create a new Play-Swagger project using activator template, for example: ```activator new hello-world play-swagger-service```

  - Take a look at the `project/plugins.sbt` of the generated project and add required plugins and resolvers to the `project/plugins.sbt` of your Play project

  - Do the same for `build.sbt`

  - Put a Swagger specification with a ```.yaml``` or ```.json``` extension into the ```conf``` directory

  - Add a specification link (`->`) to the play's routes file



  ## Plugin Architecture


  Ths Play-Swagger plugin has a three-tier architecture:


  * specification - this tier is responsible for finding and parsing a specification and converting it into the raw AST format

  * normalisation - this tier performs a couple of optimisations on the AST including type deduplication, flattening and parameter dereferencing

  * generation - a final step including transformation of the AST into the source-code related data and generation of source code from it   


  The separation of the specification and generation tiers allows for plugging in different specification standards 

  and generating source code for different frameworks.



  ## Plugin Project Structure


  There are a couple of sub-projects:


  * `swagger-model` - A standalone Scala Swagger model and a Jackson parser for it. Can be used by another projects

  * `api` - This is the project that's automatically added to the runtime classpath of any projects that use this plugin.

  * `swagger-parser` - A converter of the Swagger model to the internal AST of the plugin

  * `api-first-core` - This is a core of the plugin with minimal functionality. It includes defining an AST structure and some transformations on AST.  

  * `play-scala-generator` - The standalone generator for transforming an AST into the skeleton of Play-Scala application. 

  * `plugin` - A coupble of sbt plugins, one for each tier:
      - `ApiFirstSwaggerParser` - a plugin wrapping Swagger parsing part 
      - `ApiFirstCore` - a wrapper for AST-related functionality
      - `ApiFirstPlayScalaCodeGenerator` - a wrapper for the Play-Scala generator

  Because of the modular plugin architecture, all modules must be enabled separatly in sbt's build.sbt. 

  It is also necessary to configure which parser(s) must be used by the plugin, like that: 


  ```scala

  lazy val root = (project in file(".")).enablePlugins(PlayScala, ApiFirstCore, ApiFirstPlayScalaCodeGenerator, ApiFirstSwaggerParser)


  apiFirstParsers := Seq(ApiFirstSwaggerParser.swaggerSpec2Ast.value).flatten

  ```


  Please take a look at activator template's configuration for complete example.



  ## Custom Templates For Code Generation


  The PlayScala generator supports custom templates. In order to override default template for some of the components,

  please provide your custom template named in accordance to the following list:

      * `play_scala_test.mustache` - for unit tests
      * `play_validation.mustache` - for validators 
      * `generators.mustache` - for test data generators
      * `model.mustache` - for model classes and query and path bindables
      * `play_scala_controller_base.mustache` - for play controller bases 
      * `play_scala_controller_security.mustache` - for security adapters used by controller bases
      * `play_scala_form_parser.mustache` - for form parsers used by the controller bases
      * `play_scala_controller.mustache` - for play controller skeletons supposed to be augmented by the programmer
      * `play_scala_response_writers.mustache` - for custom serializers to be augmented by the programmer
      * `play_scala_security_extractors.mustache` - for custom security extractors to be augmented by the programmer 


  Please be aware that generated artifacts need to preserve some specific shape in order to be compiled together without errors.


  The location where custom templates reside needs to be configured by overriding the plugin setting `playScalaCustomTemplateLocation`.


  For example following configuration will set this place to be `conf/templates` folder of the project:

  ```scala

  playScalaCustomTemplateLocation := Some(((resourceDirectory in Compile) / "templates").value)

  ```



  ## Plugin Developing


  sbt doesn't allow sub-projects to depend on each other as sbt plugins. To test an sbt plugin, you need a separate 

  project.  This project is `swagger-tester`.  To test your changes as you're developing the plugin, cd into this 

  directory, and run sbt. This project uses an sbt `ProjectRef` to the sbt plugin, which means you don't need to 

  `publishLocal` the plugin after each change. Just run `reload` in the sbt console, and it will pick up your changes.


  The play-swagger plugin provides a couple of commands useful for development: 


  * `apiFirstPrintDenotations` - outputs a common names of different parts of the AST as they are intended to be used in generated Scala code

  * `apiFirstPrintRawAstTypes` - outputs all type definitions as they read from the specification before type optimisations

  * `apiFirstPrintRawAstParameters` - outputs all parameters definitions before type optimisations

  * `apiFirstPrintFlatAstTypes` - outputs type definitions after type optimisations

  * `apiFirstPrintFlatAstParameters` - outputs parameter definitions after type optimisations



  ## Plugin Testing


  We're using the sbt scripted framework for testing. You can find the tests in `plugin/src/sbt-test`, and run them 

  by running `scripted` in the sbt console.



  ## Code quality


  There are some quality checks embedded into the build script:

  * the source code is (re)formatted using [scalariform](https://github.com/scala-ide/scalariform) each time it is compiled (currently deactivated).

  * [`scalastyle`](http://www.scalastyle.org) sbt command shall be used to perform code style checks before putting changes into the repository.

  * [`lint:compile`](https://github.com/HairyFotr/linter) sbt command shall be used to perform static code analysis before putting changes into the repository.

  * code coverage for api and compiler modules can be executed by issuing `sbt clean coverage test` command for these 

  projects. Coverage statistics can be generated using `coverageReport` sbt command. 
casualjim/go-swagger: >
  # Swagger 2.0 [![Build
  Status](https://circleci.com/gh/go-swagger/go-swagger.svg?style=shield)](https://circleci.com/gh/go-swagger/go-swagger)
  [![Build
  status](https://ci.appveyor.com/api/projects/status/x377t5o9ennm847o/branch/master?svg=true)](https://ci.appveyor.com/project/casualjim/go-swagger/branch/master)
  [![codecov](https://codecov.io/gh/go-swagger/go-swagger/branch/master/graph/badge.svg)](https://codecov.io/gh/go-swagger/go-swagger)
  [![GitHub
  version](https://badge.fury.io/gh/go-swagger%2Fgo-swagger.svg)](https://badge.fury.io/gh/go-swagger%2Fgo-swagger)

  [![Slack Status](https://slackin.goswagger.io/badge.svg)](https://slackin.goswagger.io)

  [![license](http://img.shields.io/badge/license-Apache%20v2-orange.svg)](https://raw.githubusercontent.com/swagger-api/swagger-spec/master/LICENSE)

  [![GoDoc](https://godoc.org/github.com/go-swagger/go-swagger?status.svg)](http://godoc.org/github.com/go-swagger/go-swagger)

  [![Docker Repository on Quay](https://quay.io/repository/goswagger/swagger/status "Docker Repository on Quay")](https://quay.io/repository/goswagger/swagger)

  [![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_shield)

  [![GolangCI](https://golangci.com/badges/github.com/go-swagger/go-swagger.svg)](https://golangci.com)

  [![Go Report Card](https://goreportcard.com/badge/github.com/go-swagger/go-swagger)](https://goreportcard.com/report/github.com/go-swagger/go-swagger)


  This package contains a golang implementation of Swagger 2.0 (aka [OpenAPI 2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md)):

  it knows how to serialize and deserialize swagger specifications.


  [Swagger](https://swagger.io/) is a simple yet powerful representation of your RESTful API.<br>


  > ![swagger](https://raw.githubusercontent.com/go-swagger/go-swagger/master/docs/favicon-16x16.png) **Swagger in a nutshell**

  >

  > With the largest ecosystem of API tooling on the planet, thousands of developers are supporting Swagger in almost every modern programming language and deployment environment.

  >

  > With a Swagger-enabled API, you get interactive documentation, client SDK generation and discoverability. We created Swagger to help fulfill the promise of APIs.

  >

  > Swagger helps companies like Apigee, Getty Images, Intuit, LivingSocial, McKesson, Microsoft, Morningstar, and PayPal build the best possible services with RESTful APIs. Now in version 2.0, Swagger is more enabling than ever. And it's 100% open source software.


  ##  Features

  `go-swagger` brings to the go community a complete suite of fully-featured, high-performance, API components to  work with a Swagger API: server, client and data model.


  * Generates a server from a swagger specification

  * Generates a client from a swagger specification

  * Supports most features offered by jsonschema and swagger, including polymorphism

  * Generates a swagger specification from annotated go code

  * Additional tools to work with a swagger spec

  * Great customization features, with vendor extensions and customizable templates


  Our focus with code generation is to produce idiomatic, fast go code, which plays nice with golint, go vet etc.


  ##  Project status

  `go-swagger` is now feature complete and has stabilized its API.


  Most features and building blocks are now in a stable state, with a rich set of CI tests.


  The go-openapi community actively continues bringing fixes and enhancements to this code base.


  There is still much room for improvement: contributors and PR's are welcome. You may also get in touch with maintainers on [our slack channel](https://slackin.goswagger.io).


  ## Documentation

  <https://goswagger.io>


  ## FAQ

  Q&A contributed by the community:


  <https://goswagger.io/faq/>


  ## How is this different from go generator in swagger-codegen?

  **tl;dr** The main difference at this moment is that this one actually works...


  The swagger-codegen project only generates a _workable_ go client and even there it will only support flat models.

  Further, the go server generated by swagger-codegen is mostly a stub.


  > **Motivation**

  > Why is this not done as a part of the swagger-codegen project? Because:

  >

  > * I don't really know java very well and so I'd be learning both java and the object model of the codegen which was in heavy flux as opposed to doing go and I really wanted to go experience of designing a large codebase with it.

  > * Go's super limited type system makes it so that it doesn't fit well in the model of swagger-codegen

  > * Go's idea of polymorphism doesn't reconcile very well with a solution designed for languages that actually have inheritance and so forth.

  > * For supporting types like `[][][]map[string][][]int64` I don't think it's possible with mustache

  >

  > I gravely underestimated the amount of work that would be involved in making something useful out of it.

  > My personal mission: I want the jvm to go away, it was great way back when now it's just silly (vm in container on vm in vm in container)


  ## What's inside?


  Here is an outline of available features (see the full list [here](https://goswagger.io/features.html)):


  - An object model that serializes swagger-compliant yaml or json

  - A tool to work with swagger
    - Serve swagger UI for any swagger spec file
    - Flexible code generation, with customizable templates
      - Generate go API server based on swagger spec
      - Generate go API client from a swagger spec
    -  Validate a swagger spec document, with extra rules outlined [here](https://github.com/apigee-127/sway/blob/master/docs/README.md#semantic-validation)
    -  Generate a spec document based on annotated code
  - A runtime to work with Rest API and middlewares
    - Serve spec
    - Routing
    - Validation
    - Authorization
    - Swagger docs UI
    - A Diff tool which will cause a build to fail if a change in the spec breaks backwards compatibility

  There is more to that...


  - A [typed JSON Schema implementation](https://goswagger.io/use/model.html), supporting most Draft 4 features

  - Extended string and numeric formats: [strfmt](https://github.com/go-openapi/strfmt)

  - Utilities to work with JSON, convert data types and pointers: [swag](https://github.com/go-openapi/swag)

  - A jsonschema (Draft 4) validator, with full $ref support: [validate](https://github.com/go-openapi/validate)

  - Custom validation interface


  ## Installing

  `go-swagger` is available as binary or docker releases as well as from source: [more details](https://goswagger.io/install.html).


  ## Use-cases

  The main package of the toolkit, go-swagger/go-swagger, provides command line tools to help working with swagger.


  The toolkit is highly customizable and allows endless possibilities to work with OpenAPI2.0 specifications.


  Beside the go-swagger CLI tool and generator, the [go-openapi packages](https://github.com/go-openapi) provide modular functionality to build custom solutions on top of OpenAPI.


  The CLI supports shell autocompletion utilities: see [here](https://goswagger.io/cli_helpers.html).


  ### Serve specification UI

  Most basic use-case: serve a UI for your spec:


  ```

  swagger serve https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Validate a specification

  To [validate](https://goswagger.io/usage/validate.html) a Swagger specification:


  ```

  swagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json

  ```


  ### Generate an API server

  To generate a [server for a swagger spec](https://goswagger.io/generate/server.html) document:


  ```

  swagger generate server [-f ./swagger.json] -A [application-name [--principal [principal-name]]

  ```


  ### Generate an API client

  To generate a [client for a swagger spec](https://goswagger.io/generate/client.html) document:


  ```

  swagger generate client [-f ./swagger.json] -A [application-name [--principal [principal-name]]

  ```


  ### Generate a spec from source

  To generate a [swagger spec document for a go application](https://goswagger.io/generate/spec.html):


  ```

  swagger generate spec -o ./swagger.json

  ```


  ### Generate a data model

  To generate model structures and validators exposed by the API:


  ```

  swagger generate model --spec={spec}

  ```


  ### Transform specs


  There are [several commands](https://goswagger.io/use/transform.html) allowing you to transform your spec.


  Resolve and expand $ref's in your spec as inline definitions:

  ```

  swagger expand {spec}

  ```


  Flatten your spec: all external $ref's are imported into the main document and inline schemas reorganized as definitions.

  ```

  swagger flatten {spec}

  ```


  Merge specifications (composition):

  ```

  swagger mixin {spec1} {spec2}

  ```


  ### Compare specs


  The  diff command allows you to check backwards compatibility.

  Type ```swagger diff --help``` for info.


  ```

  swagger diff {spec1} {spec2}

  ```


  ## Try it


  Try `go-swagger` in a free online workspace using Gitpod:


  [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/go-swagger/go-swagger)


  ## Licensing


  The toolkit itself is licensed as Apache Software License 2.0. Just like swagger, this does not cover code generated by the toolkit. That code is entirely yours to license however you see fit.



  [![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgo-swagger%2Fgo-swagger?ref=badge_large)


  ## Who is using this project?


  To name but a few... (feel free to sign in there if you are using this project):


  > In the list below, we tried to figure out the public repos where you'll find examples on how to use `go-swagger` and `go-openapi`:


  [3DSIM](https://github.com/3DSIM)  

  [Alibaba PouchAPI](https://github.com/alibaba/pouch)  

  [CheckR](https://github.com/checkr/flagr)  

  [Cilium](https://github.com/cilium/cilium)  

  [CoreOS](https://github.com/coreos/go-quay)  

  [NetBox Community](https://github.com/netbox-community/go-netbox)  

  [EVE Central](https://github.com/evecentral)  

  Iron.io

  [JaegerTracing](https://github.com/jaegertracing/jaeger)  

  [Kubernetes-Helm](https://github.com/kubernetes-helm/monocular)  

  [Kubernetes](https://godoc.org/k8s.io/apiextensions-apiserver/pkg/apiserver)  

  [ManifoldCo](https://github.com/manifoldco)  

  [Metaparticle.io](https://github.com/metaparticle-io/metaparticle-ast)  

  [Netlify](https://github.com/netlify/open-api)  

  [Nutanix](https://github.com/nutanix)  

  [OAS2](https://github.com/hypnoglow/oas2)  

  [OVH API](https://github.com/appscode/go-ovh)  

  [RackHD](https://github.com/RackHD/RackHD)  

  [ScaleFT](https://github.com/authclub/billforward)  

  [StratoScale](https://github.com/Stratoscale/swagger)  

  [Terraform Provider OpenAPI](https://github.com/dikhan/terraform-provider-openapi)  

  [VMWare](https://github.com/vmware/dispatch)  

  ...


  ## Note to users migrating from older releases


  ### Using 0.5.0


  Because 0.5.0 and master have diverged significantly, you should checkout the tag 0.5.0 for go-swagger when you use the currently released version.


  ### Migrating from 0.5.0 to 0.6.0


  You will have to rename some imports:


  ```

  github.com/go-swagger/go-swagger/httpkit/validate to github.com/go-openapi/validate

  github.com/go-swagger/go-swagger/httpkit to github.com/go-openapi/runtime

  github.com/naoina/denco to github.com/go-openapi/runtime/middleware/denco

  github.com/go-swagger/go-swagger to github.com/go-openapi

  ```


  ### Migrating from 0.12 to 0.13


  Spec flattening and $ref resolution brought breaking changes in model generation, since all complex things generate their own definitions.


  ### Migrating from 0.14 to 0.15


  Generated servers no more import the following package (replaced by go1.8 native functionality):

  ```

  github.com/tylerb/graceful

  ```


  Spec flattening now defaults to minimal changes to models and should be workable for 0.12 users.


  Users who prefer to stick to 0.13 and 0.14 default flattening mode may now use the `--with-flatten=full` option.


  Note that the `--skip-flatten` option has been phased out and replaced by the more explicit `--with-expand` option.
krakenjs/swaggerize-hapi: >
  # hapi-openapi


  [![Build Status](https://travis-ci.org/krakenjs/hapi-openapi.svg?branch=master)](https://travis-ci.org/krakenjs/hapi-openapi)

  [![NPM version](https://badge.fury.io/js/hapi-openapi.png)](http://badge.fury.io/js/hapi-openapi)


  ### Note: this project was renamed from 'swaggerize-hapi' to 'hapi-openapi'.


  `hapi-openapi` is a design-driven approach to building RESTful services with [OpenAPI (Swagger)](http://openapis.org) and [Hapi](http://hapijs.com) (OpenAPI 3.0 support coming soon).


  `hapi-openapi` provides the following features:


  - API schema validation.

  - Routes based on the OpenAPI document.

  - API documentation route.

  - Input validation.


  ### Why "Design Driven"


  There are already a number of modules that help build RESTful APIs for node with OpenAPI. However,

  these modules tend to focus on building the documentation or specification as a side effect of writing

  the application business logic.


  `hapi-openapi` begins with the OpenAPI document first. This facilitates writing APIs that are easier to design, review, and test.


  At runtime, `hapi-openapi` uses the API specification to build routes from previously defined paths. This ensures that everything specified is what is implemented.


  ### Quick Start with a Generator


  This guide will let you go from an `api.json` to a service project in no time flat.


  First install `generator-swaggerize` (and `yo` if you haven't already):


  ```bash

  $ npm install -g yo

  $ npm install -g generator-swaggerize

  ```


  Now run the generator.


  ```bash

  $ mkdir petstore && cd $_

  $ yo swaggerize

  ```


  Follow the prompts (note: make sure to choose `hapi` as your framework choice).


  You now have a working api and can use something like [SwaggerHub](https://swaggerhub.com/?_ga=2.118604234.2143392684.1515431456-1673703125.1481054263) to explore it.


  ### Manual Usage


  ```javascript

  const Hapi = require('@hapi/hapi');


  const server = new Hapi.Server();


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: Path.join(__dirname, './config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### Hapi Plugin


  The plugin will be registered as `openapi` on `server.plugins` with the following exposed:


  - `getApi()` - the resolved Swagger document.

  - `setHost(host)` - a helper function for setting the `host` property on the `api`.


  ### Configuration Options


  - `api` - a path to a valid OpenAPI 2.0 document, or a valid document in the form of an object.

  - *deprecated* `docspath` - the path to expose api docs for swagger-ui, etc. Defaults to `/api-docs`.

  - `docs` - an object used to configure the api docs route.
      - `path` - the path to expose api docs for swagger-ui, etc. Defaults to `/api-docs`.
      - `auth` - options auth config for this route.
      - `stripExtensions` - strip vendor extensions from docs. Defaults to true.
      - `prefixBasePath` - prefix path of docs with he OpenAPI document's `basePath` value. Defaults to true.
  - `handlers` - either a string directory structure for route handlers, object, or not set if using `x-hapi-handler`.

  - `extensions` - an array of file extension types to use when scanning for handlers. Defaults to `['js']`.

  - `vhost` - *optional* domain string (see [hapi route options](http://hapijs.com/api#route-options)).

  - `cors` - *optional* cors setting (see [hapi route options](http://hapijs.com/api#route-options)).

  - `outputvalidation` - *optional* validate response data.


  ### Mount Path


  Api `path` values will be prefixed with the OpenAPI document's `basePath` value.  This behavior can be negated if you set the option `docs.prefixBasePath` to `false`.


  ### Handlers Directory


  The `options.handlers` option specifies a directory to scan for handlers. These handlers are bound to the api `paths` defined in the OpenAPI document.


  ```

  handlers
    |--foo
    |    |--bar.js
    |--foo.js
    |--baz.js
  ```


  Will route as:


  ```

  foo.js => /foo

  foo/bar.js => /foo/bar

  baz.js => /baz

  ```


  ### Path Parameters


  The file and directory names in the handlers directory can also represent path parameters.


  For example, to represent the path `/users/{id}`:


  ```shell

  handlers
    |--users
    |    |--{id}.js
  ```


  This works with directory names as well:


  ```shell

  handlers
    |--users
    |    |--{id}.js
    |    |--{id}
    |        |--foo.js
  ```


  To represent `/users/{id}/foo`.


  ### Handlers File


  Each provided javascript file should export an object containing functions with HTTP verbs as keys.


  Example:


  ```javascript

  module.exports = {
      get: function (req, h) { ... },
      put: function (req, h) { ... },
      ...
  }

  ```


  Optionally, `pre` handlers can be used by providing an array of handlers for a method:


  ```javascript

  module.exports = {
      get: [
          function p1(req, h) { ... },
          function handler(req, h) { ... }
      ],
  }

  ```


  ### Handlers Object


  The directory generation will yield this object, but it can be provided directly as `options.handlers`.


  Example:


  ```javascript

  {
      'foo': {
          'get': function (req, h) { ... },
          'bar': {
              'get': function (req, h) { ... },
              'post': function (req, h) { ... }
          }
      }
      ...
  }

  ```


  ### X-Hapi-Handler


  Alternatively the API document can set `x-hapi-handler` attribute on each defined `paths` element if `handlers` is not defined.


  Example:


  ```

  "/pets/{id}": {
      "x-hapi-handler": "./routes/pets-by-id.js",
      .
      .
      .
  ```


  This will construct a `handlers` object from the given `x-hapi-handler` files.


  ### X-Hapi-Options


  There is now support at the operations level for `x-hapi-options` which represent individual [Hapi Route Optijons](https://github.com/hapijs/hapi/blob/master/API.md#route-options).


  This support is limited to configuration supported by the JSON file type.


  Example:


  ```

  "/internal": {
    "post": {
      "x-hapi-options": {
        "isInternal": true
      }
      .
      .
      .
  ```


  ### Authentication


  Support for OpenAPI [security schemes](http://swagger.io/specification/#securitySchemeObject) requires that relevant authentication scheme and strategy are registered before the hapi-openapi plugin. See the [hapi docs](http://hapijs.com/tutorials/auth) for information about authentication schemes and strategies.


  The name of the hapi authentication strategy is expected to match the name field of the OpenAPI [security requirement object](http://swagger.io/specification/#securityRequirementObject).


  Example:


  ```yaml

  securityDefinitions:
    api_key:
      type: apiKey
      name: Authorization
      in: header
  paths:
    '/users/':
      get:
        security:
          - api_key: []
  ```


  ```javascript

  const server = new Hapi.Server();


  await server.register({ plugin: AuthTokenScheme });


  server.auth.strategy('api_key', 'auth-token-scheme', {
      validateFunc: async function (token) {
        // Implement validation here, return { credentials, artifacts }.
      }
  });


  await server.register({
      plugin: require('hapi-openapi'),
      options: {
          api: require('./config/pets.json'),
          handlers: Path.join(__dirname, './handlers')
      }
  });

  ```


  ### X-Hapi-Auth


  Alternatively it may be easier to automatically register a plugin to handle registering the necessary schemes and strategies.


  **x-hapi-auth-schemes**


  The root document can contain an `x-hapi-auth-schemes` object specifying different plugins responsible for registering auth schemes.


  Example:


  ```

  "x-hapi-auth-schemes": {
      "apiKey": "../lib/xauth-scheme.js"
  }

  ```


  This plugin will be passed the following options:


  - `name` - the auth scheme name, in this example `apiKey`.


  **x-hapi-auth-strategy**


  The `securityDefinitions` entries can contain an `x-hapi-auth-strategy` attribute pointing to a plugin responsible for registering auth strategies.


  Example:


  ```

  "securityDefinitions": {
    "api_key": {
      "x-hapi-auth-strategy": "../lib/xauth-strategy.js",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  }

  ```


  The plugin will be passed the following options:


  - `name` - the `securityDefinitions` entry's key. In this example, `api_key`. This is typically used as the strategy name.

  - `scheme` - the `securityDefinitions` `type`. In this example, `apiKey`. This should match a `x-hapi-auth-scheme` name.

  - `where` - `securityDefinitions` entry `in` attribute. This is search for the `lookup` value; in this example `header`.

  - `lookup` - `securityDefinitions` entry `name` attribute. Used as the name to look up against `where`.


  The way you can make these play together is that for every `type`, a scheme exists that delegates some lookup or evaluation to the appropriate strategy.


  Example:


  ```javascript

  //xauth-scheme.js


  const register = function (server, { name  }) {
      server.auth.scheme(name /*apiKey*/, (server, /* options received from the strategy */ { validate }) => {
          return {
              authenticate: async function (request, h) {
                  return h.authenticated(await validate(request));
              }
          };
      });
  };


  module.exports = { register, name: 'x-hapi-auth-scheme' };

  ```


  and


  ```javascript

  //xauth-strategy.js


  const Boom = require('@hapi/boom');


  const register = function (server, { name, scheme, where, lookup }) {
      server.auth.strategy(name, /* the scheme to use this strategy with */ scheme, {
          //Define a validate function for the scheme above to receive
          validate: async function (request) {
              const token = request.headers[lookup];

              //Some arbitrary example
              if (token === '12345') {
                  return { credentials: { scope: ['read'] }, artifacts: { token } };
              }

              throw Boom.unauthorized();
          }
      });
  };


  module.exports = { register, name: 'x-hapi-auth-strategy' };

  ```
AntXlab/pyswagger: >+
  pyswagger

  =========


  [![Build Status](https://travis-ci.org/mission-liao/pyswagger.svg?branch=master)](https://travis-ci.org/mission-liao/pyswagger)

  [![Coverage Status](https://coveralls.io/repos/mission-liao/pyswagger/badge.svg?branch=master&style=flat)](https://coveralls.io/r/mission-liao/pyswagger?branch=master)


  A python client for [Swagger](https://helloreverb.com/developers/swagger) enabled REST API. It wouldn't be easier to

  try Swagger REST API by [Swagger-UI](https://github.com/wordnik/swagger-ui). However, when it's time to **unittest**

  your API, the first option you find would be [Swagger-codegen](https://github.com/wordnik/swagger-codegen), but the better option is us.


  This project is developed after [swagger-py](https://github.com/digium/swagger-py), which is a nicely implemented one, and inspired many aspects of this project. Another project is [flex](https://github.com/pipermerriam/flex), which focuses on parameter validation, try it if you can handle other parts by yourselves. For other projects related to Swagger tools in python, check [here](https://github.com/swagger-api/swagger-spec#python).


  **pyswagger** is much easier to use (compared to swagger-codegen, you don't need to prepare a scala environment) and tries hard to **fully supports** [Swagger Spec](https://helloreverb.com/developers/swagger) in all aspects.


  - [NEWs: upcoming support for OpenAPI 3.0](docs/md/news.md)

  - [Features](README.md#features)

  - [Tutorial](README.md#tutorial)

  - [Quick Start](README.md#quick-start)

  - [Installation](README.md#installation)

  - [Reference](README.md#reference)

  - [Contributors](README.md#contributors)

  - [Contribution Guideline](README.md#contribution-guildeline)

  - [FAQ](docs/md/faq.md)

  - [Changes](CHANGES.md)


  ---------


  ## Features

  - convert Swagger Document from older version to newer one. (ex. convert from 1.2 to 2.0)

  - support Swagger **1.2**, **2.0** on python ~~2.6~~, **2.7**, **3.3**, **3.5**, **3.6**

  - support YAML via [Pretty-YAML](https://github.com/mk-fg/pretty-yaml)

  - support $ref to **External Document**, multiple swagger.json will be organized into a group of App. And external document with self-describing resource is also supported (refer to [issue](https://github.com/swagger-api/swagger-spec/issues/219)).

  - type safe, input/output are converted to python types according to [Data Type](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#43-data-types) described in Swagger. You don't need to touch any json schema when using pyswagger. Limitations like **minimum/maximum** or **enum** are also checked. **Model inheritance** also supported.

  - provide function **App.validate** to check validity of the loaded API definition according to spec.

  - builtin client implementation based on various http clients in python. For usage of these clients, please refer to `pyswagger.tests.contrib.client` for details
    - [requests](https://github.com/kennethreitz/requests)
    - [tornado.httpclient.AsyncHTTPClient](http://tornado.readthedocs.org/en/latest/httpclient.html)
    - [flask.testing.FlaskClient](http://flask.pocoo.org/docs/0.10/api/#flask.testing.FlaskClient)
    - [webapp2](http://webapp2.readthedocs.io/en/latest/guide/testing.html)
  - not implemented parts, fire me a bug if you need it
    - [ ] Swagger 2.0
      - [ ] Schema.pattern
      - [ ] Scheme.patternProperties
      - [ ] Schema.readonly
      - [ ] Schema.allowEmptyValue
      - [ ] A scanner to validate schema
    - [ ] A WebSocket client
    - [ ] dump extension field

  ---------


  ## Tutorial


  - [Initialization](docs/md/tutorial/init.md)

  - [Making a Request](docs/md/tutorial/request.md)

  - [Access the Response](docs/md/tutorial/response.md)

  - [Testing a Local Server](docs/md/tutorial/local.md)

  - [Converting Document into another version](docs/md/tutorial/converter.md)

  - [Exntending Primitive Factory for user-defined primitives](docs/md/tutorial/extend_prim.md)

  - [Rendering Random Requests for BlackBox Testing](docs/md/tutorial/render.md)

  - [Operation MIME Support](docs/md/tutorial/mime.md)

  - [Test with Invalid Input](docs/md/tutorial/invalid.md)

  - [Load Spec from a Restricted Service](docs/md/tutorial/restricted_service.md)

  - [Customized Headers](docs/md/tutorial/customized_headers.md)


  ---------


  ## Quick Start


  Before running this script, please make sure [requests](https://github.com/kennethreitz/requests) is installed on your environment.


  ```python

  from pyswagger import App, Security

  from pyswagger.contrib.client.requests import Client

  from pyswagger.utils import jp_compose


  # load Swagger resource file into App object

  app = App._create_('http://petstore.swagger.io/v2/swagger.json')


  auth = Security(app)

  auth.update_with('api_key', '12312312312312312313q') # api key

  auth.update_with('petstore_auth', '12334546556521123fsfss') # oauth2


  # init swagger client

  client = Client(auth)


  # a dict is enough for representing a Model in Swagger

  pet_Tom=dict(id=1, name='Tom', photoUrls=['http://test']) 

  # a request to create a new pet

  client.request(app.op['addPet'](body=pet_Tom))


  # - access an Operation object via App.op when operationId is defined

  # - a request to get the pet back

  req, resp = app.op['getPetById'](petId=1)

  # prefer json as response

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  assert pet.name == 'Tom'


  # new ways to get Operation object corresponding to 'getPetById'.

  # 'jp_compose' stands for JSON-Pointer composition

  req, resp = app.resolve(jp_compose('/pet/{petId}', base='#/paths')).get(petId=1)

  req.produce('application/json')

  pet = client.request((req, resp)).data

  assert pet.id == 1

  ```


  ---------


  ## Installation

  We support pip installtion.

  ```bash

  pip install pyswagger

  ```


  Additional dependencies must be prepared before firing a request. If you are going to access a remote/local web server, you must install [requests](https://github.com/kennethreitz/requests) first.

  ```bash

  pip install requests

  ```


  If you want to test a local tornado server, please make sure tornado is ready on your environment

  ``` bash

  pip install tornado

  ```


  We also provide native client for flask app, but to use it, flask is also required

  ``` bash

  pip install flask

  ```



  ---------


  ## Reference

  All exported API are described in following sections. ![A diagram about relations between components](https://docs.google.com/drawings/d/1DZiJgl4i9L038UJJp3kpwkWRvcNQktf5h-e4m96_C-k/pub?w=849&h=530)


  - [App](docs/md/ref/app.md)

  - [SwaggerClient](docs/md/ref/client.md)

  - [Security](docs/md/ref/security.md)


  ---------


  ## Contributors

  - [Marcin Goliński](https://github.com/mjgolinski)

  - [Andrey Mikhailov](https://github.com/zlovred)

  - [Telepenin Nikolay](https://github.com/prefer)

  - [WangJiannan](https://github.com/WangJiannan)


  ---------


  ## Contribution Guildeline


  #### report an issue:

  - issues can be reported [here](https://github.com/mission-liao/pyswagger/issues)

  - include swagger.json if possible

  - turn on logging and report with messages on console

  ```python

  import logging

  logger = logging.getLogger('pyswagger')


  formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')


  console = logging.StreamHandler()

  console.setLevel(logging.DEBUG)

  console.setFormatter(formatter)


  logger.addHandler(console)

  logger.setLevel(logging.DEBUG)


  ... your stuff


  ```


  - describe expected behavior, or more specific, the input/output


  #### submit a PR

  - test included

  - only PR to `develop` would be accepted


  env preparation

  ```bash

  pip install -r requirement-dev.txt

  ```


  unit testing

  ```bash

  python -m pytest -s -v --cov=pyswagger --cov-config=.coveragerc pyswagger/tests

  ```

RobWin/swagger2markup: >
  = Swagger2Markup

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup.svg?branch=master["Build Status", link="https://travis-ci.org/Swagger2Markup/swagger2markup"] image:https://coveralls.io/repos/Swagger2Markup/swagger2markup/badge.svg["Coverage Status", link="https://coveralls.io/r/Swagger2Markup/swagger2markup"] image:https://api.codacy.com/project/badge/grade/498a6a39d7d84ff687546359f58ee18d["Codacy code quality", link="https://www.codacy.com/app/robwin/swagger2markup"] image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup/_latestVersion"] image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2", link="http://www.apache.org/licenses/LICENSE-2.0.txt"] image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter", link="https://twitter.com/rbrtwnklr"] image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/RobWin/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]



  == Overview



  NOTE: Dear community,

  unfortunately I can't maintain Swagger2Markup alone anymore. There are many interesting new topics:

  1) Swagger v3 support

  2) Fixing bugs

  2) Merge Swagger2Markup repositories and create a new multi-module repository.

  Any help is welcome.

  Kind regards,

  Robert



  The primary goal of this project is to *simplify the generation of an up-to-date RESTful API documentation by combining documentation that's been hand-written with auto-generated API documentation* produced by https://github.com/swagger-api[Swagger]. The result is intended to be an *up-to-date, easy-to-read, on- and offline user guide*, comparable to https://developer.github.com/v3/[GitHub's API documentation]. The output of Swagger2Markup can be used as an alternative to https://github.com/swagger-api/swagger-ui[swagger-ui] and can be served as static content.

  NOTE: The Swagger Specification has been donated to to the https://openapis.org/[Open API Initiative (OAI)] and has been renamed to the https://github.com/OAI/OpenAPI-Specification[OpenAPI Specification].


  Swagger2Markup converts a Swagger JSON or YAML file into several *AsciiDoc* or *GitHub Flavored Markdown* documents which can be combined with hand-written documentation. The Swagger source file can be located locally or remotely via HTTP. Swagger2Markup supports the Swagger 1.2 and 2.0 specification. Internally it uses the _official_ https://github.com/swagger-api/swagger-parser[swagger-parser] and my https://github.com/RobWin/markup-document-builder[markup-document-builder].


  You can use Swagger2Markup to convert your contract-first Swagger YAML file into a human-readable format and combine it with hand-written documentation. As an alternative, you can choose the code-first approach and use Swagger2Markup together with https://github.com/swagger-api/swagger-core/wiki/Swagger-Core-JAX-RS-Project-Setup-1.5.X[Swagger JAX-RS], https://github.com/springfox/springfox[springfox] or https://github.com/spring-projects/spring-restdocs[spring-restdocs]. If you are Gradle or Maven user, you can also use the https://github.com/RobWin/swagger2markup-gradle-plugin[Swagger2Markup Gradle Plugin] or https://github.com/redowl/swagger2markup-maven-plugin[Swagger2markup Maven Plugin].


  http://asciidoctor.org/docs/asciidoc-writers-guide/[AsciiDoc] is preferable to Markdown as it has more features. AsciiDoc is a text document format for writing documentation, articles, books, ebooks, slideshows, web pages and blogs. AsciiDoc files can be converted to *HTML*, *PDF* and *EPUB*. AsciiDoc is much better suited for describing public APIs than *JavaDoc* or *Annotations*.


  You can generate your HTML5, PDF and EPUB documentation via https://github.com/asciidoctor/asciidoctorj[asciidoctorj] or even better via the https://github.com/asciidoctor/asciidoctor-gradle-plugin[asciidoctor-gradle-plugin] or https://github.com/asciidoctor/asciidoctor-maven-plugin[asciidoctor-maven-plugin].


  The project requires at least JDK 8.


  == Example


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup.PNG[]


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup_definitions.PNG[]


  == Reference documentation

  - http://swagger2markup.github.io/swagger2markup/1.3.3/[Reference Documentation]

  - https://github.com/Swagger2Markup/swagger2markup/blob/master/RELEASENOTES.adoc[Release notes]

  - https://github.com/Swagger2Markup/spring-swagger2markup-demo[Demo using Swagger2Markup, Spring Boot, Springfox and spring-restdocs]


  == Contributing


  === Community contributions


  Pull requests are welcome.


  === Questions

  You can ask questions about Swagger2Markup in https://gitter.im/Swagger2Markup/swagger2markup[Gitter].


  === Bugs

  If you believe you have found a bug, please take a moment to search the existing issues. If no one else has reported the problem, please open a new issue that describes the problem in detail and, ideally, includes a test that reproduces it.


  === Enhancements

  If you’d like an enhancement to be made to Swagger2Markup, pull requests are most welcome. The source code is on GitHub. You may want to search the existing issues and pull requests to see if the enhancement is already being worked on. You may also want to open a new issue to discuss a possible enhancement before work on it begins.


  == Companies who use Swagger2Markup


  * Deutsche Telekom AG

  * https://restlet.com/[Restlet] -- Restlet offers an API platform, covering the https://restlet.com/products/restlet-studio/[design], https://restlet.com/products/dhc/[test] and https://restlet.com/products/apispark/[operation] of Web APIs, and uses Swagger2Markup to generate appealing HTML documentation from API definitions.

  * http://www.qaware.de/[QAware GmbH]

  * http://www.appdirect.com/[AppDirect] -- The leading commerce platform for selling cloud services.

  * http://www.wescale.com[wescale]

  * http://taskassure.com[TaskAssure] 

  * https://www.isaac.nl[ISAAC]

  * https://www.spreadshirt.de[Spreadshirt]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
OpenAPITools/openapi-generator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCD:2AAE2C:510D657:52C86B5:678EE365 and timestamp 2025-01-20 23:59:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
marshmallow-code/apispec: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:5372901:552EC52:678EE3B2 and timestamp 2025-01-21 00:00:50
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
APIs-guru/awesome-openapi3: >+
  # awesome-openapi3
  [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

  A list of awesome projects related to OpenAPI 3.0.x.


  <div align="center">
    <img src="https://github.com/Mermade/awesome-openapi3/blob/master/openapi_awesome1.png?raw=true"/>
    <img src="https://raw.githubusercontent.com/APIs-guru/openapi-directory/master/branding/icon-96x96.png"/>
  </div>


  Why not make your project discoverable by using the topic [openapi3](https://github.com/search?utf8=%E2%9C%93&q=topic%3Aopenapi3&type=Repositories&ref=advsearch&l=&l=) on GitHub and using the hashtags **#openapi3** and **#OASv3** on social media?


  ## Tools


  * Please see [APIs.guru Awesome-OpenAPI3](https://apis.guru/awesome-openapi3/)


  ## Contributing


  The best way to get your project added to the list is to tag it with the github topic `openapi3`. 


  Pull requests should only be for visual / functional changes, or projects/products not hosted on GitHub.


  ## API Access


  * [categories.json](https://apis.guru/awesome-openapi3/api/categories.json)

  * [tools.json](https://apis.guru/awesome-openapi3/api/tools.json)


  The raw data contains OpenAPI 2.0 and Swagger 1.x-related projects.


  ## RSS Feed


  * [feed.xml](https://apis.guru/awesome-openapi3/rss/feed.xml)

Orange-OpenSource/angular-swagger-ui: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CD1:124B:CFED78:D65C07:678EE366 and timestamp 2025-01-20 23:59:34
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Mermade/openapi-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCC:2AAE2C:510C52E:52C7522:678EE35F and timestamp 2025-01-20 23:59:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
thomaxxl/safrs: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD0:1F5FC7:552DC81:56E9FBD:678EE3E1
  and timestamp 2025-01-21 00:01:37
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cebe/php-openapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCF:2AAE2C:5113939:52CEC52:678EE386 and timestamp 2025-01-21 00:00:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
AresS31/swurg: >
  <p align="center">
    <img alt="logo" src="https://raw.githubusercontent.com/AresS31/swurg/dev/images/logo3.png" height="200">
    <p align="center">
        <a href="https://portswigger.net/bappstore/6bf7574b632847faaaa4eb5e42f1757c"><img alt="bapp store" src="https://img.shields.io/badge/BApp-Published-orange.svg"></a>
        <a href="https://www.java.com"><img alt="lang" src="https://img.shields.io/badge/Lang-Java-blue.svg"></a>
        <a href="https://opensource.org/licenses/Apache-2.0"><img alt="license" src="https://img.shields.io/badge/License-Apache%202.0-red.svg"></a>
        <img alt="version" src="https://img.shields.io/badge/Version-2.3-green.svg">
        <img alt="bitcoin" src="https://img.shields.io/badge/Bitcoin-15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p-yellow.svg">
        <img alt="bitcoin cash" src="https://img.shields.io/badge/Bitcoin%20Cash-qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3-yellow.svg">
        <img alt="ether" src="https://img.shields.io/badge/Ether-0x70bC178EC44500C17B554E62BC31EA2B6251f64B-yellow.svg">
    </p>
  </p>


  ## Swurg is a Burp Suite extension designed for OpenAPI testing.

  > The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for REST APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service. 

  > 

  > Use cases for machine-readable API definition documents include, but are not limited to: interactive documentation; code generation for documentation, clients, and servers; and automation of test cases. OpenAPI documents describe an API's services and are represented in either YAML or JSON formats. These documents may either be produced and served statically or be generated dynamically from an application.

  > 

  > \- [OpenAPI Initiative](https://github.com/OAI/OpenAPI-Specification)


  Performing security assessment of OpenAPI-based APIs can be a tedious task due to Burp Suite (industry standard) lacking native OpenAPI parsing capabilities. A solution to this situation, is to use third-party tools (e.g. `SOAP-UI`) or to implement custom scripts (often on a per engagement basis) to handle the parsing of OpenAPI documents and integrate/chain the results to Burp Suite to use its first class scanning capabilities.


  Swurg is an OpenAPI parser that aims to streamline this entire process by allowing security professionals to use Burp Suite as a standalone tool for security assessment of OpenAPI-based APIs.


  ## Supported Features

  * Parse OpenAPI documents, formerly known as the `Swagger specification`, fully compliant with OpenAPI 2.0/3.0 Specifications (OAS). Supports both JSON and YAML formats.

  * OpenAPI documents can be parsed either from a supplied file or URL. The extension can fetch OpenAPI documents directly from a URL using the `Send to Swagger Parser` feature under the `Target -> Site map` context menu.

  * Requests can be sent to the `Comparer, Intruder, Repeater, Scanner and Site map` Burp tools.


  ## Installation

  ### Compilation 

  #### Windows & Linux

  1. Install gradle (<https://gradle.org/>)

  2. Download the repository.

  ```console

  $ git clone https://github.com/AresS31/swurg

  $ cd .\swurg\

  ```

  3. Create the swurg jarfile:

  ```console

  $ gradle fatJar

  ```


  ### Burp Suite settings

  In Burp Suite, under the `Extender/Options` tab, click on the `Add` button and load the `swurg-all` jarfile. 


  ## Possible Improvements

  - [ ] Beautify the graphical user interface.

  - [ ] Enable cells editing to change API calls directly from the GUI.

  - [x] Further optimise the source code.

  - [ ] Implement support for authenticated testing (via user-supplied API-keys).

  - [ ] Improve the Param column by adding the type of parameters (e.g. inquery, inbody, etc.).

  - [ ] Increase the extension verbosity (via the bottom panel).


  ## Dependencies

  ### Third-party libraries

  #### Swagger Parser:

  The [Swagger Parser](https://mvnrepository.com/artifact/io.swagger.parser.v3/swagger-parser) library is required and automatically imported in this project.


  ## Project information

  In July 2016, after posting a request for improvement on the [PortSwigger support forum](https://support.portswigger.net/customer/portal/questions/16358278-swagger-parser-and-wsdler-improvement), I decided to take the initiative and to implement a solution myself.


  The extension is still in development, feedback, comments and contributions are therefore much appreciated.


  ## One-time donation

  * Donate via Bitcoin      : **15aFaQaW9cxa4tRocax349JJ7RKyj7YV1p**

  * Donate via Bitcoin Cash : **qqez5ed5wjpwq9znyuhd2hdg86nquqpjcgkm3t8mg3**

  * Donate via Ether        : **0x70bC178EC44500C17B554E62BC31EA2B6251f64B**


  ## License

  Copyright (C) 2016 - 2018 Alexandre Teyar


  Licensed under the Apache License, Version 2.0 (the "License");

  you may not use this file except in compliance with the License.

  You may obtain a copy of the License at


  <http://www.apache.org/licenses/LICENSE-2.0>


  Unless required by applicable law or agreed to in writing, software

  distributed under the License is distributed on an "AS IS" BASIS,

  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and

  limitations under the License.
danielgtaylor/apisprout: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCA:2AAE2C:5114CC5:52D003E:678EE38B and timestamp 2025-01-21 00:00:11
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tobilg/api2html: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDD:B00D1:5234ECC:53F1D6A:678EE3E3 and timestamp 2025-01-21 00:01:39
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
epiphone/routing-controllers-openapi: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CC4:2AAE2C:5116E6D:52D224C:678EE394 and timestamp 2025-01-21 00:00:20
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
koumoul-dev/vue-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCF:2AAE2C:511B6B6:52D6BEB:678EE3A8 and timestamp 2025-01-21 00:00:40
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
sanjayvacharya/sleeplessinslc: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D13D7F:D7B2EA:678EE3C8 and timestamp 2025-01-21 00:01:12
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
epiphone/class-validator-jsonschema: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:24FC2AF:25B543D:678EE393 and timestamp 2025-01-21 00:00:19
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apisyouwonthate/openapi.tools: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCE:2B946D:536676D:55226E4:678EE37E and timestamp 2025-01-20 23:59:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fsprojects/OpenAPITypeProvider: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD0:1F5FC7:551DF71:56D9E3E:678EE39B and timestamp 2025-01-21 00:00:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
outofcoffee/vertx-oas: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC0:1F5FC7:5526477:56E25A6:678EE3C0 and timestamp 2025-01-21 00:01:04
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cdimascio/openapi-spring-webflux-validator: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CCB:201941:57BBE0D:5977F20:678EE385 and timestamp 2025-01-21 00:00:05
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fmvilas/openapi3-generator: >
  <h1 align="center">OpenAPI 3 Generator</h1>

  <p align="center">
    Use your API OpenAPI 3 definition to generate code, documentation, and literally anything you need.
  </p>


  ## Install


  To use it from the CLI:


  ```bash

  npm install -g openapi3-generator

  ```


  ## Requirements


  * Node.js v7.6+


  ## Usage


  ### From the command-line interface (CLI)


  ```bash
    Usage: og [options] <openapiFileOrURL> <template>


    Options:

      -V, --version                  output the version number
      -o, --output <outputDir>       directory where to put the generated files (defaults to current directory)
      -t, --templates <templateDir>  directory where templates are located (defaults to internal templates directory)
      -b, --basedir <baseDir>        directory to use as the base when resolving local file references (defaults to OpenAPI file directory)
      -h, --help                     output usage information
  ```


  #### Examples


  The shortest possible syntax:

  ```bash

  og openapi.yaml markdown

  ```


  Specify where to put the generated code:

  ```bash

  og -o ./my-docs openapi.yaml markdown

  ```


  ## Templates


  ### Creating your own templates

  Templates are the sources where the result will be generated from. There are already some templates

  you can use to generate code and documentation.


  The files in your template can be of the following types:

  1. Static: This kind of files will be simply copied to the output directory.

  2. Templates: This kind of files will be compiled using [Handlebars](http://handlebarsjs.com/), and copied to the output directory.

  3. Path templates: This kind of files will be compiled using [Handlebars](http://handlebarsjs.com/), but it will generate one file per OpenAPI path.


  Assuming we have the following OpenAPI Spec:

  ```yaml

  openapi: "3.0.0"

  info:
    version: 1.0.0
    title: OpenAPI Petstore
    license:
      name: MIT
  servers:
    - url: http://petstore.openapi.io/v1
  paths:
    /pet:
      get:...
      post:...
    /pet/{petId}:
      get:...
    /user/login:
      post:...
    /user/{username}:
      get:...
      put:...
      delete:...
  ...

  ```

  And some template files like this:

  ```

  |- index.js            // This file contains static code, e.g. starting a webserver and including ./api/index.js

  |+ api/
   |- index.js.hbs       // This is a static template, it contains placeholders that will be filled in, e.g. includes for each file in routes
   |+ routes/
    |- $$path$$.route.js.hbs      // This file will be generated for each operation and contains skeleton code for each method for an operation.
    |+ $$path$$/                  // This folder will also be generated for each operation.
      |- route.js.hbs             // This is another example of an operation file.
  ```

  The first important thing to notice here is the variable notation in `$$path$$.route.js.hbs`. It will be replaced by the name of the path.


  This example also shows `$$path$$` used in a folder name - the generated folder names here will replace $$path$$ with

  the name of the path (in kebab-case).


  In this example the generated directory structure will be like this:

  ```

  |- index.js            // This file still contains static code like before.

  |+ api/
   |- index.js           // This file will now e.g. have included the two files in routes.
   |+ routes/
    |- pet.route.js      // This file contains the code for methods on pets.
    |                    // (e.g. getPet, postPet, getPetByPetId).
    |- user.route.js     // This file will contain the code for methods on users.
    |                    // (e.g. postUserLogin, getUserByUsername, putUserByUsername, deleteUserByUsername).
    |+ pet/
     | - route.js        // this file also contains the code for methods on pets.
    |+ user/
     | - route.js        // this file also contains the code for methods on users.
  ```


  ### Template file extensions

  You can (optionally) name your template files with `.hbs` extensions, which will be removed when writing the generated

  file. e.g. `index.js.hbs` writes `index.js`. `index.js` would also write to `index.js`, if you prefer to omit the hbs

  extension.


  The only case where the `.hbs` extension isn't optional would be if you are writing handlebars templates with the

  templates. In that case the the template would need the extension `.hbs.hbs`. `usertpl.hbs.hbs` writes `usertpl.hbs`

  (but `usertpl.hbs` as a source would write `usertpl` with no extension).


  ### Template file content

  The generator passes the OpenAPI spec to template files, so all information should be available there.

  In addition to that, the code generator adds a bit [more data](#data-passed-to-handlebars-templates) that can be helpful.


  #### Examples:

  ##### Dynamically require files in JavaScript

  ```mustache

  {{#each @root.openapi.endpoints}}

  const {{.}} = require('./routes/{{.}}.route.js')

  {{/each}}

  ```

  will produce (using the OAS Spec example from above):

  ```js

  const pet = require('./routes/pet.route.js')

  const user = require('./routes/user.route.js')

  ```


  ### Data passed to Handlebars templates

  | Param | Type | Description |

  | --- | --- | --- |

  |openapi|object|The OpenAPI spec.|

  |openapi.endpoints| object | All first level endpoints (e.g  `pet` and `user`) |


  ### Custom handlebars helpers

  If your template needs Handlebars helpers, you can define them in a directory called `.helpers` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.helpers) template.


  ### Using handlebars partials

  If you want to use partials in your template, define them in a directory called `.partials` inside your template.


  Check out some examples in the [markdown](./templates/markdown/.partials) template.


  > The name of the partial will be obtained from the file name, converted to camel case. So, for instance, if the file name is `my-partial.js`, you can use the partial with `{{> myPartial}}`.


  ## Authors


  * Fran Méndez ([@fmvilas](http://twitter.com/fmvilas))

  * Richard Klose ([@richardklose](http://github.com/richardklose))
atlassian/oas3-chow-chow: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D02E17:D69E35:678EE37F and timestamp 2025-01-20 23:59:59
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mrTimofey/vue-admin: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD1:124B:D1024E:D77679:678EE3B8 and timestamp 2025-01-21 00:00:56
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Microsoft/OpenAPI.NET.OData: >
  
  VSTS Build  | Status

  --------|---------

  Rolling | <img src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/410/badge"/>

  Nightly | <img src="https://identitydivision.visualstudio.com/_apis/public/build/definitions/2cfe7ec3-b94f-4ab9-85ab-2ebff928f3fd/427/badge"/>



  AzurePipeline|Status

  --------|--------------
   Rolling |<img src="https://identitydivision.visualstudio.com/OData/_apis/build/status/OpenApi/OpenAPI.OData-Master-Rolling?branchName=master" />
    Nightly |<img src="https://identitydivision.visualstudio.com/OData/_apis/build/status/OpenApi/OpenAPI.OData-Master-Nightly?branchName=master" />

  # Convert OData to OpenAPI.NET [Preview]


  [**Disclaimer:This library is in a preview state. Feedback and contribution is welcome!**]


  ## Introduction


  The **Microsoft.OpenAPI.OData.Reader** library helps represent an OData service metadata as an OpenApi description. It converts [OData](http://www.odata.org) [CSDL](http://docs.oasis-open.org/odata/odata-csdl-xml/v4.01/odata-csdl-xml-v4.01.html), the XML representation of the Entity Data Model (EDM) describing an OData service into [Open API](https://github.com/OAI/OpenAPI-Specification) based on [OpenAPI.NET](http://aka.ms/openapi) object model.


  The conversion is based on the mapping doc from [OASIS OData OpenAPI v1.0](https://www.oasis-open.org/committees/document.php?document_id=61852&wg_abbrev=odata) and uses the following :


  1. [Capabilities vocabulary annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Capabilities.V1.xml)

  2. [Authorization vocabulary annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Authorization.V1.xml)

  3. [Core vocabulary annotation](https://github.com/oasis-tcs/odata-vocabularies/blob/master/vocabularies/Org.OData.Core.V1.xml)

  4. Navigation property path

  5. Edm operation and operation import path


  ## Overview


  The image below is generic overview of how this library can convert the EDM model to an [OpenAPI.NET document](https://github.com/Microsoft/OpenAPI.NET/blob/master/src/Microsoft.OpenApi/Models/OpenApiDocument.cs) object.


  ![Convert OData CSDL to OpenAPI](docs/images/odata-2-openapi.png "Map /// OData CSDL --> OpenAPI.NET")


  For more information on the CSDL and Entity Data model, please refer to [http://www.odata.org/documentation](http://www.odata.org/documentation).

  For more information about the Open API object of model, please refer to [http://github.com/microsoft/OpenAPI.NET](http://github.com/microsoft/OpenAPI.NET)


  ## Sample code


  The following sample code illustrates the use of the library


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiDocument document = model.ConvertToOpenApi();
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  Or with the convert settings:


  ```csharp

  public static void GenerateOpenApiDescription()

  {
      IEdmModel model = GetEdmModel();
      OpenApiConvertSettings settings = new OpenApiConvertSettings
      {
          // configuration
      };
      OpenApiDocument document = model.ConvertToOpenApi(settings);
      var outputJSON = document.SerializeAsJson(OpenApiSpecVersion.OpenApi3_0);
      var outputYAML = document.SerializeAsYaml(OpenApiSpecVersion.OpenApi3_0);
  }


  public static IEdmModel GetEdmModel()

  {
      // load EDM model here...
  }

  ```


  The `GetEdmModel()` method can load a model in 3 ways:


  1. Create the Edm model from scratch. For details refer [building a basic model](http://odata.github.io/odata.net/#02-01-build-basic-model)


  2. Load the Edm model from CSDL file. The following shows a code sample that loads a model from a csdl file.

      ```csharp
      public static IEdmModel GetEdmModel()
      {
          string csdlFilePath = @"c:\csdl.xml";
          string csdl = System.IO.File.ReadAllText(csdlFilePath);
          IEdmModel model = CsdlReader.Parse(XElement.Parse(csdl).CreateReader());
          return model;
      }
      ```

  3. Create the Edm model using Web API OData model builder. For details refer to the [web api model builder article](http://odata.github.io/WebApi/#02-01-model-builder-abstract)


  ## Nightly builds


  The nightly build process will upload a Nuget package for OpenAPI.OData.reader to [OpenAPIOData MyGet gallery](https://www.myget.org/gallery/openapiodata).


  To connect to OpenAPI.OData.reader feed, use [this](https://www.myget.org/F/openapiodata/api/v3/index.json) URL source.


  ## Nuget packages


  The OpenAPI.OData.reader nuget package is at: [https://www.nuget.org/packages/Microsoft.OpenApi.OData/](https://www.nuget.org/packages/Microsoft.OpenApi.OData)


  ---


  # Contributing


  This project welcomes contributions and suggestions.  Most contributions require you to agree to a

  Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us

  the rights to use your contribution. For details, visit [https://cla.microsoft.com](https://cla.microsoft.com).


  When you submit a pull request, a CLA-bot will automatically determine whether you need to provide

  a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions

  provided by the bot. You will only need to do this once across all repos using our CLA.


  This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).

  For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or

  contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.
Mermade/openapi-lint-vscode: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:24F2984:25AB771:678EE361 and timestamp 2025-01-20 23:59:30
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tavis-software/Tavis.OpenApi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D1853D:D7FC10:678EE3DD and timestamp 2025-01-21 00:01:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
rafaelcaricio/sticker: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CE0:2AAE2C:5121E10:52DD559:678EE3C4 and timestamp 2025-01-21 00:01:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cdimascio/kotlin-spring-mvc-template: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CCC:2AAE2C:5113457:52CE737:678EE385 and timestamp 2025-01-21 00:00:05
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
wzshiming/gen: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC7:1EDF9F:2510125:25C98AA:678EE3EB
  and timestamp 2025-01-21 00:01:47
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
technocreatives/openapi-eller: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC6:201941:57D01D2:598C8A7:678EE3DE and timestamp 2025-01-21 00:01:34
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
go-courier/oas: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CDE:2D0327:52A9D97:546574A:678EE39E
  and timestamp 2025-01-21 00:00:30
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
koumoul-dev/data-fair: >-
  # <img alt="Data FAIR logo"
  src="https://cdn.jsdelivr.net/gh/data-fair/data-fair@master/public/assets/logo.svg"
  width="40"> Data FAIR


  *Findable, Accessible, Interoperable and Reusable Data*


  [Visit documentation website](https://data-fair.github.io/3/)


  ![](doc/static/data-fair.gif)


  ## Sponsors


  | | Click [here to support the development of this project](https://github.com/sponsors/koumoul-dev). |

  |-|-|

  | [<img alt="Koumoul logo" src="https://koumoul.com/static/logo-slogan.png" height="40">](https://koumoul.com) | [Koumoul](https://koumoul.com) develops the Data Fair ecosystem and hosts it as an online service. |

  | [<img alt="Dawizz logo" src="https://dawizz.fr/logo-Dawizz-all-about-your-data-home.png" height="40">](https://dawizz.fr) | [Dawizz](https://dawizz.fr) uses Data Fair inside its platform and supports its development. |


  ## Developers


  Take a look at the [contribution guidelines](./CONTRIBUTING.md).
Mermade/openapi3-examples: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:510CF2A:52C7F68:678EE363 and timestamp 2025-01-20 23:59:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Rots/n26-api: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD0:1F5FC7:551367B:56CF18B:678EE36C
  and timestamp 2025-01-20 23:59:40
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
isa-group/oas-tools: >
  # OAS TOOLS


  <div align="center">


  [![NPM](https://nodei.co/npm/@oas-tools/core.png?compact=true)](https://nodei.co/npm/@oas-tools/core)


  ![npm](https://img.shields.io/npm/v/@oas-tools/core)

  ![node-current](https://img.shields.io/node/v/@oas-tools/core)

  ![npm](https://img.shields.io/npm/dw/@oas-tools/core)

  [![Node.js CI](https://github.com/oas-tools/oas-tools/actions/workflows/nodejs.yaml/badge.svg)](https://github.com/oas-tools/oas-tools/actions/workflows/nodejs.yaml)

  [![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-green.svg)](https://conventionalcommits.org)

  <br/>


  [![Known Vulnerabilities](https://snyk.io/test/github/oas-tools/oas-tools/main/badge.svg)](https://snyk.io/test/github/oas-tools/oas-tools)

  [![Coverage Status](https://coveralls.io/repos/github/oas-tools/oas-tools/badge.svg?branch=main)](https://coveralls.io/github/oas-tools/oas-tools?branch=main)

  </div>


  > **Warning**

  >

  > OAS Tools package has been renamed from `oas-tools` to `@oas-tools/core`


  ## Quickstart


  Initialize a new OAS Tools project from the CLI


  ```sh

  > npx @oas-tools/cli init

  ```


  It will prompt the following menu, asking which type of resource will be initialized:


  ```sh

  ? Select a resource to initialize (Use arrow keys)

  > Server
    Module
    Development environment
    OpenAPI File
  ```

  Select `server`, answer the questions and you'll get a running server with OAS Tools.


  More information in our [web page](https://oas-tools.github.io)


  ## Contributing guidelines

  We greatly appreciate community contributions, that's why we have created a document stating clear guidelines for [contributing to OAS Tools](https://github.com/oas-tools/.github/blob/main/CONTRIBUTING.md).

  We also encourage you to participate in discussions and activate notification for our announcements in the organization's [discussions dashboard](https://github.com/orgs/oas-tools/discussions)


  ## License


  Copyright 2018, [ISA Group](http://www.isa.us.es), [University of Sevilla](http://www.us.es)


  For technical inquiry please contact to [engineering team](./extra/team.md).


  [![ISA Group](http://www.isa.us.es/2.0/assets/img/theme/logo2.png)](http://www.isa.us.es)


  Licensed under the **Apache License, Version 2.0** (the "[License](./LICENSE)"); you may not use this file except in compliance with the License. You may obtain a copy of the License at apache.org/licenses/LICENSE-2.0


  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
ckaratzas/vertx-openapi-spec-generator: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CC3:4925F:44A6C81:461DA12:678EE388 and timestamp 2025-01-21 00:00:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
OpenAPITools/openapi-petstore: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD0:1F5FC7:55124C4:56CDF7F:678EE366 and timestamp 2025-01-20 23:59:34
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
technocreatives/openapi-mock-eller: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC0:1F5FC7:552D52C:56E9849:678EE3DE and timestamp 2025-01-21 00:01:35
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
serafin-labs/serafin: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:512343D:52DEBCB:678EE3CA and timestamp 2025-01-21 00:01:14
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
yayoc/swagger-to-mock: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57D32BA:598FAC5:678EE3ED and timestamp 2025-01-21 00:01:49
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
rinold/Steamer: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD2:4925F:44B4863:462BA1F:678EE3C7
  and timestamp 2025-01-21 00:01:11
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
wzshiming/openapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC2:1EDF9F:2510203:25C998A:678EE3EB and timestamp 2025-01-21 00:01:47
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
isa-group/oas-generator: >
  > **Warning**

  >

  > This package is now included in [OAS Tools CLI](https://github.com/oas-tools/oas-cli). Check the [docs](https://oas-tools.github.io/docs/cli) for more info.


  # oas-generator


  [![Build Status](https://travis-ci.org/isa-group/oas-generator.svg?branch=master)](https://travis-ci.org/isa-group/oas-generator)

  [![dependencies Status](https://david-dm.org/isa-group/oas-generator/status.svg)](https://david-dm.org/isa-group/oas-generator)

  [![codecov](https://codecov.io/gh/isa-group/oas-generator/branch/master/graph/badge.svg)](https://codecov.io/gh/isa-group/oas-generator)

  [![Known Vulnerabilities](https://snyk.io/test/npm/oas-generator/badge.svg)](https://snyk.io/test/npm/oas-generator)

  [![Greenkeeper badge](https://badges.greenkeeper.io/isa-group/oas-generator.svg)](https://greenkeeper.io/)


  [![NPM](https://nodei.co/npm/oas-generator.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/oas-generator/)


  This module provides NodeJS RESTfull APIs scaffolding based OpenAPI 3.x specs using [oas-tools](https://github.com/isa-group/oas-tools) and [express](https://github.com/expressjs/express). It is compatible with servers generated with the swagger-tool suite to help in the transition from pre-existing servers based on 2.x specs.


  We have a 2 min. tutorial:


  <a href="https://youtu.be/OZhtoXP2Gi4" alt="oas-generator introduction (v2.0.6) - Click to Watch!"><img src="https://i.imgur.com/fcqaWCq.jpg" align="center" width="300" alt="oas-generator introduction (v2.0.6) - Click to Watch!"></a>



  ## 1\. Install oas-generator


  ```bash

  npm install oas-generator -g

  ```


  ## 2\. Use oas-generator command


  ### 2.1\. Help


  ```bash

  $ oas-generator --help


  Usage:  oas-generator <OAS v3 file in YAML or JSON>

    Options:

      -n, --projectName <projectName>  Name for the generated folder
      -z, --generateZip                Indicate whether the generated folder must be deleted after compression
      -h, --help                       output usage information
  ```


  ### 2.2 Examples


  Generate a NodeJS project: The following command wil create the code of a NodeJS application based on the OpenAPI Spec 3.x `docker-engine.yaml` and place its code in a folder by the name `generatedServer`.


  ```bash

  $ oas-generator specs/docker-engine.yaml -n generatedServer

  ```


  Once the folder is created locate into it. Install dependencies and run it by doing npm start:


  ```bash

  $ cd generatedServer

  $ npm start

  ```


  Now your app is running on port 8080.

  You can try the url [http://localhost:8080/v1.33/volumes](http://localhost:8080/v1.33/volumes)


  In the folder `controllers` there will be a set of js files with the templates for each method specified in the spec that should be completed to have a fully working API.


  Happy coding! 



  ## License


  Copyright 2018, [ISA Group](http://www.isa.us.es), [University of Sevilla](http://www.us.es)


  For technical inquiry please contact to [engineering team](./extra/team.md).


  [![ISA Group](http://www.isa.us.es/2.0/assets/img/theme/logo2.png)](http://www.isa.us.es)


  Licensed under the **Apache License, Version 2.0** (the "[License](./LICENSE)"); you may not use this file except in compliance with the License. You may obtain a copy of the License at apache.org/licenses/LICENSE-2.0


  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
erasys/openapi-php: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD4:2B946D:536BBB6:5527CEB:678EE394 and timestamp 2025-01-21 00:00:20
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
SkeLLLa/fastify-oas: >
  # fastify-oas


  **NOTE**: OpenAPI 3 support finally [landed](https://github.com/fastify/fastify-swagger/pull/333) in "official" [fastify-swagger](https://github.com/fastify/fastify-swagger) module. Consider using it instead of this one, since it has better support for $ref in schemas.


  This plugin is deprecated and no longer mainteined. Feel free to fork it and publish if needed.


  <div align="center">
    <img src="https://gitlab.com/m03geek/fastify-oas/raw/master/logo.png" alt="fastify-oas logo"/>
  </div>


  [![NPM Version](https://img.shields.io/npm/v/fastify-oas.svg)](https://www.npmjs.com/package/fastify-oas)

  [![Downloads Count](https://img.shields.io/npm/dm/fastify-oas.svg)](https://www.npmjs.com/package/fastify-oas)

  [![Vunerabilities Count](https://snyk.io/test/npm/fastify-oas/badge.svg)](https://www.npmjs.com/package/fastify-oas)

  [![Build Status](https://gitlab.com/m03geek/fastify-oas/badges/master/pipeline.svg)](https://gitlab.com/m03geek/fastify-oas/commits/master)

  [![Coverage Status](https://gitlab.com/m03geek/fastify-oas/badges/master/coverage.svg)](https://gitlab.com/m03geek/fastify-oas/commits/master)

  [![License](https://img.shields.io/npm/l/fastify-oas.svg)](https://gitlab.com/m03geek/fastify-oas/blob/master/LICENSE)


  [OpenAPI 3.0+ (OAS3)](https://swagger.io/docs/specification/about/) documentation generator for Fastify.

  It uses the schemas you declare in your routes to generate an OpenAPI (swagger) compliant doc.


  This plugin based on [fastify-swagger](https://github.com/fastify/fastify-swagger/) that generates swagger 2.0 docs.


  This plugin designed in such way to be compatible with it's predcessor and in most cases if you already use `fastify-swagger` you may just replace it with current plugin and it should work.


  ## ToC

  - [fastify-oas](#fastify-oas)
    - [ToC](#toc)
    - [Fastify support](#fastify-support)
    - [Installation](#installation)
    - [Features and requirements](#features-and-requirements)
    - [Usage](#usage)
      - [Docs](#docs)
      - [Plugin options](#plugin-options)
      - [Additional schema options](#additional-schema-options)
      - [OpenAPI](#openapi)
      - [Swagger 2.0](#swagger-20)
    - [UI](#ui)
    - [Development](#development)
    - [See also](#see-also)
    - [License](#license)

  ## Fastify support


  - v0.X.X - v1.X.X - supports fastify v1.X.X

  - v2.X.X - will support fastify v2.X.X*


  <span style="color:red; font-size:2em;">

  Currently in Fastify v2.12.0 there's regression bug that breakes this exenstion for many users. So for now this extension doesn't support fastify 2.12.0. Cause it was cause by fastify minor change in order to preven issues this library will throw an error when you'll try to use it with that fastify version.

  In order to use it, you can either lock your fastify at 2.11.0 or fastify-oas at 2.5.0 (but there are no gaurantee that it will work correctly).

  </span>



  ## Installation


  ```sh

  npm i fastify-oas --save

  ```


  <sub>[Back to top](#toc)</sub>


  ## Features and requirements


  * Supports OpenAPI 3+.

  * Supports [fastify-swagger](https://github.com/fastify/fastify-swagger/) module configs.

  * Supports swagger 2.0 fastify schemas.

  * Supports fastify named schemas convertion to swaagger/openapi models.


  --- 


  * Requires fastify `>=1.9.0`.

  * Node.js `>=8.9.0`.


  NOTE: If you need to generate fastify routes from your swagger document - please refer to plugins in [See also](#see-also) like fastify-swaggergen or fastify-openapi-glue.


  <sub>[Back to top](#toc)</sub>


  ## Usage


  Add it to your project like regular fastify plugin. Use `register` method and pass it swagger options, then call the api constructor.


  ```js

  const fastify = require('fastify');

  const oas = require('fastify-oas');

  const app = fastify();


  app.register(oas, {
    routePrefix: '/documentation',
    swagger: {
      info: {
        title: 'Test openapi',
        description: 'testing the fastify swagger api',
        version: '0.1.0',
      },
      externalDocs: {
        url: 'https://swagger.io',
        description: 'Find more info here',
      },
      consumes: ['application/json'],
      produces: ['application/json'],
    },
    exposeRoute: true
  });


  // put some routes and schemas


  app.ready(err => {
    if (err) throw err;
    app.oas();
  });

  ```


  Please note, the schema format for Fastify routes is [JSONSchema](https://github.com/fastify/fastify/blob/v2.13.0/docs/Routes.md#routes-option) and you may encounter some differences in the format for route spec vs. output OpenAPI spec.  

  This plugin includes handling around a few of these differences.


  One such case is the `example` or `examples` keywords:

  ```js

  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: {
        type: 'object',
        description: 'an object',
        examples: [
            {
              name: 'Object Sample',
              summary: 'an example',
              value: {a: 'payload'},
            }
        ],
        properties: {
          a: {type: 'string', description: 'your payload'}
        }
      }
    },
    handler: // ...
  })

  ```

  Which produces a spec similar to:

  ```json

  {
    ... 

    "content": {
      "application/json": {
        "examples": {
          "Object Sample": {
            "summary": "an example",
            "value": {
              "a": "payload"
            }
          }
        },
        "schema": {
          "type": "object",
          "properties": {
            "a": {
              "type": "string",
              "description": "your payload"
            }
          }
        }
      }
    }
  }

  ```

  (in this case, the name property is extracted as the examples key)


  <sub>[Back to top](#toc)</sub>


  ### Docs


  See [Docs](/docs/README.md) for more details on the TypeScript types that you may use when working with OpenAPI spec.


  ### Plugin options


  | parameter      | type    | description                                                                                                                                | default          |

  | -------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ | ---------------- |

  | `routePrefix`  | String  | Documentation endpoint                                                                                                                     | `/documentation` |

  | `exposeRoute`  | Boolean|Object** | If `true` the plugin will expose the documentation with the following apis: `/<routePrefix>`, `/<routePrefix>/json`, `/<routePrefix>/yaml` | `false`          |

  | `addModels`    | Boolean | If `true` adds fastify schemas as openapi models*                                                                                          | `false`          |

  | `openapi`      | String  | Openapi version                                                                                                                            | '3.0.0'          |

  | `yaml`         | Boolean | If `true` returns yaml instead of json                                                                                                     | `false`          |

  | `hideUntagged` | Boolean | If `true` remove routes without tags in schema from resulting swagger file                                                                 | `false`          |

  | `swagger`      | Object  | Swagger object except paths                                                                                                                | `{}`             |


  Note (*): Fastify-oas plugin gather all schemas, so you should ensure that all of them under current and nested scopes have unique names.

  Note (**): see [Expose route options](/docs/interfaces/fastifyoas.exposeoptions.md)

  <sub>[Back to top](#toc)</sub>


  ### Additional schema options


  In order to remove some endpoints from Swagger/OpenAPI document you may add `{hide: true}` option to route schema.


  ```js

  const fastify = require('fastify')()

  fastify.get('/some-secrete-route/:id', {
    schema: {
      hide: true,
      params: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'user id'
          }
        }
      },
      response: {
        201: {
          description: 'Successful response',
          type: 'object',
          properties: {
            hello: { type: 'string' }
          }
        }
      },
    }
  }, (req, reply) => {})


  ```


  <sub>[Back to top](#toc)</sub>


  ### OpenAPI


  Unlike regular OpenAPI spec you'll still need some options from swagger 2.0.


  ```js

  const fastify = require('fastify');

  const oas = require('fastify-oas');

  const app = fastify();


  app.register(oas, {
    routePrefix: '/documentation',
    swagger: {
      info: {
        title: 'Test openapi',
        description: 'testing the fastify swagger api',
        version: '0.1.0',
      },
      externalDocs: {
        url: 'https://swagger.io',
        description: 'Find more info here',
      },
      consumes: ['application/json'], // app-wide default media-type
      produces: ['application/json'], // app-wide default media-type
      servers: [{
        url: 'http://api.example.com/v1',
        description: 'Optional server description, e.g. Main (production) server',
      }],
      components: {
        // see https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.0.md#componentsObject for more options
        securitySchemes: {
          BasicAuth: {
            type: 'http',
            scheme: 'basic',
          },
        },
      }, 
    },
  });

  ```


  <sub>[Back to top](#toc)</sub>


  ### Swagger 2.0


  This will not generate swagger 2.0 docs. It will generate openapi 3.0 docs, but from swagger 2.0 (and fastify-swagger) compatible configuration.

  It will allow easily migrate from fastify-swagger.


  The example below is taken from fastify-swagger repo to show the differences .


  ```js

  const fastify = require('fastify')()


  // before: fastify.register(require('fastify-swagger'), {

  fastify.register(require('fastify-oas'), { // after
    routePrefix: '/documentation',
    swagger: {
      info: {
        title: 'Test swagger',
        description: 'testing the fastify swagger api',
        version: '0.1.0'
      },
      externalDocs: {
        url: 'https://swagger.io',
        description: 'Find more info here'
      },
      host: 'localhost',
      schemes: ['http'],
      consumes: ['application/json'],
      produces: ['application/json'],
      tags: [
        { name: 'user', description: 'User related end-points' },
        { name: 'code', description: 'Code related end-points' }
      ],
      securityDefinitions: {
        apiKey: {
          type: 'apiKey',
          name: 'apiKey',
          in: 'header'
        }
      }
    }
  })


  fastify.put('/some-route/:id', {
    schema: {
      description: 'post some data',
      tags: ['user', 'code'],
      summary: 'qwerty',
      params: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'user id'
          }
        }
      },
      body: {
        type: 'object',
        properties: {
          hello: { type: 'string' },
          obj: {
            type: 'object',
            properties: {
              some: { type: 'string' }
            }
          }
        }
      },
      response: {
        201: {
          description: 'Successful response',
          type: 'object',
          properties: {
            hello: { type: 'string' }
          }
        }
      },
      security: [
        {
          "api_key": []
        }
      ]
    }
  }, (req, reply) => {})


  fastify.ready(err => {
    if (err) throw err
    fastify.oas()
  })

  ```


  <sub>[Back to top](#toc)</sub>


  ## UI


  Swagger UI is available via `/<routePrefix>/index.html`. By default it's `/documentation/index.html`.


  ReDoc UI is available via `/<routePrefix>/docs.html`. By default it's `/documentation/docs.html`.


  <sub>[Back to top](#toc)</sub>


  ## Development


  In order to start development run:


  ```sh

  npm i

  npm run prepare

  ```


  So that [swagger-ui](https://github.com/swagger-api/swagger-ui) static folder will be generated for you.


  <sub>[Back to top](#toc)</sub>


  ## See also


  * [fastify-swagger](https://github.com/fastify/fastify-swagger) - swagger 2.0 docs generation plugin.

  * [fastify-swaggergen](https://github.com/seriousme/fastify-swaggergen) - fastify routes generation from swagger 2.0 docs.

  * [fastify-openapi-glue](https://github.com/seriousme/fastify-openapi-glue) - fastify-swaggergen successor, generates fastify routes from swagger 2.0 and openapi 3.0 docs (just like this module, but in opposite direction).


  <sub>[Back to top](#toc)</sub>


  ## License


  Licensed under [MIT](./LICENSE).


  <sub>[Back to top](#toc)</sub>
SabzCity/go-library: >-
  # go-library

  It was deprecated in favor of [ChaparKhane](https://github.com/SabzCity/ChaparKhane)
lendingblock/aio-openapi: >
  # aio-openapi


  [![PyPI version](https://badge.fury.io/py/aio-openapi.svg)](https://badge.fury.io/py/aio-openapi)

  [![Python versions](https://img.shields.io/pypi/pyversions/aio-openapi.svg)](https://pypi.org/project/aio-openapi)

  [![Build](https://github.com/quantmind/aio-openapi/workflows/build/badge.svg)](https://github.com/quantmind/aio-openapi/actions?query=workflow%3Abuild)

  [![Coverage Status](https://coveralls.io/repos/github/quantmind/aio-openapi/badge.svg?branch=HEAD)](https://coveralls.io/github/quantmind/aio-openapi?branch=HEAD)

  [![Documentation Status](https://readthedocs.org/projects/aio-openapi/badge/?version=latest)](https://aio-openapi.readthedocs.io/en/latest/?badge=latest)


  Asynchronous web middleware for [aiohttp][] and serving Rest APIs with [OpenAPI][] v 3

  specification and with optional [PostgreSql][] database bindings.


  <!-- START doctoc generated TOC please keep comment here to allow auto update -->

  <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->


  **Table of Contents**


  - [Installation](#installation)

  - [Development](#development)

  - [Features](#features)

  - [Web App](#web-app)

  - [OpenAPI Documentation](#openapi-documentation)

  - [Database Integration](#database-integration)

  - [Websockets](#websockets)
    - [RPC protocol](#rpc-protocol)
    - [Publish/Subscribe](#publishsubscribe)
  - [Environment Variables](#environment-variables)


  <!-- END doctoc generated TOC please keep comment here to allow auto update -->


  ## Installation


  ```

  pip install aio-openapi

  ```


  ## Development


  Clone the repository and create a virtual environment `venv`.


  Install dependencies by running the install script


  ```

  ./dev/install

  ```


  To run tests


  ```

  pytest --cov

  ```


  ## Features


  - Asynchronous web routes with [aiohttp](https://aiohttp.readthedocs.io/en/stable/)

  - Data validation, serialization and unserialization with python [dataclasses](https://docs.python.org/3/library/dataclasses.html)

  - [OpenApi][] v 3 auto documentation

  - [SqlAlchemy][] expression language

  - Asynchronous DB interaction with [asyncpg][]

  - Migrations with [alembic][]

  - SqlAlchemy tables as python dataclasses

  - Support [click][] command line interface

  - Optional [sentry](https://sentry.io) middleware


  ## Web App


  To create an openapi RESTful application follow this schema (lets call the file `main.py`)


  ```python

  from openapi.rest import rest


  def create_app():
      return rest(
          openapi=dict(
              title='A REST API',
              ...
          ),
          base_path='/v1',
          allowed_tags=[...],
          validate_docs=True,
          setup_app=setup_app,
          commands=[...]
      )


  def setup_app(app):
      app.router.add_routes(...)
      return app


  if __name__ == '__main__':
      create_app().main()
  ```


  The `create_app` function creates the [aiohttp][] server application by invoking the `rest` function.

  This function adds the [click][] command in the `cli` mapping entry and add

  documentation for routes which support OpenAPI docs.

  The `setup_app` function is used to actually setup the custom application, usually by adding middleware, routes,

  shutdown callbacks, database integration and so forth.


  ## OpenAPI Documentation


  The library provide tools for creating OpenAPI v 3 compliant endpoints and

  auto-document them.


  An example from test `tests/example` directory


  ```python

  from typing import List


  from aiohttp import web


  from openapi.db.path import SqlApiPath

  from openapi.spec import op



  routes = web.RouteTableDef()



  @routes.view('/tasks')

  class TasksPath(SqlApiPath):
      """
      ---
      summary: Create and query Tasks
      tags:
          - name: Task
            description: Task tag description
      """
      table = 'tasks'

      @op(query_schema=TaskOrderableQuery, response_schema=List[Task])
      async def get(self) -> web.Response:
          """
          ---
          summary: Retrieve Tasks
          description: Retrieve a list of Tasks
          responses:
              200:
                  description: Authenticated tasks
          """
          paginated = await self.get_list()
          return paginated.json_response()

      @op(response_schema=Task, body_schema=TaskAdd)
      async def post(self) -> web.Response:
          """
          ---
          summary: Create a Task
          description: Create a new Task
          responses:
              201:
                  description: the task was successfully added
              422:
                  description: Failed validation
          """
          data = await self.create_one()
          return self.json_response(data, status=201)
  ```


  ## Database Integration


  This library provides integration with [asyncpg][], an high performant asynchronous

  connector with [PostgreSql][] database.

  To add the database extension simply use the `get_db` function in the applicatiuon `setup_app` function:


  ```python

  from aiohttp import web


  from openapi.db import get_db


  def setup_app(app: web.Application) -> None:
      db = get_db(app)
      meta = db.metadata

  ```


  This will enable database connection and command line tools (most of them from [alembic][]):


  ```

  python main.py db --help

  ```


  The database container is available at the `db` app key:


  ```python

  app['db']

  ```


  ## Websockets


  This library provides a simple distributed websocket utility for creating

  websocket remote procedure calls (RPC) and pub/sub.


  ```python

  from aiohttp import web


  from openapi.ws import Sockets


  app = web.Application()

  ...

  app['web_sockets'] = Sockets(app)

  ```


  ### RPC protocol


  The RPC protocol has the following structure for incoming messages


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "payload": {
          ...
      }
  }

  ```


  The `id` is used by clients to link the request with the corresponding response.

  The response for an RPC call is eitrher a success


  ```javascript

  {
      "id": "abc",
      "method": "rpc_method_name",
      "response": {
          ...
      }
  }

  ```


  or error


  ```

  {
      "id": "abc",
      "method": "rpc_method_name":
      "error": {
          ...
      }
  }

  ```


  ### Publish/Subscribe


  To subscribe to messages, one need to use the `Subscribe` mixin with the subscribe RPC handler.

  Messages take the form:


  ```javascript

  {
      "channel": "channel_name",
      "event": "event_name",
      "data": {
          ...
      }
  }

  ```


  ## Environment Variables


  Several environment variables are used by the library to support testing and deployment.


  - `DATASTORE`: PostgreSql connection string (same as [SqlAlchemy][] syntax)

  - `DBPOOL_MIN_SIZE`: minimum size of database connection pool (default is 10)

  - `DBPOOL_MAX_SIZE`: maximum size of database connection pool (default is 10)


  [aiohttp]: https://aiohttp.readthedocs.io/en/stable/

  [openapi]: https://www.openapis.org/

  [postgresql]: https://www.postgresql.org/

  [sqlalchemy]: https://www.sqlalchemy.org/

  [click]: https://github.com/pallets/click

  [alembic]: http://alembic.zzzcomputing.com/en/latest/

  [asyncpg]: https://github.com/MagicStack/asyncpg
Mermade/swaggerplusplus: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD5:124B:CFE4CF:D652F2:678EE363 and timestamp 2025-01-20 23:59:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
niteoweb/pyramid_openapi3: >
  ## Validate [Pyramid](https://trypyramid.com) views
  against an [OpenAPI 3.0](https://swagger.io/specification/) document


  <p align="center">
    <img height="200" src="https://github.com/Pylons/pyramid_openapi3/blob/master/header.jpg?raw=true" />
  </p>


  <p align="center">
    <a href="https://circleci.com/gh/Pylons/pyramid_openapi3">
      <img alt="CircleCI for pyramid_openapi3 (master branch)"
           src="https://circleci.com/gh/Pylons/pyramid_openapi3.svg?style=shield">
    </a>
    <img alt="Test coverage (master branch)"
         src="https://img.shields.io/badge/tests_coverage-100%25-brightgreen.svg">
    <img alt="Test coverage (master branch)"
         src="https://img.shields.io/badge/types_coverage-100%25-brightgreen.svg">
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="latest version of pyramid_openapi3 on PyPI"
           src="https://img.shields.io/pypi/v/pyramid_openapi3.svg">
    </a>
    <a href="https://pypi.org/project/pyramid_openapi3/">
      <img alt="Supported Python versions"
           src="https://img.shields.io/pypi/pyversions/pyramid_openapi3.svg">
    </a>
    <a href="https://github.com/Pylons/pyramid_openapi3/blob/master/LICENSE">
      <img alt="License: MIT"
           src="https://img.shields.io/badge/License-MIT-yellow.svg">
    </a>
    <a href="https://github.com/Pylons/pyramid_openapi3/graphs/contributors">
      <img alt="Built by these great folks!"
           src="https://img.shields.io/github/contributors/Pylons/pyramid_openapi3.svg">
    </a>
    <a href="https://webchat.freenode.net/?channels=pyramid">
      <img alt="Talk to us in #pyramid on Freenode IRC"
           src="https://img.shields.io/badge/irc-freenode-blue.svg">
    </a>
  </p>


  ## Peace of Mind


  The reason this package exists is to give you peace of mind when providing a RESTful API. Instead of chasing down preventable bugs and saying sorry to consumers, you can focus on more important things in life.


  - Your **API documentation is never out-of-date**, since it is generated out of the API document that you write.

  - The documentation comes with **_try-it-out_ examples** for every endpoint in your API. You don't have to provide (and maintain) `curl` commands to showcase how your API works. Users can try it themselves, right in their browsers.

  - Your **API document is always valid**, since your Pyramid app won't even start if the document is not according to OpenAPI 3.0 specification.

  - Automatic request **payload validation and sanitization**. Your views do not require any code for validation and input sanitation. Your view code only deals with business logic. Tons of tests never need to be written since every request, and its payload, is validated against your API document before it reaches your view code.

  - Your API **responses always match your API document**. Every response from your view is validated against your document and a `500 Internal Server Error` is returned if the response does not exactly match what your document says the output of a certain API endpoint should be. This decreases the effects of the [Hyrum's Law](https://www.hyrumslaw.com).

  - **A single source of truth**. Because of the checks outlined above you can be sure that whatever your API document says is in fact what is going on in reality. You have a single source of truth to consult when asking an API related question, such as "Remind me again, which fields does the endpoint /user/info return?".

  - Based on [Pyramid](https://trypyramid.com), a **mature Python Web framework**. Companies such as Mozilla, Yelp, RollBar and SurveyMonkey [trust Pyramid](https://trypyramid.com/community-powered-by-pyramid.html), and the new [pypi.org](https://github.com/pypa/warehouse) runs on Pyramid too. Pyramid is thoroughly [tested](https://travis-ci.org/Pylons/pyramid) and [documented](http://docs.pylonsproject.org/projects/pyramid/en/latest/), providing flexibility, performance, and a large ecosystem of [high-quality add-ons](https://trypyramid.com/extending-pyramid.html).


  ## Features


  - Validates your API document (for example, `openapi.yaml` or `openapi.json`) against the OpenAPI 3.0 specification using the [openapi-spec-validator](https://github.com/p1c2u/openapi-spec-validator).

  - Generates and serves the [Swagger try-it-out documentation](https://swagger.io/tools/swagger-ui/) for your API.

  - Validates incoming requests *and* outgoing responses against your API document using [openapi-core](https://github.com/p1c2u/openapi-core).



  ## Getting started


  1. Declare `pyramid_openapi3` as a dependency in your Pyramid project.


  2. Include the following lines:


  ```python

  config.include("pyramid_openapi3")

  config.pyramid_openapi3_spec('openapi.yaml', route='/api/v1/openapi.yaml')

  config.pyramid_openapi3_add_explorer(route='/api/v1/')

  ```


  3. Use the `openapi` [view predicate](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/viewconfig.html#view-configuration-parameters) to enable request/response validation:


  ```python

  @view_config(route_name="foobar", openapi=True, renderer='json')

  def myview(request):
      return request.openapi_validated.parameters
  ```


  For requests, `request.openapi_validated` is available with two fields: `parameters` and `body`.

  For responses, if the payload does not match the API document, an exception is raised.



  ## Demo / Examples


  There are two examples provided with this package:

  * A fairly simple [single-file app providing a Hello World API](https://github.com/Pylons/pyramid_openapi3/tree/master/examples/singlefile).

  * A slightly more [built-out app providing a TODO app API](https://github.com/Pylons/pyramid_openapi3/tree/master/examples/todoapp).


  Both examples come with tests that exhibit pyramid_openapi's error handling and validation capabilities.


  A **fully built-out app**, with 100% test coverage, providing a [RealWorld.io](https://realworld.io) API is available at [niteoweb/pyramid-realworld-example-app](https://github.com/niteoweb/pyramid-realworld-example-app). It is a Heroku-deployable Pyramid app that provides an API for a Medium.com-like social app. You are encouraged to use it as a scaffold for your next project.



  ## Design defense


  The authors of pyramid_openapi3 believe that the approach of validating a manually-written API document is superior to the approach of generating the API document from Python code. Here are the reasons:


  a) Both generation and validation against a document are lossy processes. The underlying libraries running the generation/validation will always have something missing. Either a feature from the latest OpenAPI specification, or an implementation bug. Having to fork the underlying library in order to generate the part of your API document that might only be needed for the frontend is unfortunate.

     Validation on the other hand allows one to skip parts of validation that are not supported yet, and not block a team from shipping the document.

  b) Validation approach does sacrifice DRY-ness, one has to write the API document and then the (view) code in Pyramid. Feels a bit redundant at first. However, this provides a clear separation between the intent and the implementation.


  c) Generation approach has the drawback of having to write Python code even for parts of the API document that the Pyramid backend does not handle, as it might be handled by a different system, or be specific only to documentation or only to the client side of the API. This bloats your Pyramid codebase with code that does not belong there.


  ## Running tests


  You need to have [pipenv](https://pipenv.readthedocs.io/) and Python 3.7 or 3.8 installed on your machine. Then you can run:

      $ make tests

  ## Related packages


  These packages tackle the same problem-space:


  - [pyramid_oas3](https://github.com/kazuki/pyramid-oas3) seems to do things very similarly to pyramid_openapi3, but the documentation is not in English and we sadly can't fully understand what it does just reading the code.

  - [pyramid_swagger](https://github.com/striglia/pyramid_swagger) does a similar
    thing, but for Swagger 2.0 documents.
  - [connexion](https://github.com/zalando/connexion) takes the same "write spec first, code second" approach as pyramid_openapi3, but is based on Flask.

  - [bottle-swagger](https://github.com/ampedandwired/bottle-swagger) takes the same "write spec first, code second" approach too, but is based on Bottle.

  - [pyramid_apispec](https://github.com/ergo/pyramid_apispec) uses generation with
    help of apispec and marshmallow validation library. See above [why we prefer validation instead of generation](#design-defense).

  ## Deprecation policy


  We do our best to follow the rules below.


  * Support the latest two releases of Python, currently Python 3.7 and 3.8.

  * Support only a single release of `openapi-core` and its sub-dependencies. See `Pipfile.lock` for a frozen-in-time known-good-set of all dependencies.


  ## Use in the wild


  A couple of projects that use pyramid_openapi3 in production:


  - [WooCart API](https://app.woocart.com/api/v1/) - User control panel for WooCart Managed WooCommerce service.

  - [Kafkai API](https://app.kafkai.com/api/v1) - User control panel for Kafkai text generation service.
OverSpeedIO/koa2-oas3: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:CFEF96:D65E05:678EE367 and timestamp 2025-01-20 23:59:35
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Mermade/openapi-webconverter: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:24F2B57:25AB96D:678EE362 and timestamp 2025-01-20 23:59:30
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
zweidenker/OpenAPI: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC8:1EDF9F:2511559:25CAD4B:678EE3F1 and timestamp 2025-01-21 00:01:53
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
denismakogon/fn-openapi-v3: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC3:4925F:44A842A:461F206:678EE38E and timestamp 2025-01-21 00:00:14
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
nasa9084/go-openapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD2:4925F:44B1CF9:4628DB7:678EE3BB and timestamp 2025-01-21 00:00:59
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
foxel/openapi3-typescript-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCB:201941:57C0F7E:597D212:678EE39A and timestamp 2025-01-21 00:00:26
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
muskratjs/muskrat: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCE:2B946D:5374182:5530541:678EE3B9 and timestamp 2025-01-21 00:00:57
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
kinecosystem/ecosystem-api: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCA:2AAE2C:511AEE7:52D63FA:678EE3A6 and timestamp 2025-01-21 00:00:38
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
microprofile-extensions/openapi-ext: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDD:B00D1:522AF5F:53E7AE6:678EE3B5 and timestamp 2025-01-21 00:00:53
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
philosowaffle/vs-openapi-designer: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44B33B4:462A4EF:678EE3C1 and timestamp 2025-01-21 00:01:05
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ckaratzas/tus-server-implementation: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD6:1EDF9F:24F97A3:25B2884:678EE387 and timestamp 2025-01-21 00:00:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Dzoukr/OpenAPIParser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCF:2AAE2C:510B523:52C64BB:678EE359 and timestamp 2025-01-20 23:59:21
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
confuser/exegesis-koa: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D05778:D6C8AF:678EE388 and timestamp 2025-01-21 00:00:09
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
unifysell/unifysell-sdk-php: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44BA817:4631BBC:678EE3E5 and timestamp 2025-01-21 00:01:41
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
kumuluz/kumuluzee-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:2501244:25BA55C:678EE3AA and timestamp 2025-01-21 00:00:42
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
koumoul-dev/soas: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCD:2AAE2C:511B4A3:52D69D7:678EE3A7 and timestamp 2025-01-21 00:00:39
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
entrepreneur-interet-general/open_api_schemas_to_markdown: "{\"message\":\"API
  rate limit exceeded for 52.160.165.138. (But here's the good news:
  Authenticated requests get a higher rate limit. Check out the documentation
  for more details.) If you reach out to GitHub Support for help, please include
  the request ID 7CCF:2AAE2C:51169E4:52D1DB5:678EE392 and timestamp 2025-01-21
  00:00:19
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
brreg/openAPI: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD7:201941:57BAA97:5976B61:678EE380
  and timestamp 2025-01-21 00:00:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
funa1g/multi-file-oas-example: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD5:124B:D09E71:D710CE:678EE39C and timestamp 2025-01-21 00:00:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
koshevy/oapi3codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC6:201941:57C3C9E:597FFF5:678EE3A7 and timestamp 2025-01-21 00:00:39
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
acme-software/typeswagger: >-
  TypeSwagger - A Swagger / OpenApi Spec DSL for Scala

  ====================================================


  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Build Status](https://travis-ci.org/acme-software/typeswagger.svg?branch=master)](https://travis-ci.org/acme-software/typeswagger) [![Codacy Badge](https://api.codacy.com/project/badge/Grade/1a2d0c493bd9416996a8436871a17b01)](https://www.codacy.com/app/frne/typeswagger?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=acme-software/typeswagger&amp;utm_campaign=Badge_Grade)


  **TypeSwagger provides a typesafe Scala DSL to build OpenApi (Swagger) Specifications. It can be used within any Scala 

  project to generate HTTP API documentations.**


  ## Example


  The following example defines a simple api with two endpoints (`GET` and `DELETE`) on one path (`/user/{id}`). The 

  example contains mandatory information, and also some, but not all optional fields. For better readability, optional 

  fields are calld by value.


  ```scala

  import ch.acmesoftware.typeswagger.v3.OpenApi

  import ch.acmesoftware.typeswagger.v3.OpenApi._

  import ch.acmesoftware.typeswagger.v3.Implicits._


  OpenApi.create("ApiDoc", "1.0.0").
    // add global information
    withInfo(license = "MIT", licenseUrl = "https://opensource.org/licenses/MIT").
    // add a tag
    withTag("testtag", "A tag description", externalDocs = doc("http://link.to.doc")).
    // define an api path
    path("/user/{id}", summary = "Path summary") {
      // http GET operation  on the path
      (GET >> op("A summary", "GET operation for this route").
        withParameter("id", PATH, Schema.int, description = "The id...", required = true).
        withParameter("comment", QUERY, Schema.string, description = "Some deprecated comment", 
                      deprecated = true).
        withTag("testtag")) ~
      // http DELETE operation on the path
      (DELETE >> op("Delete operation").
        withParameter("id", PATH, Schema.int, description = "The id...", required = true))
    }.
    // add endpoint server(s)
    withServer("http://localhost:9000/api").
    withServer("https://production.tld/api", Some("Production Server")).
    // build json string
    toJson()
  ```


  ## Usage


  Install the Ivy depenency via SBT:


  ```scala

  "ch.acmesoftware" %% "typeswagger" % "{version}"

  ```


  Add imports:


  ```scala

  import ch.acmesoftware.typeswagger.v3.OpenApi

  import ch.acmesoftware.typeswagger.v3.OpenApi._


  // syntactic sugar for convenient DSL, but optional

  import ch.acmesoftware.typeswagger.v3.Implicits._ 

  ```


  ### Info


  Add global information using the `withInfo` function. All parameters are optional. If not using the implicits, 

  use `Some("str")` as parameter value:


  ```scala

  import ch.acmesoftware.typeswagger.v3.OpenApi

  import ch.acmesoftware.typeswagger.v3.OpenApi._

  import ch.acmesoftware.typeswagger.v3.Implicits._


  OpenApi.create("ApiDoc", "1.0.0", description = "API Doc built with TypeSwagger", termsOfService = "/tos").
    withInfo(license = "MIT", licenseUrl = "https://opensource.org/licenses/MIT", 
             contactName = "John Doe", contactEmail = "info@server.tld", contactUrl = "https://webpage.tld")
  ```


  ## Features


  * Convenient, typesafe DSL to define OpenApi v3 specifications

  * Integrated JSON rendering

  * Integrated YAML rendering (TODO)

  * Java API (TODO)

  * Integration with common HTTP-Frameworks (TODO)


  ## Contributions


  Please use the GitHub issue tracking and PullRequests. Any help is very welcome.


  ## License


  This project is licensed under the MIT license. See [LICENSE](./LICENSE) for more information.
unjello/openapi-mockk: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCB:201941:57D17E5:598DF56:678EE3E5 and timestamp 2025-01-21 00:01:41
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Bankdata/gradle-swagger-plugin: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC6:201941:57B368A:596F431:678EE357 and timestamp 2025-01-20 23:59:19
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
chrisdostert/listener-from-oas3-js: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD4:2B946D:53687D8:552484C:678EE387 and timestamp 2025-01-21 00:00:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
smartrecruiters/openapi-schemas-validator: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CD3:1EDF9F:250A4ED:25C3AA4:678EE3D1 and timestamp 2025-01-21 00:01:21
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
kazuki/pyramid-oas3: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDC:4925F:44AD468:462439E:678EE3A4 and timestamp 2025-01-21 00:00:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
vivek-26/koa-openapi3-router: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57D1EA5:598E66C:678EE3E7 and timestamp 2025-01-21 00:01:43
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tandfgroup/schema-oas: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCC:2AAE2C:5127AB8:52E337F:678EE3DD and timestamp 2025-01-21 00:01:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
data-studio/data-studio: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:24FAC8D:25B3DBC:678EE38D and timestamp 2025-01-21 00:00:13
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
unjello/openapi-parser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:250F076:25C8792:678EE3E6 and timestamp 2025-01-21 00:01:42
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
joar/py-openapilib: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD8:2AAE2C:511A421:52D5920:678EE3A3 and timestamp 2025-01-21 00:00:35
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
SensibleWood/swaggerui-webpack-boilerplate: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CD1:124B:CFFCC2:D66B83:678EE36C and timestamp 2025-01-20 23:59:40
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
pglass/py-openapi-schema-to-json-schema: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CD3:1EDF9F:2506601:25BFAB7:678EE3C1 and timestamp 2025-01-21 00:01:05
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
riddhi89/simple-flask-project: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD0:1F5FC7:5528063:56E4201:678EE3C7 and timestamp 2025-01-21 00:01:11
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Mermade/openapi-gui: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC0:1F5FC7:55115EE:56CD03C:678EE361 and timestamp 2025-01-20 23:59:29
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Mermade/widdershins: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC6:201941:57B5CAC:5971B11:678EE363 and timestamp 2025-01-20 23:59:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Mermade/oas-kit: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCA:2AAE2C:510C32D:52C7334:678EE35F and timestamp 2025-01-20 23:59:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
OpenAPITools/openapi-generator-cli: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCE:2B946D:536201C:551DE08:678EE366 and timestamp 2025-01-20 23:59:34
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
stoplightio/spectral: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDC:4925F:44B7C2D:462EEF1:678EE3D7 and timestamp 2025-01-21 00:01:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
m3-moretv/smogger: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC9:201941:57C5DD6:59821AD:678EE3B0 and timestamp 2025-01-21 00:00:48
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
anupsaund/vertx-auto-swagger: >+
  # vertx-auto-swagger


  > TL;DR - How to get java Vert.x to automatically generate a Open API v3 spec (A.k.a. Swagger) and serve it to Swagger UI, served through Vert.x.


  ### Motivation

  I needed a way to generate a swagger spec from Java code, instead of having to hand craft a swagger JSON file.


  I also wanted to serve out the spec from Vert.x into Swagger UI so that it could be used by all.


  There is a more detailed write up available on my blog post: 

  http://anupsaund.com/how-to-generate-openapi-3-0-swagger-spec-from-vertx-java-and-serve-it-via-swagger-ui


  ### What does it do?


  1.  Read Java Annotations and map them into a openAPI spec.

  2.  Serve the openAPI spec out on an end point.

  3.  Serve a distributable version of SwaggerUI which presents the swagger spec from point 2.



  ### Screenshot of Swagger UI

  ![SwaggerUI](UI.PNG "SwaggerUI")


  ### What does a typical Java annotation look like?


  ```java

  @Operation(summary = "Find products by ID", method = "GET", operationId = "product/:productId",
      tags = {
        "Product"
      },
      parameters = {
        @Parameter(in = ParameterIn.PATH, name = "productId",
          required = true, description = "The unique ID belonging to the product", schema = @Schema(type = "string"))
      },
      responses = {
        @ApiResponse(responseCode = "200", description = "OK",
          content = @Content(
            mediaType = "application/json",
            encoding = @Encoding(contentType = "application/json"),
            schema = @Schema(name = "product", example =
              "{" +
                "'_id':'abc'," +
                "'title':'Red Truck'," +
                "'image_url':'https://images.pexels.com/photos/1112597/pexels-photo-1112597.jpeg'," +
                "'from_date':'2018-08-30'," +
                "'to_date':'2019-08-30'," +
                "'price':'125.00'," +
                "'enabled':true" +
                "}",
              implementation = Product.class)
          )
        ),
        @ApiResponse(responseCode = "404", description = "Not found."),
        @ApiResponse(responseCode = "500", description = "Internal Server Error.")
      }
    )
  ```


  ## How to get it running


  > Dependancies: Maven, JAVA and a JAVA IDE is helpful.


  1. Clone the repository and use Maven to install dependancies.

  1. In Intellij set up a config to run a Java Application with the following settings.


  ``` 
    Main Class: io.vertx.core.Launcher
    VM Options: <up to you, or leave blank>
    Program Arguments: run io.vertx.VertxAutoSwagger.MainVerticle
  ```


  3. After tha application has launched, go to http://localhost:8080/doc/index.html


  #### Special Credit

  Goes to Christos Karatzas for creating the generator class which has been used and enhanced for this respository:
   
  His original repository is available at: https://github.com/ckaratzas/vertx-openapi-spec-generator

mrin9/OpenAPI-Viewer: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD4:2B946D:5373DBB:5530160:678EE3B8 and timestamp 2025-01-21 00:00:56
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tiangolo/fastapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD2:4925F:44B9D14:4631078:678EE3E1 and timestamp 2025-01-21 00:01:37
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ReDoc-ly/create-openapi-repo: >
  # create-openapi-repo


  [![NPM version][npm-image]][npm-url] [![Dependency Status][daviddm-image]][daviddm-url]


  > Generate an organized multi-file OpenAPI repository.


  <center>


  <img src="./logo.png" width="500px"/>


  </center>


  ## Who?

  You! Hello.  Do you need to write or contribute to an OpenAPI definition?  If so, read on...


  ## What?

  We recommend a docs-like-code approach to OpenAPI definitions:

  - Write it using your favorite text-editor or IDE (we love VSCode).

  - Organize it into multiple files and folders to make it easy to navigate.

  - Store it using source control (such as GitHub).

  - Continuously validate it using our free [openapi-cli tool](https://github.com/redocly/openapi-cli) or our free continuous validation service (coming soon).

  - Bundle it (for a smaller footprint to use in other tools or for tools that do not support a multi-file format).


  ## Why?

  There are a few advantages in hosting your API definition on GitHub:
   - Community engagement (PR's and issues -- if you have a public repo)
   - Advertisment in the GitHub community
   - Hosting on GitHub pages (perfect uptime, CDN, Jekyll, custom domains with CNAME)
   - Revision history, branching, CI
   - Review and approval workflows using Pull Requests
   - Fast on-boarding time (developers and tech writers know how to use GitHub :smile:)
   - Fully compatible with Redocly API Reference too

   There are also some advantages to a multi-file YAML format OpenAPI definition:
   - Reuse schema objects to keep things DRY (don't repeat yourself) 
   - Smaller diffs compared to JSON (especially for markdown descriptions)
   - Easier to navigate
   - Easier to edit with confidence

  ## Features

  This generator helps to create a GitHub repo with the following features:
   - Split a big (or small) OpenAPI definition into smaller files organized into folders
   - Bundle it into a single file for deployment
   - Continuous integration/deployment on Travis or Redocly Workflows
   - Code samples as separate files
   - Automate deployment of your OpenAPI definition and docs
   - OpenAPI definition is validated after each commit
   - Live editing in your editor of choice :heart_eyes:

  ## Structure


  You will have a structure similar to this:

  ```
      ├── .redocly.yaml
      ├── LICENSE
      ├── README.md
      ├── docs
      │   ├── favicon.png
      │   └── index.html
      ├── openapi
      │   ├── README.md
      │   ├── code_samples
      │   │   ├── C#
      │   │   │   └── echo
      │   │   │       └── post.cs
      │   │   ├── PHP
      │   │   │   └── echo
      │   │   │       └── post.php
      │   │   └── README.md
      │   ├── components
      │   │   └── README.md
      │   └── paths
      │       └── README.md
      └── package.json
  ```


  However, you can adjust it to any structure you prefer.


  The `openapi` folder is where your OpenAPI definition will live.  Inside there, and the sub-folders, there are `README.md` files to help guide you further. This is also where your entrypoint `openapi.yaml` will live.


  The `components` folder is where you will organize sub-folders such as `schema` to define your schema.


  The `paths` folder is where you will organize your paths. There will be a 'README.md' file in there with suggestions for how to organize it into specially named files (or folders) that use an `@` in place of a `/` (because files cannot have a `/` character in them).  You will also be able to use path parameters by wrapping them in curly braces `{example}`.


  The `.redocly.yaml` file is a universal configuration for various Redocly tools including the lint tool and reference doc engine.


  ## Commands


  The generated repository includes installing a dependency for our `openapi-cli` tool which supports commands such as `validate`, `bundle`, and more.  There are scripted shortcuts defined in the repository's `package.json`.  



  ## Examples of generated repositories

  - https://github.com/Rebilly/RebillyAPI

  - https://github.com/thingful/openapi-spec

  - https://github.com/TwineHealth/TwineDeveloperDocs


  ## How to generate your repository


  We assume you already have [node.js](https://nodejs.org/) installed.


  - Install `create-openapi-repo` globally:

  ```bash

  npm install -g create-openapi-repo

  ```

  or use [`npx`](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b):


  We'll use `npx` in this example.  However, remove `npx` if you installed it globally.


  ```bash

  npx create-openapi-repo

  ```


  You will be presented with some questions. You can create a new definition or use an existing definition to initialize your project.


  Please note, if you do start a new one, remember to [create a GitHub repo](https://help.github.com/articles/create-a-repo/#create-a-new-repository-on-github) where your OpenAPI definition will live.


  If you use the prior version of this generated repository, please read the following upgrade instructions.


  #### Upgrading from a prior version


  Migrate your repository from a previous structure of OpenAPI repo to this newer structure with our migration tool. 


  Run this in the root folder of your repo.


  ```bash

  npx create-openapi-repo --migrate-2-3

  ```


  Note: the migration tool does not migrate plugins automatically. You would need to manually add them to the `transformers` folder. 


  ## Support


  Thank you for wanting to support us. Here are some ideas how to support us:


  * Star us

  * Tell a friend or colleague about us (or Tweet about us)

  * Write an article about it (and let us know) -- open an issue to let us know, with the link.

  * Consider our commercial products if are looking for automation to ease the docs-like code workflow, hosting along with conveniences like custom domains, access controls and previews, API reference documentation, or a full developer portal:  https://redoc.ly


  [npm-image]: https://badge.fury.io/js/generator-openapi-repo.svg

  [npm-url]: https://npmjs.org/package/generator-openapi-repo

  [daviddm-image]: https://david-dm.org/Rebilly/generator-openapi-repo.svg?theme=shields.io

  [daviddm-url]: https://david-dm.org/Rebilly/generator-openapi-repo
postmanlabs/openapi-to-postman: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDC:4925F:44B3885:462A9DA:678EE3C2 and timestamp 2025-01-21 00:01:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
hh-h/aiohttp-swagger3: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCD:2AAE2C:5119C39:52D5104:678EE3A1 and timestamp 2025-01-21 00:00:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
dolmen-go/openapi-preprocessor: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDF:2AAE2C:5115B91:52D0F1C:678EE38E and timestamp 2025-01-21 00:00:15
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
matthewtrask/disapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD9:124B:D0EFD0:D763B9:678EE3B3 and timestamp 2025-01-21 00:00:51
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
APIs-guru/openapi-directory: >
  


  ![banner]


  [![APIs in collection][numApis-image]][apisDir-link]

  [![OpenAPI definitions][numSpecs-image]][apisDir-link]

  [![Endpoints][endpoints-image]][apisDir-link]

  [![Fixes][fixes-image]][apisDir-link]

  [![Providers][providers-image]][apisDir-link]

  [![Drivers][drivers-image]][apisDir-link]


  ![oad Actions](https://api.meercode.io/badge/Mermade/oad?type=ci-count&token=y7EdP0Hxb6q8PoG3h2JEmDVQDatZmttj&lastDay=7)

  [![Chat on Slack][slack-image]][slack-link]


  [![Share on Twitter][twitter-image]][twitter-link]

  [![Follow on Twitter][twitterFollow-image]][twitterFollow-link]

  <a href="#backers" alt="sponsors on Open Collective"><img src="https://opencollective.com/openapi-directory/backers/badge.svg" /></a> <a href="#sponsors" alt="Sponsors on Open Collective"><img src="https://opencollective.com/openapi-directory/sponsors/badge.svg" /></a> <a href="#partners" alt="Partners on Open Collective"><img src="https://opencollective.com/openapi-directory/partner/badge.svg" /></a>


  Directory of API definitions in [OpenAPI(fka Swagger)](https://openapis.org) [2.0](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/2.0.md) and [3.x](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md) formats.<BR>

  API access to collection: [Go!][apiDoc-link] - We also have RSS feeds for [added](https://api.apis.guru/v2/added.rss) and [updated](http://api.apis.guru/v2/list.rss) APIs.


  [![Add API][addAPI-image]][addAPI-link]


  Our goal is to create the most comprehensive, standards-compliant and up-to-date directory of machine-readable API definitions, with the following principles:

  - Open source, community driven project.

  - Only publicly available APIs (free or paid).

  - Anyone can add or change an API, not only API owners.

  - All data can be accessed through a [REST API][apiDoc-link].


  If you want to reference this project and you need an icon or even a banner, check our [branding guide](https://github.com/APIs-guru/branding).


  The project was started by [Ivan Goncharov](https://github.com/IvanGoncharov) of APIs.guru, it is now maintained by [Mike Ralphson](https://github.com/MikeRalphson) of [Mermade Software](https://github.com/mermade). Check out our other [OpenAPI-related projects](https://github.com/search?q=org%3AMermade+openapi).


  APIs.guru provide services and consultancy around the GraphQL and OpenAPI specifications and APIs in general.

  You can contact us at founders@apis.guru / mike.ralphson@gmail.com


  The OpenAPI Directory is sponsored by [Speakeasy](https://www.speakeasyapi.dev/?utm_source=apigurus+repo&utm_medium=github+sponsorship) - Your API: Enterprise ready in a click.


  [![Speakeasy logo](https://apis.guru/assets/images/speakeasy-github-sponsor-dark.svg)](https://www.speakeasyapi.dev/?utm_source=apigurus+repo&utm_medium=github+sponsorship)


  [![Become a partner](https://opencollective.com/openapi-directory/tiers/partner.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)


  What does APIs.guru do?

  --------------------------

  * Filter out private and non-reliable APIs

  * [Convert](https://github.com/Mermade/oas-kit) non-OpenAPI formats into OpenAPI 3.x

  * Fix mistakes, ~80% of definitions have some

  * Add additional data, like: logo, categories, …

  * Update definitions on at least a weekly basis


  API definition acceptance criteria

  ----------------------------------

  * Public - anyone can access it as long as they follow some clearly defined steps (subscribe, pay fees, etc.).

  * Persistent - API is made with long-lived goal, and not for a particular event (conference, hackathon, etc.).

  * Useful - API should provide useful functionality not only for its owner.


  Update procedure

  --------------------------

  All definitions are automatically updated from their original source.

  You can see this in the `x-origin` property within each [openapi.yaml](https://github.com/APIs-guru/openapi-directory/search?utf8=%E2%9C%93&q=x-origin+filename%3Aopenapi.yaml) or [swagger.yaml](https://github.com/APIs-guru/openapi-directory/search?utf8=%E2%9C%93&q=x-origin+filename%3Aswagger.yaml) file.

  We run our update script at least weekly and automatically revalidate before committing.

  If you see some APIs are not updated for more than 2 weeks please open [an issue](https://github.com/APIs-guru/openapi-directory/issues/new).


  [@seriousme](https://github.com/seriousme) kindly runs a backup validation process based on the official OpenAPI-Specification [JSON Schemas](https://github.com/OAI/OpenAPI-Specification/tree/main/schemas) [here](https://github.com/seriousme/openapi-schema-validator/blob/master/test/realworld/failed.md#results-of-real-world-testing).


  Own-Label API Directory

  -----------------------


  ![Own-Label logo](branding/own-label.png)


  **Do you want an 'own-label' or internal version of the OpenAPI Directory to create your own marketplace or keep track and document both your internal APIs and the external API definitions your organisation depends on? If so contact us now!**


  Existing integrations

  --------------------------


  [![Become a backer](https://opencollective.com/openapi-directory/tiers/backer.svg?avatarHeight=36&width=600)](https://opencollective.com/openapi-directory)

   - [HTTP Toolkit](https://httptoolkit.tech/) **Beautiful & open-source tools to debug, test and develop with HTTP(S)**
   - [OpenAPI-Directory-JS](https://github.com/httptoolkit/openapi-directory-js) - The OpenAPI directory precompiled & indexed for JS usage & searching
   - [Apideck](https://apideck.com) - Faster data integration through Unified APIs
   - [Microsoft Kiota](https://microsoft.github.io/kiota/) - Generate an API client to call any OpenAPI described API
   - [API Tracker](https://apitracker.io/) - Aggregates 14,000+ APIs, SDKs, API specifications, integrations and DX profiles. It aims to help developers access the information they need to integrate APIs faster
   - [API Watch](https://www.apiwatch.io) - Keep track of the APIs you use
   - https://pipedream.com/ - The integration platform built for developers
   - https://any-api.com - Documentation and Test Consoles for Public APIs
   - https://datafire.io - Allows you to process and transfer data between APIs, databases, and more
   - [https://sdks.io](https://sdks.io/Search/FindSDKs?Bridge=APIs.guru) - Explore Automatically Generated SDKs
   - [https://cenit.io](https://cenit.io/directory?spec=swagger) - Data integration platform
   - [commandcar](https://github.com/tikalk/commandcar#installing-from-api-models) - Curl on steroids
   - [Material Swagger UI Hub](https://darosh.github.io/angular-swagger-ui-material/hub/) - testing and exploring hub for Material Swagger UI demo
   - [Paw](https://paw.cloud/) - HTTP client for Mac - You can import definitions and directly play with the APIs, [see how](https://paw.cloud/docs/examples/search-apis)
   - [Bitscoop](https://bitscoop.com/) - A better way to create and maintain integrations
   - [WinSwag](https://github.com/SvenEV/WinSwag) - A UWP app for loading Swagger definitions and exploring REST APIs
   - [ReadMe.io](https://preview.readme.io) - Beautiful, personalized, interactive developer hubs
   - [Velosimo](https://connect.velosimo.io/open_api_directory) - Integration platform for eGovernment
   - [Mockcoon](https://mockoon.com/mock-samples/category/all/) - API mock samples for your project

  Also used as test suite in the following projects:
   - [Speakeasy](https://www.speakeasyapi.dev/?utm_source=apigurus+repo&utm_medium=github+sponsorship) - **Generate SDKs Now. Gives your users the DevEx that makes API integrations easy**
   - [ReDoc](https://github.com/Redocly/redoc) - OpenAPI-generated API Reference Documentation
   - [swagger-parser](https://github.com/BigstickCarpet/swagger-parser) - OpenAPI parser and validator for Node and browsers
   - [OpenAPI-schema-validator](https://github.com/seriousme/openapi-schema-validator) - OpenApi schema validation for OpenApi versions v2, v3.0.x and v3.1.x
   - [SwaggerProvider](https://github.com/sergey-tihon/SwaggerProvider) - F# Type Provider for Swagger
   - [ardoq-swagger-addon](https://github.com/ardoq/ardoq-swagger-addon) - Ardoq OpenAPI addon
   - [swagvali](https://github.com/subeeshcbabu/swagvali/) - Module to build validators for OpenAPI Request parameters and Response objects
   - [swagger-search](https://github.com/IG-Group/swagger-search) - An application that collects and indexes swagger docs from your microservices architecture


  Integration with 3rd-party services

  --------------------------

  We discourage you from using Github RAW links or Git directly, the repository structure may change in the future.

  Instead, we strongly recommend you to use our [REST API][apiDoc-link].


  Licenses

  --------------------------

  All API definitions contributed to project by authors are covered by the [CC01.0](https://creativecommons.org/publicdomain/zero/1.0/) license.<br>

  All API definitions acquired from public sources under the [Fair use](http://en.wikipedia.org/wiki/Fair_use) principle.


  Definition sources

  --------------------------

  Some definitions are taken from Open Source projects:
   - [darklynx/swagger-api-collection](https://github.com/darklynx/swagger-api-collection) - OpenAPI description for Instagram API
   - [Mermade/bbcapis](https://github.com/Mermade/bbcapis) - OpenAPI definitions for the BBC Nitro and iBL APIs
   - [amardeshbd/medium-api-specification](https://github.com/amardeshbd/medium-api-specification) - OpenAPI 2.0 description for Medium API
   - [faragorn/open-api-specs](https://github.com/faragorn/open-api-specs) - OpenAPI definition for the Giphy API

  [banner]: https://apis.guru/branding/banner.svg "APIs.guru"

  [twitter-image]: https://img.shields.io/twitter/url/http/APIs.guru.svg?style=social

  [twitter-link]: https://twitter.com/intent/tweet?text=http%3A%2F%2FAPIs.guru%20-%20Wikipedia%20for%20%23Web%20%23APIs%20by%20@APIs_guru%20pic.twitter.com/UhlhbMw1NP

  [twitterFollow-image]: https://img.shields.io/twitter/follow/APIs_guru.svg?style=social

  [twitterFollow-link]: https://twitter.com/intent/follow?screen_name=APIs_guru

  [slack-image]: https://img.shields.io/badge/Slack-APIs_Working_Group-brightgreen

  [slack-link]: https://join.slack.com/t/mermade/shared_invite/zt-g78g7xir-MLE_CTCcXCdfJfG3CJe9qA

  [numApis-image]: https://api.apis.guru/badges/apis_in_collection.svg

  [numSpecs-image]: https://api.apis.guru/badges/openapi_specs.svg

  [endpoints-image]: https://api.apis.guru/badges/endpoints.svg

  [fixes-image]: https://api.apis.guru/badges/fixes.svg

  [providers-image]: https://api.apis.guru/badges/providers.svg

  [drivers-image]: https://api.apis.guru/badges/drivers.svg

  [apisDir-link]: ./APIs

  [addAPI-image]: https://cloud.githubusercontent.com/assets/8336157/15861614/7e31511a-2cd5-11e6-8b79-38ad0f61e598.png

  [addAPI-link]: https://apis.guru/add-api/

  [apiDoc-link]: https://apis.guru/api-doc/


  ## Contributors


  This project exists thanks to all the people who [contribute](CONTRIBUTING.md).

  <a href="https://github.com/APIs-guru/openapi-directory/graphs/contributors"><img src="https://opencollective.com/openapi-directory/contributors.svg?width=890&button=false" /></a>


  ## Asynchronous APIs


  See also [AsyncAPI-Directory](https://apis.guru/asyncapi-directory/APIs/)


  ## Backers


  Thank you to all our backers! 🙏 [Become a backer](https://opencollective.com/openapi-directory#backer).


  <a href="https://opencollective.com/openapi-directory#backers" target="_blank"><img src="https://opencollective.com/openapi-directory/backers.svg?width=890"></a>



  ## Sponsors


  Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor](https://opencollective.com/openapi-directory#sponsor).


  <a href="https://opencollective.com/openapi-directory/sponsor/0/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/0/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/1/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/1/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/2/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/2/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/3/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/3/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/4/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/4/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/5/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/5/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/6/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/6/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/7/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/7/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/8/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/8/avatar.svg"></a>

  <a href="https://opencollective.com/openapi-directory/sponsor/9/website" target="_blank"><img src="https://opencollective.com/openapi-directory/sponsor/9/avatar.svg"></a>


  ## Partners


  Support this project by becoming a partner. Your logo will be displayed prominently in this project and we will work with you to publicise and showcase your projects. [Become a partner](https://opencollective.com/openapi-directory#partner).
apiaryio/dredd-transactions: >
  # Dredd Transactions


  [![npm version](https://badge.fury.io/js/dredd-transactions.svg)](https://badge.fury.io/js/dredd-transactions)

  [![Build Status](https://travis-ci.org/apiaryio/dredd-transactions.svg?branch=master)](https://travis-ci.org/apiaryio/dredd-transactions)

  [![Build status](https://ci.appveyor.com/api/projects/status/hh8l50ssai3p4d3f/branch/master?svg=true)](https://ci.appveyor.com/project/Apiary/dredd-transactions/branch/master)

  [![Known Vulnerabilities](https://snyk.io/test/npm/dredd-transactions/badge.svg)](https://snyk.io/test/npm/dredd-transactions)



  Dredd Transactions library compiles *HTTP Transactions* (simple Request-Response pairs) from API description document.


  > **Note:** To better understand *emphasized* terms in this documentation, please refer to the [Glossary of Terms][api-blueprint-glossary]. All data structures are described using the [MSON][mson-spec] format.


  This project supersedes [Blueprint Transactions][blueprint-transactions] library.



  ## Features


  * Inherits parameters from parent *Resource* and *Action* sections.

  * Expands *URI Templates*.

  * Warns on undefined placeholders in *URI Templates* (both query and path).

  * Validates URI parameter types.

  * Selects first *Request* and first *Response* if multiple are specified in the API description document.



  ### Deprecated Features


  * Compiles [Transaction Name][transaction-object-spec] string (vague identifier) for each *Transaction*.

  * Provides [Transaction Origin][transaction-object-spec] with pointers to [API Elements][api-elements] derived from the original API description document.


  > **Note:** These features are to be superseded by whatever comes out of the proposal in [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  ## Installation


  ```

  npm install dredd-transactions

  ```



  ## Development


  Dredd Transactions library is written in JavaScript (ES2015+).



  ## Usage


  ### `parse`


  Parses given API description document into API Elements with options specific

  to Dredd. Assumes that documents with unrecognizable format are

  [API Blueprint][api-blueprint]. Turns any parser failures, including

  the unexpected ones, into [API Elements][api-elements] annotations.


  ```javascript

  const parse = require('dredd-transactions/parse');

  // const { parse } = require('dredd-transactions');


  parse('# My API\n...', (error, parseResult) => {
    // ...
  });

  ```


  ### `compile`


  Compiles *HTTP Transactions* from given [API Elements][api-elements]. *HTTP Transactions* are a backbone data structure to Dredd.


  ```javascript

  const compile = require('dredd-transactions/compile');

  // const { compile } = require('dredd-transactions');


  const compileResult = compile(mediaType, apiElements, filename);

  ```


  > **Note:** The `filename` argument is optional and about to get deprecated, see [#6][filename-deprecation]



  ## Data Structures


  <a name="parse-result-object"></a>

  ### Parse Result (object)


  Result of parsing.


  - `mediaType`: `text/vnd.apiblueprint` (string, default, nullable) - Media type of the input format, can be empty in case of some fatal errors

  - `apiElements` ([API Elements][api-elements]) - API Elements parse result


  <a name="compile-result-object"></a>

  ### Compile Result (object)


  Result of compilation. Alongside compiled [Transaction][transaction-object-spec] objects contains also errors and warnings, mainly from API description parser.


  - `mediaType`: `text/vnd.apiblueprint` (string, default, nullable) - Media type of the input format, defaults to API Blueprint format. Can be empty in case of some fatal errors.

  - `transactions` (array[[Transaction][transaction-object-spec]]) - Compiled _HTTP Transactions_.

  - `annotations` (array[[Annotation][annotation-object-spec]]) - Errors and warnings which occurred during parsing of the API description or during compilation of transactions.


  <a name="transaction-object"></a>

  ### Transaction (object)


  Represents a single *HTTP Transaction* (Request-Response pair) and its location in the API description document. The location is provided in two forms, both **deprecated** as of now:


  - `name` - String representation, both human- and machine-readable.

  - `origin` - Object of references to nodes of [API Elements][api-elements] derived from the original API description document.


  > **Note:** These two forms of locating HTTP Transactions are to be superseded by whatever comes out of the proposal in [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  ### Properties


  - request (object) - HTTP Request as described in API description document.
      - method
      - uri: `/message` (string) - Informative URI of the Request.
      - headers (array) - List of HTTP headers in their original order, with the original casing of the header name, including multiple headers of the same name.
          - (object)
              - name: `Content-Type` (string)
              - value: `text/plain` (string)
      - body: `Hello world!\n` (string)
  - response (object) - Expected HTTP Response as described in API description document.
      - status: `200` (string)
      - headers (array) - List of HTTP headers in their original order, with the original casing of the header name, including multiple headers of the same name.
          - (object)
              - name: `Content-Type` (string)
              - value: `text/plain` (string)
      - body (string, optional)
      - schema (string, optional)


  ### Deprecated Properties


  - name: `Hello world! > Retrieve Message` (string) - Transaction Name, non-deterministic breadcrumb location of the HTTP Transaction within the API description document.

  - origin (object) - Object of references to nodes of [API Elements][api-elements] derived from the original API description document.
      - filename: `./api-description.apib` (string)
      - apiName: `My Api` (string)
      - resourceGroupName: `Greetings` (string)
      - resourceName: `Hello, world!` (string)
      - actionName: `Retrieve Message` (string)
      - exampleName: `First example` (string)

  > **Note:** These properties are to be superseded by whatever comes out of the proposal in [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  <a name="annotation-object"></a>

  ### Annotation (object)


  Description of an error or warning which occurred during parsing of the API description or during compilation of transactions.


  #### Properties


  - type (enum[string])
      - `error`
      - `warning`
  - component (enum[string]) - In which component of the compilation process the annotation occurred
      - `apiDescriptionParser`
      - `parametersValidation`
      - `uriTemplateExpansion`
  - message (string) - Textual annotation. This is – in most cases – a human-readable message to be displayed to user

  - location (array, fixed, nullable) - Location of the annotation in the source file, represented by a single range of line and column number pairs if available, or by `null` otherwise
      - (array) - Start location
          - (number) - Line number
          - (number) - Column number
      - (array) - End location
          - (number) - Line number
          - (number) - Column number

  ### Deprecated Properties


  - name: `Hello world! > Retrieve Message` (string) - Transaction Name, non-deterministic breadcrumb location of the relevant HTTP Transaction within the API description document.

  - origin (object) - Object of references to nodes of [API Elements][api-elements] derived from the original API description document.
      - filename: `./api-description.apib` (string)
      - apiName: `My Api` (string)
      - resourceGroupName: `Greetings` (string)
      - resourceName: `Hello, world!` (string)
      - actionName: `Retrieve Message` (string)
      - exampleName: `First example` (string)

  > **Note:** These properties are to be superseded by whatever comes out of the proposal in [apiaryio/dredd#227](https://github.com/apiaryio/dredd/issues/227).



  [dredd]: https://dredd.org

  [mson-spec]: https://github.com/apiaryio/mson

  [api-elements]: http://api-elements.readthedocs.org/

  [api-blueprint]: https://apiblueprint.org/

  [api-blueprint-glossary]: https://github.com/apiaryio/api-blueprint/blob/master/Glossary%20of%20Terms.md

  [blueprint-transactions]: https://github.com/apiaryio/blueprint-transactions/



  [filename-deprecation]: https://github.com/apiaryio/dredd-transactions/issues/6

  [compile-result-object-spec]: #compile-result-object

  [transaction-object-spec]: #transaction-object

  [annotation-object-spec]: #annotation-object

  [source-map]: https://github.com/refractproject/refract-spec/blob/master/namespaces/parse-result-namespace.md#source-map-element
mrin9/RapiDoc: >+
  <img alt="MrinDoc logo"
  src="https://github.com/rapi-doc/RapiDoc/blob/master/logo.png" width="60px" />



  <p align="center">
      <img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square"/>
      <img src="https://img.shields.io/github/size/rapi-doc/rapidoc/dist/rapidoc-min.js.svg?colorB=blue&label=minified&style=flat-square">
      <img src="https://img.shields.io/github/size/rapi-doc/rapidoc/dist/rapidoc-min.js.gz.svg?colorB=blue&label=zip&style=flat-square">
      <a href="https://discord.gg/X9evUeFY" alt="Join us on Discord">
          <img src="https://img.shields.io/discord/848913990360629268?style=flat-square" />
      </a>
      <a href="https://www.webcomponents.org/element/rapidoc" alt="published on webcomponents.org">
          <img src="https://img.shields.io/badge/webcomponents.org-rapidoc-blue.svg?style=social"/>
      </a>
  </p>        


  # RapiDoc

  Custom Element for Open-API spec viewing


  Join the [RapiDoc community on Discord](https://discord.gg/X9evUeFY)


  Sponsored by [Zuplo](https://zuplo.link/rapidoc-2) - Get a Stripe-like API experience for your customers in minutes - documentation, rate-limiting and API-key auth in minutes. 


  ## Features

  - Supports Swagger 2.0, OpenAPI 3.x.x 

  - Works with any framework or with no framework

  - Allows making API calls

  - Better Usability, 
    - all Models and Examples are expanded by default, eliminates the need to click and reveal.
    - Request fields are pre-populated with sample data
    - Takes only one click to make an API call
    - Request and response can be placed side-by-side for easy comparison
  - Branding and Personalization features makes it easy to follow any style guide
    - Comes with 2 Themes (Dark and Light)
    - Replace default logo with yours
    - Typography, allows changing fonts
    - Allows changing text-color, button-color, header-color and color of other UI elements
  - Plenty of customization options 
    - Add external contents at the top and bottom of the document,  you may add images, link, text, forms etc
    - Allows disabling API calling feature
    - Hide the header, so the user can't load any other OpenAPI Spec
    - Hide Authentication and provide your own pre-generated api-key 
    - Embed it inside another HTML document
    - Use it inside another framework (react, vue, angular, lit-element)
    - Use JavaScript to change its attributes, and it will react to those changes
    - Style the element with standard css (change padding, position, border, margin )
  - Lightweight and fast

  - Load local json spec from the disk

  - Supported on Chrome, FireFox and Safari. (Not yet tested on Edge)



  ## Documentation

  [Check out the usage and demos](https://rapi-doc.github.io/RapiDoc/)


  ## Examples

  [Examples and Test cases](https://rapi-doc.github.io/RapiDoc/list.html)



  ## Build Process

  ```bash

  # Clone / Download the project then

  npm install


  # build will generate rapidoc-min.js, this is the only file you will need.

  # use it in the script tag of your html <script type="text/javascript" src="rapidoc-min.js"></script></body>

  npm run build 


  # for developement use yarn serve (this will start an webserver at port 8080, then navigate to localhost:8080) 

  npm run serve

  ```


  ## Roadmap

  - ✅ Upgrade to use `lit 2`

  - Pre Rendering / Server Side Rendering (SSR) of RapiDoc

  - Improve PDF generation of OpenAPI spec Using RapiPDF

  - Create a Command Line interface (CLI) to make it automation friendly

  - Add localization support

  - Follow Web Content Accessibility Guidelines (WCAG 2)

  - Improve Homepage, Documentation and Examples

  - Create groundwork for automated testing

  - Create a live playground (Something like swagger editor)

  - Create a short animation/video to show how RapiDoc/RapiPDF works

swagger-api/swagger-js: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD7:201941:57CF552:598BBFE:678EE3DA and timestamp 2025-01-21 00:01:30
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-api/validator-badge: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:537C2A8:55388EE:678EE3DC and timestamp 2025-01-21 00:01:32
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tiangolo/uvicorn-gunicorn-fastapi-docker: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CC4:2AAE2C:5128AF7:52E43FF:678EE3E2 and timestamp 2025-01-21 00:01:38
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
httptoolkit/openapi-directory-js: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCF:2AAE2C:5119D73:52D5255:678EE3A1 and timestamp 2025-01-21 00:00:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Frameio/rolodex: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD4:2B946D:535FEC1:551BBEB:678EE35B and timestamp 2025-01-20 23:59:23
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
quantmind/aio-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:537684D:5532CBD:678EE3C4 and timestamp 2025-01-21 00:01:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-mock/swagger-mock: >
  # OpenAPI Mock Server


  ![CI](https://github.com/muonsoft/openapi-mock/workflows/CI/badge.svg?branch=master)

  [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/?branch=master)

  [![Code Coverage](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/muonsoft/openapi-mock/?branch=master)

  ![GitHub release (latest by date)](https://img.shields.io/github/v/release/muonsoft/openapi-mock)


  OpenAPI API mock server with random data generation by specified schemas.


  * OpenAPI 3.x support.

  * Load specification from a local file or URL.

  * JSON and YAML format supported.

  * Generates fake response data by provided schemas or by examples.

  * Content negotiation by Accept header.

  * Can be used as standalone application (Linux and Windows) or can be run via Docker container.


  ## Supported features


  | Feature | Support status |

  | --- | --- |

  | generating xml response | basic support ([without xml tags](https://swagger.io/docs/specification/data-models/representing-xml/)) |

  | generating json response | supported |

  | generation of [basic types](https://swagger.io/docs/specification/data-models/data-types/) | supported |

  | generation of [enums](https://swagger.io/docs/specification/data-models/enums/) | supported |

  | generation of [associative arrays](https://swagger.io/docs/specification/data-models/dictionaries/) | supported |

  | generation of [combined types](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/) | supported (without tag `not` and discriminator) |

  | local reference resolving | supported |

  | remote reference resolving | not supported |

  | URL reference resolving | not supported |

  | validating request data | not supported |

  | force using custom response schema | not supported (schema detected automatically) |


  ## Quick start


  Download latest binary and run a server.


  ```bash

  # runs a local server on port 8080

  ./openapi-mock serve --specification-url https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml


  # to test that the server successfully ran

  curl 'http://localhost:8080/v1/pets'

  ```


  Alternatively, you can use [Docker](https://www.docker.com/) image.


  ```bash

  # downloads an image

  docker pull muonsoft/openapi-mock


  # runs a docker container with exported port 8080

  docker run -p 8080:8080 -e "OPENAPI_MOCK_SPECIFICATION_URL=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml" --rm muonsoft/openapi-mock


  # to test that the server successfully ran

  curl 'http://localhost:8080/v1/pets'

  ```


  Also, you can use [Docker Compose](https://docs.docker.com/compose/). Example of `docker-compose.yml`


  ```yaml

  version: '3.0'


  services:
    openapi_mock:
      container_name: openapi_mock
      image: muonsoft/openapi-mock
      environment:
        OPENAPI_MOCK_SPECIFICATION_URL: 'https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml'
      ports:
        - "8080:8080"
  ```


  To start up a container run command.


  ```bash

  docker-compose up -d

  ```


  ## Usage guide


  * [Console commands](docs/usage_guide.md#console-commands)

  * [Setting up a configuration](docs/usage_guide.md#setting-up-a-configuration)

  * [Configuration file example](docs/usage_guide.md#configuration-file-example)

  * [Configuration options](docs/usage_guide.md#configuration-options)


  ## License


  This project is licensed under the MIT License - see the LICENSE file for details.
tiangolo/full-stack-fastapi-couchbase: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CC3:4925F:44B9E1A:463117E:678EE3E1 and timestamp 2025-01-21 00:01:37
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tiangolo/full-stack-fastapi-postgresql: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CD8:2AAE2C:51289F4:52E430B:678EE3E2 and timestamp 2025-01-21 00:01:38
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fsprojects/SwaggerProvider: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:24FE08A:25B72A8:678EE39B and timestamp 2025-01-21 00:00:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cebe/yii2-app-api: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD1:124B:D04F3C:D6C031:678EE386 and timestamp 2025-01-21 00:00:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cdimascio/express-openapi-validator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDE:2D0327:52A35BB:545EDBD:678EE382 and timestamp 2025-01-21 00:00:02
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cebe/yii2-openapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD2:4925F:44A6802:461D562:678EE387 and timestamp 2025-01-21 00:00:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cdimascio/generator-express-no-stress: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CC8:1EDF9F:24F87E4:25B1878:678EE383 and timestamp 2025-01-21 00:00:03
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
dansharisan/larapiauth: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCE:2B946D:5369B44:5525BFF:678EE38C and timestamp 2025-01-21 00:00:12
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cdimascio/generator-express-no-stress-typescript: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CC7:1EDF9F:24F8B5A:25B1BF8:678EE384 and timestamp 2025-01-21 00:00:04
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
namsor/namsor-r-sdk2: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCF:2AAE2C:511F705:52DAD7C:678EE3BA and timestamp 2025-01-21 00:00:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
lezhnev74/openapi-psr7-validator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCC:2AAE2C:511C00C:52D757F:678EE3AA and timestamp 2025-01-21 00:00:43
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Pylons/pyramid_openapi3: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44A0EA2:4617981:678EE368 and timestamp 2025-01-20 23:59:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Redocly/create-openapi-repo: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:510E0CF:52C9178:678EE369 and timestamp 2025-01-20 23:59:37
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mrin9/RapiPdf: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD5:124B:D1044C:D7786C:678EE3B9 and
  timestamp 2025-01-21 00:00:57
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Redocly/redoc: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC6:201941:57B6E9C:5972D77:678EE36A
  and timestamp 2025-01-20 23:59:38
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
deepmap/oapi-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD5:124B:D06A27:D6DB9A:678EE38D and timestamp 2025-01-21 00:00:13
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
sugarkubes/generators: >
  # Rest/GraphQL APIs + React Components Generator 🔥


  [![Buy Ligit License](https://s3.us-west-1.wasabisys.com/public.sugarkubes/ligit_embed.svg)](https://ligit.dev)

  [![Follow on Twitter](https://img.shields.io/twitter/follow/andrewpierno.svg?label=follow)](https://twitter.com/andrewpierno)

  [![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/sugarkubes/generators.svg)](http://isitmaintained.com/project/sugarkubes/generators "Average time to resolve an issue")

  [![Percentage of issues still open](http://isitmaintained.com/badge/open/sugarkubes/generators.svg)](http://isitmaintained.com/project/sugarkubes/generators "Percentage of issues still open")

  [![npm package](https://img.shields.io/npm/v/sugar-generate/latest.svg)](https://www.npmjs.com/package/sugar-generate)

  [![NPM Downloads](https://img.shields.io/npm/dt/sugar-generate.svg?style=flat)](https://npmcharts.com/compare/sugar-generate?minimal=true)



  ![Sugar Generator - API Edition](https://github.com/sugarkubes/generators/blob/master/logo.png?raw=true)


  [![App Demo](https://img.youtube.com/vi/E7_ABK7nZT8/0.jpg)](https://www.youtube.com/watch?v=E7_ABK7nZT8)



  This project is sponsored by


  [![SponsoredBy.dev](https://api.sponsoredby.dev/img/d8c4307b-ba42-400e-b475-9487c76d15c8.png)](https://api.sponsoredby.dev/link/d8c4307b-ba42-400e-b475-9487c76d15c8)


  # Quick Start



  1. Install the npm module


  ```sh

  # install

  npm i -g sugar-generate

  ```


  2. Create a json schema save, this to **monkey.json**



  ```json

  {
    "name": "monkey",
    "schema": {
      "name": {
        "type": "String",
        "default": ""
      },
      "alive": {
        "type": "Boolean",
        "default": false
      },
      "age": {
        "type": "Number",
        "default": false
      }
    }
  }

  ```


  3. Generate your api and app


  ```sh

  sugar-generate \

  --schema monkey.json \

  --destination ./my-monkeys

  ```


  Boom, you now have:


  API:

  - GraphQL API

  - REST API

  - Working Tests


  APP:

  - React create item form

  - React table that supports
    - search
    - sort
    - filter
    - pagination
    - edit item
    - create item


  ### Start the API


  ```sh

  cd ./my-monkeys/api

  npm i

  npm run start


  # http://localhost:7777

  ```


  ### Start the APP


  ```sh

  cd ./my-monkeys/app

  npm i

  npm run dev


  # http://localhost:3000

  ```


  ### Behold Magic


  A fully functioning react table and form with searching sorting filtering, editing, adding, global search, download, and refresh.


  ![SugarKubes Generated App](https://github.com/sugarkubes/generators/blob/master/table-component.png?raw=true)


  # Links


  [GraphQL is on localhost:7777/graphql](http://localhost:7777/graphql)


  [Swagger is on localhost:7777](http://localhost:7777)


  [APP is on localhost:3000](http://localhost:3000)


  [API is on localhost:7777](http://localhost:3000)


  # Documentation


  [API Documentation (generated back end)](https://github.com/sugarkubes/generators/wiki/API)



  [App Documentation (generated front end)](https://github.com/sugarkubes/generators/wiki/APP)


  ## Experimental Embeddable Components


  **What if you could remotely update your components without having to push new code?**


  Thats one question we're exploring with the experimental embeddable react components. There are of course cool ways to serve single pages as serverless functions but what's cooler would be a way for even non-technical people to update a database schema and a form or table in real time without writing any code.



  - Each component comes out in an embeddable format under */embed*

  - TBD - How to easily deploy these and use them.

  -



  ## Updates


  - 8/5/19 support for mongo arrays in documents
ErikWittern/swagger-snippet: >
  # OpenAPI Snippet

  **Generates code snippets from Open API (previously Swagger) documents.**


  This package takes as input an OpenAPI v2.0 or v3.0.x document. It translates the document into an [HTTP Archive 1.2 request object](http://www.softwareishard.com/blog/har-12-spec/#request). It uses the [HTTP Snippet](https://github.com/Mashape/httpsnippet) library to generate code snippets for every API endpoint (URL path + HTTP method) defined in the specification in various languages & tools (`cURL`, `Node`, `Python`, `Ruby`, `Java`, `Go`, `C#`...), or for selected endpoints.


  ## Installation


  ```bash

  npm i openapi-snippet

  ```


  ## Build OpenAPI Snippet (for use in browser)

  Clone this repository. Install required dependencies:


  ```bash

  npm i

  ```


  Build a minified version of OpenAPI Snippet (`openapisnippet.min.js`):


  ```bash

  npm run build

  ```


  ## Usage


  ### As a module


  ```javascript

  const OpenAPISnippet = require('openapi-snippet')


  // define input:

  const openApi = ... // Open API document

  const targets = ['node_unirest', 'c'] // array of targets for code snippets. See list below...


  try {
    // either, get snippets for ALL endpoints:
    const results = OpenAPISnippet.getSnippets(openApi, targets) // results is now array of snippets, see "Output" below.

    // ...or, get snippets for a single endpoint:
    const results2 = OpenAPISnippet.getEndpointSnippets(openApi, '/users/{user-id}/relationship', 'get', targets)
  } catch (err) {
    // do something with potential errors...
  }

  ```


  ### Within the browser


  Include the `openapisnippet.min.js` file created after building the the library (see above) in your HTML page:


  ```html

  <script type="text/javascript" src="path/to/openapisnippet.min.js"></script>

  ```


  Use OpenAPI Snippet, which now defines the global variable `OpenAPISnippet`.



  ## Output

  The output for every endpoint is an object, containing the `method`, `url`, a human-readable `description`, and the corresponding `resource` - all of these values stem from the OpenAPI document. In addition, within the `snippets` list, an object containing a code snippet for every chosen target is provided. As of version `0.4.0`, the snippets include exemplary payload data.


  If `getSnippets` is used, an array of the above described objects is returned.


  For example:


  ```js

  [
    // ...
    {
      "method": "GET",
      "url": "https://api.instagram.com/v1/users/{user-id}/relationship",
      "description": "Get information about a relationship to another user.",
      "resource": "relationship",
      "snippets": [
        {
          "id": "node",
          "title": "Node + Native",
          "content": "var http = require(\"https\");\n\nvar options = {..."
        }
      ]
    }
    // ...
  ]

  ```


  ## Targets

  Currently, OpenAPI Snippet supports the following targets (depending on the HTTP Snippet library):


  * `c_libcurl` (default)

  * `csharp_restsharp` (default)

  * `go_native` (default)

  * `java_okhttp`

  * `java_unirest` (default)

  * `javascript_jquery`

  * `javascript_xhr` (default)

  * `node_native` (default)

  * `node_request`

  * `node_unirest`

  * `objc_nsurlsession` (default)

  * `ocaml_cohttp` (default)

  * `php_curl` (default)

  * `php_http1`

  * `php_http2`

  * `python_python3` (default)

  * `python_requests`

  * `ruby_native` (default)

  * `shell_curl` (default)

  * `shell_httpie`

  * `shell_wget`

  * `swift_nsurlsession` (default)


  If only the language is provided (e.g., `c`), the default library will be selected.



  License: MIT
airtasker/spot: >
  # Spot


  **Spot** (_"Single Point Of Truth"_) is a concise, developer-friendly way to describe your API contract.


  Leveraging the TypeScript syntax, it lets you describe your API and generate other API contract formats you need (OpenAPI, Swagger, JSON Schema).


  You don't need to use TypeScript in your codebase to benefit from using Spot.


  Example of an API definition file `api.ts` which defines a single `POST` endpoint to create a user:


  ```typescript

  import { api, endpoint, request, response, body } from "@airtasker/spot";


  @api({
    name: "My API"
  })

  class Api {}


  @endpoint({
    method: "POST",
    path: "/users"
  })

  class CreateUser {
    @request
    request(@body body: CreateUserRequest) {}

    @response({ status: 201 })
    response(@body body: CreateUserResponse) {}
  }


  interface CreateUserRequest {
    firstName: string;
    lastName: string;
  }


  interface CreateUserResponse {
    firstName: string;
    lastName: string;
    role: string;
  }

  ```


  ## Getting Started


  Get started with writing Spot contracts - [Spot Guide](https://github.com/airtasker/spot/wiki/Spot-Guide)


  For all available syntax, see [Spot Syntax](https://github.com/airtasker/spot/wiki/Spot-Syntax)


  ### Installation


  With [yarn](https://yarnpkg.com/en/docs/usage) installed and initialized add `@airtasker/spot` to your project:


  ```sh

  yarn add @airtasker/spot

  ```


  You can pass the definition above to a generator by simply running:


  ```sh

  npx @airtasker/spot generate --contract api.ts

  ```


  # Why we built Spot


  At first glance, you may wonder why we bothered building Spot. Why not use OpenAPI (formely known as Swagger) to describe your API?


  At the core, we built Spot because we wanted a better developer experience.


  ## Writing contracts


  OpenAPI documents are stored as YAML files, following a very specific schema. You won’t know that you used the wrong field name or forgot to wrap a type definition into a schema object unless you run a good OpenAPI linter. Most developers who aren’t intimately familiar with the OpenAPI specification end up using a visual editor such as Swagger Editor or Stoplight.


  Since Spot leverages the TypeScript syntax, all you need is to write valid TypeScript code. Your editor will immediately tell you when your code is invalid. It will tell you what’s missing, and you even get autocomplete for free. We could have picked any other typed language—TypeScript just happened to be one of the most concise and ubiquitous for us.


  ## Reviewing contracts


  We believe that API contracts should be checked into Git, or whichever code versioning system you use. In addition, API contracts should be systematically peer reviewed. It’s far too easy for a backend engineer to incorrectly assume what client engineers expect from an endpoint.


  Because of their complex nested structure and the richness of the OpenAPI specification, OpenAPI documents can be difficult to review in a pull request. They’re great for machines, but not always for humans.


  Spot aims to be as human-readable as possible. We’ve seen developers become a lot more engaged in discussions on pull requests for Spot contracts, compared to our previous OpenAPI documents.


  ## Interoperability with various formats


  Depending on what you're trying to achieve (testing, documentation, client code generation…), you'll find tools that only work with OpenAPI 2 (Swagger), and newer tools that only support OpenAPI 3. You may also find tools for a different API ecosystem such as JSON Schema or API Blueprint.


  We built Spot with this in mind. Instead of having to juggle various API format converters, Spot can generate every major API document format. This is why we called it "Single Point Of Truth".


  [![oclif](https://img.shields.io/badge/cli-oclif-brightgreen.svg)](https://oclif.io)

  [![Version](https://img.shields.io/npm/v/@airtasker/spot.svg)](https://npmjs.org/package/@airtasker/spot)

  [![CircleCI](https://circleci.com/gh/airtasker/spot/tree/master.svg?style=shield)](https://circleci.com/gh/airtasker/spot/tree/master)

  [![Downloads/week](https://img.shields.io/npm/dw/@airtasker/spot.svg)](https://npmjs.org/package/@airtasker/spot)

  [![License](https://img.shields.io/npm/l/@airtasker/spot.svg)](https://github.com/airtasker/spot/blob/master/package.json)


  <!-- toc -->

  * [Spot](#spot)

  * [Why we built Spot](#why-we-built-spot)

  * [Usage](#usage)

  * [Commands](#commands)

  <!-- tocstop -->


  # Usage


  To get started and set up an API declaration in the current directory, run:


  ```

  npx @airtasker/spot init

  ```


  You can then run a generator with:


  ```

  npx @airtasker/spot generate --contract api.ts

  ```


  ## In Memory Usage


  ```ts

  import { Spot } from "@airtasker/spot";


  const contract = Spot.parseContract("./api.ts")

  const openApi = Spot.OpenApi3.generateOpenAPI3(contract);


  console.log(openApi);


  /*

  {
    openapi: '3.0.2',
    info: { title: 'my-api', description: undefined, version: '0.0.0' },
    paths: { '/users': { post: [Object] } },
    components: {
      schemas: { CreateUserRequest: [Object], CreateUserResponse: [Object] },
      securitySchemes: undefined
    },
    security: undefined
  }

  */


  ```


  # Commands


  <!-- commands -->

  * [`spot checksum SPOT_CONTRACT`](#spot-checksum-spot_contract)

  * [`spot docs SPOT_CONTRACT`](#spot-docs-spot_contract)

  * [`spot generate`](#spot-generate)

  * [`spot help [COMMAND]`](#spot-help-command)

  * [`spot init`](#spot-init)

  * [`spot lint SPOT_CONTRACT`](#spot-lint-spot_contract)

  * [`spot mock SPOT_CONTRACT`](#spot-mock-spot_contract)

  * [`spot validate SPOT_CONTRACT`](#spot-validate-spot_contract)

  * [`spot validation-server SPOT_CONTRACT`](#spot-validation-server-spot_contract)


  ## `spot checksum SPOT_CONTRACT`


  Generate a checksum for a Spot contract


  ```

  USAGE
    $ spot checksum SPOT_CONTRACT

  ARGUMENTS
    SPOT_CONTRACT  path to Spot contract

  OPTIONS
    -h, --help  show CLI help

  EXAMPLE
    $ spot checksum api.ts
  ```


  _See code: [build/cli/src/commands/checksum.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/checksum.js)_


  ## `spot docs SPOT_CONTRACT`


  Preview Spot contract as OpenAPI3 documentation. The documentation server will start on http://localhost:8080.


  ```

  USAGE
    $ spot docs SPOT_CONTRACT

  ARGUMENTS
    SPOT_CONTRACT  path to Spot contract

  OPTIONS
    -h, --help       show CLI help
    -p, --port=port  [default: 8080] Documentation server port

  EXAMPLE
    $ spot docs api.ts
  ```


  _See code: [build/cli/src/commands/docs.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/docs.js)_


  ## `spot generate`


  Runs a generator on an API. Used to produce client libraries, server boilerplates and well-known API contract formats such as OpenAPI.


  ```

  USAGE
    $ spot generate

  OPTIONS
    -c, --contract=contract    (required) Path to a TypeScript Contract definition
    -g, --generator=generator  Generator to run
    -h, --help                 show CLI help
    -l, --language=language    Language to generate
    -o, --out=out              Directory in which to output generated files

  EXAMPLE
    $ spot generate --contract api.ts --language yaml --generator openapi3 --out output/
  ```


  _See code: [build/cli/src/commands/generate.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/generate.js)_


  ## `spot help [COMMAND]`


  display help for spot


  ```

  USAGE
    $ spot help [COMMAND]

  ARGUMENTS
    COMMAND  command to show help for

  OPTIONS
    --all  see all commands in CLI
  ```


  _See code: [@oclif/plugin-help](https://github.com/oclif/plugin-help/blob/v3.3.1/src/commands/help.ts)_


  ## `spot init`


  Generates the boilerplate for an API.


  ```

  USAGE
    $ spot init

  OPTIONS
    -h, --help  show CLI help

  EXAMPLE
    $ spot init
    Generated the following files:
    - api.ts
    - tsconfig.json
    - package.json
  ```


  _See code: [build/cli/src/commands/init.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/init.js)_


  ## `spot lint SPOT_CONTRACT`


  Lint a Spot contract


  ```

  USAGE
    $ spot lint SPOT_CONTRACT

  ARGUMENTS
    SPOT_CONTRACT  path to Spot contract

  OPTIONS
    -h, --help                                                     show CLI help
    --has-discriminator=(error|warn|off)                           Setting for has-discriminator
    --has-request-payload=(error|warn|off)                         Setting for has-request-payload
    --has-response=(error|warn|off)                                Setting for has-response
    --has-response-payload=(error|warn|off)                        Setting for has-response-payload
    --no-inline-objects-within-unions=(error|warn|off)             Setting for no-inline-objects-within-unions
    --no-nullable-arrays=(error|warn|off)                          Setting for no-nullable-arrays
    --no-nullable-fields-within-request-bodies=(error|warn|off)    Setting for no-nullable-fields-within-request-bodies
    --no-omittable-fields-within-response-bodies=(error|warn|off)  Setting for no-omittable-fields-within-response-bodies
    --no-trailing-forward-slash=(error|warn|off)                   Setting for no-trailing-forward-slash

  EXAMPLES
    $ spot lint api.ts
    $ spot lint --has-descriminator=error
    $ spot lint --no-nullable-arrays=off
  ```


  _See code: [build/cli/src/commands/lint.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/lint.js)_


  ## `spot mock SPOT_CONTRACT`


  Run a mock server based on a Spot contract


  ```

  USAGE
    $ spot mock SPOT_CONTRACT

  ARGUMENTS
    SPOT_CONTRACT  path to Spot contract

  OPTIONS
    -h, --help                                   show CLI help
    -p, --port=port                              (required) [default: 3010] Port on which to run the mock server
    --pathPrefix=pathPrefix                      Prefix to prepend to each endpoint path

    --proxyBaseUrl=proxyBaseUrl                  If set, the server will act as a proxy and fetch data from the given
                                                 remote server instead of mocking it

    --proxyFallbackBaseUrl=proxyFallbackBaseUrl  Like proxyBaseUrl, except used when the requested API does not match
                                                 defined SPOT contract. If unset, 404 will always be returned.

    --proxyMockBaseUrl=proxyMockBaseUrl          Like proxyBaseUrl, except used to proxy draft endpoints instead of
                                                 returning mocked responses.

  EXAMPLE
    $ spot mock api.ts
  ```


  _See code: [build/cli/src/commands/mock.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/mock.js)_


  ## `spot validate SPOT_CONTRACT`


  Validate a Spot contract


  ```

  USAGE
    $ spot validate SPOT_CONTRACT

  ARGUMENTS
    SPOT_CONTRACT  path to Spot contract

  OPTIONS
    -h, --help  show CLI help

  EXAMPLE
    $ spot validate api.ts
  ```


  _See code: [build/cli/src/commands/validate.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/validate.js)_


  ## `spot validation-server SPOT_CONTRACT`


  Start the spot contract validation server


  ```

  USAGE
    $ spot validation-server SPOT_CONTRACT

  ARGUMENTS
    SPOT_CONTRACT  path to Spot contract

  OPTIONS
    -h, --help       show CLI help
    -p, --port=port  [default: 5907] The port where application will be available

  EXAMPLE
    $ spot validation-server api.ts
  ```


  _See code: [build/cli/src/commands/validation-server.js](https://github.com/airtasker/spot/blob/v1.13.0/build/cli/src/commands/validation-server.js)_

  <!-- commandsstop -->
42Crunch/vscode-openapi: >
  # OpenAPI Editing with API quality, Conformance and
  Security Testing


  Rich support for the OpenAPI Specification (OAS) / Swagger specification making it quicker and easier to create, edit and navigate your OpenAPI definitions.


  Also check the quality, conformance and security of your APIs from inside VS Code, with the bundled 42Crunch API security testing tools - [API Audit](#activating-api-audit) and [API Scan](#activating-api-scan). Audit and Scan are available to both our freemium users and to 42Crunch platform subscribers. Monthly usage limitations apply for freemium users. [Upgrade options](https://42crunch.com/single-user-pricing/) available.


  ## OpenAPI Editing


  The plugin supports code navigation, linting, SwaggerUI or ReDoc preview, IntelliSense, schema enforcement and generation, schema definition links and snippets.

  It also supports both OpenAPI v2 and v3.0.x in JSON or YAML format. [QuickStart](#quick-start)


  - [Creating OpenAPI files](#creating-openapi-files)

  - [Navigating an API definition](#navigating-an-api-definition)

  - [Add new elements](#add-new-elements-in-the-openapi-explorer)

  - [Use IntelliSense](#use-intellisense)

  - [Jump to a reference](#jump-to-a-reference)

  - [Sort entries in the navigation pane](#sort-entries-in-the-navigation-pane)

  - [Preview OpenAPI documentation](#preview-openapi-documentation)

  - [Execute operations with "Try it"](#execute-operations-with-try-it)

  - [Generate JSON schemas based on the response content](#generate-json-schemas-based-on-the-response-content)

  - [Configure authentication for external references in OpenAPI files](#configure-authentication-for-external-references-in-openapi-files)

  - Split your OpenAPI into multiple files linked via $ref

  - Use quick fixes to automatically resolve problems in your OpenAPI

  - Use Code snippets to add paths, operations, components, security


  ## Activating API Audit


  A static analysis that lets you check the quality, conformance (to the OpenAPI specification) and security of your API definition. [Video explainer](https://vimeo.com/873235173)


  - [Running an audit](#running-an-audit)

  - [Navigating the issues in the audit report](#navigating-the-issues-in-the-audit-report)
    - [Priority issues](#priority-issues)
    - [Full issue list](#full-issue-list)
  - [Issues details](#issues-details)

  - [Fixing issues](#fixing-issues)


  ## Activating API Scan


  A dynamic conformance and security tool that tests the API for conformance to the API definition and security vulnerabilities. The free version of API Scan runs locally in your own environment and does not require your API to be uploaded to the 42Crunch platform.

  [Video explainer](https://vimeo.com/884864394/b167153ec4)


  - [Conformance to the API Definition](#new-dynamic-api-security-testing)

  - [Launching the Scan](#launching-42crunch-scan)


  The free version of API Scan runs locally in your own environment and requires no API file to be uploaded.


  ## Freemium


  This service lets users of our OpenAPI editor extension who are not customers run the API Audit and Scan tests on their APIs.


  - [Getting a Freemium Token](#getting-a-freemium-token)


  ## Support and Documentation:


  We’ve recently launched our developer community where you’ll be able to help, get tips-n-tricks and keep up to speed with all the latest developments: https://developers.42crunch.com/


  ## Quick start


  After installing the plugin, open any JSON or YAML file that contains an OpenAPI definition. The plugin automatically detects that this is an OpenAPI file, and the **/API** button is shown in the left-hand panel.


  ![OpenAPI Explorer](./images/OpenAPI%20Explorer.PNG)


  We also encourage you to watch [this video](https://42crunch.com/tutorial-openapi-swagger-extension-vs-code/#Introducing-OpenAPI-Editor) that gives you a full tour of the editor and its different features.


  ## Editor features


  This extension makes it easier and faster to navigate your OpenAPI definitions, especially when they get longer.


  You can home in on elements in the OpenAPI explorer view, or jump directly to the target of a reference in the API. You can also add new elements to your API directly in the OpenAPI explorer directly where they are needed. Filling in the details is quicker with IntelliSense support for OpenAPI elements.


  ### Creating OpenAPI files


  1. Press **Ctrl+Shift+P** on Windows or Linux, or **Cmd+Shift+P** on a Mac.

  2. In the command prompt, start typing `new openapi`, and click the corresponding command to create either an OAS v2 or v3 template file.

  3. Use the OpenAPI explorer to populate the template with new paths and other elements as needed.

  4. Save the file to your disk to fully enable IntelliSense.


  ![Create new OpenAPI file from a template](./images/New%20OpenAPI%20file.gif?raw=true)


  ![](https://img.shields.io/badge/Learning%20More!-red) Watch this [video](https://42crunch.com/tutorial-openapi-swagger-extension-vs-code/#Navigating-OpenAPI-Explorer) on editor basics.


  ### Navigating an API definition


  1. Open an OpenAPI file.

  2. Click the OpenAPI button to switch to the OpenAPI explorer view.

  3. Expand the sections and elements in the file as needed, and click the ones you want to jump to in the editor.


  ![Navigation inside the OpenAPI file](./images/Navigation.gif?raw=true)


  ### Add new elements in the OpenAPI explorer


  1. In OpenAPI explorer pane, go to the section where you want to add a new element and right-click on the relevant node to open a context menu.

  2. Click the item you want to add from the list.


  ![Add new API path and verb](./images/Add%20paths%20and%20verbs.gif?raw=true)


  ### Use IntelliSense


  As you start typing OpenAPI elements or their values, the context-sensitive list of available options is displayed in the IntelliSense menu. In JSON OpenAPI files, just type double-quote (`"`) to show the menu, and type further to filter the list. In YAML OpenAPI files, start typing the property name.


  You can also use the corresponding VS Code hotkey (**Ctrl+Space** on Windows, **Cmd+Space** on Mac) to open the IntelliSense menu.


  ![IntelliSense for OpenAPI editing](https://github.com/42Crunch/vscode-openapi/blob/master/images/Intellisense.gif?raw=true)


  ### Jump to a reference


  Use Go to Definition to locate the targets of references easily. To jump to view the definition from a reference in your API, either **Ctrl+click** a reference, or right-click a reference and click **Go to Definition** in the shortcut menu.


  ![Go to definition](./images/Go%20to%20Definition.gif?raw=true)


  ### Sort entries in the navigation pane


  By default, entries in the OpenAPI Explorer pane are sorted alphabetically. If you want to instead have them sorted in the order they are in the OpenAPI file, change the corresponding setting:


  1. On the **File** menu, click **Preferences > Settings**.

  2. Expand the **Extensions** section and click **OpenAPI**.

  3. Clear the checkbox **Alphabetically sort contents of OpenAPI explorer outlines**.


  ![](./images/OutlineSettings.png)


  ### Preview OpenAPI documentation


  You can get a documentation-style preview of the API you are editing by clicking the Preview button <img src="./images/Preview_button.png" width=19 /> at the top right:


  ![OpenAPI Preview Pane](./images/OASPreview.png)


  The extension supports two popular OpenAPI documentation generators: [SwaggerUI](https://swagger.io/tools/swagger-ui/) and [ReDoc](https://github.com/Redocly/redoc).


  To change the default OpenAPI Preview rendering engine:


  1. On the **File** menu, click **Preferences > Settings**.

  2. Expand the **Extensions** section and click **OpenAPI**.

  3. Pick the option of your choice from the **Default Preview Rendered** dropdown list.


  ![OpenAPI Preview Pane](./images/Change_OpenAPI_Preview_engine.png)


  ### Execute operations with "Try it"


  With "Try it", you can invoke operations defined in your OpenAPI directly from VS Code:


  - Click on "Try it" code lens which is displayed right below the HTTP verb (e.g. "get", "post") of your operation and in the examples section.

  - The payload data will be generated based on the request JSON Schema, or the first example available. You can edit this information before sending the request.


  ![TryIt view](./images/tryit.png)


  Try it comes with a number of limitations:


  - Sending files is not supported

  - It works best with text-based responses, such as JSON

  - Binary/image responses will be shown as text


  ### Generate JSON schemas based on the response content


  "Try it" can be used to generate JSON Schema based on the body of the response.


  - Select "Tools" tab in the TryIt response

  - Click "Generate schema" button.


  ![TryIt response tools](images/tryit-schema.png)


  ### Configure authentication for external references in OpenAPI files


  If you use references to schemas served by an authenticated HTTP service (such as an Schema Registry service or a repository), you'll need to configure the list of approved hosts in the extension settings. To do this:


  1. On the **File** menu, click **Preferences > Settings**.

  2. Expand the **Extensions** section and click **OpenAPI**.

  3. Locate the **Openapi: Approved Hostnames** setting, click on **Add item**, and write the hostname you need for resolving external references.
     ![Configure approved hosts and authentication](./images/Configure%20approved%20hosts.png)

  In case some of the approved hosts requires authentication, you can configure it in the OpenAPI > External References section of the `42Crunch: Open Settings` command view:


  ![Configure approved hosts and authentication](./images/Configure%20approved%20hosts%20authentication.png)


  <br>


  > To open this view, go to `View > Command Palette...` in VSCode menu and type in `42Crunch`, you'll see the Open Settings command listed below:

  > ![42Crunch: Open Settings](./images/42Crunch%20Open%20Settings.png)

  > You can also use keyboard shortcuts for the Command Palette **Ctrl+Shift+P**, or **Cmd+Shift+P** for Mac users.


  <br>


  After configuring all hosts you need to refer to, all OpenAPI references to any of the approved hosts will be dynamically resolved when linting or previewing your API.


  ## Static API Security Testing


  You can use this OpenAPI extension to check the quality and security of your API definition as you work on it. This feature is powered by 42Crunch [Audit](https://docs.42crunch.com/latest/content/concepts/api_contract_security_audit.htm?utm_campaign=IDE&utm_medium=referral&utm_source=vscode). 42Crunch Audit performs a static analysis of the API definition that includes more than 300 checks on best practices and potential vulnerabilities related to authentication, authorization as well as data constraints.


  ![](https://img.shields.io/badge/Learning%20More!-green) Watch this [video](https://42crunch.com/free-user-faq/#Free-API-Security-Testing-FAQs-00) to learn more about 42Crunch Audit.


  You can run the audit service in freemium or platform mode:


  - **Using our freemium centralized service**: this service is a fully featured version of the audit, but with usage limits. In this mode, OAS files are sent to the service, audited and a report is returned. This is a stateless service: **we do not keep the OpenAPI file, nor the report.**

  - New! **Using the 42Crunch CLI**: in this mode, audits are performed locally (on the user's machine). This is only available to <u>freemium</u> users for now. Support for local audit/scans using a platform API token will be available soon. In this mode, **OpenAPI files and reports are kept locally**.

  - **Using 42Crunch SaaS platform**: this requires an account on a 42Crunch platform, which is available to customers and to prospects evaluating our product. In this case, you need to supply your platform URL and an IDE token (which can be created from the platform home page). You can specify those settings by invoking `42Crunch: Update platform credentials` from the command palette.


  ![IDE-PlatformIntegration](./images/IDE-PlatformIntegration.png)


  ### Getting a Freemium Token


  To run Security Audit from VS Code, you need a token. The first time you try to audit or scan an API, you are asked to provide your email address or an API token from the platform.


  Once you supply the address, the extension requests the token to be sent to your mailbox. Paste the token you received in the prompt in VS Code, and you are all set.


  Watch this short [video](https://42crunch.com/free-user-faq/#Free-API-Security-Testing-FAQs-02) which takes you through those steps.


  ### Running an audit


  You can use OpenAPI extension to check the quality of your API as you work on it. You can run the audit directly from VS Code by clicking the Audit button in the toolbar. Alternatively, you can run an audit for an individual endpoint using the code lens.


  ![](./images/StartAudit.png)


  ### Navigating the issues in the audit report


  After the audit finishes, you get the audit report directly in the VS Code view, side by side with your code. The report viewer provides handy ways to navigate the found issues, even if the report is quite long.


  #### Priority issues


  Look here for issues that require the most attention.


  - **Most Common issues**: this list contains issues that are occuring the most, and how many times they are repeated.

  - **Opportunities**: this list contains issues that, if fixed, will most contribute to raise the audit score.


  Those two lists will often overlap and in certain cases be identical, but this is totally normal.


  ![AuditIssuesList](./images/AuditIssuesList.png)


  #### Full issue list


  The full issue list contains all issues found. The list can be filtered in two ways:


  - **Using the security gate (SQG) toggle**: an SQG enforces enterprise compliance and hightlights issues that are offending the requirements established, such as a minimal score, issues severity or specific issues (e.g. an API key is used when only OAuth is allowed across the enterprise). When the toggle is on, only the issues affecting the SQG status are shown.


  ![](https://img.shields.io/badge/Note%20-blue) SQG results are not visible yet to all Freemium users.


  ![AuditIssuesList-Full](./images/AuditIssuesList-Full.png)


  - **Using the filtering options**: you can also use filtering options to drill-down into the list such as severity, category or even a specific issue type.


  #### Issues details


  For each issue, you have access to full information about the issue, why it is relevant and recommendations on how to address the issue.


  ![](https://img.shields.io/badge/Learning%20More!-green) Watch this [video](https://42crunch.com/free-user-faq/#Free-API-Security-Testing-FAQs-2) to learn more about audit and how to navigate issues.


  ### Fixing issues


  Many of the issues reported by 42Crunch Audit have fixes associated with them. These are code snippets that you can insert into the OpenAPI file and then customize with the appropriate value.


  1. Cick some of the error lines in your OpenAPI file to bring up the QuickFix blue icon on the left of the line.

  2. Click the Quickfix icon and select the fix to apply.

  3. Tweak the values in the inserted code snippet as you see fit.


  ![Quick Fixes in VSCode](./images/Quick_Fixes_in_VSCode.gif)


  ## (New!) Dynamic API Security testing


  42Crunch Audit performs a security analysis that does not require any live API, just the definition itself. 42Crunch Scan leverages the OpenAPI definition to:


  - Test the resilience and behavior of APIs by automatically generating security tests from the APIs' OpenAPI definition. Scan reproduces the typical behavior of a hacker by injecting bad payloads, bad tokens, and using invalid HTTP verbs and paths. This helps detect vulnerabilities early in the API life cycle, especially those associated with the [OWASP API Security Top 10](https://apisecurity.io/owasp-api-security-top-10/owasp-api-security-top-10-project/).

  - Validate that the implementation of the API conforms to its established contract: Scan checks all responses against the OpenAPI definition and detects unexpected responses and data leaks.


  ![](https://img.shields.io/badge/Learning%20More!-Blue) Watch this [video](https://42crunch.com/free-user-faq/?utm_campaign=IDE&utm_medium=referral&utm_source=vscode#Free-API-Security-Testing-FAQs-4) to learn more about 42Crunch Scan.


  APIs which thoroughly enforce compliance to an established contract are far more resilient to all types of attacks.


  ![](https://img.shields.io/badge/Important-red) You must only use 42Crunch Scan against APIs that you own, not those of third parties.


  ### Launching 42Crunch Scan


  We recommend you use the 42Crunch API Security Testing Binary to run scans. The alternative is to run a docker image locally. 42Crunch customers can also leverage our [scand manager](https://github.com/42Crunch/scand-manager), by deploying an API-driven scan engine on Kubernetes.


  In order to run a scan, you will need :


  - **A credential** : most likely, your API is using some form of authentication, like an API Key or token. You need a valid credential to provide to the scan engine.


  - **The URL** when the API is deployed.

    ![](https://img.shields.io/badge/Warning-orange) We strongly recommend that you do <u>not</u> target a production system. While the tool does not try to inject malicious payloads, it is possible that the API implementation is not resilient enough to handle the tests and may crash or behave unexpectedly.

  When you first launch a scan, you are presented with the scan configuration viewer. The scan configuration is generated automatically from the OpenAPI file you chose to scan.


  - For each operation in the OpenAPI file, a request is created. You can test individual requests using the **Try** button top-right.

    ![](./images/ScantryIt.png)

  - Requests can be arranged into testing scenarios: a scenario combines one or multiple requests, for example you need to create a resource before you can view it. The editor allows you to extract data as variables from a request execution to inject it into the next step.

    Similarly to requests, you can test an individual scenario to ensure it is built correctly before starting a scan: the scan engine will execute the scenario and if successful, launch automatically dozens of tests using the data provided in the OpenAPI file. The scan will send bad verbs, bad data types, bad data formats as well as authentication tests.

    ![](./images/ScanScenarios.png)

  Once the scan has run, you are presented with a results page. The summary shows if the scan got a testing baseline by running the HappyPath test. Additional testing results are visible from the tests list. For each issue, you can easily reproduce the problem using a curl request.


  ![](./images/ScanReport.gif)


  ## Miscellaneous commands


  - You can load results of Security Audit from a file for a currently open OpenAPI file by running command `42Crunch: Load Security Audit report from file` from the command palette


  ## Network requirements


  To execute the 42Crunch Freemium services, you need access to the following URL: https://stateless.42crunch.com. You may need to ask your administrators to add a firewall rule to allow the connection.


  ## Known issues


  - For new files, IntelliSense does not work until you save the file. File extension must be `.json` or `.yaml`.

  - When running 42Crunch Scan on a host with incorrect clock, the scan can fail with the message `cannot send the scan report : rpc error: code = InvalidArgument desc = invalid input`, to resolve the issue make sure your clock is correctly set.


  ## Feedback


  Submit your bug reports at [GitHub project Issues](https://github.com/42Crunch/vscode-openapi/issues).


  And, needless to say, your reviews at [VS Code marketplace](https://marketplace.visualstudio.com/items?itemName=42Crunch.vscode-openapi&ssr=false#review-details) mean the world to us!
mnf-group/openapimux: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:2503C55:25BD02F:678EE3B6 and timestamp 2025-01-21 00:00:54
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
leosussan/fastapi-gino-postgres: >
  # fastapi-gino-arq-uvicorn

  High-performance Async REST API, in Python. FastAPI + GINO + Arq + Uvicorn (powered by Redis & PostgreSQL).


  ## Get Started

  ### Run Locally

  _NOTE: You must have PostgreSQL & Redis running locally._


  1. Clone this Repository. `git clone https://github.com/leosussan/fastapi-gino-arq-uvicorn.git`

  2. Run `pipenv install --dev` from root. (Run `pip install pipenv` first, if necessary.)

  3. Make a copy of `.dist.env`, rename to `.env`. Fill in PostgreSQL, Redis connection vars.

  4. Generate DB Migrations: `alembic revision --autogenerate`. It will be applied when the application starts. You can trigger manually with `alembic upgrade head`.

  5. Run:
      - FastAPI Application:
          * _For Active Development (w/ auto-reload):_ Run locally with `pipenv run uvicorn app.main:app --reload `
          * _For Debugging (compatible w/ debuggers, no auto-reload):_ Configure debugger to run `python app/main.py`.
      - Background Task Worker:
          * _For Active Development:_ Run with `pipenv run arq app.worker.Worker --watch ./`

  ### Run Locally with Docker-Compose

  1. Clone this Repository. `git clone https://github.com/leosussan/fastapi-gino-arq-uvicorn.git`

  2. Generate a DB Migration: `alembic revision --autogenerate`.*

  3. Run locally using docker-compose. `docker-compose -f docker-compose.local.yml -f docker-compose.worker.yml -f docker-compose.yml up --build`.


  *`app/settings/prestart.sh` will run migrations for you before the app starts.


  ### Build Your Application

  * Create routes in `/app/routes`, import & add them to the `ROUTERS` constant in  `/app/main.py`

  * Create database models to `/app/models/orm`, add them to `/app/models/orm/migrations/env.py` for migrations

  * Create pydantic models in `/app/models/pydantic`

  * Store complex db queries in `/app/models/orm/queries`

  * Store complex tasks in `app/tasks`.

  * Add / edit globals to `/.env`, expose & import them from `/app/settings/globals.py`
      * Use any coroutine as a background function: store a reference in the `ARQ_BACKGROUND_FUNCTIONS` env.
      * Set `SENTRY_DSN` in your environment to enable Sentry.
  * Define code to run before launch (migrations, setup, etc) in `/app/settings/prestart.sh`


  ## Features

  ### Core Dependencies

  * **FastAPI:** touts performance on-par with NodeJS & Go + automatic Swagger + ReDoc generation. 

  * **GINO:** built on SQLAlchemy core. Lightweight, simple, asynchronous ORM for PostgreSQL.

  * **Arq:** Asyncio + Redis = fast, resource-light job queuing & RPC.

  * **Uvicorn:** Lightning-fast, asynchronous ASGI server.

  * **Optimized Dockerfile:** Optimized Dockerfile for ASGI applications, from https://github.com/tiangolo/uvicorn-gunicorn-docker.


  #### Additional Dependencies

  * **Pydantic:** Core to FastAPI. Define how data should be in pure, canonical python; validate it with pydantic. 

  * **Alembic:** Handles database migrations. Compatible with GINO.

  * **SQLAlchemy_Utils:** Provides essential handles & datatypes. Compatible with GINO.

  * **Sentry:** Open-source, cloud-hosted error + event monitoring.

  * **PostgreSQL:** Robust, fully-featured, scalable, open-source.

  * **Redis:** Fast, simple, broker for the Arq task queue.
Cornutum/tcases: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCC:2AAE2C:510B237:52C61E5:678EE358 and timestamp 2025-01-20 23:59:20
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
wrannaman/generators: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDA:1EDF9F:250FFA6:25C9735:678EE3EA and timestamp 2025-01-21 00:01:46
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fukamachi/apispec: >
  # apispec


  [![Build Status](https://travis-ci.org/fukamachi/apispec.svg?branch=master)](https://travis-ci.org/fukamachi/apispec)

  [![Coverage Status](https://coveralls.io/repos/fukamachi/apispec/badge.svg?branch=master)](https://coveralls.io/r/fukamachi/apispec)


  A Common Lisp library for handling Web API specifications. This allows to validate and parse HTTP request headers, parameters and bodies with OpenAPI3 specification.


  ## Warning


  This software is still ALPHA quality. The APIs will be likely to change.


  ## Prerequisite


  * [libyaml](http://pyyaml.org/wiki/LibYAML) for loading OpenAPI spec files.


  ## Usage


  ### Loading specification file


  ```common-lisp

  (defvar *spec*
    (apispec:load-from-file #P"docs/api.yaml"))

  (apispec:spec-version *spec*)

  ;=> "3.0.2"

  ```


  ### Getting the operation


  ```common-lisp

  (defvar *router* (apispec:spec-router *spec*))


  (apispec:find-route *router* :GET "/users/12")

  ;=> #<APISPEC/CLASSES/OPERATION:OPERATION {1003DDB073}>

  ```


  ### Parsing and Validating HTTP requests


  ```common-lisp

  (import '(lack.request:request-query-parameters
            lack.request:request-body-parameters
            lack.request:request-cookies
            apispec:request-path-parameters))

  ;; Clack application

  (defvar *app*
    (lambda (env)
      (multiple-value-bind (operation path-parameters)
          (apispec:find-route (spec-router *spec*)
                              (getf env :request-method)
                              (getf env :path-info))
        ;; Getting Lack.Request
        (let ((request (apispec:validate-request operation env
                                                 :path-parameters path-parameters)))
          ;; Write the main application here.

          ;; Accessors for getting each parameters.
          (request-query-parameters request)  ;=> Query parameters (alist)
          (request-body-parameters request)   ;=> Body parameters (alist)
          (request-path-parameters request)   ;=> Path parameters (alist)
          (request-cookies)                   ;=> Cookie parameters (alist)

          ))))

  ;; Start the server

  (clack:clackup *app*)

  ```


  ### Validating and Encoding HTTP responses


  ```common-lisp

  (import 'lack.response:make-response)


  (apispec:validate-response operation
                             (make-response 200
                                            '(:content-type "application/json")
                                            '(("id" . 3)
                                              ("name" . "初音ミク")
                                              ("is_admin" . nil))))
  ;=> (200 (:CONTENT-TYPE "application/json") ("{\"id\":3,\"name\":\"初音ミク\",\"is_admin\":false}"))

  ```


  ### Custom Encoder for standard objects


  ```common-lisp

  (import 'lack.response:make-response)


  ;; Custom class

  (defclass user ()
    ((id :initarg :id)
     (name :initarg :name)
     (is-admin :initarg :is-admin)))

  ;; Define APISPEC:ENCODE-OBJECT for the class

  (defmethod apispec:encode-object ((user user))
    `(("id" . ,(slot-value user 'id))
      ("name" . ,(slot-value user 'name))
      ("is_admin" . ,(slot-value user 'is-admin))))

  (defvar *yukari*
    (make-instance 'user
                   :id 14
                   :name "結月ゆかり"
                   :is-admin nil))

  (apispec:validate-response operation
                             (make-response 200
                                            '(:content-type "application/json")
                                            *yukari*))
  ;=> (200 (:CONTENT-TYPE "application/json") ("{\"id\":14,\"name\":\"結月ゆかり\",\"is_admin\":false}"))

  ```


  ## Examples


  See [examples/](examples/).


  ## See Also


  * [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification)

  * [Lack](https://github.com/fukamachi/lack)


  ## Author


  * Eitaro Fukamachi (e.arrows@gmail.com)


  ## Copyright


  Copyright (c) 2019 Eitaro Fukamachi (e.arrows@gmail.com)


  ## License


  Licensed under the BSD 3-Clause License.
sphinx-contrib/openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44B6FD4:462E256:678EE3D3 and timestamp 2025-01-21 00:01:23
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
VanMoof/gopenapi: >-
  = GOpenAPI


  image:https://circleci.com/gh/VanMoof/gopenapi.svg?style=svg&circle-token=3af6268b2c8da20c22632261882d358e3027c045["CircleCI", link="https://circleci.com/gh/VanMoof/gopenapi"]


  An OpenAPI utility for Go.

  This project aims to bring support of OpenAPI v3.


  == Usage


  ```bash

  $ gopenapi [command] [arg]

  ```


  === Generating Specifications From Code


  ```bash

  gopenapi generate spec [optional path] [flags]

  ```


  ==== Args


  ```bash

  [optional path]   Optionally specify the directory in which to search. Accepts absolute paths. Relative paths are relative to the current directory. (default ".")

  ```


  ==== Flags


  ```bash

  -f, --format string   The format of the output. May be json or yaml (default "json")

  -o, --output string   Where the output should be directed. May be '-' (stdout) or a path to a file (default "-")

  ```


  ==== Format


  Code is annotated with different types of comments that help generate the spec.


  The comment contains a keyword that specifies the type of the OpenAPI element.


  The content of the comment should be a valid YAML OpenAPI element


  ===== Info


  Begin a comment with `gopenapi:info` and follow up with a YAML representation of the OpenAPI Info element.


  This element is then set to the `info` property of the specification.


  ```go

  package main


  /*

  gopenapi:info

  title: The App Name

  version: 1.0

  description: |-
    The app description
  contact:
    name: Jimbob Jones
    url: https://jones.com
    email: jimbob@jones.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  */

  func main() {

  }

  ```


  ===== Path


  Begin a comment with `gopenapi:path` and follow up with a YAML representation of the OpenAPI PathItem element.


  This element is then appended to the `paths` property of the specification.


  ```go

  package main


  /*

  gopenapi:path

  /ping:
    get:
      responses:
        200:
          description: |-
            The default response of "ping"
          content:
            text/plain:
              example: pong
  */

  func ControllerFunc() {

  }

  ```


  ===== Object Schema


  Annotate a struct with a `gopenapi:objectSchema`.


  The generated ObjectSchema element will be appended to the `components.schemas` property of the specification.


  ```go

  //gopenapi:objectSchema

  type RootModel struct {
  	IntField    int64  `json:"intField"`
  	StringField string `json:"stringField"`
  }


  // This struct will be ignored

  type IgnoredModel struct {

  }


  //gopenapi:objectSchema

  type AliasedModels []*AliasedModel // This alias will appear as a schema too


  //gopenapi:objectSchema

  type AliasedModel struct {
  	IgnoredField string `json:"-"` // This field will be ignored
  	TimeField    time.Time
  }


  ```


  ===== Parameter


  Annotate a `const` or a `var` with a `gopenapi:parameter`.


  The annotated field will be appended to the `components.parameters` property of the specification.


  ```go

  /*

  gopenapi:parameter

  in: path

  required: true

  content:
    text/plain:
      example: 30
  */

  const Limit = "limit"

  ```


  The name of the field (`Limit`) will be the parameter identifier and the value of the field (`limit`) will be the name of the parameter.
playpauseandstop/rororo: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDA:1EDF9F:2506B82:25C0053:678EE3C2 and timestamp 2025-01-21 00:01:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
wI2L/fizz: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD0:1F5FC7:552F2F7:56EB6AB:678EE3E7
  and timestamp 2025-01-21 00:01:44
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
leosussan/fastapi-gino-arq-uvicorn: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57C483B:5980BB7:678EE3AA and timestamp 2025-01-21 00:00:42
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
dgouyette/play-api-refiner: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD8:2AAE2C:5115A58:52D0E03:678EE38E and timestamp 2025-01-21 00:00:14
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ErikWittern/openapi-snippet: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:24F1540:25AA2BC:678EE35A and timestamp 2025-01-20 23:59:22
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
openapi-contrib/openapi3-generator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCD:2AAE2C:511CAA0:52D8031:678EE3AD and timestamp 2025-01-21 00:00:45
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
networknt/json-schema-validator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44B1F12:4628FE1:678EE3BB and timestamp 2025-01-21 00:00:59
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
networknt/light-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDA:1EDF9F:25050D1:25BE525:678EE3BC and timestamp 2025-01-21 00:01:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
sunrise-php/http-router: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D174CE:D7EB28:678EE3D8 and timestamp 2025-01-21 00:01:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
RuntimeTools/chai-openapi-response-validator: >
  # OpenAPI Validators


  [![Build Status](https://travis-ci.com/RuntimeTools/OpenAPIValidators.svg?branch=master)](https://travis-ci.com/RuntimeTools/OpenAPIValidators)

  ![dependencies](https://img.shields.io/david/RuntimeTools/OpenAPIValidators)

  ![style](https://img.shields.io/badge/code%20style-airbnb-ff5a5f.svg)

  [![codecov](https://codecov.io/gh/RuntimeTools/OpenAPIValidators/branch/master/graph/badge.svg)](https://codecov.io/gh/RuntimeTools/OpenAPIValidators)


  Chai and Jest support for asserting that HTTP responses satisfy an OpenAPI spec.


  ## Problem


  If your server's behaviour doesn't match your API documentation, then you need to correct your server, your documentation, or both. The sooner you know the better.


  ## Solution


  These plugin let you automatically test whether your server's behaviour and documentation match. They extend Chai and Jest to support the [OpenAPI standard](https://swagger.io/docs/specification/about/) for documenting REST APIs. In your JavaScript tests, you can simply assert `expect(responseObject).toSatisfyApiSpec()`



  ### [Chai OpenAPI Response Validator](https://github.com/RuntimeTools/OpenAPIValidators/tree/master/packages/chai-openapi-response-validator#readme):


  [![downloads](https://img.shields.io/npm/dm/chai-openapi-response-validator)](https://www.npmjs.com/package/chai-openapi-response-validator)

  [![npm](https://img.shields.io/npm/v/chai-openapi-response-validator.svg)](https://www.npmjs.com/package/chai-openapi-response-validator)



  ### [jest-openapi](https://github.com/RuntimeTools/OpenAPIValidators/tree/master/packages/jest-openapi#readme)


  [![downloads](https://img.shields.io/npm/dm/jest-openapi)](https://www.npmjs.com/package/jest-openapi)

  [![npm](https://img.shields.io/npm/v/jest-openapi.svg)](https://www.npmjs.com/package/jest-openapi)
ahx/openapi_first: >
  # openapi_first


  OpenapiFirst helps to implement HTTP APIs based on an [OpenAPI](https://www.openapis.org/) API description. It supports OpenAPI 3.0 and 3.1. It offers request and response validation and it ensures that your implementation follows exactly the API description.


  [![Tests](https://github.com/ahx/openapi_first/actions/workflows/ruby.yml/badge.svg)](https://github.com/ahx/openapi_first/actions/workflows/ruby.yml)

  [![CodeQL](https://github.com/ahx/openapi_first/actions/workflows/codeql.yml/badge.svg)](https://github.com/ahx/openapi_first/blob/codeql/.github/workflows/codeql.yml)


  ## Contents


  <!-- TOC -->


  - [Manual use](#manual-use)
    - [Validate request](#validate-request)
    - [Validate response](#validate-response)
  - [Rack Middlewares](#rack-middlewares)
    - [Request validation](#request-validation)
    - [Response validation](#response-validation)
  - [Test assertions](#test-assertions)

  - [Framework integration](#framework-integration)

  - [Configuration](#configuration)

  - [Hooks](#hooks)

  - [Alternatives](#alternatives)

  - [Development](#development)
    - [Benchmarks](#benchmarks)
    - [Contributing](#contributing)

  <!-- /TOC -->


  ## Manual use


  Load the API description:


  ```ruby

  require 'openapi_first'


  definition = OpenapiFirst.load('openapi.yaml')

  ```


  ### Validate request


  ```ruby

  validated_request = definition.validate_request(rack_request)


  # Inspect the request and access parsed parameters

  validated_request.valid?

  validated_request.invalid?

  validated_request.error # => Failure object or nil

  validated_request.parsed_body # => The parsed request body (Hash)

  validated_request.parsed_query # A Hash of query parameters that are defined in the API description, parsed exactly as described.

  validated_request.parsed_path_parameters

  validated_request.parsed_headers

  validated_request.parsed_cookies

  validated_request.parsed_params # Merged parsed path, query parameters and request body

  # Access the Openapi 3 Operation Object Hash

  validated_request.operation['x-foo']

  validated_request.operation['operationId'] => "getStuff"

  # or the whole request definition

  validated_request.request_definition.path # => "/pets/{petId}"

  validated_request.request_definition.operation_id # => "showPetById"


  # Or you can raise an exception if validation fails:

  definition.validate_request(rack_request, raise_error: true) # Raises OpenapiFirst::RequestInvalidError or OpenapiFirst::NotFoundError if request is invalid

  ```


  ### Validate response


  ```ruby

  validated_response = definition.validate_response(rack_request, rack_response)


  # Inspect the response and access parsed parameters and

  validated_response.valid?

  validated_response.invalid?

  validated_response.error # => Failure object or nil

  validated_response.status # => 200

  validated_response.parsed_body

  validated_response.parsed_headers


  # Or you can raise an exception if validation fails:

  definition.validate_response(rack_request,rack_response, raise_error: true) # Raises OpenapiFirst::ResponseInvalidError or OpenapiFirst::ResponseNotFoundError

  ```


  ## Rack Middlewares


  ### Request validation


  The request validation middleware returns a 4xx if the request is invalid or not defined in the API description. It adds a request object to the current Rack environment at `env[OpenapiFirst::REQUEST]` with the request parameters parsed exaclty as described in your API description plus access to meta information from your API description. See _[Manual use](#manual-use)_ for more details about that object.


  ```ruby

  use OpenapiFirst::Middlewares::RequestValidation, spec: 'openapi.yaml'

  ```


  #### Options


  | Name              | Possible values                                                          | Description                                                                                                                         |

  | :---------------- | ------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------- |

  | `spec:`           |                                                                          | The path to the spec file or spec loaded via `OpenapiFirst.load`                                                                    |

  | `raise_error:`    | `false` (default), `true`                                                | If set to true the middleware raises `OpenapiFirst::RequestInvalidError` or `OpenapiFirst::NotFoundError` instead of returning 4xx. |

  | `error_response:` | `:default` (default), `:jsonapi`, Your implementation of `ErrorResponse` or `false` to disable responding  |


  #### Error responses


  openapi_first produces a useful machine readable error response that can be customized.

  The default response looks like this. See also [RFC 9457](https://www.rfc-editor.org/rfc/rfc9457).


  ```json

  http-status: 400

  content-type: "application/problem+json"


  {
    "title": "Bad Request Body",
    "status": 400,
    "errors": [
      {
        "message": "value at `/data/name` is not a string",
        "pointer": "/data/name",
        "code": "string"
      },
      {
        "message": "number at `/data/numberOfLegs` is less than: 2",
        "pointer": "/data/numberOfLegs",
        "code": "minimum"
      },
      {
        "message": "object at `/data` is missing required properties: mandatory",
        "pointer": "/data",
        "code": "required"
      }
    ]
  }

  ```


  openapi_first offers a [JSON:API](https://jsonapi.org/) error response as well:


  ```ruby

  use OpenapiFirst::Middlewares::RequestValidation, spec: 'openapi.yaml, error_response: :jsonapi'

  ```


  <details>

  <summary>See details of JSON:API error response</summary>


  ```json

  // http-status: 400

  // content-type: "application/vnd.api+json"


  {
    "errors": [
      {
        "status": "400",
        "source": {
          "pointer": "/data/name"
        },
        "title": "value at `/data/name` is not a string",
        "code": "string"
      },
      {
        "status": "400",
        "source": {
          "pointer": "/data/numberOfLegs"
        },
        "title": "number at `/data/numberOfLegs` is less than: 2",
        "code": "minimum"
      },
      {
        "status": "400",
        "source": {
          "pointer": "/data"
        },
        "title": "object at `/data` is missing required properties: mandatory",
        "code": "required"
      }
    ]
  }

  ```


  </details>


  #### Custom error responses


  You can build your own custom error response with `error_response: MyCustomClass` that implements `OpenapiFirst::ErrorResponse`.

  You can define custom error responses globally by including / implementing `OpenapiFirst::ErrorResponse` and register it via `OpenapiFirst.register_error_response(my_name, MyCustomErrorResponse)` and set `error_response: my_name`.


  #### readOnly / writeOnly properties


  Request validation fails if request includes a property with `readOnly: true`.


  Response validation fails if response body includes a property with `writeOnly: true`.


  ### Response validation


  This middleware is especially useful when testing. It raises an error by default if the response is not valid.


  ```ruby

  use OpenapiFirst::Middlewares::ResponseValidation, spec: 'openapi.yaml' if ENV['RACK_ENV'] == 'test'

  ```


  #### Options


  | Name    | Possible values | Description                                                      |

  | :------ | --------------- | ---------------------------------------------------------------- |

  | `spec:` |                 | The path to the spec file or spec loaded via `OpenapiFirst.load` |

  | `raise_error:`    | `true` (default), `false`                                                | If set to true the middleware raises `OpenapiFirst::ResponseInvalidError` or `OpenapiFirst::ResonseNotFoundError` if the response does not match the API description. |


  ## Test assertions


  openapi_first ships with a simple but powerful Test module to run request and response validation in your tests without using the middlewares. This is designed to be used with rack-test or Ruby on Rails integration tests or request specs.


  Here is how to set it up for Rails integration tests:


  ```ruby

  # test_helper.rb

  OpenapiFirst::Test.register('openapi/v1.openapi.yaml')

  ```


  Inside your test:

  ```ruby

  # test/integration/trips_api_test.rb

  require 'test_helper'


  class TripsApiTest < ActionDispatch::IntegrationTest
    include OpenapiFirst::Test::Methods

    test 'GET /trips' do
      get '/trips',
          params: { origin: 'efdbb9d1-02c2-4bc3-afb7-6788d8782b1e', destination: 'b2e783e1-c824-4d63-b37a-d8d698862f1d',
                    date: '2024-07-02T09:00:00Z' }

      assert_api_conform(status: 200)
    end
  end

  ```


  ## Configuration


  You can configure default options globally:


  ```ruby

  OpenapiFirst.configure do |config|
    # Specify which plugin is used to render error responses returned by the request validation middleware (defaults to :default)
    config.request_validation_error_response = :jsonapi
    # Configure if the request validation middleware should raise an exception (defaults to false)
    config.request_validation_raise_error = true
  end

  ```


  or configure per instance:


  ```ruby

  OpenapiFirst.load('openapi.yaml') do |config|
    config.request_validation_error_response = :jsonapi
  end

  ```


  ## Hooks


  You can integrate your code at certain points during request/response validation via hooks.


  Available hooks:


  - `after_request_validation`

  - `after_response_validation`

  - `after_request_parameter_property_validation`

  - `after_request_body_property_validation`


  Setup per per instance:


  ```ruby

  OpenapiFirst.load('openapi.yaml') do |config|
    config.after_request_validation do |validated_request|
      validated_request.valid? # => true / false
    end
    config.after_response_validation do |validated_response, request|
      if validated_response.invalid?
        warn "#{request.request_method} #{request.path}: #{validated_response.error.message}"
      end
    end
  end

  ```


  Setup globally:


  ```ruby

  OpenapiFirst.configure do |config|
    config.after_request_parameter_property_validation do |data, property, property_schema|
      data[property] = Date.iso8601(data[property]) if propert_schema['format'] == 'date'
    end
  end

  ```


  ## Framework integration


  Using rack middlewares is supported in probably all Ruby web frameworks.

  If you are using Ruby on Rails for example, you can add the request validation middleware globally in `config/application.rb` or inside specific controllers.


  When running integration tests (or request specs when using rspec), it makes sense to add the response validation middleware to `config/environments/test.rb`:


  ```ruby

  config.middleware.use OpenapiFirst::Middlewares::ResponseValidation,
    spec: 'api/openapi.yaml'
  ```


  That way you don't have to call specific test assertions to make sure your API matches the OpenAPI document.

  There is no need to run response validation on production if your test coverage is decent.


  ## Alternatives


  This gem was inspired by [committe](https://github.com/interagent/committee) (Ruby) and [Connexion](https://github.com/spec-first/connexion) (Python).

  Here is a [feature comparison between openapi_first and committee](https://gist.github.com/ahx/1538c31f0652f459861713b5259e366a).


  ## Development


  Run `bin/setup` to install dependencies.


  See `bundle exec rake` to run the linter and the tests.


  Run `bundle exec rspec` to run the tests only.


  ### Benchmarks


  [Results](https://gist.github.com/ahx/e6ffced58bd2e8d5baffb2f4d2c1f823)


  Run benchmarks:


  ```sh

  cd benchmarks

  bundle

  bundle exec ruby benchmarks.rb

  ```


  ### Contributing


  If you have a question or an idea or found a bug don't hesitate to [create an issue](https://github.com/ahx/openapi_first/issues) or [start a discussion](https://github.com/ahx/openapi_first/discussions).


  Pull requests are very welcome as well, of course. Feel free to create a "draft" pull request early on, even if your change is still work in progress. 🤗
pace/bricks: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD5:124B:D11F23:D793F7:678EE3C0 and
  timestamp 2025-01-21 00:01:04
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
kiwicom/schemathesis: >
  Schemathesis

  ============


  |Build| |Coverage| |Version| |Python versions| |Docs| |Chat| |License|


  Schemathesis is a tool for testing your web applications built with Open API / Swagger or GraphQL specifications.


  It reads the application schema and generates test cases which will ensure that your application is compliant with its schema.


  The application under test could be written in any language, the only thing you need is a valid API schema in a supported format.


  **Supported specification versions**:


  - Swagger 2.0

  - Open API 3.0.x

  - GraphQL June 2018


  More API specifications will be added in the future.


  Built with:


  - `hypothesis`_


  - `hypothesis_jsonschema`_


  - `hypothesis_graphql`_


  - `pytest`_


  Inspired by wonderful `swagger-conformance <https://github.com/olipratt/swagger-conformance>`_ project.


  **Docs**: https://schemathesis.readthedocs.io/en/stable/


  **Gitter**: https://gitter.im/kiwicom/schemathesis


  If you are looking for more information:


  - `An article <https://code.kiwi.com/schemathesis-property-based-testing-for-api-schemas-52811fd2b0a4>`_ about Schemathesis by **@Stranger6667**

  - `A video <https://youtu.be/1lo7idI7uq8>`_ from FlaskCon 2020 by **@hultner**


  Installation

  ------------


  To install Schemathesis via ``pip`` run the following command:


  .. code:: bash

      pip install schemathesis

  Usage

  -----


  There are two basic ways to use Schemathesis:


  - `Command Line Interface <https://github.com/kiwicom/schemathesis#command-line-interface>`_

  - `Writing tests in Python <https://github.com/kiwicom/schemathesis#in-code>`_


  CLI is pretty simple to use and requires no coding, in-code approach gives more flexibility.


  Command Line Interface

  ~~~~~~~~~~~~~~~~~~~~~~


  The ``schemathesis`` command can be used to perform Schemathesis test cases:


  .. code:: bash

      schemathesis run https://example.com/api/swagger.json

  .. image:: https://github.com/kiwicom/schemathesis/blob/master/img/schemathesis.gif


  If your application requires authorization then you can use ``--auth`` option for Basic Auth and ``--header`` to specify

  custom headers to be sent with each request.


  To filter your tests by endpoint name, HTTP method, Open API tags or operationId you could use ``-E``, ``-M``, ``-T``, ``-O`` options respectively.


  CLI supports passing options to ``hypothesis.settings``. All of them are prefixed with ``--hypothesis-``:


  .. code:: bash

      schemathesis run --hypothesis-max-examples=1000 https://example.com/api/swagger.json

  To speed up the testing process Schemathesis provides ``-w/--workers`` option for concurrent test execution:


  .. code:: bash

      schemathesis run -w 8 https://example.com/api/swagger.json

  In the example above all tests will be distributed among 8 worker threads.


  If you'd like to test your web app (Flask or AioHTTP or FastAPI for example) then there is ``--app`` option for you:


  .. code:: bash

      schemathesis run --app=importable.path:app /swagger.json

  You need to specify an importable path to the module where your app instance resides and a variable name after ``:`` that points

  to your app. **Note**, app factories are not supported. The schema location could be:


  - A full URL;

  - An existing filesystem path;

  - In-app endpoint with schema.


  This method is significantly faster for WSGI apps, since it doesn't involve network.


  For the full list of options, run:


  .. code:: bash

      schemathesis --help
      # Or
      schemathesis run --help

  Docker

  ~~~~~~


  Schemathesis CLI also available as a docker image


  .. code:: bash

      docker run kiwicom/schemathesis:stable run http://example.com/schema.json

  To run it against localhost server add ``--network=host`` parameter:


  .. code:: bash

      docker run --network="host" kiwicom/schemathesis:stable run http://127.0.0.1/schema.json

  Pre-run CLI hook

  ################


  Sometimes you need to execute custom code before the CLI run, for example setup an environment,

  register custom string format strategies or modify Schemathesis behavior in runtime you can use ``--pre-run`` hook:


  .. code:: bash

      schemathesis --pre-run importable.path.to.module run https://example.com/api/swagger.json

  **NOTE**. This option should be passed before the ``run`` part.


  The passed value will be processed as an importable Python path, where you can execute your code.

  An example - https://github.com/kiwicom/schemathesis#custom-string-strategies


  Registering custom checks for CLI

  #################################


  To add a new check for the Schemathesis CLI there is a special function


  .. code:: python

      import schemathesis

      @schemathesis.register_check
      def new_check(response, case):
          # some awesome assertions!
          pass

  The registered check should accept a ``response`` with ``requests.Response`` / ``schemathesis.utils.WSGIResponse`` type and

  ``case`` with ``schemathesis.models.Case`` type.


  After registration, your checks will be available in Schemathesis CLI and you can use them via ``-c`` command line option.


  .. code:: bash

      schemathesis --pre-run module.with.checks run -c new_check https://example.com/api/swagger.json

  Additionally, checks may return ``True`` to skip the check under certain conditions. For example, you may only want to run checks when the

  response code is ``200``.


  .. code:: python

      import schemathesis

      @schemathesis.register_check
      def conditional_check(response, case):
          if response.status_code == 200:
              # some awesome assertions!
          else:
              # check not relevant to this response, skip test
              return True

  In-code

  ~~~~~~~


  To examine your application with Schemathesis you need to:


  - Setup & run your application, so it is accessible via the network;

  - Write a couple of tests in Python;

  - Run the tests via ``pytest``.


  Suppose you have your application running on ``http://0.0.0.0:8080`` and its

  schema is available at ``http://0.0.0.0:8080/swagger.json``.


  A basic test, that will verify that any data, that fit into the schema will not cause any internal server error could

  look like this:


  .. code:: python

      # test_api.py
      import requests
      import schemathesis

      schema = schemathesis.from_uri("http://0.0.0.0:8080/swagger.json")

      @schema.parametrize()
      def test_no_server_errors(case):
          # `requests` will make an appropriate call under the hood
          response = case.call()  # use `call_wsgi` if you used `schemathesis.from_wsgi`
          # You could use built-in checks
          case.validate_response(response)
          # Or assert the response manually
          assert response.status_code < 500


  It consists of four main parts:


  1. Schema preparation; ``schemathesis`` package provides multiple ways to initialize the schema - ``from_path``, ``from_dict``, ``from_uri``, ``from_file`` and ``from_wsgi``.


  2. Test parametrization; ``@schema.parametrize()`` generates separate tests for all endpoint/method combination available in the schema.


  3. A network call to the running application; ``case.call`` does it.


  4. Verifying a property you'd like to test; In the example, we verify that any app response will not indicate a server-side error (HTTP codes 5xx).


  **NOTE**. Look for ``from_wsgi`` usage `below <https://github.com/kiwicom/schemathesis#wsgi>`_


  Run the tests:


  .. code:: bash

      pytest test_api.py

  **Other properties that could be tested**:


  - Any call will be processed in <50 ms - you can verify the app performance;

  - Any unauthorized access will end with 401 HTTP response code;


  Each test function should have the ``case`` fixture, that represents a single test case.


  Important ``Case`` attributes:


  - ``method`` - HTTP method

  - ``formatted_path`` - full endpoint path

  - ``headers`` - HTTP headers

  - ``query`` - query parameters

  - ``body`` - request body


  You can use them manually in network calls or can convert to a dictionary acceptable by ``requests.request``:


  .. code:: python

      import requests

      schema = schemathesis.from_uri("http://0.0.0.0:8080/swagger.json")

      @schema.parametrize()
      def test_no_server_errors(case):
          kwargs = case.as_requests_kwargs()
          response = requests.request(**kwargs)


  For each test, Schemathesis will generate a bunch of random inputs acceptable by the schema.

  This data could be used to verify that your application works in the way as described in the schema or that schema describes expected behavior.


  By default, there will be 100 test cases per endpoint/method combination.

  To limit the number of examples you could use ``hypothesis.settings`` decorator on your test functions:


  .. code:: python

      from hypothesis import settings

      @schema.parametrize()
      @settings(max_examples=5)
      def test_something(client, case):
          ...

  To narrow down the scope of the schemathesis tests it is possible to filter by method or endpoint:


  .. code:: python

      @schema.parametrize(method="GET", endpoint="/pet")
      def test_no_server_errors(case):
          ...

  The acceptable values are regexps or list of regexps (matched with ``re.search``).


  WSGI applications support

  ~~~~~~~~~~~~~~~~~~~~~~~~~


  Schemathesis supports making calls to WSGI-compliant applications instead of real network calls, in this case

  the test execution will go much faster.


  .. code:: python

      app = Flask("test_app")

      @app.route("/schema.json")
      def schema():
          return {...}

      @app.route("/v1/users", methods=["GET"])
      def users():
          return jsonify([{"name": "Robin"}])

      schema = schemathesis.from_wsgi("/schema.json", app)

      @schema.parametrize()
      def test_no_server_errors(case):
          response = case.call_wsgi()
          assert response.status_code < 500

  Explicit examples

  ~~~~~~~~~~~~~~~~~


  If the schema contains parameters examples, then they will be additionally included in the generated cases.

  Schemathesis supports the use of both OpenAPI ``example`` and ``examples`` (more information available in the `OpenAPI documentation <https://swagger.io/docs/specification/adding-examples/>`_).

  Note that ``examples`` were added in OpenAPI 3, but Schemathesis supports this feature for OpenAPI 2 using ``x-examples``.


  .. code:: yaml

      paths:
        get:
          parameters:
          - in: body
            name: body
            required: true
            schema: '#/definitions/Pet'

      definitions:
        Pet:
          additionalProperties: false
          example:
            name: Doggo
          properties:
            name:
              type: string
          required:
          - name
          type: object


  With this Swagger schema example, there will be a case with body ``{"name": "Doggo"}``.  Examples handled with

  ``example`` decorator from Hypothesis, more info about its behavior is `here`_.


  If you'd like to test only examples provided in the schema, you could utilize ``--hypothesis-phases=explicit`` CLI option:


  .. code:: bash

      $ schemathesis run --hypothesis-phases=explicit https://example.com/api/swagger.json

  Or add this decorator to your test if you use Schemathesis in your Python tests:


  .. code:: python

      from hypothesis import settings, Phase

      ...
      @schema.parametrize()
      @settings(phases=[Phase.explicit])
      def test_api(case):
          ...

  **NOTE**. Schemathesis supports examples in individual properties.

  See below:


  .. code:: yaml

      ...
      paths:
        /users:
          parameters:
            - in: query
              name: foo
              schema:
                type: object
                properties:
                  prop1:
                    type: string
                    example: prop1 example    # SUPPORTED!
          post:
            requestBody:
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      foo:
                        type: string
                        example: bar          # SUPPORTED!

  Direct strategies access

  ~~~~~~~~~~~~~~~~~~~~~~~~


  For convenience you can explore the schemas and strategies manually:


  .. code:: python

      >>> import schemathesis
      >>> schema = schemathesis.from_uri("http://0.0.0.0:8080/petstore.json")
      >>> endpoint = schema["/pet"]["POST"]
      >>> strategy = endpoint.as_strategy()
      >>> strategy.example()
      Case(
          path='/pet',
          method='POST',
          path_parameters={},
          headers={},
          cookies={},
          query={},
          body={
              'name': '\x15.\x13\U0008f42a',
              'photoUrls': ['\x08\U0009f29a', '\U000abfd6\U000427c4', '']
          },
          form_data={}
      )

  Schema instances implement ``Mapping`` protocol.


  **NOTE**. Paths are relative to the schema's base path (``host`` + ``basePath`` in Open API 2.0 and ``server.url`` in Open API 3.0):


  .. code:: python

      # your ``basePath`` is ``/api/v1``
      >>> schema["/pet"]["POST"]  # VALID
      >>> schema["/api/v1/pet"]["POST"]  # INVALID

  Lazy loading

  ~~~~~~~~~~~~


  If you have a schema that is not available when the tests are collected, for example it is build with tools

  like ``apispec`` and requires an application instance available, then you can parametrize the tests from a pytest fixture.


  .. code:: python

      # test_api.py
      import schemathesis

      schema = schemathesis.from_pytest_fixture("fixture_name")

      @schema.parametrize()
      def test_api(case):
          ...

  In this case the test body will be used as a sub-test via ``pytest-subtests`` library.


  **NOTE**: the used fixture should return a valid schema that could be created via ``schemathesis.from_dict`` or other

  ``schemathesis.from_`` variations.


  Extending schemathesis

  ~~~~~~~~~~~~~~~~~~~~~~


  If you're looking for a way to extend ``schemathesis`` or reuse it in your own application, then ``runner`` module might be helpful for you.

  It can run tests against the given schema URI and will do some simple checks for you.


  .. code:: python

      from schemathesis import runner

      events = runner.prepare("http://127.0.0.1:8080/swagger.json")
      for event in events:
          # do something with event

  ``runner.prepare`` creates a generator that yields events of different kinds - ``BeforeExecution``, ``AfterExecution``, etc.

  They provide a lot of useful information about what happens during tests, but handling of these events is your responsibility.

  You can take some inspiration from Schemathesis `CLI implementation <https://github.com/kiwicom/schemathesis/blob/master/src/schemathesis/cli/__init__.py#L230>`_.

  See full description of events in the `source code <https://github.com/kiwicom/schemathesis/blob/master/src/schemathesis/runner/events.py>`_.


  If you want to use Schemathesis CLI with your custom checks, look at `this section <https://github.com/kiwicom/schemathesis/tree/dd/deprecate-execute#registering-custom-checks-for-cli>`_


  The built-in checks list includes the following:


  - Not a server error. Asserts that response's status code is less than 500;

  - Status code conformance. Asserts that response's status code is listed in the schema;

  - Content type conformance. Asserts that response's content type is listed in the schema;

  - Response schema conformance. Asserts that response's content conforms to the declared schema;


  You can provide your custom checks to the execute function, the check is a callable that accepts one argument of ``requests.Response`` type.


  .. code:: python

      from datetime import timedelta
      from schemathesis import runner, models

      def not_too_long(response, case: models.Case):
          assert response.elapsed < timedelta(milliseconds=300)

      events = runner.prepare("http://127.0.0.1:8080/swagger.json", checks=[not_too_long])
      for event in events:
          # do something with event

  Custom string strategies

  ########################


  Some string fields could use custom format and validators,

  e.g. ``card_number`` and Luhn algorithm validator.


  For such cases it is possible to register custom strategies:


  1. Create ``hypothesis.strategies.SearchStrategy`` object

  2. Optionally provide predicate function to filter values

  3. Register it via ``schemathesis.register_string_format``


  .. code-block:: python

      strategy = strategies.from_regex(r"\A4[0-9]{15}\Z").filter(luhn_validator)
      schemathesis.register_string_format("visa_cards", strategy)

  Unittest support

  ################


  Schemathesis supports Python's built-in ``unittest`` framework out of the box,

  you only need to specify strategies for ``hypothesis.given``:


  .. code-block:: python

      from unittest import TestCase
      from hypothesis import given
      import schemathesis

      schema = schemathesis.from_uri("http://0.0.0.0:8080/petstore.json")
      new_pet_strategy = schema["/v2/pet"]["POST"].as_strategy()

      class TestSchema(TestCase):

          @given(case=new_pet_strategy)
          def test_pets(self, case):
              response = case.call()
              assert response.status_code < 500

  Schema validation

  #################


  To avoid obscure and hard to debug errors during test runs Schemathesis validates input schemas for conformance with the relevant spec.

  If you'd like to disable this behavior use ``--validate-schema=false`` in CLI and ``validate_schema=False`` argument in loaders.


  Local development

  -----------------


  First, you need to prepare a virtual environment with `poetry`_.

  Install ``poetry`` (check out the `installation guide`_) and run this command inside the project root:


  .. code:: bash

      poetry install

  For simpler local development Schemathesis includes a ``aiohttp``-based server with the following endpoints in Swagger 2.0 schema:


  - ``/api/success`` - always returns ``{"success": true}``

  - ``/api/failure`` - always returns 500

  - ``/api/slow`` - always returns ``{"slow": true}`` after 250 ms delay

  - ``/api/unsatisfiable`` - parameters for this endpoint are impossible to generate

  - ``/api/invalid`` - invalid parameter definition. Uses ``int`` instead of ``integer``

  - ``/api/flaky`` - returns 1/1 ratio of 200/500 responses

  - ``/api/multipart`` - accepts multipart data

  - ``/api/teapot`` - returns 418 status code, that is not listed in the schema

  - ``/api/text`` - returns ``plain/text`` responses, which are not declared in the schema

  - ``/api/malformed_json`` - returns malformed JSON with ``application/json`` content type header



  To start the server:


  .. code:: bash

      ./test_server.sh 8081

  It is possible to configure available endpoints via ``--endpoints`` option.

  The value is expected to be a comma separated string with endpoint names (``success``, ``failure``, ``slow``, etc):


  .. code:: bash

      ./test_server.sh 8081 --endpoints=success,slow

  Then you could use CLI against this server:


  .. code:: bash

      schemathesis run http://127.0.0.1:8081/schema.yaml
      ================================== Schemathesis test session starts =================================
      platform Linux -- Python 3.7.4, schemathesis-0.12.2, hypothesis-4.39.0, hypothesis_jsonschema-0.9.8
      rootdir: /
      hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/.hypothesis/examples')
      Schema location: http://127.0.0.1:8081/schema.yaml
      Base URL: http://127.0.0.1:8081
      Specification version: Swagger 2.0
      collected endpoints: 2

      GET /api/slow .                                                                               [ 50%]
      GET /api/success .                                                                            [100%]

      ============================================== SUMMARY ==============================================

      not_a_server_error            2 / 2 passed          PASSED

      ========================================= 2 passed in 0.29s =========================================


  Running tests

  ~~~~~~~~~~~~~


  You could run tests via ``tox``:


  .. code:: bash

      tox -p all -o

  or ``pytest`` in your current environment:


  .. code:: bash

      pytest test/ -n auto

  Contributing

  ------------


  Any contribution in development, testing or any other area is highly appreciated and useful to the project.


  Please, see the `CONTRIBUTING.rst`_ file for more details.


  Python support

  --------------


  Schemathesis supports Python 3.6, 3.7 and 3.8.


  License

  -------


  The code in this project is licensed under `MIT license`_.

  By contributing to ``schemathesis``, you agree that your contributions

  will be licensed under its MIT license.


  .. |Build| image:: https://github.com/kiwicom/schemathesis/workflows/build/badge.svg
     :target: https://github.com/kiwicom/schemathesis/actions
  .. |Coverage| image:: https://codecov.io/gh/kiwicom/schemathesis/branch/master/graph/badge.svg
     :target: https://codecov.io/gh/kiwicom/schemathesis/branch/master
     :alt: codecov.io status for master branch
  .. |Version| image:: https://img.shields.io/pypi/v/schemathesis.svg
     :target: https://pypi.org/project/schemathesis/
  .. |Python versions| image:: https://img.shields.io/pypi/pyversions/schemathesis.svg
     :target: https://pypi.org/project/schemathesis/
  .. |License| image:: https://img.shields.io/pypi/l/schemathesis.svg
     :target: https://opensource.org/licenses/MIT
  .. |Chat| image:: https://img.shields.io/gitter/room/kiwicom/schemathesis.svg
     :target: https://gitter.im/kiwicom/schemathesis
     :alt: Gitter
  .. |Docs| image:: https://readthedocs.org/projects/schemathesis/badge/?version=stable
     :target: https://schemathesis.readthedocs.io/en/stable/?badge=stable
     :alt: Documentation Status

  .. _hypothesis: https://hypothesis.works/

  .. _hypothesis_jsonschema: https://github.com/Zac-HD/hypothesis-jsonschema

  .. _hypothesis_graphql: https://github.com/Stranger6667/hypothesis-graphql

  .. _pytest: http://pytest.org/en/latest/

  .. _poetry: https://github.com/sdispater/poetry

  .. _installation guide: https://github.com/sdispater/poetry#installation

  .. _here: https://hypothesis.readthedocs.io/en/latest/reproducing.html#providing-explicit-examples

  .. _CONTRIBUTING.rst: https://github.com/kiwicom/schemathesis/blob/master/CONTRIBUTING.rst

  .. _MIT license: https://opensource.org/licenses/MIT
springdoc/springdoc-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D163C0:D7D9E9:678EE3D3 and timestamp 2025-01-21 00:01:23
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cxxxr/apispec: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CDB:124B:D05D9F:D6CEDF:678EE38A and
  timestamp 2025-01-21 00:00:10
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
openapi4j/openapi4j: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCE:2B946D:5375726:5531B62:678EE3BF and timestamp 2025-01-21 00:01:03
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
namuan/http-rider: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD0:1F5FC7:55250DD:56E1174:678EE3BA and timestamp 2025-01-21 00:00:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
p1c2u/openapi-core: >
  ************

  openapi-core

  ************


  .. image:: https://img.shields.io/pypi/v/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://travis-ci.org/python-openapi/openapi-core.svg?branch=master
       :target: https://travis-ci.org/python-openapi/openapi-core
  .. image:: https://img.shields.io/codecov/c/github/python-openapi/openapi-core/master.svg?style=flat
       :target: https://codecov.io/github/python-openapi/openapi-core?branch=master
  .. image:: https://img.shields.io/pypi/pyversions/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://img.shields.io/pypi/format/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core
  .. image:: https://img.shields.io/pypi/status/openapi-core.svg
       :target: https://pypi.python.org/pypi/openapi-core

  About

  #####


  Openapi-core is a Python library that adds client-side and server-side support

  for the `OpenAPI v3.0 <https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md>`__

  and `OpenAPI v3.1 <https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md>`__ specification.



  Key features

  ############


  * **Validation** and **unmarshalling** of request and response data (including webhooks)

  * **Integration** with popular libraries (Requests, Werkzeug) and frameworks (Django, Falcon, Flask, Starlette)

  * Customization with media type **deserializers** and format **unmarshallers**

  * **Security** data providers (API keys, Cookie, Basic and Bearer HTTP authentications)



  Documentation

  #############


  Check documentation to see more details about the features. All documentation is in the "docs" directory and online at `openapi-core.readthedocs.io <https://openapi-core.readthedocs.io>`__



  Installation

  ############


  Recommended way (via pip):


  .. code-block:: console

     pip install openapi-core

  Alternatively you can download the code and install from the repository:


  .. code-block:: console

     pip install -e git+https://github.com/python-openapi/openapi-core.git#egg=openapi_core


  First steps

  ###########


  Firstly create your specification object.


  .. code-block:: python

     from openapi_core import Spec

     spec = Spec.from_file_path('openapi.json')

  Now you can use it to validate and unmarshal against requests and/or responses. 


  .. code-block:: python

     from openapi_core import unmarshal_request

     # raises error if request is invalid
     result = unmarshal_request(request, spec=spec)

  Retrieve validated and unmarshalled request data


  .. code-block:: python

     # get parameters
     path_params = result.parameters.path
     query_params = result.parameters.query
     cookies_params = result.parameters.cookies
     headers_params = result.parameters.headers
     # get body
     body = result.body
     # get security data
     security = result.security

  Request object should implement OpenAPI Request protocol. Check `Integrations <https://openapi-core.readthedocs.io/en/latest/integrations.html>`__ to find oficially supported implementations.


  For more details read about `Unmarshalling <https://openapi-core.readthedocs.io/en/latest/unmarshalling.html>`__ process.


  If you just want to validate your request/response data without unmarshalling, read about `Validation <https://openapi-core.readthedocs.io/en/latest/validation.html>`__ instead.



  Related projects

  ################

  * `openapi-spec-validator <https://github.com/python-openapi/openapi-spec-validator>`__
     Python library that validates OpenAPI Specs against the OpenAPI 2.0 (aka Swagger), OpenAPI 3.0 and OpenAPI 3.1 specification. The validator aims to check for full compliance with the Specification.
  * `openapi-schema-validator <https://github.com/python-openapi/openapi-schema-validator>`__
     Python library that validates schema against the OpenAPI Schema Specification v3.0 and OpenAPI Schema Specification v3.1.
  * `bottle-openapi-3 <https://github.com/cope-systems/bottle-openapi-3>`__
     OpenAPI 3.0 Support for the Bottle Web Framework
  * `pyramid_openapi3 <https://github.com/niteoweb/pyramid_openapi3>`__
     Pyramid addon for OpenAPI3 validation of requests and responses.
  * `tornado-openapi3 <https://github.com/correl/tornado-openapi3>`__
     Tornado OpenAPI 3 request and response validation library.


  License

  #######


  The project is under the terms of BSD 3-Clause License.
APIs-guru/aws2openapi: >
  # aws2openapi

  Amazon Web Services API description to OpenAPI 3.0 specification


  ## Work in progress - beta quality


  ### Handles all current (v2) AWS json and xml specifications


  Resultant OpenApi specifications pass [multiple](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.yaml) [validators](https://github.com/Mermade/oas-kit)


  ![screenshot](https://raw.githubusercontent.com/APIs-guru/aws2openapi/main/docs/screenshot.png)


  The results of this converter can be found [here](https://github.com/APIs-guru/openapi-directory/tree/master/APIs/amazonaws.com)


  ### TODO **help wanted**


  * ~~Fix input header parameter selectivity~~

  * ~~Process protocol:ec2~~

  * ~~Authentication~~ You will have to calculate HMAC headers manually

  * ~~pagination~~

  * ~~Examples~~

  * ~~Waiters~~ (as vendor extension)

  * Test against live endpoints

  * Verify output header mappings

  * Test path-with-fragment hack works

  * Test paths with hardcoded ?parameters work

  * Validate xml-handling keyword translations
meeshkan/meeshkan: >
  # HMT


  [![CircleCI](https://circleci.com/gh/meeshkan/hmt.svg?style=shield)](https://circleci.com/gh/meeshkan/hmt)

  [![PyPI](https://img.shields.io/pypi/dm/hmt.svg)](https://pypi.org/project/hmt/)

  [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/)

  [![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)


  The HTTP Mocking Toolkit (HMT) is a tool that mocks HTTP APIs for use in sandboxes as well as for automated and exploratory testing. It uses a combination of API definitions, recorded traffic and code in order to make crafting mocks as enjoyable as possible.


  [Chat with us on Gitter](https://gitter.im/hmt/community) to let us know about questions, problems or ideas!


  ## What's in this document


  - [Installation](#installation)

  - [Getting started with HMT](#getting-started-with-hmt)
    - [Tutorial](#tutorial)
  - [Collect recordings of API traffic](#collect-recordings-of-api-traffic)

  - [Build a HMT spec from recordings](#build-a-hmt-spec-from-recordings)
    - [Building modes](#building-modes)
  - [Mock server traffic using a HMT spec](#mock-server-traffic-using-a-hmt-spec)

  - [Development](#development)
    - [Getting started](#getting-started)
    - [Tests](#tests)
    - [Type-checking](#type-checking)
    - [Automated builds](#automated-builds)
    - [Publishing HMT as a PyPi package](#publishing-hmt-as-a-pypi-package)
  - [Contributing](#contributing)
    - [Code of Conduct](#code-of-conduct)

  ## Installation

  Install via [pip](https://pip.pypa.io/en/stable/installing/) (requires **Python 3.6+**):


  ```bash

  pip install hmt

  ```


  macOS users can install HMT with [Homebrew](https://brew.sh/):


  ```sh

  brew tap meeshkan/tap

  brew install hmt

  ```


  Debian and Ubuntu users can install HMT with `apt`:


  ```sh

  echo "deb [trusted=yes] https://dl.bintray.com/meeshkan/apt all main" | tee -a /etc/apt/sources.list

  apt-get -qq update && apt-get install hmt

  ```



  ## Getting started with HMT


  The basic HMT flow is **collect, build and mock.**

  1. First, **collect** data from recorded server traffic and/or OpenAPI specs.

  1. Then, **build** a schema that unifies these various data sources.

  1. Finally, use this schema to create a **mock** server of an API.


  ### Tutorial


  The quickest way to get an overview of HMT is to complete our interactive tutorial. It walks you through the collect, build, and mock flow - while also covering the concepts necessary for development.


  _Note: This tutorial has been tested on Python 3.6, 3.7, and 3.8._


  After installing HMT, you can begin the tutorial by invoking from the command line:


  ```bash

  $ hmt tutorial

  ```


  Once you've run this, you should see:


  ```bash
      __              __ 
     / /_  ____ ___  / /_
    / __ \/ __ `__ \/ __/
   / / / / / / / / / /_
  /_/ /_/_/ /_/ /_/\__/



  The tutorial!!

  Press ENTER to continue...

  ```


  If not, it's probably our fault. Please let us know by [filing an issue on this repo](https://github.com/meeshkan/hmt/issues).


  ## Collect recordings of API traffic


  Let's look at how to build a HMT spec. First, you have to **collect** recordings of server traffic and/or OpenAPI server specs.


  To record API traffic, the HMT CLI provides a `record` mode that captures API traffic using a proxy.


  ```bash

  $ hmt record

  ```


  This command starts HMT as a reverse proxy on the default port of `8000` and creates two directories: `logs` and `specs`. 


  With [curl](https://curl.haxx.se/), for example, you can use HMT as a proxy like so:


  ```bash

  $ curl http://localhost:8000/http://api.example.com

  ```


  By default, the recording proxy treats the path as the target URL. It then writes a [`.jsonl`](https://jsonlines.org) file containing logs of all server traffic to the `logs` directory.  All logs are created in the [`http-types`](https://github.com/meeshkan/http-types) format. This is because HMT's `build` tool expects all recordings to be represented in a `.jsonl` file containing recordings represented in the `http-types` format.


  For more information about recording, including direct file writing and kafka streaming, see the [recording documentation](./docs/RECORD.md).


  ## Build a HMT spec from recordings


  Using the HMT CLI, you can **build** an OpenAPI schema from a single `.jsonl` file, in addition to any existing OpenAPI specs that describe how your service works.


  ```bash

  $ hmt build --input-file path/to/recordings.jsonl 

  ```


  _Note: The input file should be in [JSON Lines](http://jsonlines.org/) format and every line should be in [http-types](https://hmt.github.io/http-types/) JSON format. For an example input file, see [recordings.jsonl](./resources/recordings.jsonl)._


  Optionally, you can also specify an output directory using the `--out` flag followed by the path to this directory. By default, HMT will build the new OpenAPI specifications in the `specs` directory. 


  Use dash (`--input-file -`) to read from standard input:


  ```bash

  $ hmt build --input-file - < recordings.jsonl

  ```

  ### Building modes

  You can use a mode flag to indicate how the OpenAPI spec should be built, for example:


  ```bash

  hmt build --input-file path/to/recordings.jsonl --mode gen

  ```


  Supported modes are:

  * gen [default] - infer a schema from the recorded data

  * replay - replay the recorded data based on exact matching


  For more information about building, including mixing together the two modes and editing the created OpenAPI schema, see the [building documentation](./docs/BUILD.md).


  ## Mock server traffic using a HMT spec


  You can use an OpenAPI spec, such as the one created with `hmt build`, to create a **mock** server using HMT.


  ```bash

  $ hmt mock path/to/dir/

  ```


  _Note: You can specify a path to the directory your OpenAPI spec is in or a path to one specific file._


  For more information about mocking, including adding custom middleware and modifying the mocking schema JIT via an admin API, see the [mocking documentation](./docs/MOCK.md).


  ## Development


  Here are some useful tips for building and running HMT from source. 


  If you run into any issues, please [reach out to our team on Gitter](https://gitter.im/HMT/community).


  ### Getting started


  1. Clone this repository: `git clone https://github.com/meeshkan/hmt`

  1. Create a virtual environment: `python3 -m venv .venv && source .venv/bin/activate`

  1. Install dependencies: `pip install --upgrade -e '.[dev]'`

  1. Install [`pre-commit`](https://pre-commit.com/) hooks to automatically format code as a git hook: `pre-commit install`


  ### Tests


  Run all checks:


  ```bash

  $ python setup.py test

  ```


  #### `pytest`


  Run [tests/](https://github.com/meeshkan/hmt/tree/master/tests/) with `pytest`:


  ```bash

  pytest

  # or

  python setup.py test

  ```


  Configuration for `pytest` is found in [pytest.ini](https://github.com/meeshkan/hmt/tree/master/pytest.ini).


  #### Formatting


  Formatting is checked by the above mentioned `python setup.py test` command.


  To fix formatting:


  ```sh

  $ python setup.py format

  ```


  #### `flake8`


  Run style checks:


  ```bash

  $ flake8 .

  ```


  #### `pyright`


  You can run type-checking by installing [pyright](https://github.com/microsoft/pyright) globally:


  ```bash

  $ npm -i -g pyright

  ```


  And then running:


  ```bash

  $ pyright --lib

  $ # or

  $ python setup.py typecheck

  ```


  Using the [Pyright extension](https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright) is recommended for development in VS Code.


  ### Automated builds


  Configuration for CircleCI [build pipeline](https://app.circleci.com/github/HMT/hmt/pipelines) can be found in [.circleci/config.yml](https://github.com/meeshkan/hmt/tree/master/.circleci/config.yml).


  ### Publishing HMT as a PyPi package


  To publish HMT as a PyPi package, complete the following steps:


  1. Bump the version in [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py) if the version is the same as in the published [package](https://pypi.org/project/hmt/). Commit and push.

  1. Run `python setup.py test` to check that everything works

  1. To build and upload the package, run `python setup.py upload`. Insert PyPI credentials to upload the package to `PyPI`. The command will also run `git tag` to tag the commit as a release and push the tags to remote.


  > To see what the different commands do, see `Command` classes in [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py).


  ## Contributing


  Thanks for your interest in contributing! Please take a look at our [development guide](#development) for notes on how to develop the package locally.  A great way to start contributing is to [file an issue](https://github.com/meeshkan/hmt/issue) or [make a pull request](https://github.com/meeshkan/hmt/pulls).


  ### Code of Conduct


  Please note that this project is governed by the [HMT Community Code of Conduct](https://github.com/meeshkan/code-of-conduct). By participating, you agree to abide by its terms.
APIDevTools/swagger-cli: >
  Swagger/OpenAPI CLI

  ============================


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-cli.svg)](https://www.npmjs.com/package/@apidevtools/swagger-cli)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-cli.svg)](LICENSE)

  [![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-cli)



  > ⚠️ Swagger CLI has been deprecated, due to the maintenance burnden of trying to keep up with expectations of a huge userbase with little to no pull requests or support. [Redocly CLI](https://redocly.com/redocly-cli/) covers all of the same functionality, and has more advanced linting with custom rules, and we highly recommend using that instead. They have conveniently provided a [migration guide](https://redocly.com/docs/cli/guides/migrate-from-swagger-cli/) for existing Swagger CLI users. Read the review of [Redocly CLI from APIs You Won't Hate](https://apisyouwonthate.com/blog/redocly-cli/).


  Features

  --------------------------

  - Validate Swagger/OpenAPI files in **JSON or YAML** format

  - Supports multi-file API definitions via `$ref` pointers

  - Bundle multiple Swagger/OpenAPI files into one combined file




  Related Projects

  --------------------------

  - [Swagger Parser](https://github.com/APIDevTools/swagger-parser)

  - [Swagger Express Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install -g @apidevtools/swagger-cli

  ```




  Usage

  --------------------------


  ```

  swagger-cli <command> [options] <file>


  Commands:
      validate                Validates an API definition in Swagger 2.0 or OpenAPI 3.0 format

      bundle                  Bundles a multi-file API definition into a single file

  Options:
      -h, --help              Show help for any command
      -v, --version           Output the CLI version number
      -d, --debug [filter]    Show debug output, optionally filtered (e.g. "*", "swagger:*", etc.)
  ```



  ### Validate an API


  The `swagger-cli validate` command will validate your Swagger/OpenAPI definition against the [Swagger 2.0 schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json) or [OpenAPI 3.0 Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json).  It also performs additional validations against the [specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md), which will catch some things that aren't covered by the schema, such as duplicate parameters, invalid MIME types, etc.


  The command will exit with a non-zero code if the API is invalid.


  ```

  swagger-cli validate [options] <file>


  Options:
      --no-schema             Do NOT validate against the Swagger/OpenAPI JSON schema

      --no-spec               Do NOT validate against the Swagger/OpenAPI specification
  ```


  #### Git pre-commit hook


  There is a useful Python tool called [pre-commit](https://pre-commit.com/) that can be used to execute a wide suite of pre-commit checks. The `swagger-cli validate` command can be integrated as part of a git pre-commit hook by adding the following configuration to the `repos` entry of an existing `.pre-commit-config.yaml` file.


  ```

  -   repo: https://github.com/APIDevTools/swagger-cli
      rev: v2.2.1
      hooks:
      - id: swagger-validation
        args: ["validate", "<path to root swagger>"]
  ```


  The intention is to point to single root swagger that references multiple swagger definitions. The above hook will execute the `swagger-cli validation` against the root swagger anytime that a file matching the pattern `.*swagger.*\.(json|yaml|yml)` is modified. Any failures in this validation will prevent the git commit from being processed.


  ### Combine Multiple Files


  The Swagger and OpenAPI specs allows you to split your API definition across multiple files using [`$ref` pointers](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#reference-object) to reference each file. You can use the `swagger-cli bundle` command to combine all of those referenced files into a single file, which is useful for distribution or interoperation with other tools.


  By default, the `swagger-cli bundle` command tries to keep the output file size as small as possible, by only embedding each referenced file _once_.  If the same file is referenced multiple times, then any subsequent references are simply modified to point to the _single_ inlined copy of the file.  If you want to produce a bundled file without _any_ `$ref` pointers, then add the `--dereference` option.  This will result in a larger file size, since multiple references to the same file will result in that file being embedded multiple times.


  If you don't specify the `--outfile` option, then the bundled API will be written to stdout, which means you can pipe it to other commands.


  The result of this method by default is written as JSON. It can be changed to YAML with the `--type` option, by passing the `yaml` value.


  ```

  swagger-cli bundle [options] <file>


  Options:
      -o, --outfile <file>        The output file

      -r, --dereference           Fully dereference all $ref pointers

      -f, --format <spaces>       Formats the output using the given number of spaces
                                  (the default is 2 spaces)

      -t, --type <filetype>       Defines the output file type. The valid values are: json, yaml
                                  (the default is JSON)

      -w, --wrap <column>         Set the line length for YAML strings
                                  (the default is no wrapping)
  ```




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an issue](https://github.com/APIDevTools/swagger-cli/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/swagger-cli/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-cli.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`




  License

  --------------------------

  Swagger CLI is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/APIDevTools/swagger-cli) to thank us for our work. By contributing to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers ❤


  [![Travis CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
APIDevTools/swagger-express-middleware: >
  Swagger Express Middleware

  ============================

  ### Swagger 2.0 middleware and mocks for Express.js


  > :warning: **No longer maintained**

  > This package has been abandoned for some time, and there are plenty of modern alternatives around which support OpenAPI v3.x listed on [OpenAPI.Tools](https://openapi.tools/) which you can use instead.


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-express-middleware.svg)](https://www.npmjs.com/package/@apidevtools/swagger-express-middleware)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-express-middleware.svg)](LICENSE)

  [![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-express-middleware)




  Features

  --------------------------

  - **Supports Swagger 2.0 specs in JSON or YAML** <br>

  Swagger Express Middleware uses [Swagger-Parser](https://github.com/APIDevTools/swagger-parser) to parse, validate, and dereference Swagger files.  You can even split your spec into multiple different files using `$ref` pointers.


  - **Thoroughly tested**<br>

  Over 1,000 unit tests and integration tests with 100% code coverage.  Tested on [**over 1,500 real-world APIs**](https://apis.guru/browse-apis/) from Google, Microsoft, Facebook, Spotify, etc.  All tests are run on Mac, Linux, and Windows using all LTS versions of Node.


  - [**Mock middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/mock.html)<br>

  **Fully-functional mock** implementations for every operation in your API, including data persistence, all with **zero code!**  This is a great way to test-drive your API as you write it, or for quick demos and POCs.  You can even extend the mock middleware with your own logic and data to fill in any gaps.


  - [**Metadata middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/metadata.html)<br>

  Annotates each request with all the relevant information from the Swagger definition.  The path, the operation, the parameters, the security requirements - they're all easily accessible at `req.swagger`.


  - [**Parse Request middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/parseRequest.html)<br>

  Parses incoming requests and converts everything into the correct data types, according to your Swagger API definition.


  - [**Validate Request middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/validateRequest.html)<br>

  Ensures that every request complies with your Swagger API definition, or returns the appropriate HTTP error codes if needed.  Of course, you can catch any validation errors and handle them however you want.


  - [**CORS middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/CORS.html)<br>

  Adds the appropriate CORS headers to each request and automatically responds to CORS preflight requests, all in compliance with your Swagger API definition.


  - [**Files middleware**](https://apitools.dev/swagger-express-middleware/docs/middleware/files.html)<br>

  Serves the Swagger API file(s) in JSON or YAML format so they can be used with front-end tools like [Swagger UI](http://www.swagger.io), [Swagger Editor](http://editor.swagger.io), and [Postman](http://getpostman.com).




  Installation and Use

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/).


  ```bash

  npm install @apidevtools/swagger-express-middleware

  ```

  Then use it in your [Node.js](http://nodejs.org/) script like this:


  ```javascript

  const express = require('express');

  const createMiddleware = require('@apidevtools/swagger-express-middleware');


  let app = express();


  createMiddleware('PetStore.yaml', app, function(err, middleware) {
      // Add all the Swagger Express Middleware, or just the ones you need.
      // NOTE: Some of these accept optional options (omitted here for brevity)
      app.use(
          middleware.metadata(),
          middleware.CORS(),
          middleware.files(),
          middleware.parseRequest(),
          middleware.validateRequest(),
          middleware.mock()
      );

      app.listen(8000, function() {
          console.log('The PetStore sample is now running at http://localhost:8000');
      });
  });

  ```




  Samples & Walkthroughs

  --------------------------

  Swagger Express Middleware comes two samples that use the [Swagger Pet Store API](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/PetStore.yaml).


  #### Sample 1

  This sample demonstrates the most simplistic usage of Swagger Express Middleware. It simply creates a new Express Application and adds all of the Swagger middleware without changing any options, and without adding any custom middleware.


  * [Source Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample1.js)

  * [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/running.html)



  #### Sample 2

  This sample demonstrates a few more advanced features of Swagger Express Middleware, such as setting a few options, initializing the mock data store, and adding custom middleware logic.


  * [Source Code](https://github.com/APIDevTools/swagger-express-middleware/blob/master/samples/sample2.js)

  * [Walkthrough](https://apitools.dev/swagger-express-middleware/docs/walkthroughs/walkthrough2.html)




  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an issue](https://github.com/APIDevTools/swagger-express-middleware/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/swagger-express-middleware/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. **Clone this repo**<br>

  `git clone https://github.com/APIDevTools/swagger-express-middleware.git`


  2. **Install dependencies**<br>

  `npm install`


  3. **Run the tests**<br>

  `npm test`


  4. **Run the sample app**<br>

  `npm start`




  License

  --------------------------

  Swagger Express Middleware is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/APIDevTools/swagger-express-middleware) to thank us for our work. By contributing to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers ❤


  [![Travis CI](https://jstools.dev/img/badges/travis-ci.svg)](https://travis-ci.com)

  [![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)

  [![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)
APIDevTools/swagger-parser: >
  Swagger 2.0 and OpenAPI 3.0 parser/validator

  ============================


  [![Build Status](https://github.com/APIDevTools/swagger-parser/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/swagger-parser/actions)

  [![Coverage Status](https://coveralls.io/repos/github/APIDevTools/swagger-parser/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/swagger-parser)

  [![Tested on APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://apis.guru/browse-apis/)


  [![npm](https://img.shields.io/npm/v/@apidevtools/swagger-parser.svg)](https://www.npmjs.com/package/@apidevtools/swagger-parser)

  [![Dependencies](https://david-dm.org/APIDevTools/swagger-parser.svg)](https://david-dm.org/APIDevTools/swagger-parser)

  [![License](https://img.shields.io/npm/l/@apidevtools/swagger-parser.svg)](LICENSE)

  [![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/swagger-parser)


  [![OS and Browser Compatibility](https://apitools.dev/img/badges/ci-badges-with-ie.svg)](https://github.com/APIDevTools/swagger-parser/actions)


  [![Online Demo](https://apitools.dev/swagger-parser/online/img/demo.svg)](https://apitools.dev/swagger-parser/online/)




  Features

  --------------------------

  - Parses Swagger specs in **JSON** or **YAML** format

  - Validates against the [Swagger 2.0 schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v2.0/schema.json) or [OpenAPI 3.0 Schema](https://github.com/OAI/OpenAPI-Specification/blob/master/schemas/v3.0/schema.json)

  - [Resolves](https://apitools.dev/swagger-parser/docs/swagger-parser.html#resolveapi-options-callback) all `$ref` pointers, including external files and URLs

  - Can [bundle](https://apitools.dev/swagger-parser/docs/swagger-parser.html#bundleapi-options-callback) all your Swagger files into a single file that only has _internal_ `$ref` pointers

  - Can [dereference](https://apitools.dev/swagger-parser/docs/swagger-parser.html#dereferenceapi-options-callback) all `$ref` pointers, giving you a normal JavaScript object that's easy to work with

  - **[Tested](https://github.com/APIDevTools/swagger-parser/actions)** in Node.js and all modern web browsers on Mac, Windows, and Linux

  - Tested on **[over 1,500 real-world APIs](https://apis.guru/browse-apis/)** from Google, Microsoft, Facebook, Spotify, etc.

  - Supports [circular references](https://apitools.dev/swagger-parser/docs/#circular-refs), nested references, back-references, and cross-references

  - Maintains object reference equality &mdash; `$ref` pointers to the same value always resolve to the same object instance




  Related Projects

  --------------------------

  - [Swagger CLI](https://github.com/APIDevTools/swagger-cli)

  - [Swagger Express Middleware](https://github.com/APIDevTools/swagger-express-middleware)




  Example

  --------------------------


  ```javascript

  SwaggerParser.validate(myAPI, (err, api) => {
    if (err) {
      console.error(err);
    }
    else {
      console.log("API name: %s, Version: %s", api.info.title, api.info.version);
    }
  });

  ```


  Or use `async`/`await` or [Promise](http://javascriptplayground.com/blog/2015/02/promises/) syntax instead. The following example is the same as above:


  ```javascript

  try {
    let api = await SwaggerParser.validate(myAPI);
    console.log("API name: %s, Version: %s", api.info.title, api.info.version);
  }

  catch(err) {
    console.error(err);
  }

  ```


  For more detailed examples, please see the [API Documentation](https://apitools.dev/swagger-parser/docs/)




  Installation

  --------------------------

  Install using [npm](https://docs.npmjs.com/about-npm/):


  ```bash

  npm install @apidevtools/swagger-parser

  ```




  Usage

  --------------------------

  When using Swagger Parser in Node.js apps, you'll probably want to use **CommonJS** syntax:


  ```javascript

  const SwaggerParser = require("@apidevtools/swagger-parser");

  ```


  When using a transpiler such as [Babel](https://babeljs.io/) or [TypeScript](https://www.typescriptlang.org/), or a bundler such as [Webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/), you can use **ECMAScript modules** syntax instead:


  ```javascript

  import * as SwaggerParser from '@apidevtools/swagger-parser';

  ```




  Browser support

  --------------------------

  Swagger Parser supports recent versions of every major web browser.  Older browsers may require [Babel](https://babeljs.io/) and/or [polyfills](https://babeljs.io/docs/en/next/babel-polyfill).


  To use Swagger Parser in a browser, you'll need to use a bundling tool such as [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/), [Parcel](https://parceljs.org/), or [Browserify](http://browserify.org/). Some bundlers may require a bit of configuration, such as setting `browser: true` in [rollup-plugin-resolve](https://github.com/rollup/rollup-plugin-node-resolve).




  API Documentation

  --------------------------

  Full API documentation is available [right here](https://apitools.dev/swagger-parser/docs/)



  Security

  --------------------------

  The library, by default, attempts to resolve any files referenced using `$ref`, without considering file extensions or the location of the files. This can result in Local File Inclusion (LFI), thus, potentially sensitive information disclosure. Developers must be cautious when working with documents from untrusted sources. See [here](SECURITY.md) for more details and information on how to mitigate LFI.



  Contributing

  --------------------------

  I welcome any contributions, enhancements, and bug-fixes.  [Open an issue](https://github.com/APIDevTools/swagger-parser/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/swagger-parser/pulls).


  #### Building/Testing

  To build/test the project locally on your computer:


  1. __Clone this repo__<br>

  `git clone https://github.com/APIDevTools/swagger-parser.git`


  2. __Install dependencies__<br>

  `npm install`


  3. __Run the build script__<br>

  `npm run build`


  4. __Run the tests__<br>

  `npm test`


  5. __Check the code coverage__<br>

  `npm run coverage`


  License

  --------------------------

  Swagger Parser is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.


  This package is [Treeware](http://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/APIDevTools/swagger-parser) to thank us for our work. By contributing to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.




  Big Thanks To

  --------------------------

  Thanks to these awesome companies for their support of Open Source developers ❤


  [![GitHub](https://apitools.dev/img/badges/github.svg)](https://github.com/open-source)

  [![NPM](https://apitools.dev/img/badges/npm.svg)](https://www.npmjs.com/)

  [![Coveralls](https://apitools.dev/img/badges/coveralls.svg)](https://coveralls.io)
Apicurio/apicurio-studio: >-
  ![Verify Build
  Workflow](https://github.com/Apicurio/apicurio-studio/workflows/Build%20%26%20Verify/badge.svg)

  [![Join the chat at https://apicurio.zulipchat.com/](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://apicurio.zulipchat.com/)


  ![Apicurio Studio](.assets/apicurio_studio_logo_default.svg)


  # The apicurio-studio project (Open Source API Design Studio)


  ## Summary


  This is the official Git repository for the Apicurio Studio project:  http://www.apicur.io/studio


  The Apicurio Studio project is an API design studio that can be used to create

  new or edit existing API designs (using specifications like OpenAPI or AsyncAPI).


  ## Get the code


  The easiest way to get started with the code is to [create your own fork](http://help.github.com/forking/)

  of this repository, and then clone your fork:

  ```bash
    $ git clone git@github.com:<you>/apicurio-studio.git
    $ cd apicurio-studio
    $ git remote add upstream git://github.com/apicurio/apicurio-studio.git
  ```

  At any time, you can pull changes from the upstream and merge them onto your main:

  ```bash
    $ git checkout main               # switches to the 'main' branch
    $ git pull upstream main          # fetches all 'upstream' changes and merges 'upstream/main' onto your 'main' branch
    $ git push origin                   # pushes all the updates to your fork, which should be in-sync with 'upstream'
  ```

  The general idea is to keep your 'main' branch in-sync with the 'upstream/main'.


  ## Building apicurio-studio


  ### Requirements

  - Node.js and NPM


  ### Building

  Use standard NPM based UI tooling to build the project:


  ```bash

  cd ui

  npm install

  npm run build

  npm run package

  ```


  ## Contribute fixes and features


  Apicurio Studio is open source, and we welcome anybody who wants to participate and contribute!


  If you want to fix a bug or make any changes, please [log an issue in GitHub](https://github.com/apicurio/apicurio-studio/issues) describing the bug or new feature. Then we highly recommend making the changes on a topic branch named with the GitHub issue number. For example, this command creates a branch for an issue with number 1234:


  ```bash
    $ git checkout -b apicurio-studio-1234
  ```


  After you're happy with your changes and a full build (with unit tests) runs successfully, commit your

  changes on your topic branch. Then it's time to check for and pull any recent changes that were made in

  the official repository:


  ```bash
    $ git checkout main               # switches to the 'main' branch
    $ git pull upstream main          # fetches all 'upstream' changes and merges 'upstream/main' onto your 'main' branch
    $ git checkout apicurio-studio-1234   # switches to your topic branch
    $ git rebase main                 # reapplies your changes on top of the latest in main
                                        # (i.e., the latest from main will be the new base for your changes)
  ```


  If the pull grabbed a lot of changes, you should rerun your build to make sure your changes are still good.

  You can then either [create patches](http://progit.org/book/ch5-2.html) (one file per commit, saved in `~/apicurio-studio-1234`) with


  ```bash
    $ git format-patch -M -o ~/apicurio-studio-1234 orgin/main
  ```


  and upload them to the JIRA issue, or you can push your topic branch and its changes into your public fork repository


  ```bash
    $ git push origin apicurio-studio-1234         # pushes your topic branch into your public fork of apicurio-studio
  ```


  and [generate a pull-request](http://help.github.com/pull-requests/) for your changes.


  We prefer pull-requests, because we can review the proposed changes, comment on them,

  discuss them with you, and likely merge the changes right into the official repository.


  Please try to create one commit per feature or fix, generally the easiest way to do this is via [git squash](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits).

  This makes reverting changes easier, and avoids needlessly polluting the repository history with checkpoint commits.


  ## Code Formatting


  When you are hacking on some apicurio-studio code, we'd really appreciate it if you followed the

  apicurio-studio coding standards.  The project uses `eslint` to ensure these standards.  You can

  check your code using:


  ```bash

  cd ui

  npm run lint

  ```
Azure/autorest: >
  # <img align="center" src="./docs/images/logo.png"> AutoRest


  The **AutoRest** tool generates client libraries for accessing RESTful web services. Input to _AutoRest_ is a spec that describes the REST API using the [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) format.


  [Release notes](./docs/releases)


  ## Packages


  | Name                                            | Changelog                       | Latest                                                       | Next                                                              |

  | ----------------------------------------------- | ------------------------------- | ------------------------------------------------------------ | ----------------------------------------------------------------- |

  | Core functionality                              |

  | [autorest][autorest_src]                        | [Changelog][autorest_chg]       | ![](https://img.shields.io/npm/v/autorest)                   | ![](https://img.shields.io/npm/v/autorest/next)                   |

  | [@autorest/core][core_src]                      | [Changelog][core_chg]           | ![](https://img.shields.io/npm/v/@autorest/core)             | ![](https://img.shields.io/npm/v/@autorest/core/next)             |

  | [@autorest/modelerfour][modelerfour_src]        | [Changelog][modelerfour_chg]    | ![](https://img.shields.io/npm/v/@autorest/modelerfour)      | ![](https://img.shields.io/npm/v/@autorest/modelerfour/next)      |

  | Language generators                             |

  | [@autorest/csharp][csharp_src]                  | [Changelog][csharp_chg]         | ![](https://img.shields.io/npm/v/@autorest/csharp)           |                                                                   |

  | [@autorest/go][go_src]                          | [Changelog][go_chg]             | ![](https://img.shields.io/npm/v/@autorest/go)               |                                                                   |

  | [@autorest/java][java_src]                      | [Changelog][java_chg]           | ![](https://img.shields.io/npm/v/@autorest/java)             |                                                                   |

  | [@autorest/powershell][powershell_src]          | [Changelog][powershell_chg]     | ![](https://img.shields.io/npm/v/@autorest/powershell)       |                                                                   |

  | [@autorest/python][python_src]                  | [Changelog][python_chg]         | ![](https://img.shields.io/npm/v/@autorest/python)           |                                                                   |

  | [@autorest/swift][swift_src]                    | [Changelog][swift_chg]          | ![](https://img.shields.io/npm/v/@autorest/swift)            |                                                                   |

  | [@autorest/typescript][typescript_src]          | [Changelog][typescript_chg]     | ![](https://img.shields.io/npm/v/@autorest/typescript)       |                                                                   |

  | Internal packages                               |

  | [@autorest/codemodel][codemodel_src]            | [Changelog][codemodel_chg]      | ![](https://img.shields.io/npm/v/@autorest/codemodel)        | ![](https://img.shields.io/npm/v/@autorest/codemodel/next)        |

  | [@autorest/common][common_src]                  | [Changelog][common_chg]         | ![](https://img.shields.io/npm/v/@autorest/common)           | ![](https://img.shields.io/npm/v/@autorest/common/next)           |

  | [@autorest/configuration][configuration_src]    | [Changelog][configuration_chg]  | ![](https://img.shields.io/npm/v/@autorest/configuration)    | ![](https://img.shields.io/npm/v/@autorest/configuration/next)    |

  | [@autorest/extension-base][extension_base_src]  | [Changelog][extension_base_chg] | ![](https://img.shields.io/npm/v/@autorest/extension-base)   | ![](https://img.shields.io/npm/v/@autorest/extension-base/next)   |

  | [@azure-tools/extension][extension_src]         | [Changelog][extension_chg]      | ![](https://img.shields.io/npm/v/@azure-tools/extension)     | ![](https://img.shields.io/npm/v/@azure-tools/extension/next)     |

  | [@azure-tools/codegen][codegen_src]             | [Changelog][codemodel_chg]      | ![](https://img.shields.io/npm/v/@azure-tools/codegen)       | ![](https://img.shields.io/npm/v/@azure-tools/codegen/next)       |

  | [@azure-tools/openapi][openapi_src]             | [Changelog][openapi_chg]        | ![](https://img.shields.io/npm/v/@azure-tools/openapi)       | ![](https://img.shields.io/npm/v/@azure-tools/openapi/next)       |

  | [@azure-tools/deduplication][deduplication_src] | [Changelog][deduplication_chg]  | ![](https://img.shields.io/npm/v/@azure-tools/deduplication) | ![](https://img.shields.io/npm/v/@azure-tools/deduplication/next) |

  | [@azure-tools/datastore][datastore_src]         | [Changelog][datastore_chg]      | ![](https://img.shields.io/npm/v/@azure-tools/datastore)     | ![](https://img.shields.io/npm/v/@azure-tools/datastore/next)     |

  | [@azure-tools/oai2-to-oai3][oai2-to-oai3_src]   | [Changelog][oai2-to-oai3_chg]   | ![](https://img.shields.io/npm/v/@azure-tools/oai2-to-oai3)  | ![](https://img.shields.io/npm/v/@azure-tools/oai2-to-oai3/next)  |

  | [@azure-tools/jsonschema][jsonschema_src]       | [Changelog][jsonschema_chg]     | ![](https://img.shields.io/npm/v/@azure-tools/jsonschema)    | ![](https://img.shields.io/npm/v/@azure-tools/jsonschema/next)    |


  [autorest_src]: packages/apps/autorest

  [core_src]: packages/extensions/core

  [modelerfour_src]: packages/extensions/modelerfour

  [csharp_src]: https://github.com/Azure/autorest.csharp

  [python_src]: https://github.com/Azure/autorest.python

  [go_src]: https://github.com/Azure/autorest.go

  [java_src]: https://github.com/Azure/autorest.java

  [swift_src]: https://github.com/Azure/autorest.swift

  [typescript_src]: https://github.com/Azure/autorest.typescript

  [powershell_src]: https://github.com/Azure/autorest.powershell

  [codemodel_src]: packages/libs/codemodel

  [common_src]: packages/libs/common

  [configuration_src]: packages/libs/configuration

  [extension_base_src]: packages/libs/extension-base

  [oai2-to-oai3_src]: packages/libs/oai2-to-oai3_src

  [extension_src]: packages/libs/extension

  [codegen_src]: packages/libs/codegen

  [openapi_src]: packages/libs/openapi

  [deduplication_src]: packages/libs/deduplication

  [datastore_src]: packages/libs/datastore

  [jsonschema_src]: packages/libs/oai2-to-oai3

  [autorest_chg]: packages/apps/autorest/CHANGELOG.md

  [core_chg]: packages/extensions/core/CHANGELOG.md

  [modelerfour_chg]: packages/extensions/modelerfour/CHANGELOG.md

  [csharp_chg]: https://github.com/Azure/autorest.csharp

  [python_chg]: https://github.com/Azure/autorest.python/blob/main/packages/autorest.python/ChangeLog.md

  [go_chg]: https://github.com/Azure/autorest.go

  [java_chg]: https://github.com/Azure/autorest.java/releases

  [swift_chg]: https://github.com/Azure/autorest.swift

  [typescript_chg]: https://github.com/Azure/autorest.typescript

  [powershell_chg]: https://github.com/Azure/autorest.powershell/releases

  [codemodel_chg]: packages/libs/codemodel/CHANGELOG.md

  [common_chg]: packages/libs/common/CHANGELOG.md

  [configuration_chg]: packages/libs/configuration/CHANGELOG.md

  [extension_base_chg]: packages/libs/extension-base/CHANGELOG.md

  [extension_chg]: packages/libs/extension/CHANGELOG.md

  [codegen_chg]: packages/libs/codegen/CHANGELOG.md

  [openapi_chg]: packages/libs/openapi/CHANGELOG.md

  [deduplication_chg]: packages/libs/deduplication/CHANGELOG.md

  [datastore_chg]: packages/libs/datastore/CHANGELOG.md

  [oai2-to-oai3_chg]: packages/libs/oai2-to-oai3/CHANGELOG.md

  [jsonschema_chg]: packages/libs/jsonschema/CHANGELOG.md


  ## Support Policy


  AutoRest is an open source tool -- if you need assistance, first check the documentation. If you find a bug or need some help, feel free to submit an [issue](https://github.com/Azure/autorest/issues)


  ## Getting Started using AutoRest ![image](./docs/images/normal.png)


  View our [docs readme][docs_readme] as a starting point to find both general information and language-generator specific information


  ## Contributing


  ### Contributing guide


  Check our [internal developer docs](./docs/developer/readme.md) to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Autorest.


  ### Code of Conduct


  This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.


  <!--LINKS-->


  [docs_readme]: docs/readme.md
CacheControl/hippie-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCA:2AAE2C:510B076:52C5FF5:678EE358 and timestamp 2025-01-20 23:59:20
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
SabzCity/libgo: >
  # libgo   

  [![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/libgo)](https://pkg.go.dev/github.com/GeniusesGroup/libgo)

  [![Go Report](https://goreportcard.com/badge/github.com/GeniusesGroup/libgo)](https://goreportcard.com/report/github.com/GeniusesGroup/libgo)


  An **application** developing **framework** provide ZeroOps(zero operations), edge computing, ... that let you develope both server and client applications in Go without need to think more about any fundamental requirements, Just develope business services and user interfaces (now just graphical interface - gui), build apps as OS images or OS applications and easily just run first server node and let it distributes by many factors with inside logics not need external decision makers (automating software deployment) like Kubernetes(K8s).


  In other word, `libgo` abbreviation of `Go language library` is a repository wrapper to store all implementation of GeniusesGroup and others protocols and algorithms to make a digital software more easily in better performance.

  You can use all packages exported APIs, go generator mechanism or by [library CLI](#CLI) to access some useful APIs from command line easily.


  ## Goals

  - Provide complete framework to develope any purpose distributed application with **low||no code**.

  - No(minimum) dependency on any other repositories.

  - Compile an application as **Unikernel** instead of regular OSs binaries.

  - Develope high available and distributed software without any admin in any infrastructure layers (DevOps culture goal).

  - Let service developers act Lean and Agile in their organization.

  - [Reinvent the wheel](https://en.wikipedia.org/wiki/Reinventing_the_wheel)


  ## Not Goals

  - 


  ## Installation

  - Make project directory and suggest use your internet domain name for it.

  - initialize project version control. If you use git run `git init` or `git clone ${repository path}`.

  - init go project by `git init` and `go mod init`

  - add `libgo` to your project dependency

  - install `libgo` with `lang_eng` or your desire language

  - initialize the project with desire domain e.g. `google.com`

  - build your organization app by `libgo build` or by `go build` with desire tags and target OS and hardwares.

  - run your desire version from /bin/ directory. Strongly suggest run app by systemd on linux or other app manager on other OS.


  or easily run the following command under your project, just replace your domain name.

  ```

  mkdir {domain}

  git init

  go mod init

  go get -u github.com/GeniusesGroup/libgo

  go install github.com/GeniusesGroup/libgo -tags "lang_eng"

  libgo app init -d={domain}

  libgo build

  ```


  ## Commands (CLA)

  libgo has a the command-line client for the some generator APIs implement in [modules](./modules/). It provides simple access to all APIs functions to make an application, a GUI app, ....


  You can get list of all commands and their helps with `libgo help`. We just list some of important commands here that you can run them from within a Go module or any where in your project directory:

  - **Initialize a project:** `libgo app init -d=[internet-domain]`

  - **Add new domain module:** `libgo domain new -n=[domain-name]`


  ## Build tags

  - **dev_mode**: first check and change `AppMode_Dev` const in protocol package to desire behavior

  - **tcp_listener**:


  ### Developing hints

  - Complete manifest in main package of service.

  - Add other data to main package if needed.

  - Implement protocols logic by autogenerate some codes not write them manually.

  - Don't think about network when you develope a business service logic. Use `st protocol.Stream` as stream data not network stream and don't remove it even don't need it from `Process` method arguments.


  ## Protocols

  You can find protocol descriptions in its directory as now [protocol](./protocol/), [society](./society/), [ISO](./iso/)    

  Read more about each protocol or library in its [RFC](https://github.com/GeniusesGroup/RFCs)

  As [suggest here](https://github.com/golang/go/issues/48087) to comply with the standards we add [protocol](./protocol) package and all other libgo packages implement this package. You can implement these protocols in your own way if our packages can't satisfied you or your requirements.   

  A standard is a formalized protocol accepted by most of the parties that implement it. A protocol is not a set of rules. A protocol is the thing those rules describe the rules of. This is why programs implement a protocol and comply with a standard.


  ### Industry Protocols

  - Insurance     >> ACCORD

  - Health Care   >> HL7

  - Retail        >> GS1

  - HR            >> HRXML


  ## GIT

  Git is not the best version control mechanism for a software project, but it is the most use one.


  ### Some useful commands

  - Make project version control by ```git init```

  - Clone exiting repo by ```git clone ${repository path}```.

  - Add libgo to project as submodule by ```git submodule add -b master https://github.com/GeniusesGroup/libgo```

  - Clone existing project with just latest commits not all one ```git clone ${repository path} --recursive --shallow-submodules```

  - Change libgo version by ```git checkout tag/${tag}``` or update by ```git submodule update -f --init --remote --checkout --recursive``` if needed.


  ## Go

  ### Some useful commands

  - go build -race

  - go tool compile -S {{file-name}}.go > {{file-name}}_C.S

  - go tool objdump {{file-name}}.o > {{file-name}}_O.S

  - go build -gcflags=-m {{file-name}}.go

  - go run -gcflags='-m -m' {{file-name}}.go

  - go build -ldflags "-X version=0.1"


  ### build tags

  Some functionality in files that have build tags `//go:build tag_name` or `// +build tag_name` in the first line just build when you provided in build time like `go build -tags "dev_mode tcp_listener"`. Build tag declarations must be at the very top of a .go files. Nothing, not even comments, can be above build tags. We prefer `go:build` over `+build` because as [describe in the proposal](https://go.googlesource.com/proposal/+/master/design/draft-gobuild.md#transition) but below chart is how to declare in `+build` style.


  | Build Tag Syntax	            | Build Tag Sample	                        | Boolean Statement     |

  | :---:                         | :---:                                     | :---:                 |

  | Space-separated elements	    | // +build pro enterprise	                | pro OR enterprise     |

  | Comma-separated elements      | // +build pro,enterprise	                | pro AND enterprise    |

  | New line separated elements   | // +build pro<br />// +build enterprise   | pro AND enterprise    |

  | Exclamation point elements    | // +build !pro	                        | NOT pro               |


  ## Contribute Rules

  - Write benchmarks and tests codes in different files as `{{file-name}}_test.go` and `{{file-name}}_bench_test.go`


  ## Enterprise

  Contact us by [this](mailto:ict@geniuses.group) or [this](mailto:omidhekayati@gmail.com) if you need enterprise support for developing high available and distributed software. See features available in enterprise package:

  - Develope exclusive features in very short time

  - Bug fixing quickly

  - 


  ## Good Idea, Bad implementation!

  - [SQLc](sqlc.dev)

  - [EntGo](https://entgo.io/)

  - [go-zero](https://github.com/zeromicro/go-zero) e.g. (microservice system), (fully compatible with net/http), (middlewares are supported), ...

  or [really relativetime?? Why not monotonic time??](https://github.com/zeromicro/go-zero/blob/master/core/timex/relativetime.go)


  ## Related Projects

  - [Clive is an operating system designed to work in distributed and cloud computing environments.](https://github.com/fjballest/clive)


  ## Abbreviations & Definitions

  - **UI**: (any) User Interface
      - **GUI**: Graphic User Interface
      - **VUI**: Voice User Interface
      - **CLI**: Command Line Interface
      - **CLA**: Command Line Arguments
  - **Modules**: a kind of collection of packages

  - **Packages**: a kind of collection of files

  - **dp**: domain protocol

  - **init**: initialize call just after an object allocate.

  - **reinit**: re-initialize call when allocated object want to reuse immediately or pass to a pool to reuse later. It will prevent memory leak by remove any references in the object.

  - **deinit**: de-initialize call just before an object want to de-allocated (GC).

  - **open**:

  - **reset**:

  - **close**:
Swagger2Markup/swagger2markup: >
  = Swagger2Markup

  :author: Robert Winkler

  :hardbreaks:


  image:https://coveralls.io/repos/Swagger2Markup/swagger2markup/badge.svg["Coverage Status", link="https://coveralls.io/r/Swagger2Markup/swagger2markup"] image:https://api.codacy.com/project/badge/grade/498a6a39d7d84ff687546359f58ee18d["Codacy code quality", link="https://www.codacy.com/app/robwin/swagger2markup"] image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup/_latestVersion"] image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2", link="http://www.apache.org/licenses/LICENSE-2.0.txt"] image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter", link="https://twitter.com/rbrtwnklr"] image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/RobWin/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]



  == Overview



  NOTE: Dear community,

  unfortunately I can't maintain Swagger2Markup alone anymore. There are many interesting new topics:

  1) Swagger v3 support

  2) Fixing bugs

  2) Merge Swagger2Markup repositories and create a new multi-module repository.

  Any help is welcome.

  Kind regards,

  Robert



  The primary goal of this project is to *simplify the generation of an up-to-date RESTful API documentation by combining documentation that's been hand-written with auto-generated API documentation* produced by https://github.com/swagger-api[Swagger]. The result is intended to be an *up-to-date, easy-to-read, on- and offline user guide*, comparable to https://developer.github.com/v3/[GitHub's API documentation]. The output of Swagger2Markup can be used as an alternative to https://github.com/swagger-api/swagger-ui[swagger-ui] and can be served as static content.

  NOTE: The Swagger Specification has been donated to to the https://openapis.org/[Open API Initiative (OAI)] and has been renamed to the https://github.com/OAI/OpenAPI-Specification[OpenAPI Specification].


  Swagger2Markup converts a Swagger JSON or YAML file into several *AsciiDoc* or *GitHub Flavored Markdown* documents which can be combined with hand-written documentation. The Swagger source file can be located locally or remotely via HTTP. Swagger2Markup supports the Swagger 1.2 and 2.0 specification. Internally it uses the _official_ https://github.com/swagger-api/swagger-parser[swagger-parser] and my https://github.com/RobWin/markup-document-builder[markup-document-builder].


  You can use Swagger2Markup to convert your contract-first Swagger YAML file into a human-readable format and combine it with hand-written documentation. As an alternative, you can choose the code-first approach and use Swagger2Markup together with https://github.com/swagger-api/swagger-core/wiki/Swagger-Core-JAX-RS-Project-Setup-1.5.X[Swagger JAX-RS], https://github.com/springfox/springfox[springfox] or https://github.com/spring-projects/spring-restdocs[spring-restdocs]. If you are Gradle or Maven user, you can also use the https://github.com/RobWin/swagger2markup-gradle-plugin[Swagger2Markup Gradle Plugin] or https://github.com/redowl/swagger2markup-maven-plugin[Swagger2markup Maven Plugin].


  http://asciidoctor.org/docs/asciidoc-writers-guide/[AsciiDoc] is preferable to Markdown as it has more features. AsciiDoc is a text document format for writing documentation, articles, books, ebooks, slideshows, web pages and blogs. AsciiDoc files can be converted to *HTML*, *PDF* and *EPUB*. AsciiDoc is much better suited for describing public APIs than *JavaDoc* or *Annotations*.


  You can generate your HTML5, PDF and EPUB documentation via https://github.com/asciidoctor/asciidoctorj[asciidoctorj] or even better via the https://github.com/asciidoctor/asciidoctor-gradle-plugin[asciidoctor-gradle-plugin] or https://github.com/asciidoctor/asciidoctor-maven-plugin[asciidoctor-maven-plugin].


  The project requires at least JDK 8.


  == Example


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup.PNG[]


  image::swagger2markup-documentation/src/docs/asciidoc/images/Swagger2Markup_definitions.PNG[]


  == Reference documentation

  - http://swagger2markup.github.io/swagger2markup/1.3.3/[Reference Documentation]

  - https://github.com/Swagger2Markup/swagger2markup/blob/master/RELEASENOTES.adoc[Release notes]

  - https://github.com/Swagger2Markup/spring-swagger2markup-demo[Demo using Swagger2Markup, Spring Boot, Springfox and spring-restdocs]


  == Contributing


  === Community contributions


  Pull requests are welcome.


  === Questions

  You can ask questions about Swagger2Markup in https://gitter.im/Swagger2Markup/swagger2markup[Gitter].


  === Bugs

  If you believe you have found a bug, please take a moment to search the existing issues. If no one else has reported the problem, please open a new issue that describes the problem in detail and, ideally, includes a test that reproduces it.


  === Enhancements

  If you’d like an enhancement to be made to Swagger2Markup, pull requests are most welcome. The source code is on GitHub. You may want to search the existing issues and pull requests to see if the enhancement is already being worked on. You may also want to open a new issue to discuss a possible enhancement before work on it begins.


  == Companies who use Swagger2Markup


  * Deutsche Telekom AG

  * https://restlet.com/[Restlet] -- Restlet offers an API platform, covering the https://restlet.com/products/restlet-studio/[design], https://restlet.com/products/dhc/[test] and https://restlet.com/products/apispark/[operation] of Web APIs, and uses Swagger2Markup to generate appealing HTML documentation from API definitions.

  * http://www.qaware.de/[QAware GmbH]

  * http://www.appdirect.com/[AppDirect] -- The leading commerce platform for selling cloud services.

  * http://www.wescale.com[wescale]

  * http://taskassure.com[TaskAssure] 

  * https://www.isaac.nl[ISAAC]

  * https://www.spreadshirt.de[Spreadshirt]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
Swagger2Markup/swagger2markup-gradle-plugin: >
  = Swagger2Markup Gradle Plugin

  :author: Robert Winkler

  :hardbreaks:


  image:https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin.svg?branch=master["Build Status", link="https://travis-ci.org/Swagger2Markup/swagger2markup-gradle-plugin"] image:https://coveralls.io/repos/Swagger2Markup/swagger2markup-gradle-plugin/badge.svg["Coverage Status", link="https://coveralls.io/r/Swagger2Markup/swagger2markup-gradle-plugin"] image:https://api.bintray.com/packages/swagger2markup/Maven/swagger2markup-gradle-plugin/images/download.svg[link="https://bintray.com/swagger2markup/Maven/swagger2markup-gradle-plugin/_latestVersion"] image:http://img.shields.io/badge/license-ASF2-blue.svg["Apache License 2", link="http://www.apache.org/licenses/LICENSE-2.0.txt"] image:https://img.shields.io/badge/Twitter-rbrtwnklr-blue.svg["Twitter", link="https://twitter.com/rbrtwnklr"] image:https://badges.gitter.im/Join%20Chat.svg[link="https://gitter.im/Swagger2Markup/swagger2markup?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"]


  == Reference documentation


  The documentation can be found at https://github.com/Swagger2Markup/swagger2markup#reference-documentation[Reference documentation]


  == License


  Copyright 2015 Robert Winkler


  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
aress31/swurg: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC0:1F5FC7:5516A8F:56D26C5:678EE37E
  and timestamp 2025-01-20 23:59:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
frankiesardo/route-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCE:2B946D:536D1DE:552937A:678EE39B and timestamp 2025-01-21 00:00:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
gedaiu/swaggerize: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD7:201941:57C18DC:597DB7D:678EE39C and timestamp 2025-01-21 00:00:28
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
grpc-ecosystem/grpc-gateway: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D0A9F3:D71C82:678EE39F and timestamp 2025-01-21 00:00:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
microsoft/OpenAPI.NET: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD6:1EDF9F:25015AE:25BA8DF:678EE3AB and timestamp 2025-01-21 00:00:43
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
microsoft/OpenAPI.NET.OData: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:511C405:52D7990:678EE3AB and timestamp 2025-01-21 00:00:44
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
rswag/rswag: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC7:1EDF9F:2502206:25BB57D:678EE3AE
  and timestamp 2025-01-21 00:00:46
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
LucyBot-Inc/api-spec-converter: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:510BD92:52C6D6B:678EE35D and timestamp 2025-01-20 23:59:25
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
flasgger/flasgger: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD7:201941:57BFDD9:597BFEF:678EE395 and timestamp 2025-01-21 00:00:21
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
inaka/cowboy_swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD4:2B946D:536EC48:552AEA5:678EE3A2 and timestamp 2025-01-21 00:00:34
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
kogosoftwarellc/open-api: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CE1:2B946D:536FC13:552BE89:678EE3A6 and timestamp 2025-01-21 00:00:38
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
krakenjs/hapi-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD2:4925F:44AE1ED:46251A1:678EE3A9 and timestamp 2025-01-21 00:00:41
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mitraman/rapido-web: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD3:1EDF9F:2503A2D:25BCE11:678EE3B5 and timestamp 2025-01-21 00:00:53
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
pyopenapi/pyswagger: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDD:B00D1:522E28A:53EAF05:678EE3C3 and timestamp 2025-01-21 00:01:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
trailsjs/sails-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCC:2AAE2C:5128E75:52E47C1:678EE3E3 and timestamp 2025-01-21 00:01:39
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
zalando-stups/play-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:25111B8:25CA982:678EE3F0 and timestamp 2025-01-21 00:01:52
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
zalando-stups/swagger1st: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC0:1F5FC7:5530FBC:56ED3FE:678EE3F1 and timestamp 2025-01-21 00:01:53
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tfranzel/drf-spectacular: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC2:1EDF9F:250DB9A:25C7270:678EE3DF and timestamp 2025-01-21 00:01:35
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
madkote/fastapi-plugins: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:511D985:52D8F66:678EE3B1 and timestamp 2025-01-21 00:00:49
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
RuntimeTools/OpenAPIValidators: >
  # OpenAPI Validators


  [![Build Status](https://travis-ci.com/openapi-library/OpenAPIValidators.svg?branch=master)](https://travis-ci.com/openapi-library/OpenAPIValidators)

  ![dependencies](https://img.shields.io/david/openapi-library/OpenAPIValidators)

  ![style](https://img.shields.io/badge/code%20style-airbnb-ff5a5f.svg)

  [![codecov](https://codecov.io/gh/openapi-library/OpenAPIValidators/branch/master/graph/badge.svg)](https://codecov.io/gh/openapi-library/OpenAPIValidators)

  [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/openapi-library/OpenAPIValidators/blob/master/CONTRIBUTING.md)


  Use Jest or Chai to assert that HTTP responses satisfy an OpenAPI spec.


  ## Problem 😕


  If your server's behaviour doesn't match your API documentation, then you need to correct your server, your documentation, or both. The sooner you know the better.


  ## Solution 😄


  These test plugins let you automatically test whether your server's behaviour and documentation match. They extend Jest and Chai to support the [OpenAPI standard](https://swagger.io/docs/specification/about/) for documenting REST APIs. In your JavaScript tests, you can simply assert `expect(responseObject).toSatisfyApiSpec()`


  ### [jest-openapi](https://github.com/openapi-library/OpenAPIValidators/tree/master/packages/jest-openapi#readme)


  [![downloads](https://img.shields.io/npm/dm/jest-openapi)](https://www.npmjs.com/package/jest-openapi)

  [![npm](https://img.shields.io/npm/v/jest-openapi.svg)](https://www.npmjs.com/package/jest-openapi)


  ### [Chai OpenAPI Response Validator](https://github.com/openapi-library/OpenAPIValidators/tree/master/packages/chai-openapi-response-validator#readme)


  [![downloads](https://img.shields.io/npm/dm/chai-openapi-response-validator)](https://www.npmjs.com/package/chai-openapi-response-validator)

  [![npm](https://img.shields.io/npm/v/chai-openapi-response-validator.svg)](https://www.npmjs.com/package/chai-openapi-response-validator)


  ## Contributors ✨


  <!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->

  <!-- prettier-ignore-start -->

  <!-- markdownlint-disable -->

  <table>
    <tr>
      <td align="center"><a href="https://github.com/rwalle61"><img src="https://avatars1.githubusercontent.com/u/18170169?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Richard Waller</b></sub></a><br /><a href="#maintenance-rwalle61" title="Maintenance">🚧</a> <a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=rwalle61" title="Code">💻</a> <a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=rwalle61" title="Documentation">📖</a> <a href="https://github.com/openapi-library/OpenAPIValidators/pulls?q=is%3Apr+reviewed-by%3Arwalle61" title="Reviewed Pull Requests">👀</a></td>
      <td align="center"><a href="https://github.com/JonnySpruce"><img src="https://avatars3.githubusercontent.com/u/30812276?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Jonny Spruce</b></sub></a><br /><a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=JonnySpruce" title="Code">💻</a> <a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=JonnySpruce" title="Documentation">📖</a> <a href="https://github.com/openapi-library/OpenAPIValidators/pulls?q=is%3Apr+reviewed-by%3AJonnySpruce" title="Reviewed Pull Requests">👀</a></td>
      <td align="center"><a href="https://github.com/AlexDobeck"><img src="https://avatars2.githubusercontent.com/u/10519388?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Alex Dobeck</b></sub></a><br /><a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=AlexDobeck" title="Code">💻</a> <a href="https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3AAlexDobeck" title="Bug reports">🐛</a></td>
      <td align="center"><a href="https://github.com/BenGu3"><img src="https://avatars2.githubusercontent.com/u/7105857?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Ben Guthrie</b></sub></a><br /><a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=BenGu3" title="Code">💻</a> <a href="https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3ABenGu3" title="Bug reports">🐛</a></td>
      <td align="center"><a href="https://martijnvegter.com/"><img src="https://avatars3.githubusercontent.com/u/25134477?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Martijn Vegter</b></sub></a><br /><a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=mvegter" title="Code">💻</a></td>
      <td align="center"><a href="https://github.com/ludeknovy"><img src="https://avatars1.githubusercontent.com/u/13610612?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Ludek</b></sub></a><br /><a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=ludeknovy" title="Code">💻</a> <a href="https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3Aludeknovy" title="Bug reports">🐛</a></td>
      <td align="center"><a href="https://github.com/tgiardina"><img src="https://avatars1.githubusercontent.com/u/37459104?v=4?s=100" width="100px;" alt=""/><br /><sub><b>Tommy Giardina</b></sub></a><br /><a href="https://github.com/openapi-library/OpenAPIValidators/commits?author=tgiardina" title="Code">💻</a> <a href="https://github.com/openapi-library/OpenAPIValidators/issues?q=author%3Atgiardina" title="Bug reports">🐛</a></td>
    </tr>
  </table>


  <!-- markdownlint-restore -->

  <!-- prettier-ignore-end -->


  <!-- ALL-CONTRIBUTORS-LIST:END -->
meeshkan/hmt: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CCB:201941:57C6749:5982B74:678EE3B3
  and timestamp 2025-01-21 00:00:51
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
theoomoregbee/sails-hook-swagger-generator: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CD5:124B:D18E2D:D80524:678EE3E0 and timestamp 2025-01-21 00:01:36
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ccouzens/keycloak-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:5112A85:52CDD35:678EE382 and timestamp 2025-01-21 00:00:02
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
muonsoft/openapi-mock: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCD:2AAE2C:511F41E:52DAA8B:678EE3B9 and timestamp 2025-01-21 00:00:57
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mockoon/mockoon: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC3:4925F:44B1168:462820A:678EE3B7 and timestamp 2025-01-21 00:00:55
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
canvural/php-openapi-faker: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D03780:D6A86C:678EE381 and timestamp 2025-01-21 00:00:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
jimschubert/intellij-openapi-generator: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CD6:1EDF9F:24FF7F8:25B8A97:678EE3A2 and timestamp 2025-01-21 00:00:34
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
rithvikvibhu/GHLocalApi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:2507F48:25C1477:678EE3C7 and timestamp 2025-01-21 00:01:11
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
abersheeran/index.py: >
  # Kuí


  [![Codecov](https://img.shields.io/codecov/c/github/abersheeran/kui?style=flat-square)](https://codecov.io/gh/abersheeran/kui)

  [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/kui?label=Support%20Python%20Version&style=flat-square)](https://pypi.org/project/kui/)


  An easy-to-use web framework. Based on [baize](https://baize.aber.sh) and [pydantic](https://docs.pydantic.dev/).


  ## Install


  ```

  pip install kui

  ```
stoplightio/studio: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCC:2AAE2C:5126651:52E1EAE:678EE3D7 and timestamp 2025-01-21 00:01:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
hummingbird-me/api-docs: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD2:4925F:44ACA4C:4623977:678EE3A1 and timestamp 2025-01-21 00:00:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
unchase/Unchase.OpenAPI.Connectedservice: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CDE:2D0327:52BAAD7:5476940:678EE3E4 and timestamp 2025-01-21 00:01:40
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
OpenAPITools/openapi-diff: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD6:1EDF9F:24F3351:25AC18C:678EE365 and timestamp 2025-01-20 23:59:33
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
danielgtaylor/restish: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCD:2AAE2C:5114DEA:52D016F:678EE38B and timestamp 2025-01-21 00:00:11
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
schemathesis/schemathesis: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D13E8F:D7B3D8:678EE3C9 and timestamp 2025-01-21 00:01:13
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
BRIKEV/express-jsdoc-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC4:2AAE2C:510AB55:52C5ABA:678EE356 and timestamp 2025-01-20 23:59:18
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
domaindrivendev/Swashbuckle.WebApi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC7:1EDF9F:24FB920:25B4A8F:678EE390 and timestamp 2025-01-21 00:00:16
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
contiamo/restful-react: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57BD18C:5979320:678EE38A and timestamp 2025-01-21 00:00:10
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cellular/oazapfts: >
  # 🍻 oazapfts!


  [![CI](https://github.com/oazapfts/oazapfts/actions/workflows/ci.yml/badge.svg)](https://github.com/oazapfts/oazapfts/actions/workflows/ci.yml)

  [![semantic-release: angular](https://img.shields.io/badge/semantic--release-angular-e10079?logo=semantic-release)](https://github.com/semantic-release/semantic-release)


  Generate TypeScript clients to tap into OpenAPI servers.


  ![](https://avatars.githubusercontent.com/u/119607625?s=200&v=4)


  ## Features


  - **AST-based**:
    Unlike other code generators `oazapfts` does not use templates to generate code but uses TypeScript's built-in API to generate and pretty-print an abstract syntax tree.
  - **Fast**: The CLI does not use any of the common Java-based tooling, so the code generation is super fast.

  - **Single file**: All functions and types are co-located in one single self-contained file.

  - **Tree-shakeable**: Individually exported functions allow you to bundle only the ones you actually use.

  - **Human friendly signatures**: The generated API methods don't leak any HTTP-specific implementation details. For example, all optional parameters are grouped together in one object, no matter whether they end up in the headers, path or query-string.


  ## Installation


  ```

  npm install oazapfts

  ```


  > **Note**

  > With version 3.0.0 oazapfts has become a runtime dependency and the generated code does no longer include all the fetch logic.


  ## Usage


  ```

  oazapfts <spec> [filename]


  Options:

  --exclude, -e tag to exclude

  --include, -i tag to include

  --optimistic

  --useEnumType

  ```


  Where `<spec>` is the URL or local path of an OpenAPI or Swagger spec (in either json or yml) and `<filename>` is the location of the `.ts` file to be generated. If the filename is omitted, the code is written to stdout.


  ### Options


  - `--optimistic` generare a client in [optimistic mode](#optimistic-mode)


  - `--useEnumType` generate enums instead of union types


  ## Consuming the generated API


  For each operation defined in the spec the generated API will export a function with a name matching the `operationId`. If no ID is specified, a reasonable name is generated from the HTTP verb and the path.


  ```ts

  import * as api from "./my-generated-api.ts";

  const res = api.getPetById(1);

  ```


  > **Note**

  > If your API is large, and you want to take advantage of tree-shaking to exclude unused code, use individual named imports instead:


  ```ts

  import { getPetById } from "./my-generated-api.ts";

  ```


  ## Fetch options


  The **last argument** of each function is an optional [`RequestOpts`](https://github.com/oazapfts/oazapfts/blob/27b296c6fc28fec4869f1b7e1a4a5585ebbd5ee9/src/runtime/index.ts#L5) object that can be used to pass options to the `fetch` call, for example to pass additional `headers` or an `AbortSignal` to cancel the request later on.


  ```ts

  const res = getPetById(1, {
    credentials: "include",
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  ```


  You can also use this to override the default `baseUrl` or to provide a custom `fetch` implementation.


  > **Note**

  > Instead of passing custom options to each function call, consider [overwriting the global defaults](#overriding-the-defaults).


  ## Optimistic vs. explicit responses


  Oazapfts supports two different modes to handle results,

  an [explicit](#explicit-mode) mode (the default) and an [optimistic](#optimistic-mode) mode, that makes the response handling less verbose.


  ## Explicit mode


  By default, each function returns an `ApiResponse` object that exposes the `status` code, response `headers` and the `data`.


  > **Note**

  > This mode is best suited for APIs that return different types for different response codes or APIs where you need to access not only the response body, but also the response headers. If your API is simple, and you don't need this flexibility, consider using the [optimistic mode](#optimistic-mode) instead.


  In explicit mode, each function returns a Promise for an `ApiResponse` which is an object with a `status` and a `data` property, holding the HTTP status code and the properly typed data from the response body.


  Since an operation can return different types depending on the status code, the actual return type is a _union_ of all possible responses, discriminated by their status.


  Consider the following code generated from the `petstore.json` example:


  ```ts

  /**
   * Find pet by ID
   */
  export function getPetById(petId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<
      | {
          status: 200;
          data: Pet;
        }
      | {
          status: 400;
          data: string;
        }
      | {
          status: 404;
        }
    >(`/pet/${encodeURIComponent(petId)}`, {
      ...opts,
    });
  }

  ```


  In this case, the `data` property is typed as `Pet|string`. We can use a type guard to narrow down the type to `Pet`:


  ```ts

  const res = await api.getPetById(1);

  if (res.status === 200) {
    const pet = res.data;
    // pet is properly typed as Pet
  }

  if (res.status === 404) {
    const message = res.data;
    // message is a string
  } else {
    // handle the error
  }

  ```


  The above code can be simplified by using the `handle` helper:


  ```ts

  import { handle } from "oazapfts";


  await handle(api.getPetById(1), {
    200(pet) {
      // pet is properly typed as Pet
    },
    404(message) {
      // message is as string
    },
  });

  ```


  The helper will throw an `HttpError` error for any unhandled status code, unless you add a `default` handler:


  ```ts

  await handle(api.getPetById(1), {
    200(pet) {
      // ...
    },
    default(status, data) {
      // handle error
    },
  });

  ```


  ## Optimistic mode


  You can opt into the _optimistic mode_ by using the `--optimistic` command line argument.


  In this mode, each function will return a Promise for the happy path, i.e. the type specified for the first `2xx` response.


  Looking back at our Pet Store example from above, consuming the response is now much easier and less verbose:


  ```ts

  const pet = await api.getPetById(1);

  // pet is now typed as Pet!

  ```


  In case of a response other than `200` the promise will be rejected with a `HttpError`.


  ## Mixing both modes


  Sometimes you might want to use the optimistic mode for some of your API calls, but need the full `ApiResponse` for others.


  In that case, you can use the `ok`-helper function to selectively apply optimistic response handling:


  ```ts

  import { ok } from "oazapfts";


  const pet = await ok(api.getPetById(1));

  ```


  ## Overriding the defaults


  The generated file exports a `defaults` constant that can be used to override the `basePath`, provide a custom `fetch` implementation or to send additional `headers` with each request. Basically, you can set a default for any [fetch option](https://developer.mozilla.org/en-US/docs/Web/API/fetch#options) you want.


  ```ts

  import * as api from "./api.ts";

  import nodeFetch from "node-fetch";


  // Override the spec's basePath

  api.defaults.basePath = "https://example.com/api";


  // Send this header with each request

  api.defaults.headers = {
    access_token: "secret",
  };


  // Include credentials in CORS requests, too

  api.defaults.credentials = "include";


  // Use this instead of the global fetch

  api.defaults.fetch = nodeFetch;

  ```


  ## Alternatives and integrations


  If this library doesn't fit your needs, take a look at [openapi-typescript-codegen](https://github.com/ferdikoomen/openapi-typescript-codegen) which follows a similar philosophy but creates many individual files instead of one single self-contained file.


  If your frontend uses React, take a look at [react-api-query](https://www.npmjs.com/package/react-api-query) which makes it easy to use an oazapfts client with React hooks in a convenient and type-safe way.


  ## About the name


  The name comes from a combination of syllables **oa** (OpenAPI) and **ts** (TypeScript) and is [pronounced 🗣](https://www.youtube.com/watch?v=chvb-K95rBE) like the Bavarian _O'zapt'is!_ (it's tapped), the famous words that mark the beginning of the Oktoberfest.


  # License


  MIT
openapi-library/OpenAPIValidators: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC6:201941:57C90F7:59855E5:678EE3BF and timestamp 2025-01-21 00:01:03
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
google/gnostic: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CE1:2B946D:536DF34:552A11B:678EE39F
  and timestamp 2025-01-21 00:00:31
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
tyrchen/quenya: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CDB:124B:D19A47:D8117F:678EE3E4 and
  timestamp 2025-01-21 00:01:40
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cyprieng/swagger-parser: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC0:1F5FC7:5519B95:56D592C:678EE38A and timestamp 2025-01-21 00:00:10
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fralken/sbt-swagger-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCD:2AAE2C:5118669:52D3ACC:678EE39B and timestamp 2025-01-21 00:00:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
cdwv/oas3-api-snippet-enricher: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC1:4925F:44A63AF:461D101:678EE385 and timestamp 2025-01-21 00:00:05
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
unrelentingtech/octohipster: >
  Current [semantic](http://semver.org/) version:


  ```clojure

  [octohipster "0.2.1-SNAPSHOT"]

  ```


  # octohipster [![Build Status](https://travis-ci.org/myfreeweb/octohipster.png?branch=master)](https://travis-ci.org/myfreeweb/octohipster) [![unlicense](https://img.shields.io/badge/un-license-green.svg?style=flat)](http://unlicense.org)


  Octohipster is


  - a REST library/toolkit/microframework for Clojure

  - that allows you to build HTTP APIs

  - in a declarative [Webmachine](https://github.com/basho/webmachine/wiki/Overview)-like style, using [Liberator](https://github.com/clojure-liberator/liberator)

  - powered by [Ring](https://github.com/ring-clojure/ring); you can add [rate limiting](https://github.com/myfreeweb/ring-ratelimit), [authentication](https://github.com/cemerick/friend), [metrics](http://metrics-clojure.readthedocs.org/en/latest/ring.html), [URL rewriting](https://github.com/ebaxt/ring-rewrite) and more with just middleware


  It allows you to make APIs that


  - support hypermedia ([HAL+JSON](http://stateless.co/hal_specification.html), [Collection+JSON](http://amundsen.com/media-types/collection/) and Link/Link-Template HTTP headers; works with [Frenetic](http://dlindahl.github.com/frenetic/))

  - support multiple output formats (JSON, EDN, YAML and any custom format)

  - have [Swagger](https://github.com/wordnik/swagger-core/wiki) documentation 

  - use [JSON Schema](http://json-schema.org) for validation *and* documentation

  - have pagination


  ## Concepts


  - a **resource** is a single endpoint that accepts requests and returns responses

  - a **group** is a collection of resources with a single URL prefix (eg. a group /things contains resources /things/ and /things/{id}) and zero or more shared properties (usually the schema)

  - a **documenter** is a function that returns a resource which documents regular resources (Swagger, HAL root, etc)

  - a **mixin** is a function that is applied to multiple resources to give them shared behavior (eg. collection or entry behavior)

  - a **response handler** is a function that is used to encode response data to a particular content-type (JSON, EDN, YAML, etc.)

  - a **params handler** is a function that is used to decode incoming data from a particular content-type (JSON, EDN, YAML, etc.)


  ## Usage


  ```clojure

  (ns example
    (:use [octohipster core routes mixins pagination]
          [octohipster.documenters swagger schema]
          org.httpkit.server)
    (:import org.bson.types.ObjectId)
    (:require [monger.core :as mg]
              [monger.query :as mq]
              [monger.collection :as mc]
              monger.json))

  (mg/connect!)

  (mg/set-db! (mg/get-db "octohipster-example"))


  ;;;; The "model"

  ;;;;  tip: make it a separate namespace, eg. app.models.contact

  (def contact-schema
    {:id "Contact"
     :type "object"
     :properties {:name {:type "string"}
                  :phone {:type "integer"}}
     :required [:name]})

  (defn contacts-count [] (mc/count "contacts"))

  (defn contacts-all []
    (mq/with-collection "contacts"
      (mq/find {})
      (mq/skip *skip*)
      (mq/limit *limit*)))
  (defn contacts-find-by-id [x] (mc/find-map-by-id "contacts" (ObjectId. x)))

  (defn contacts-insert! [x]
    (let [id (ObjectId.)]
      (mc/insert "contacts" (assoc x :_id id))
      (mc/find-map-by-id "contacts" id)))
  (defn contacts-update! [x old] (mc/update "contacts" old x :multi false))

  (defn contacts-delete! [x] (mc/remove "contacts" x))


  ;;;; The resources

  ;; with shared pieces of documentation

  (def name-param
    {:name "name", :dataType "string", :paramType "path", :required "true", :description "The name of the contact", :allowMultiple false})

  (def body-param
    {:dataType "Contact", :paramType "body", :required true, :allowMultiple false})

  (defresource contact-collection
    :desc "Operations with multiple contacts"
    :mixins [collection-resource]
    :clinks {:item ::contact-item}
    :data-key :contacts
    :exists? (fn [ctx] {:contacts (contacts-all)})
    :post! (fn [ctx] {:item (-> ctx :request :non-query-params contacts-insert!)})
    :count (fn [req] (contacts-count))
    :doc {:get {:nickname "getContacts", :summary "Get all contacts"}
          :post {:nickname "createContact", :summary "Create a contact"}})

  (defresource contact-item
    :desc "Operations with individual contacts"
    :url "/{_id}"
    :mixins [item-resource]
    :clinks {:collection ::contact-collection}
    :data-key :contact
    :exists? (fn [ctx]
               (if-let [doc (-> ctx :request :route-params :_id contacts-find-by-id)]
                 {:contact doc}))
    :put! (fn [ctx]
            (-> ctx :request :non-query-params (contacts-update! (:contact ctx)))
            {:contact (-> ctx :request :route-params :_id contacts-find-by-id)})
    :delete! (fn [ctx]
               (-> ctx :contact contacts-delete!)
               {:contact nil})
    :doc {:get {:nickname "getContact", :summary "Get a contact", :parameters [name-param]}
          :put {:nickname "updateContact", :summary "Overwrite a contact", :parameters [name-param body-param]}
          :delete {:nickname "deleteContact", :summary "Delete a contact", :parameters [name-param]}})

  ;;;; The group

  (defgroup contact-group
    :url "/contacts"
    :add-to-resources {:schema contact-schema}  ; instead of typing the same for all resources in the group
    :resources [contact-collection contact-item])

  ;;;; The handler

  (defroutes site
    :groups [contact-group]
    :documenters [schema-doc schema-root-doc swagger-doc swagger-root-doc])

  (defn -main [] (run-server site {:port 8080}))

  ```


  Also, [API Documentation](http://myfreeweb.github.com/octohipster) is available.


  ## Contributing


  By participating in this project you agree to follow the [Contributor Code of Conduct](http://contributor-covenant.org/version/1/1/0/).


  Please take over the whole project!  

  I don't use Clojure a lot nowadays.  

  Talk to me: <greg@unrelenting.technology>.


  ## License


  This is free and unencumbered software released into the public domain.  

  For more information, please refer to the `UNLICENSE` file or [unlicense.org](http://unlicense.org).
dgarcia360/openapi-boilerplate: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD7:201941:57BE2F0:597A4A7:678EE38E and timestamp 2025-01-21 00:00:14
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
mockoon/cli: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC2:1EDF9F:2503D68:25BD14B:678EE3B6
  and timestamp 2025-01-21 00:00:54
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
RonnyPfannschmidt/prance: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCE:2B946D:5363149:551EF65:678EE36C and timestamp 2025-01-20 23:59:40
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ethereum/eth2.0-APIs: >
  # Ethereum Beacon APIs


  ![CI](https://github.com/ethereum/beacon-APIs/workflows/CI/badge.svg)


  Collection of RESTful APIs provided by Ethereum Beacon nodes


  API browser: [https://ethereum.github.io/beacon-APIs/](https://ethereum.github.io/beacon-APIs/)


  ## Outline


  This document outlines an application programming interface (API) which is exposed by a beacon node implementation
   which aims to facilitate [Phase 0](https://github.com/ethereum/consensus-specs#phase-0) of the Ethereum consensus layer.

  The API is a REST interface, accessed via HTTP. The API should not, unless protected by additional security layers, be exposed to the public Internet as the API includes multiple endpoints which could open your node to denial-of-service (DoS) attacks through endpoints triggering heavy processing.
   Currently, the only supported return data type is JSON.

  The beacon node (BN) maintains the state of the beacon chain by communicating with other beacon nodes in the Ethereum network.

  Conceptually, it does not maintain keypairs that participate with the beacon chain.


  The validator client (VC) is a conceptually separate entity which utilizes private keys 

  to perform validator related tasks, called "duties", on the beacon chain.
   These duties include the production of beacon blocks and signing of attestations.

  The goal of this specification is to promote interoperability between various beacon node implementations.


  ## Render 

  To render spec in browser you will need any http server to load `index.html` file

  in root of the repo.


  ##### Python

  ```

  python -m http.server 8080

  ```

  And api spec will render on [http://localhost:8080](http://localhost:8080).


  ##### NodeJs

  ```

  npm install simplehttpserver -g


  # OR


  yarn global add simplehttpserver


  simplehttpserver

  ```

  And api spec will render on [http://localhost:8000](http://localhost:8000).


  ### Usage


  Local changes will be observable if "dev" is selected in the "Select a definition" drop-down in the web UI.


  Users may need to tick the "Disable Cache" box in their browser's developer tools to see changes after modifying the source. 


  ## Contributing

  Api spec is checked for lint errors before merge. 


  To run lint locally, install linter with

  ```

  npm install -g @redocly/cli


  # OR


  yarn global add @redocly/cli

  ```

  and run lint with

  ```

  redocly lint beacon-node-oapi.yaml 

  ```


  ## Implementations


  - [TypeScript Wrapper](https://www.npmjs.com/package/@chainsafe/eth2.0-api-wrapper)


  https://www.npmjs.com/package/@chainsafe/eth2.0-api-wrapper

  ## Releasing


  1. Create and push tag

     - Make sure info.version in beacon-node-oapi.yaml file is updated before tagging.
     - CD will create github release and upload bundled spec file

  2. Add release entrypoint in index.html


  In SwaggerUIBundle configuration (inside index.html file), add another entry in "urls" field (SwaggerUI will load first item as default).

  Entry should be in following format(replace `<tag>` with real tag name from step 1.):

  ```javascript
           {url: "./releases/<tag>/beacon-node-oapi.json", name: "<tag>"},
  ```
getsling/flask-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDB:124B:D0A30B:D71580:678EE39D and timestamp 2025-01-21 00:00:29
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
stoplightio/elements: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD2:4925F:44B77E6:462EA9A:678EE3D5 and timestamp 2025-01-21 00:01:25
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Himenon/openapi-typescript-code-generator: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CD9:124B:CFCF74:D63D08:678EE35B and timestamp 2025-01-20 23:59:23
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
subeeshcbabu-zz/swagmock: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDD:B00D1:5232B2A:53EF8DC:678EE3D7 and timestamp 2025-01-21 00:01:27
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
AndrewWalsh/at-your-service: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCE:2B946D:5380BA4:553D333:678EE3F2 and timestamp 2025-01-21 00:01:54
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Fatal1ty/openapify: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCF:2AAE2C:512C233:52E7C60:678EE3F2 and timestamp 2025-01-21 00:01:54
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
OAI/Documentation: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDB:124B:D1CA8D:D842BC:678EE3F3 and timestamp 2025-01-21 00:01:55
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Redocly/openapi-sampler: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC9:201941:57D451A:5990D7C:678EE3F3 and timestamp 2025-01-21 00:01:55
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Redocly/openapi-starter: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC5:2B946D:538126F:553DA1D:678EE3F4 and timestamp 2025-01-21 00:01:56
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Redocly/redocly-cli: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD2:4925F:44BD8E5:4634DAE:678EE3F5 and timestamp 2025-01-21 00:01:57
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
Teyras/payload-oapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCA:2AAE2C:512CA8B:52E850B:678EE3F5 and timestamp 2025-01-21 00:01:57
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apiaddicts/apigen.springboot: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:2512408:25CBC33:678EE3F6 and timestamp 2025-01-21 00:01:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apiaddicts/dosonarapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDC:4925F:44BDDF1:46352DB:678EE3F6 and timestamp 2025-01-21 00:01:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apiaddicts/openapi2postman: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDD:B00D1:52391C0:53F61AB:678EE3F7 and timestamp 2025-01-21 00:01:59
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apiaddicts/openapi2soapui: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC8:1EDF9F:25127C2:25CBFFF:678EE3F7 and timestamp 2025-01-21 00:01:59
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
apiaddicts/sonar-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC7:1EDF9F:25128AB:25CC101:678EE3F8 and timestamp 2025-01-21 00:02:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
commonism/aiopenapi3: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD7:201941:57D5432:5991D15:678EE3F8 and timestamp 2025-01-21 00:02:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
drwpow/openapi-typescript: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D1DEFD:D857A9:678EE3F9 and timestamp 2025-01-21 00:02:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
microcks/microcks: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC4:2AAE2C:512DDD1:52E98B2:678EE3FB and timestamp 2025-01-21 00:02:03
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
opticdev/optic: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC8:1EDF9F:2513B16:25CD3E2:678EE3FD
  and timestamp 2025-01-21 00:02:05
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
rapi-doc/RapiDoc: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCB:201941:57CAA8E:5987011:678EE3C6 and timestamp 2025-01-21 00:01:10
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
stoplightio/spectral-owasp-ruleset: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD9:124B:D1F323:D86C42:678EE3FF and timestamp 2025-01-21 00:02:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
sv-tools/openapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CE3:2AAE2C:512EDA0:52EA8D2:678EE400 and timestamp 2025-01-21 00:02:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
swagger-api/apidom: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC9:201941:57D7057:59939BF:678EE400 and timestamp 2025-01-21 00:02:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
up9inc/oas-diff: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD2:4925F:44BFD79:463733C:678EE400 and timestamp 2025-01-21 00:02:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
xiaoymin/knife4j: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC4:2AAE2C:512F172:52EACC0:678EE401 and timestamp 2025-01-21 00:02:09
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
GeniusesGroup/libgo: >
  # Memar - Golang version   

  [![GoDoc](https://pkg.go.dev/badge/github.com/GeniusesGroup/memar-go)](https://pkg.go.dev/github.com/GeniusesGroup/memar-go)

  [![Go Report](https://goreportcard.com/badge/github.com/GeniusesGroup/memar-go)](https://goreportcard.com/report/github.com/GeniusesGroup/memar-go)


  `Memar` as a `Go language library` is a repository wrapper to store all implementation of [Memar](https://github.com/GeniusesGroup/memar) and others protocols and algorithms to make a digital software more easily in better performance.

  You can use all packages exported APIs, go generator mechanism or by [library commands](#commands-cla) to access some useful APIs from command line easily.


  If you want to get insight about memar, You MUST start reading interfaces in [protocol package](./protocol/).


  ## Installation

  - Make project directory and suggest use your internet domain name for it.

  - initialize project version control. If you use git run `git init` or `git clone ${repository path}`.

  - init go project by `go mod init`

  - add `memar` to your project dependency

  - install `memar` with `lang_eng` or your desire language

  - initialize the project with desire domain e.g. `google.com`

  - Complete manifest in main package.

  - Add other data to main package if needed.

  - Implement protocols logic by autogenerate some codes not write them manually.

  - build your organization app with desire tags and target OS and hardwares.

  - run your desire version from /bin/ directory. Strongly suggest run app by systemd on linux or other app manager on other OS.


  or easily run the following command under your project, just replace your domain name.

  ```

  mkdir {domain}

  git init

  go mod init

  go get -u github.com/GeniusesGroup/memar-go

  go install github.com/GeniusesGroup/memar-go -tags "lang_eng"

  memar app init -d={domain}

  memar app build

  ```


  ## Commands (CLA)

  memar has a the command-line client for the some generator APIs implement in [modules](./modules/). It provides simple access to all APIs functions to make an application, a GUI app, ....


  You can get list of all commands and their helps with `memar help`. We just list some of important commands here that you can run them from within a Go module or any where in your project directory:

  - **Initialize a project:** `memar app init -idn=[internet-domain-name]`

  - **Add new domain module:** `memar mod new -dn=[domain-name]`

  - **Build the apps(os images):** `memar app build`

  - **Run the app(os image):** `memar app run`


  ## Build tags

  - **dev_mode**: first check and change `AppMode_Dev` const in protocol package to desire behavior

  - **tcp_listener**:


  ## Code style

  [Read more here](./BEST-PRACTICE.md)


  ## Contribution Guide

  - [Referencing issues](https://go.dev/doc/contribute#ref_issues)
abersheeran/kui: >
  # Kuí


  [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/kui?label=Support%20Python%20Version&style=flat-square)](https://pypi.org/project/kui/)


  An easy-to-use web framework. Based on [baize](https://baize.aber.sh) and [pydantic](https://docs.pydantic.dev/).


  ## Install


  ```

  pip install kui

  ```
danielpops/pyramid_swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDD:B00D1:5221B60:53DE441:678EE38B and timestamp 2025-01-21 00:00:11
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
data-fair/data-fair: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD0:1F5FC7:551A1A3:56D5F43:678EE38C and timestamp 2025-01-21 00:00:12
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
data-fair/openapi-viewer: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D066F7:D6D879:678EE38C and timestamp 2025-01-21 00:00:12
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
ethereum/beacon-APIs: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD6:1EDF9F:24FC816:25B59AF:678EE395 and timestamp 2025-01-21 00:00:21
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
hapi-swagger/hapi-swagger: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCA:2AAE2C:5119878:52D4D2C:678EE3A0 and timestamp 2025-01-21 00:00:32
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
oas-tools/oas-generator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD7:201941:57C4F8E:598133C:678EE3AC and timestamp 2025-01-21 00:00:44
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
oas-tools/oas-tools: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC6:201941:57C5143:59814F0:678EE3AD and timestamp 2025-01-21 00:00:45
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
phpowermove/swagger: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCF:2AAE2C:511CC4A:52D8203:678EE3AE and timestamp 2025-01-21 00:00:46
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
freenet-public/got-swag: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD0:1F5FC7:55227FE:56DE7CE:678EE3AE and timestamp 2025-01-21 00:00:47
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
freenet-public/pokemock: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD3:1EDF9F:2502590:25BB919:678EE3AF and timestamp 2025-01-21 00:00:47
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
oazapfts/oazapfts: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD1:124B:D11817:D78CD2:678EE3BE and timestamp 2025-01-21 00:01:02
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
python-openapi/openapi-core: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDE:2D0327:52B2FDB:546EC05:678EE3C3 and timestamp 2025-01-21 00:01:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
python-openapi/openapi-spec-validator: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CCA:2AAE2C:5121BBC:52DD2DB:678EE3C4 and timestamp 2025-01-21 00:01:08
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
spec-first/connexion: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD7:201941:57CD7E2:5989E4A:678EE3D2 and timestamp 2025-01-21 00:01:23
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
valpackett/octohipster: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D1A27A:D819E6:678EE3E6 and timestamp 2025-01-21 00:01:42
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
AndrewWalsh/openapi-devtools: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD7:201941:57D41A8:59909FB:678EE3F2 and timestamp 2025-01-21 00:01:54
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
OAI/learn.openapis.org: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC3:4925F:44BD441:46348ED:678EE3F3 and timestamp 2025-01-21 00:01:55
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
a-chacon/oas_rails: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CD4:2B946D:538187D:553E041:678EE3F6 and timestamp 2025-01-21 00:01:58
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
bump-sh-examples/train-travel-api: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCB:201941:57D5314:5991BDE:678EE3F8 and timestamp 2025-01-21 00:02:00
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
danielgtaylor/huma: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCD:2AAE2C:512D54A:52E9016:678EE3F8 and timestamp 2025-01-21 00:02:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
daveshanley/vacuum: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDB:124B:D1DDC1:D85676:678EE3F9 and timestamp 2025-01-21 00:02:01
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
fastapi/fastapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CC9:201941:57D5A8E:5992379:678EE3FA and timestamp 2025-01-21 00:02:02
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
jcrist/msgspec: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CDA:1EDF9F:2513194:25CCA41:678EE3FA
  and timestamp 2025-01-21 00:02:02
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
juhaku/utoipa: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CD2:4925F:44BEA9B:4635FC1:678EE3FA
  and timestamp 2025-01-21 00:02:03
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
microsoft/kiota: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CDF:2AAE2C:512DEF1:52E99EC:678EE3FB and timestamp 2025-01-21 00:02:03
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
microsoft/typespec: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCC:2AAE2C:512E01A:52E9AFC:678EE3FB and timestamp 2025-01-21 00:02:03
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
oapi-codegen/oapi-codegen: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CC6:201941:57D6162:5992A82:678EE3FC and timestamp 2025-01-21 00:02:04
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
openapi-generators/openapi-python-client: "{\"message\":\"API rate limit
  exceeded for 52.160.165.138. (But here's the good news: Authenticated requests
  get a higher rate limit. Check out the documentation for more details.) If you
  reach out to GitHub Support for help, please include the request ID
  7CE1:2B946D:5382D85:553F5DF:678EE3FC and timestamp 2025-01-21 00:02:04
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
openapi-json-schema-tools/openapi-json-schema-generator: "{\"message\":\"API
  rate limit exceeded for 52.160.165.138. (But here's the good news:
  Authenticated requests get a higher rate limit. Check out the documentation
  for more details.) If you reach out to GitHub Support for help, please include
  the request ID 7CC0:1F5FC7:553377F:56EFCB0:678EE3FC and timestamp 2025-01-21
  00:02:04
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
openapi-ts/openapi-typescript: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD5:124B:D1EB25:D86411:678EE3FD and timestamp 2025-01-21 00:02:05
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
pb33f/libopenapi: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCE:2B946D:53832D5:553FB2B:678EE3FE and timestamp 2025-01-21 00:02:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
pb33f/libopenapi-validator: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCB:201941:57D68B3:59931F9:678EE3FE and timestamp 2025-01-21 00:02:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
python-openapi/openapi-schema-validator: "{\"message\":\"API rate limit exceeded
  for 52.160.165.138. (But here's the good news: Authenticated requests get a
  higher rate limit. Check out the documentation for more details.) If you reach
  out to GitHub Support for help, please include the request ID
  7CCF:2AAE2C:512E8EF:52EA3F6:678EE3FE and timestamp 2025-01-21 00:02:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
rookie-luochao/openapi-ui: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CCD:2AAE2C:512E9DE:52EA4E2:678EE3FE and timestamp 2025-01-21 00:02:06
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
scalar/scalar: "{\"message\":\"API rate limit exceeded for 52.160.165.138. (But
  here's the good news: Authenticated requests get a higher rate limit. Check
  out the documentation for more details.) If you reach out to GitHub Support
  for help, please include the request ID 7CC3:4925F:44BF7C0:4636D42:678EE3FF
  and timestamp 2025-01-21 00:02:07
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
zaghaghi/openapi-tui: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CDA:1EDF9F:251495F:25CE28F:678EE401 and timestamp 2025-01-21 00:02:09
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
GeniusesGroup/memar-go: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD7:201941:57B439D:59701AA:678EE35B and timestamp 2025-01-20 23:59:23
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
hey-api/openapi-ts: "{\"message\":\"API rate limit exceeded for 52.160.165.138.
  (But here's the good news: Authenticated requests get a higher rate limit.
  Check out the documentation for more details.) If you reach out to GitHub
  Support for help, please include the request ID
  7CCB:201941:57C2661:597E94D:678EE3A0 and timestamp 2025-01-21 00:00:32
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
enzonotario/vitepress-openapi: "{\"message\":\"API rate limit exceeded for
  52.160.165.138. (But here's the good news: Authenticated requests get a higher
  rate limit. Check out the documentation for more details.) If you reach out to
  GitHub Support for help, please include the request ID
  7CD1:124B:D07E9B:D6F065:678EE393 and timestamp 2025-01-21 00:00:19
  UTC.\",\"documentation_url\":\"https://docs.github.com/rest/overview/rate-lim\
  its-for-the-rest-api\",\"status\":\"403\"}"
